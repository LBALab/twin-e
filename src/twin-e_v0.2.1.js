
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = 'twin-e_v0.2.1.data';
    var REMOTE_PACKAGE_BASE = 'twin-e_v0.2.1.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
    var REMOTE_PACKAGE_SIZE = 1003511;
    var PACKAGE_UUID = '8a3465db-b19b-459d-a253-61ad3abf9f51';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 14271, 0, 0).open('GET', '/actor.c');
    new DataRequest(14271, 23055, 0, 0).open('GET', '/actor.h');
    new DataRequest(23055, 35663, 0, 0).open('GET', '/actor.o');
    new DataRequest(35663, 71197, 0, 0).open('GET', '/animations.c');
    new DataRequest(71197, 75803, 0, 0).open('GET', '/animations.h');
    new DataRequest(75803, 99215, 0, 0).open('GET', '/animations.o');
    new DataRequest(99215, 120037, 0, 0).open('GET', '/collision.c');
    new DataRequest(120037, 123317, 0, 0).open('GET', '/collision.h');
    new DataRequest(123317, 138941, 0, 0).open('GET', '/collision.o');
    new DataRequest(138941, 154924, 0, 0).open('GET', '/debug.c');
    new DataRequest(154924, 158299, 0, 0).open('GET', '/debug.grid.c');
    new DataRequest(158299, 159615, 0, 0).open('GET', '/debug.grid.h');
    new DataRequest(159615, 164183, 0, 0).open('GET', '/debug.grid.o');
    new DataRequest(164183, 165368, 0, 0).open('GET', '/debug.h');
    new DataRequest(165368, 165860, 0, 0).open('GET', '/debug.o');
    new DataRequest(165860, 173248, 0, 0).open('GET', '/debug.scene.c');
    new DataRequest(173248, 174381, 0, 0).open('GET', '/debug.scene.h');
    new DataRequest(174381, 181389, 0, 0).open('GET', '/debug.scene.o');
    new DataRequest(181389, 204801, 0, 0).open('GET', '/extra.c');
    new DataRequest(204801, 207554, 0, 0).open('GET', '/extra.h');
    new DataRequest(207554, 226034, 0, 0).open('GET', '/extra.o');
    new DataRequest(226034, 229265, 0, 0).open('GET', '/fcaseopen.c');
    new DataRequest(229265, 230675, 0, 0).open('GET', '/fcaseopen.h');
    new DataRequest(230675, 233599, 0, 0).open('GET', '/fcaseopen.o');
    new DataRequest(233599, 236725, 0, 0).open('GET', '/filereader.c');
    new DataRequest(236725, 239166, 0, 0).open('GET', '/filereader.h');
    new DataRequest(239166, 241762, 0, 0).open('GET', '/filereader.o');
    new DataRequest(241762, 252988, 0, 0).open('GET', '/flamovies.c');
    new DataRequest(252988, 255134, 0, 0).open('GET', '/flamovies.h');
    new DataRequest(255134, 262078, 0, 0).open('GET', '/flamovies.o');
    new DataRequest(262078, 275375, 0, 0).open('GET', '/gamestate.c');
    new DataRequest(275375, 278592, 0, 0).open('GET', '/gamestate.h');
    new DataRequest(278592, 291996, 0, 0).open('GET', '/gamestate.o');
    new DataRequest(291996, 315435, 0, 0).open('GET', '/grid.c');
    new DataRequest(315435, 319715, 0, 0).open('GET', '/grid.h');
    new DataRequest(319715, 336887, 0, 0).open('GET', '/grid.o');
    new DataRequest(336887, 338262, 0, 0).open('GET', '/holomap.c');
    new DataRequest(338262, 339551, 0, 0).open('GET', '/holomap.h');
    new DataRequest(339551, 341031, 0, 0).open('GET', '/holomap.o');
    new DataRequest(341031, 350370, 0, 0).open('GET', '/hqrdepack.c');
    new DataRequest(350370, 352428, 0, 0).open('GET', '/hqrdepack.h');
    new DataRequest(352428, 358796, 0, 0).open('GET', '/hqrdepack.o');
    new DataRequest(358796, 367865, 0, 0).open('GET', '/interface.c');
    new DataRequest(367865, 371133, 0, 0).open('GET', '/interface.h');
    new DataRequest(371133, 376857, 0, 0).open('GET', '/interface.o');
    new DataRequest(376857, 378789, 0, 0).open('GET', '/keyboard.c');
    new DataRequest(378789, 380278, 0, 0).open('GET', '/keyboard.h');
    new DataRequest(380278, 381046, 0, 0).open('GET', '/keyboard.o');
    new DataRequest(381046, 394881, 0, 0).open('GET', '/lbaengine.c');
    new DataRequest(394881, 396694, 0, 0).open('GET', '/lbaengine.h');
    new DataRequest(396694, 409882, 0, 0).open('GET', '/lbaengine.o');
    new DataRequest(409882, 422981, 0, 0).open('GET', '/main.c');
    new DataRequest(422981, 427342, 0, 0).open('GET', '/main.h');
    new DataRequest(427342, 440586, 0, 0).open('GET', '/main.o');
    new DataRequest(440586, 441461, 0, 0).open('GET', '/Makefile');
    new DataRequest(441461, 442416, 0, 0).open('GET', '/Makefile.emscripten');
    new DataRequest(442416, 443311, 0, 0).open('GET', '/Makefile.MacOSX');
    new DataRequest(443311, 444279, 0, 0).open('GET', '/Makefile.mingw');
    new DataRequest(444279, 444379, 0, 0).open('GET', '/makeInstall.sh');
    new DataRequest(444379, 444508, 0, 0).open('GET', '/makeinstall_emscripten.cmd');
    new DataRequest(444508, 444623, 0, 0).open('GET', '/makeinstall_mingw32.cmd');
    new DataRequest(444623, 476902, 0, 0).open('GET', '/menu.c');
    new DataRequest(476902, 479708, 0, 0).open('GET', '/menu.h');
    new DataRequest(479708, 499808, 0, 0).open('GET', '/menu.o');
    new DataRequest(499808, 506882, 0, 0).open('GET', '/menuoptions.c');
    new DataRequest(506882, 508149, 0, 0).open('GET', '/menuoptions.h');
    new DataRequest(508149, 516165, 0, 0).open('GET', '/menuoptions.o');
    new DataRequest(516165, 530052, 0, 0).open('GET', '/movements.c');
    new DataRequest(530052, 534250, 0, 0).open('GET', '/movements.h');
    new DataRequest(534250, 545634, 0, 0).open('GET', '/movements.o');
    new DataRequest(545634, 551363, 0, 0).open('GET', '/music.c');
    new DataRequest(551363, 553350, 0, 0).open('GET', '/music.h');
    new DataRequest(553350, 557246, 0, 0).open('GET', '/music.o');
    new DataRequest(557246, 583570, 0, 0).open('GET', '/redraw.c');
    new DataRequest(583570, 586788, 0, 0).open('GET', '/redraw.h');
    new DataRequest(586788, 606888, 0, 0).open('GET', '/redraw.o');
    new DataRequest(606888, 656424, 0, 0).open('GET', '/renderer.c');
    new DataRequest(656424, 659004, 0, 0).open('GET', '/renderer.h');
    new DataRequest(659004, 693328, 0, 0).open('GET', '/renderer.o');
    new DataRequest(693328, 697187, 0, 0).open('GET', '/resources.c');
    new DataRequest(697187, 700902, 0, 0).open('GET', '/resources.h');
    new DataRequest(700902, 707522, 0, 0).open('GET', '/resources.o');
    new DataRequest(707522, 723936, 0, 0).open('GET', '/scene.c');
    new DataRequest(723936, 728154, 0, 0).open('GET', '/scene.h');
    new DataRequest(728154, 743442, 0, 0).open('GET', '/scene.o');
    new DataRequest(743442, 751389, 0, 0).open('GET', '/screens.c');
    new DataRequest(751389, 755980, 0, 0).open('GET', '/screens.h');
    new DataRequest(755980, 762636, 0, 0).open('GET', '/screens.o');
    new DataRequest(762636, 803100, 0, 0).open('GET', '/script.life.c');
    new DataRequest(803100, 804309, 0, 0).open('GET', '/script.life.h');
    new DataRequest(804309, 839509, 0, 0).open('GET', '/script.life.o');
    new DataRequest(839509, 855000, 0, 0).open('GET', '/script.move.c');
    new DataRequest(855000, 856162, 0, 0).open('GET', '/script.move.h');
    new DataRequest(856162, 871102, 0, 0).open('GET', '/script.move.o');
    new DataRequest(871102, 885205, 0, 0).open('GET', '/sdlengine.c');
    new DataRequest(885205, 888278, 0, 0).open('GET', '/sdlengine.h');
    new DataRequest(888278, 896682, 0, 0).open('GET', '/sdlengine.o');
    new DataRequest(896682, 907039, 0, 0).open('GET', '/shadeangletab.h');
    new DataRequest(907039, 914525, 0, 0).open('GET', '/sound.c');
    new DataRequest(914525, 917641, 0, 0).open('GET', '/sound.h');
    new DataRequest(917641, 925677, 0, 0).open('GET', '/sound.o');
    new DataRequest(925677, 928570, 0, 0).open('GET', '/sys.c');
    new DataRequest(928570, 930050, 0, 0).open('GET', '/sys.h');
    new DataRequest(930050, 930542, 0, 0).open('GET', '/sys.o');
    new DataRequest(930542, 952401, 0, 0).open('GET', '/text.c');
    new DataRequest(952401, 957222, 0, 0).open('GET', '/text.h');
    new DataRequest(957222, 972786, 0, 0).open('GET', '/text.o');
    new DataRequest(972786, 992592, 0, 0).open('GET', '/xmidi.c');
    new DataRequest(992592, 994107, 0, 0).open('GET', '/xmidi.h');
    new DataRequest(994107, 1003511, 0, 0).open('GET', '/xmidi.o');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/actor.c"].onload();
          DataRequest.prototype.requests["/actor.h"].onload();
          DataRequest.prototype.requests["/actor.o"].onload();
          DataRequest.prototype.requests["/animations.c"].onload();
          DataRequest.prototype.requests["/animations.h"].onload();
          DataRequest.prototype.requests["/animations.o"].onload();
          DataRequest.prototype.requests["/collision.c"].onload();
          DataRequest.prototype.requests["/collision.h"].onload();
          DataRequest.prototype.requests["/collision.o"].onload();
          DataRequest.prototype.requests["/debug.c"].onload();
          DataRequest.prototype.requests["/debug.grid.c"].onload();
          DataRequest.prototype.requests["/debug.grid.h"].onload();
          DataRequest.prototype.requests["/debug.grid.o"].onload();
          DataRequest.prototype.requests["/debug.h"].onload();
          DataRequest.prototype.requests["/debug.o"].onload();
          DataRequest.prototype.requests["/debug.scene.c"].onload();
          DataRequest.prototype.requests["/debug.scene.h"].onload();
          DataRequest.prototype.requests["/debug.scene.o"].onload();
          DataRequest.prototype.requests["/extra.c"].onload();
          DataRequest.prototype.requests["/extra.h"].onload();
          DataRequest.prototype.requests["/extra.o"].onload();
          DataRequest.prototype.requests["/fcaseopen.c"].onload();
          DataRequest.prototype.requests["/fcaseopen.h"].onload();
          DataRequest.prototype.requests["/fcaseopen.o"].onload();
          DataRequest.prototype.requests["/filereader.c"].onload();
          DataRequest.prototype.requests["/filereader.h"].onload();
          DataRequest.prototype.requests["/filereader.o"].onload();
          DataRequest.prototype.requests["/flamovies.c"].onload();
          DataRequest.prototype.requests["/flamovies.h"].onload();
          DataRequest.prototype.requests["/flamovies.o"].onload();
          DataRequest.prototype.requests["/gamestate.c"].onload();
          DataRequest.prototype.requests["/gamestate.h"].onload();
          DataRequest.prototype.requests["/gamestate.o"].onload();
          DataRequest.prototype.requests["/grid.c"].onload();
          DataRequest.prototype.requests["/grid.h"].onload();
          DataRequest.prototype.requests["/grid.o"].onload();
          DataRequest.prototype.requests["/holomap.c"].onload();
          DataRequest.prototype.requests["/holomap.h"].onload();
          DataRequest.prototype.requests["/holomap.o"].onload();
          DataRequest.prototype.requests["/hqrdepack.c"].onload();
          DataRequest.prototype.requests["/hqrdepack.h"].onload();
          DataRequest.prototype.requests["/hqrdepack.o"].onload();
          DataRequest.prototype.requests["/interface.c"].onload();
          DataRequest.prototype.requests["/interface.h"].onload();
          DataRequest.prototype.requests["/interface.o"].onload();
          DataRequest.prototype.requests["/keyboard.c"].onload();
          DataRequest.prototype.requests["/keyboard.h"].onload();
          DataRequest.prototype.requests["/keyboard.o"].onload();
          DataRequest.prototype.requests["/lbaengine.c"].onload();
          DataRequest.prototype.requests["/lbaengine.h"].onload();
          DataRequest.prototype.requests["/lbaengine.o"].onload();
          DataRequest.prototype.requests["/main.c"].onload();
          DataRequest.prototype.requests["/main.h"].onload();
          DataRequest.prototype.requests["/main.o"].onload();
          DataRequest.prototype.requests["/Makefile"].onload();
          DataRequest.prototype.requests["/Makefile.emscripten"].onload();
          DataRequest.prototype.requests["/Makefile.MacOSX"].onload();
          DataRequest.prototype.requests["/Makefile.mingw"].onload();
          DataRequest.prototype.requests["/makeInstall.sh"].onload();
          DataRequest.prototype.requests["/makeinstall_emscripten.cmd"].onload();
          DataRequest.prototype.requests["/makeinstall_mingw32.cmd"].onload();
          DataRequest.prototype.requests["/menu.c"].onload();
          DataRequest.prototype.requests["/menu.h"].onload();
          DataRequest.prototype.requests["/menu.o"].onload();
          DataRequest.prototype.requests["/menuoptions.c"].onload();
          DataRequest.prototype.requests["/menuoptions.h"].onload();
          DataRequest.prototype.requests["/menuoptions.o"].onload();
          DataRequest.prototype.requests["/movements.c"].onload();
          DataRequest.prototype.requests["/movements.h"].onload();
          DataRequest.prototype.requests["/movements.o"].onload();
          DataRequest.prototype.requests["/music.c"].onload();
          DataRequest.prototype.requests["/music.h"].onload();
          DataRequest.prototype.requests["/music.o"].onload();
          DataRequest.prototype.requests["/redraw.c"].onload();
          DataRequest.prototype.requests["/redraw.h"].onload();
          DataRequest.prototype.requests["/redraw.o"].onload();
          DataRequest.prototype.requests["/renderer.c"].onload();
          DataRequest.prototype.requests["/renderer.h"].onload();
          DataRequest.prototype.requests["/renderer.o"].onload();
          DataRequest.prototype.requests["/resources.c"].onload();
          DataRequest.prototype.requests["/resources.h"].onload();
          DataRequest.prototype.requests["/resources.o"].onload();
          DataRequest.prototype.requests["/scene.c"].onload();
          DataRequest.prototype.requests["/scene.h"].onload();
          DataRequest.prototype.requests["/scene.o"].onload();
          DataRequest.prototype.requests["/screens.c"].onload();
          DataRequest.prototype.requests["/screens.h"].onload();
          DataRequest.prototype.requests["/screens.o"].onload();
          DataRequest.prototype.requests["/script.life.c"].onload();
          DataRequest.prototype.requests["/script.life.h"].onload();
          DataRequest.prototype.requests["/script.life.o"].onload();
          DataRequest.prototype.requests["/script.move.c"].onload();
          DataRequest.prototype.requests["/script.move.h"].onload();
          DataRequest.prototype.requests["/script.move.o"].onload();
          DataRequest.prototype.requests["/sdlengine.c"].onload();
          DataRequest.prototype.requests["/sdlengine.h"].onload();
          DataRequest.prototype.requests["/sdlengine.o"].onload();
          DataRequest.prototype.requests["/shadeangletab.h"].onload();
          DataRequest.prototype.requests["/sound.c"].onload();
          DataRequest.prototype.requests["/sound.h"].onload();
          DataRequest.prototype.requests["/sound.o"].onload();
          DataRequest.prototype.requests["/sys.c"].onload();
          DataRequest.prototype.requests["/sys.h"].onload();
          DataRequest.prototype.requests["/sys.o"].onload();
          DataRequest.prototype.requests["/text.c"].onload();
          DataRequest.prototype.requests["/text.h"].onload();
          DataRequest.prototype.requests["/text.o"].onload();
          DataRequest.prototype.requests["/xmidi.c"].onload();
          DataRequest.prototype.requests["/xmidi.h"].onload();
          DataRequest.prototype.requests["/xmidi.o"].onload();
          Module['removeRunDependency']('datafile_twin-e_v0.2.1.data');

    };
    Module['addRunDependency']('datafile_twin-e_v0.2.1.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.

  var start = Date.now();

  if (ArrayBuffer.transfer) {
    buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
  } else {
    var oldHEAP8 = HEAP8;
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }
  var success = _emscripten_replace_memory(buffer);
  assert(success);

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 368736;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([72,81,82,32,69,82,82,79,82,58,32,76,111,97,100,105,110,103,32,98,111,100,121,32,101,110,116,105,116,105,101,115,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+24144);
/* memory initializer */ allocate([85,110,115,117,112,112,111,114,116,101,100,32,97,110,105,109,97,116,105,111,110,32,114,111,116,97,116,105,111,110,32,109,111,100,101,32,37,100,33,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,114,105,99,107,32,83,104,97,112,101,32,37,100,32,117,110,115,117,112,112,111,114,116,101,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,236,255,4,0,250,255,19,0,250,255,7,0,2,0,12,0,16,0,0,0,7,0,244,255,16,0,249,255,2,0,237,255,250,255,252,255,250,255,0,0,0,0,0,0,18,0,0,0,236,255,6,0,240,255,8,0,246,255,14,0,244,255,20,0,252,255,18,0,4,0,12,0,4,0,16,0,8,0,8,0,16,0,2,0,12,0,252,255,18,0,246,255,16,0,244,255,8,0,240,255,10,0,236,255,4,0,244,255,248,255,250,255,250,255,246,255,244,255,0,0,0,0,0,0,47,0,0,0,0,0,0,0,46], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+47272);
/* memory initializer */ allocate([102,108,97,47,0,0,0,0,46,102,108,97,0,0,0,0,114,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,49,46,51], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+119832);
/* memory initializer */ allocate([2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,97,118,101,47,83,57,57,57,57,46,76,66,65,0,0,114,98,0,0,0,0,0,0,67,97,110,39,116,32,108,111,97,100,32,83,57,57,57,57,46,76,66,65,32,115,97,118,101,100,32,103,97,109,101,33,10,0,0,0,0,0,0,0,119,98,43,0,0,0,0,0,67,97,110,39,116,32,115,97,118,101,32,83,57,57,57,57,46,76,66,65,32,115,97,118,101,100,32,103,97,109,101,33,10,0,0,0,0,0,0,0,84,119,105,110,69,110,103,105,110,101,83,97,118,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122440);
/* memory initializer */ allocate([10,71,82,73,68,32,87,65,82,78,73,78,71,58,32,98,114,105,99,107,32,98,117,102,102,101,114,32,101,120,99,101,101,100,101,100,33,32,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+300832);
/* memory initializer */ allocate([114,98,0,0,0,0,0,0,72,81,82,58,32,37,115,32,99,97,110,39,116,32,98,101,32,102,111,117,110,100,32,33,10,0,0,0,0,0,0,0,10,72,81,82,32,87,65,82,78,73,78,71,58,32,73,110,118,97,108,105,100,32,101,110,116,114,121,32,105,110,100,101,120,33,33,10,0,0,0,0,10,72,81,82,32,87,65,82,78,73,78,71,58,32,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,33,33,10,0,0,0,0,0,0,72,81,82,32,87,65,82,78,73,78,71,58,32,117,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,101,110,116,114,121,32,109,101,109,111,114,121,33,33,10,0,72,80,75,77,71,73,81,79,57,28,29,56,83,42,54,59,60,61,62,63,64,65,66,67,68,87,88,42,0,0,0,0,0,1,0,2,0,4,0,8,0,5,0,9,0,10,0,6,1,1,1,2,1,4,1,8,1,16,1,32,1,32,2,1,2,2,2,4,2,8,2,16,2,32,2,64,2,128,3,1,3,2,3,4,3,8,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,115,101,32,73,110,118,101,110,116,111,114,121,32,91,107,105,72,111,108,111,109,97,112,93,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,33,10,0,0,0,0,0,80,97,117,115,101,0,0,0,48,46,50,46,48,0,0,0,184,176,4,0,0,0,0,0,108,98,97,46,99,102,103,0,200,176,4,0,0,0,0,0,76,97,110,103,117,97,103,101,58,0,0,0,0,0,0,0,0,0,0,0,0,0,76,97,110,103,117,97,103,101,67,68,58,0,0,0,0,0,0,0,0,0,0,0,70,108,97,103,68,105,115,112,108,97,121,84,101,120,116,58,0,0,0,0,0,0,70,108,97,103,75,101,101,112,86,111,105,99,101,58,0,0,0,0,0,0,0,0,83,118,103,97,68,114,105,118,101,114,58,0,0,0,0,0,0,0,0,0,0,0,77,105,100,105,68,114,105,118,101,114,58,0,0,0,0,0,0,0,0,0,0,0,77,105,100,105,69,120,101,99,58,0,0,0,0,0,0,0,0,0,0,0,0,0,77,105,100,105,66,97,115,101,58,0,0,0,0,0,0,0,0,0,0,0,0,0,77,105,100,105,84,121,112,101,58,0,0,0,0,0,0,0,0,0,0,0,0,0,77,105,100,105,73,82,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,105,100,105,68,77,65,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,97,118,101,68,114,105,118,101,114,58,0,0,0,0,0,0,0,0,0,0,0,87,97,118,101,69,120,101,99,58,0,0,0,0,0,0,0,0,0,0,0,0,0,87,97,118,101,66,97,115,101,58,0,0,0,0,0,0,0,0,0,0,0,0,0,87,97,118,101,73,82,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,97,118,101,68,77,65,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,97,118,101,82,97,116,101,58,0,0,0,0,0,0,0,0,0,0,0,0,0,77,105,120,101,114,68,114,105,118,101,114,58,0,0,0,0,0,0,0,0,0,0,77,105,120,101,114,66,97,115,101,58,0,0,0,0,0,0,0,0,0,0,0,0,87,97,118,101,86,111,108,117,109,101,58,0,0,0,0,0,0,0,0,0,0,0,86,111,105,99,101,86,111,108,117,109,101,58,0,0,0,0,0,0,0,0,0,0,77,117,115,105,99,86,111,108,117,109,101,58,0,0,0,0,0,0,0,0,0,0,67,68,86,111,108,117,109,101,58,0,0,0,0,0,0,0,0,0,0,0,0,0,76,105,110,101,86,111,108,117,109,101,58,0,0,0,0,0,0,0,0,0,0,0,77,97,115,116,101,114,86,111,108,117,109,101,58,0,0,0,0,0,0,0,0,0,86,101,114,115,105,111,110,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,117,108,108,83,99,114,101,101,110,58,0,0,0,0,0,0,0,0,0,0,0,85,115,101,67,68,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,111,118,105,101,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,114,111,115,115,70,97,100,101,58,0,0,0,0,0,0,0,0,0,0,0,0,70,112,115,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,101,98,117,103,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,115,101,65,117,116,111,83,97,118,105,110,103,58,0,0,0,0,0,0,0,0,67,111,109,98,97,116,65,117,116,111,58,0,0,0,0,0,0,0,0,0,0,0,83,104,97,100,111,119,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,99,101,90,111,111,109,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,105,108,108,68,101,116,97,105,108,115,58,0,0,0,0,0,0,0,0,0,0,73,110,116,101,114,102,97,99,101,83,116,121,108,101,0,0,0,0,0,0,0,0,87,97,108,108,67,111,108,108,105,115,105,111,110,0,0,0,0,0,0,0,0,0,69,110,103,108,105,115,104,0,0,0,70,114,97,110,231,97,105,115,0,0,68,101,117,116,115,99,104,0,0,0,69,115,112,97,241,111,108,0,0,0,73,116,97,108,105,97,110,111,0,0,80,111,114,116,117,103,117,234,115,0,0,0,0,0,114,98,0,0,0,0,0,0,69,114,114,111,114,58,32,67,97,110,39,116,32,102,105,110,100,32,99,111,110,102,105,103,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,0,76,97,110,103,117,97,103,101,58,32,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,97,110,103,117,97,103,101,67,68,58,32,37,115,0,0,70,108,97,103,68,105,115,112,108,97,121,84,101,120,116,58,32,37,115,0,0,0,0,0,79,78,0,0,0,0,0,0,70,108,97,103,75,101,101,112,86,111,105,99,101,58,32,37,115,0,0,0,0,0,0,0,77,105,100,105,84,121,112,101,58,32,37,115,0,0,0,0,97,117,116,111,0,0,0,0,109,105,100,105,0,0,0,0,87,97,118,101,86,111,108,117,109,101,58,32,37,100,0,0,86,111,105,99,101,86,111,108,117,109,101,58,32,37,100,0,77,117,115,105,99,86,111,108,117,109,101,58,32,37,100,0,67,68,86,111,108,117,109,101,58,32,37,100,0,0,0,0,76,105,110,101,86,111,108,117,109,101,58,32,37,100,0,0,77,97,115,116,101,114,86,111,108,117,109,101,58,32,37,100,0,0,0,0,0,0,0,0,86,101,114,115,105,111,110,58,32,37,100,0,0,0,0,0,70,117,108,108,83,99,114,101,101,110,58,32,37,100,0,0,85,115,101,67,68,58,32,37,100,0,0,0,0,0,0,0,83,111,117,110,100,58,32,37,100,0,0,0,0,0,0,0,77,111,118,105,101,58,32,37,100,0,0,0,0,0,0,0,67,114,111,115,115,70,97,100,101,58,32,37,100,0,0,0,70,112,115,58,32,37,100,0,68,101,98,117,103,58,32,37,100,0,0,0,0,0,0,0,85,115,101,65,117,116,111,83,97,118,105,110,103,58,32,37,100,0,0,0,0,0,0,0,67,111,109,98,97,116,65,117,116,111,58,32,37,100,0,0,83,104,97,100,111,119,58,32,37,100,0,0,0,0,0,0,83,99,101,90,111,111,109,58,32,37,100,0,0,0,0,0,70,105,108,108,68,101,116,97,105,108,115,58,32,37,100,0,73,110,116,101,114,102,97,99,101,83,116,121,108,101,58,32,37,100,0,0,0,0,0,0,87,97,108,108,67,111,108,108,105,115,105,111,110,58,32,37,100,0,0,0,0,0,0,0,84,119,105,110,69,110,103,105,110,101,32,118,37,115,10,10,0,0,0,0,0,0,0,0,40,99,41,50,48,48,50,32,84,104,101,32,84,119,105,110,69,110,103,105,110,101,32,116,101,97,109,46,32,82,101,102,101,114,32,116,111,32,65,85,84,72,79,82,83,32,102,105,108,101,32,102,111,114,32,102,117,114,116,104,101,114,32,100,101,116,97,105,108,115,46,10,0,0,0,0,0,0,0,0,82,101,108,101,97,115,101,100,32,117,110,100,101,114,32,116,104,101,32,116,101,114,109,115,32,111,102,32,116,104,101,32,71,78,85,32,71,80,76,32,108,105,99,101,110,115,101,32,118,101,114,115,105,111,110,32,50,32,40,111,114,44,32,97,116,32,121,111,117,114,32,111,112,105,110,105,111,110,44,32,97,110,121,32,108,97,116,101,114,41,46,32,83,101,101,32,67,79,80,89,73,78,71,32,102,105,108,101,46,10,10,0,84,104,101,32,111,114,105,103,105,110,97,108,32,76,105,116,116,108,101,32,66,105,103,32,65,100,118,101,110,116,117,114,101,32,103,97,109,101,32,105,115,58,10,9,40,99,41,49,57,57,52,32,98,121,32,65,100,101,108,105,110,101,32,83,111,102,116,119,97,114,101,32,73,110,116,101,114,110,97,116,105,111,110,97,108,44,32,65,108,108,32,82,105,103,104,116,115,32,82,101,115,101,114,118,101,100,46,10,10,0,0,0,67,111,109,112,105,108,101,100,32,116,104,101,32,37,115,32,97,116,32,37,115,10,0,0,74,117,108,32,32,53,32,50,48,49,53,0,0,0,0,0,49,54,58,52,51,58,48,52,0,0,0,0,0,0,0,0,100,114,97,103,111,110,51,0,10,10,76,66,65,47,82,101,108,101,110,116,108,101,115,115,32,60,32,37,115,32,47,32,37,115,32,62,10,10,79,75,46,10,10,0,0,0,0,0,84,119,105,110,69,110,103,105,110,101,32,118,37,115,32,99,108,111,115,101,100,10,0,0,10,80,114,101,115,115,32,60,69,78,84,69,82,62,32,116,111,32,113,117,105,116,32,100,101,98,117,103,32,109,111,100,101,10,0,0,0,0,0,0,37,100,0,0,0,0,0,0,32,0,4,0,0,0,0,0,64,1,0,0,0,0,0,0,38,2,0,0,0,0,0,0,0,0,4,0,200,0,0,0,0,0,20,0,0,0,21,0,0,0,23,0,0,0,22,0,0,0,2,0,240,0,0,0,0,0,28,0,0,0,27,0,0,0,3,0,240,0,0,0,0,0,28,0,0,0,16,0,0,0,27,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,24,0,0,0,30,0,0,0,46,0,0,0,47,0,0,0,5,0,0,0,0,0,0,0,26,0,0,0,4,0,6,0,31,0,7,0,32,0,8,0,33,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,26,0,0,0,41,0,0,0,45,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,26,0,1,0,10,0,2,0,11,0,3,0,12,0,4,0,13,0,5,0,14,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,65,66,67,68,69,70,71,72,73,74,75,76,77,46,78,79,80,81,82,83,84,85,86,87,88,89,90,45,97,98,99,100,101,102,103,104,105,106,107,108,109,63,110,111,112,113,114,115,116,117,118,119,120,121,122,33,48,49,50,51,52,53,54,55,56,57,32,8,13,0,0,105,110,116,114,111,100,0,0,116,104,101,95,101,110,100,0,85,110,107,110,111,119,110,32,67,111,110,116,114,111,108,32,109,111,100,101,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,32,119,104,105,108,101,32,112,108,97,121,105,110,103,32,109,117,115,105,99,58,32,37,100,32,10,0,67,97,110,39,116,32,102,105,110,100,32,76,66,65,32,67,68,33,10,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+307032);
/* memory initializer */ allocate([37,100,0,0,0,0,0,0,0,0,101,0,201,0,46,1,146,1,247,1,91,2,192,2,36,3,136,3,237,3,81,4,181,4,26,5,126,5,226,5,70,6,170,6,14,7,114,7,214,7,57,8,157,8,1,9,100,9,199,9,43,10,142,10,241,10,84,11,183,11,26,12,124,12,223,12,65,13,164,13,6,14,104,14,202,14,43,15,141,15,238,15,80,16,177,16,18,17,115,17,211,17,52,18,148,18,244,18,84,19,180,19,19,20,115,20,210,20,49,21,144,21,238,21,76,22,171,22,9,23,102,23,196,23,33,24,126,24,219,24,55,25,147,25,239,25,75,26,167,26,2,27,93,27,184,27,18,28,108,28,198,28,32,29,121,29,211,29,43,30,132,30,220,30,52,31,140,31,227,31,58,32,145,32,231,32,61,33,147,33,232,33,61,34,146,34,231,34,59,35,142,35,226,35,53,36,136,36,218,36,44,37,126,37,207,37,32,38,113,38,193,38,17,39,96,39,175,39,254,39,76,40,154,40,231,40,53,41,129,41,206,41,26,42,101,42,176,42,251,42,69,43,143,43,216,43,33,44,106,44,178,44,250,44,65,45,136,45,207,45,21,46,90,46,159,46,228,46,40,47,108,47,175,47,242,47,52,48,118,48,184,48,249,48,57,49,121,49,185,49,248,49,54,50,116,50,178,50,239,50,44,51,104,51,163,51,223,51,25,52,83,52,141,52,198,52,255,52,55,53,110,53,165,53,220,53,18,54,72,54,125,54,177,54,229,54,24,55,75,55,126,55,176,55,225,55,18,56,66,56,113,56,161,56,207,56,253,56,43,57,88,57,132,57,176,57,219,57,6,58,48,58,89,58,130,58,171,58,211,58,250,58,33,59,71,59,109,59,146,59,182,59,218,59,253,59,32,60,66,60,100,60,133,60,165,60,197,60,228,60,3,61,33,61,63,61,91,61,120,61,147,61,175,61,201,61,227,61,252,61,21,62,45,62,69,62,92,62,114,62,136,62,157,62,177,62,197,62,216,62,235,62,253,62,15,63,32,63,48,63,64,63,79,63,93,63,107,63,120,63,133,63,145,63,156,63,167,63,177,63,187,63,196,63,204,63,212,63,219,63,225,63,231,63,236,63,241,63,245,63,248,63,251,63,253,63,255,63,0,64,0,64,0,64,255,63,253,63,251,63,248,63,245,63,241,63,236,63,231,63,225,63,219,63,212,63,204,63,196,63,187,63,177,63,167,63,156,63,145,63,133,63,120,63,107,63,93,63,79,63,64,63,48,63,32,63,15,63,253,62,235,62,216,62,197,62,177,62,157,62,136,62,114,62,92,62,69,62,45,62,21,62,252,61,227,61,201,61,175,61,147,61,120,61,91,61,63,61,33,61,3,61,228,60,197,60,165,60,133,60,100,60,66,60,32,60,253,59,218,59,182,59,146,59,109,59,71,59,33,59,250,58,211,58,171,58,130,58,89,58,48,58,6,58,219,57,176,57,132,57,88,57,43,57,253,56,207,56,161,56,113,56,66,56,18,56,225,55,176,55,126,55,75,55,24,55,229,54,177,54,125,54,72,54,18,54,220,53,165,53,110,53,55,53,255,52,198,52,141,52,83,52,25,52,223,51,163,51,104,51,44,51,239,50,178,50,116,50,54,50,248,49,185,49,121,49,57,49,249,48,184,48,118,48,52,48,242,47,175,47,108,47,40,47,228,46,159,46,90,46,21,46,207,45,136,45,65,45,250,44,178,44,106,44,33,44,216,43,143,43,69,43,251,42,176,42,101,42,26,42,206,41,129,41,53,41,231,40,154,40,76,40,254,39,175,39,96,39,17,39,193,38,113,38,32,38,207,37,126,37,44,37,218,36,136,36,53,36,226,35,142,35,59,35,231,34,146,34,61,34,232,33,147,33,61,33,231,32,145,32,58,32,227,31,140,31,52,31,220,30,132,30,43,30,211,29,121,29,32,29,198,28,108,28,18,28,184,27,93,27,2,27,167,26,75,26,239,25,147,25,55,25,219,24,126,24,33,24,196,23,102,23,9,23,171,22,76,22,238,21,144,21,49,21,210,20,115,20,19,20,180,19,84,19,244,18,148,18,52,18,211,17,115,17,18,17,177,16,80,16,238,15,141,15,43,15,202,14,104,14,6,14,164,13,65,13,223,12,124,12,26,12,183,11,84,11,241,10,142,10,43,10,199,9,100,9,1,9,157,8,57,8,214,7,114,7,14,7,170,6,70,6,226,5,126,5,26,5,181,4,81,4,237,3,136,3,36,3,192,2,91,2,247,1,146,1,46,1,201,0,101,0,0,0,155,255,55,255,210,254,110,254,9,254,165,253,64,253,220,252,120,252,19,252,175,251,75,251,230,250,130,250,30,250,186,249,86,249,242,248,142,248,42,248,199,247,99,247,255,246,156,246,57,246,213,245,114,245,15,245,172,244,73,244,230,243,132,243,33,243,191,242,92,242,250,241,152,241,54,241,213,240,115,240,18,240,176,239,79,239,238,238,141,238,45,238,204,237,108,237,12,237,172,236,76,236,237,235,141,235,46,235,207,234,112,234,18,234,180,233,85,233,247,232,154,232,60,232,223,231,130,231,37,231,201,230,109,230,17,230,181,229,89,229,254,228,163,228,72,228,238,227,148,227,58,227,224,226,135,226,45,226,213,225,124,225,36,225,204,224,116,224,29,224,198,223,111,223,25,223,195,222,109,222,24,222,195,221,110,221,25,221,197,220,114,220,30,220,203,219,120,219,38,219,212,218,130,218,49,218,224,217,143,217,63,217,239,216,160,216,81,216,2,216,180,215,102,215,25,215,203,214,127,214,50,214,230,213,155,213,80,213,5,213,187,212,113,212,40,212,223,211,150,211,78,211,6,211,191,210,120,210,49,210,235,209,166,209,97,209,28,209,216,208,148,208,81,208,14,208,204,207,138,207,72,207,7,207,199,206,135,206,71,206,8,206,202,205,140,205,78,205,17,205,212,204,152,204,93,204,33,204,231,203,173,203,115,203,58,203,1,203,201,202,146,202,91,202,36,202,238,201,184,201,131,201,79,201,27,201,232,200,181,200,130,200,80,200,31,200,238,199,190,199,143,199,95,199,49,199,3,199,213,198,168,198,124,198,80,198,37,198,250,197,208,197,167,197,126,197,85,197,45,197,6,197,223,196,185,196,147,196,110,196,74,196,38,196,3,196,224,195,190,195,156,195,123,195,91,195,59,195,28,195,253,194,223,194,193,194,165,194,136,194,109,194,81,194,55,194,29,194,4,194,235,193,211,193,187,193,164,193,142,193,120,193,99,193,79,193,59,193,40,193,21,193,3,193,241,192,224,192,208,192,192,192,177,192,163,192,149,192,136,192,123,192,111,192,100,192,89,192,79,192,69,192,60,192,52,192,44,192,37,192,31,192,25,192,20,192,15,192,11,192,8,192,5,192,3,192,1,192,0,192,0,192,0,192,1,192,3,192,5,192,8,192,11,192,15,192,20,192,25,192,31,192,37,192,44,192,52,192,60,192,69,192,79,192,89,192,100,192,111,192,123,192,136,192,149,192,163,192,177,192,192,192,208,192,224,192,241,192,3,193,21,193,40,193,59,193,79,193,99,193,120,193,142,193,164,193,187,193,211,193,235,193,4,194,29,194,55,194,81,194,109,194,136,194,165,194,193,194,223,194,253,194,28,195,59,195,91,195,123,195,156,195,190,195,224,195,3,196,38,196,74,196,110,196,147,196,185,196,223,196,6,197,45,197,85,197,126,197,167,197,208,197,250,197,37,198,80,198,124,198,168,198,213,198,3,199,49,199,95,199,143,199,190,199,238,199,31,200,80,200,130,200,181,200,232,200,27,201,79,201,131,201,184,201,238,201,36,202,91,202,146,202,201,202,1,203,58,203,115,203,173,203,231,203,33,204,93,204,152,204,212,204,17,205,78,205,140,205,202,205,8,206,71,206,135,206,199,206,7,207,72,207,138,207,204,207,14,208,81,208,148,208,216,208,28,209,97,209,166,209,235,209,49,210,120,210,191,210,6,211,78,211,150,211,223,211,40,212,113,212,187,212,5,213,80,213,155,213,230,213,50,214,127,214,203,214,25,215,102,215,180,215,2,216,81,216,160,216,239,216,63,217,143,217,224,217,49,218,130,218,212,218,38,219,120,219,203,219,30,220,114,220,197,220,25,221,110,221,195,221,24,222,109,222,195,222,25,223,111,223,198,223,29,224,116,224,204,224,36,225,124,225,213,225,45,226,135,226,224,226,58,227,148,227,238,227,72,228,163,228,254,228,89,229,181,229,17,230,109,230,201,230,37,231,130,231,223,231,60,232,154,232,247,232,85,233,180,233,18,234,112,234,207,234,46,235,141,235,237,235,76,236,172,236,12,237,108,237,204,237,45,238,141,238,238,238,79,239,176,239,18,240,115,240,213,240,54,241,152,241,250,241,92,242,191,242,33,243,132,243,230,243,73,244,172,244,15,245,114,245,213,245,57,246,156,246,255,246,99,247,199,247,42,248,142,248,242,248,86,249,186,249,30,250,130,250,230,250,75,251,175,251,19,252,120,252,220,252,64,253,165,253,9,254,110,254,210,254,55,255,155,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,69,78,68,69,82,32,69,82,82,79,82,58,32,105,110,118,97,108,105,100,32,102,105,114,115,116,80,111,105,110,116,32,105,110,32,112,114,111,99,101,115,115,95,114,111,116,97,116,101,100,95,101,108,101,109,101,110,116,32,102,117,110,99,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+317512);
/* memory initializer */ allocate([82,69,78,68,69,82,32,87,65,82,78,73,78,71,58,32,78,111,32,112,111,105,110,116,115,32,105,110,32,116,104,105,115,32,109,111,100,101,108,33,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+325696);
/* memory initializer */ allocate([82,69,78,68,69,82,32,69,82,82,79,82,58,32,108,105,110,101,68,97,116,97,80,116,114,32,114,101,102,101,114,101,110,99,101,32,105,115,32,109,97,108,102,111,114,109,101,100,32,33,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+345752);
/* memory initializer */ allocate([85,110,115,117,112,112,111,114,116,101,100,32,117,110,97,110,105,109,97,116,101,100,32,109,111,100,101,108,32,114,101,110,100,101,114,33,10,0,0,0,47,114,101,115,115,46,104,113,114,0,0,0,0,0,0,0,208,133,5,0,0,0,0,0,47,116,101,120,116,46,104,113,114,0,0,0,0,0,0,0,232,133,5,0,0,0,0,0,47,102,108,97,115,97,109,112,46,104,113,114,0,0,0,0,0,134,5,0,0,0,0,0,47,109,105,100,105,95,109,105,46,104,113,114,0,0,0,0,24,134,5,0,0,0,0,0,47,109,105,100,105,95,109,105,95,119,105,110,46,104,113,114,0,0,0,0,0,0,0,0,48,134,5,0,0,0,0,0,47,115,97,109,112,108,101,115,46,104,113,114,0,0,0,0,80,134,5,0,0,0,0,0,47,108,98,97,95,103,114,105,46,104,113,114,0,0,0,0,104,134,5,0,0,0,0,0,47,108,98,97,95,98,108,108,46,104,113,114,0,0,0,0,128,134,5,0,0,0,0,0,47,108,98,97,95,98,114,107,46,104,113,114,0,0,0,0,152,134,5,0,0,0,0,0,47,115,99,101,110,101,46,104,113,114,0,0,0,0,0,0,176,134,5,0,0,0,0,0,47,115,112,114,105,116,101,115,46,104,113,114,0,0,0,0,200,134,5,0,0,0,0,0,47,102,105,108,101,51,100,46,104,113,114,0,0,0,0,0,224,134,5,0,0,0,0,0,47,98,111,100,121,46,104,113,114,0,0,0,0,0,0,0,248,134,5,0,0,0,0,0,47,97,110,105,109,46,104,113,114,0,0,0,0,0,0,0,16,135,5,0,0,0,0,0,47,105,110,118,111,98,106,46,104,113,114,0,0,0,0,0,40,135,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,65,99,116,111,114,32,99,111,110,100,105,116,105,111,110,32,111,112,99,111,100,101,32,37,100,10,0,0,0,0,0,0,0,69,82,82,79,82,58,32,85,110,107,110,111,119,110,32,111,112,101,114,97,116,111,114,32,118,97,108,117,101,32,115,105,122,101,32,37,100,10,0,0,69,82,82,79,82,58,32,65,99,116,111,114,32,111,112,101,114,97,116,111,114,32,111,112,99,111,100,101,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,140,5,0,1,0,0,0,152,140,5,0,2,0,0,0,160,140,5,0,3,0,0,0,168,140,5,0,4,0,0,0,176,140,5,0,5,0,0,0,184,140,5,0,6,0,0,0,192,140,5,0,7,0,0,0,184,140,5,0,6,0,0,0,184,140,5,0,6,0,0,0,184,140,5,0,6,0,0,0,200,140,5,0,8,0,0,0,208,140,5,0,9,0,0,0,216,140,5,0,10,0,0,0,224,140,5,0,11,0,0,0,232,140,5,0,12,0,0,0,240,140,5,0,13,0,0,0,248,140,5,0,6,0,0,0,0,141,5,0,14,0,0,0,8,141,5,0,15,0,0,0,24,141,5,0,16,0,0,0,32,141,5,0,17,0,0,0,48,141,5,0,18,0,0,0,64,141,5,0,19,0,0,0,80,141,5,0,20,0,0,0,96,141,5,0,21,0,0,0,112,141,5,0,22,0,0,0,120,141,5,0,23,0,0,0,136,141,5,0,24,0,0,0,152,141,5,0,25,0,0,0,168,141,5,0,26,0,0,0,184,141,5,0,27,0,0,0,200,141,5,0,28,0,0,0,216,141,5,0,29,0,0,0,232,141,5,0,30,0,0,0,0,142,5,0,31,0,0,0,24,142,5,0,32,0,0,0,48,142,5,0,33,0,0,0,64,142,5,0,34,0,0,0,80,142,5,0,35,0,0,0,88,142,5,0,36,0,0,0,112,142,5,0,37,0,0,0,136,142,5,0,38,0,0,0,152,142,5,0,39,0,0,0,168,142,5,0,40,0,0,0,184,142,5,0,41,0,0,0,200,142,5,0,42,0,0,0,216,142,5,0,43,0,0,0,232,142,5,0,44,0,0,0,248,142,5,0,45,0,0,0,8,143,5,0,46,0,0,0,24,143,5,0,47,0,0,0,40,143,5,0,48,0,0,0,56,143,5,0,49,0,0,0,72,143,5,0,50,0,0,0,80,143,5,0,51,0,0,0,96,143,5,0,52,0,0,0,104,143,5,0,53,0,0,0,120,143,5,0,54,0,0,0,128,143,5,0,55,0,0,0,144,143,5,0,56,0,0,0,160,143,5,0,57,0,0,0,176,143,5,0,58,0,0,0,200,143,5,0,59,0,0,0,224,143,5,0,60,0,0,0,232,143,5,0,61,0,0,0,248,143,5,0,62,0,0,0,8,144,5,0,63,0,0,0,24,144,5,0,64,0,0,0,48,144,5,0,65,0,0,0,64,144,5,0,66,0,0,0,80,144,5,0,67,0,0,0,96,144,5,0,68,0,0,0,112,144,5,0,69,0,0,0,128,144,5,0,70,0,0,0,144,144,5,0,71,0,0,0,160,144,5,0,72,0,0,0,176,144,5,0,73,0,0,0,184,144,5,0,74,0,0,0,200,144,5,0,75,0,0,0,216,144,5,0,76,0,0,0,232,144,5,0,77,0,0,0,240,144,5,0,78,0,0,0,248,144,5,0,79,0,0,0,8,145,5,0,80,0,0,0,24,145,5,0,81,0,0,0,40,145,5,0,82,0,0,0,56,145,5,0,83,0,0,0,72,145,5,0,84,0,0,0,88,145,5,0,85,0,0,0,104,145,5,0,86,0,0,0,120,145,5,0,87,0,0,0,136,145,5,0,88,0,0,0,152,145,5,0,89,0,0,0,168,145,5,0,90,0,0,0,184,145,5,0,91,0,0,0,200,145,5,0,92,0,0,0,216,145,5,0,93,0,0,0,232,145,5,0,94,0,0,0,248,145,5,0,95,0,0,0,0,146,5,0,96,0,0,0,16,146,5,0,97,0,0,0,32,146,5,0,98,0,0,0,48,146,5,0,99,0,0,0,56,146,5,0,100,0,0,0,64,146,5,0,101,0,0,0,80,146,5,0,102,0,0,0,69,82,82,79,82,58,32,65,99,116,111,114,32,37,100,32,119,105,116,104,32,119,114,111,110,103,32,111,102,102,115,101,116,47,111,112,99,111,100,101,32,45,32,79,102,102,115,101,116,58,32,37,100,10,0,0,65,99,116,111,114,32,37,100,32,76,105,102,101,32,115,99,114,105,112,116,32,91,37,115,93,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,10,0,0,0,0,0,0,69,78,68,0,0,0,0,0,78,79,80,0,0,0,0,0,83,78,73,70,0,0,0,0,79,70,70,83,69,84,0,0,78,69,86,69,82,73,70,0,0,0,0,0,0,0,0,0,78,79,95,73,70,0,0,0,76,65,66,69,76,0,0,0,82,69,84,85,82,78,0,0,73,70,0,0,0,0,0,0,83,87,73,70,0,0,0,0,79,78,69,73,70,0,0,0,69,76,83,69,0,0,0,0,69,78,68,73,70,0,0,0,66,79,68,89,0,0,0,0,66,79,68,89,95,79,66,74,0,0,0,0,0,0,0,0,65,78,73,77,0,0,0,0,65,78,73,77,95,79,66,74,0,0,0,0,0,0,0,0,83,69,84,95,76,73,70,69,0,0,0,0,0,0,0,0,83,69,84,95,76,73,70,69,95,79,66,74,0,0,0,0,83,69,84,95,84,82,65,67,75,0,0,0,0,0,0,0,83,69,84,95,84,82,65,67,75,95,79,66,74,0,0,0,77,69,83,83,65,71,69,0,70,65,76,76,65,66,76,69,0,0,0,0,0,0,0,0,83,69,84,95,68,73,82,77,79,68,69,0,0,0,0,0,83,69,84,95,68,73,82,77,79,68,69,95,79,66,74,0,67,65,77,95,70,79,76,76,79,87,0,0,0,0,0,0,83,69,84,95,66,69,72,65,86,73,79,85,82,0,0,0,83,69,84,95,70,76,65,71,95,67,85,66,69,0,0,0,67,79,77,80,79,82,84,69,77,69,78,84,0,0,0,0,83,69,84,95,67,79,77,80,79,82,84,69,77,69,78,84,0,0,0,0,0,0,0,0,83,69,84,95,67,79,77,80,79,82,84,69,77,69,78,84,95,79,66,74,0,0,0,0,69,78,68,95,67,79,77,80,79,82,84,69,77,69,78,84,0,0,0,0,0,0,0,0,83,69,84,95,70,76,65,71,95,71,65,77,69,0,0,0,75,73,76,76,95,79,66,74,0,0,0,0,0,0,0,0,83,85,73,67,73,68,69,0,85,83,69,95,79,78,69,95,76,73,84,84,76,69,95,75,69,89,0,0,0,0,0,0,71,73,86,69,95,71,79,76,68,95,80,73,69,67,69,83,0,0,0,0,0,0,0,0,69,78,68,95,76,73,70,69,0,0,0,0,0,0,0,0,83,84,79,80,95,76,95,84,82,65,67,75,0,0,0,0,82,69,83,84,79,82,69,95,76,95,84,82,65,67,75,0,77,69,83,83,65,71,69,95,79,66,74,0,0,0,0,0,73,78,67,95,67,72,65,80,84,69,82,0,0,0,0,0,70,79,85,78,68,95,79,66,74,69,67,84,0,0,0,0,83,69,84,95,68,79,79,82,95,76,69,70,84,0,0,0,83,69,84,95,68,79,79,82,95,82,73,71,72,84,0,0,83,69,84,95,68,79,79,82,95,85,80,0,0,0,0,0,83,69,84,95,68,79,79,82,95,68,79,87,78,0,0,0,71,73,86,69,95,66,79,78,85,83,0,0,0,0,0,0,67,72,65,78,71,69,95,67,85,66,69,0,0,0,0,0,79,66,74,95,67,79,76,0,66,82,73,67,75,95,67,79,76,0,0,0,0,0,0,0,79,82,95,73,70,0,0,0,73,78,86,73,83,73,66,76,69,0,0,0,0,0,0,0,90,79,79,77,0,0,0,0,80,79,83,95,80,79,73,78,84,0,0,0,0,0,0,0,83,69,84,95,77,65,71,73,67,95,76,69,86,69,76,0,83,85,66,95,77,65,71,73,67,95,80,79,73,78,84,0,83,69,84,95,76,73,70,69,95,80,79,73,78,84,95,79,66,74,0,0,0,0,0,0,83,85,66,95,76,73,70,69,95,80,79,73,78,84,95,79,66,74,0,0,0,0,0,0,72,73,84,95,79,66,74,0,80,76,65,89,95,70,76,65,0,0,0,0,0,0,0,0,80,76,65,89,95,77,73,68,73,0,0,0,0,0,0,0,73,78,67,95,67,76,79,86,69,82,95,66,79,88,0,0,83,69,84,95,85,83,69,68,95,73,78,86,69,78,84,79,82,89,0,0,0,0,0,0,65,68,68,95,67,72,79,73,67,69,0,0,0,0,0,0,65,83,75,95,67,72,79,73,67,69,0,0,0,0,0,0,66,73,71,95,77,69,83,83,65,71,69,0,0,0,0,0,73,78,73,84,95,80,73,78,71,79,85,73,78,0,0,0,83,69,84,95,72,79,76,79,95,80,79,83,0,0,0,0,67,76,82,95,72,79,76,79,95,80,79,83,0,0,0,0,65,68,68,95,70,85,69,76,0,0,0,0,0,0,0,0,83,85,66,95,70,85,69,76,0,0,0,0,0,0,0,0,83,69,84,95,71,82,77,0,83,65,89,95,77,69,83,83,65,71,69,0,0,0,0,0,83,65,89,95,77,69,83,83,65,71,69,95,79,66,74,0,70,85,76,76,95,80,79,73,78,84,0,0,0,0,0,0,66,69,84,65,0,0,0,0,71,82,77,95,79,70,70,0,70,65,68,69,95,80,65,76,95,82,69,68,0,0,0,0,70,65,68,69,95,65,76,65,82,77,95,82,69,68,0,0,70,65,68,69,95,65,76,65,82,77,95,80,65,76,0,0,70,65,68,69,95,82,69,68,95,80,65,76,0,0,0,0,70,65,68,69,95,82,69,68,95,65,76,65,82,77,0,0,70,65,68,69,95,80,65,76,95,65,76,65,82,77,0,0,69,88,80,76,79,68,69,95,79,66,74,0,0,0,0,0,66,85,66,66,76,69,95,79,78,0,0,0,0,0,0,0,66,85,66,66,76,69,95,79,70,70,0,0,0,0,0,0,65,83,75,95,67,72,79,73,67,69,95,79,66,74,0,0,83,69,84,95,68,65,82,75,95,80,65,76,0,0,0,0,83,69,84,95,78,79,82,77,65,76,95,80,65,76,0,0,77,69,83,83,65,71,69,95,83,69,78,68,69,76,76,0,65,78,73,77,95,83,69,84,0,0,0,0,0,0,0,0,72,79,76,79,77,65,80,95,84,82,65,74,0,0,0,0,71,65,77,69,95,79,86,69,82,0,0,0,0,0,0,0,84,72,69,95,69,78,68,0,77,73,68,73,95,79,70,70,0,0,0,0,0,0,0,0,80,76,65,89,95,67,68,95,84,82,65,67,75,0,0,0,80,82,79,74,95,73,83,79,0,0,0,0,0,0,0,0,80,82,79,74,95,51,68,0,84,69,88,84,0,0,0,0,67,76,69,65,82,95,84,69,88,84,0,0,0,0,0,0,66,82,85,84,65,76,95,69,88,73,84,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,147,5,0,103,0,0,0,160,147,5,0,104,0,0,0,168,147,5,0,105,0,0,0,176,147,5,0,106,0,0,0,184,147,5,0,107,0,0,0,200,147,5,0,108,0,0,0,216,147,5,0,109,0,0,0,224,147,5,0,110,0,0,0,232,147,5,0,111,0,0,0,248,147,5,0,112,0,0,0,0,148,5,0,113,0,0,0,8,148,5,0,114,0,0,0,16,148,5,0,115,0,0,0,32,148,5,0,116,0,0,0,48,148,5,0,117,0,0,0,56,148,5,0,118,0,0,0,72,148,5,0,119,0,0,0,80,148,5,0,120,0,0,0,96,148,5,0,121,0,0,0,112,148,5,0,122,0,0,0,120,148,5,0,123,0,0,0,128,148,5,0,124,0,0,0,144,148,5,0,125,0,0,0,160,148,5,0,126,0,0,0,168,148,5,0,127,0,0,0,184,148,5,0,128,0,0,0,192,148,5,0,129,0,0,0,208,148,5,0,130,0,0,0,224,148,5,0,131,0,0,0,240,148,5,0,132,0,0,0,0,149,5,0,133,0,0,0,16,149,5,0,134,0,0,0,32,149,5,0,135,0,0,0,48,149,5,0,136,0,0,0,64,149,5,0,137,0,0,0,69,78,68,0,0,0,0,0,78,79,80,0,0,0,0,0,66,79,68,89,0,0,0,0,65,78,73,77,0,0,0,0,71,79,84,79,95,80,79,73,78,84,0,0,0,0,0,0,87,65,73,84,95,65,78,73,77,0,0,0,0,0,0,0,76,79,79,80,0,0,0,0,65,78,71,76,69,0,0,0,80,79,83,95,80,79,73,78,84,0,0,0,0,0,0,0,76,65,66,69,76,0,0,0,71,79,84,79,0,0,0,0,83,84,79,80,0,0,0,0,71,79,84,79,95,83,89,77,95,80,79,73,78,84,0,0,87,65,73,84,95,78,85,77,95,65,78,73,77,0,0,0,83,65,77,80,76,69,0,0,71,79,84,79,95,80,79,73,78,84,95,51,68,0,0,0,83,80,69,69,68,0,0,0,66,65,67,75,71,82,79,85,78,68,0,0,0,0,0,0,87,65,73,84,95,78,85,77,95,83,69,67,79,78,68,0,78,79,95,66,79,68,89,0,66,69,84,65,0,0,0,0,79,80,69,78,95,76,69,70,84,0,0,0,0,0,0,0,79,80,69,78,95,82,73,71,72,84,0,0,0,0,0,0,79,80,69,78,95,85,80,0,79,80,69,78,95,68,79,87,78,0,0,0,0,0,0,0,67,76,79,83,69,0,0,0,87,65,73,84,95,68,79,79,82,0,0,0,0,0,0,0,83,65,77,80,76,69,95,82,78,68,0,0,0,0,0,0,83,65,77,80,76,69,95,65,76,87,65,89,83,0,0,0,83,65,77,80,76,69,95,83,84,79,80,0,0,0,0,0,80,76,65,89,95,70,76,65,0,0,0,0,0,0,0,0,82,69,80,69,65,84,95,83,65,77,80,76,69,0,0,0,83,73,77,80,76,69,95,83,65,77,80,76,69,0,0,0,70,65,67,69,95,72,69,82,79,0,0,0,0,0,0,0,65,78,71,76,69,95,82,78,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,115,105,110,103,32,83,68,76,32,100,101,118,105,99,101,46,32,80,108,101,97,115,101,32,119,97,105,116,46,46,46,10,0,0,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,105,110,105,116,105,97,108,105,122,101,32,83,68,76,58,32,37,115,10,0,0,0,0,73,110,105,116,105,97,108,105,115,105,110,103,32,83,111,117,110,100,32,100,101,118,105,99,101,46,32,80,108,101,97,115,101,32,119,97,105,116,46,46,46,10,10,0,0,0,0,0,77,105,120,95,79,112,101,110,65,117,100,105,111,58,32,37,115,10,0,0,0,0,0,0,76,105,116,116,108,101,32,66,105,103,32,65,100,118,101,110,116,117,114,101,58,32,84,119,105,110,69,110,103,105,110,101,0,0,0,0,0,0,0,0,116,119,105,110,45,101,0,0,67,111,117,108,100,110,39,116,32,115,101,116,32,54,52,48,120,52,56,48,120,56,32,118,105,100,101,111,32,109,111,100,101,58,32,37,115,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,102,108,97,47,37,115,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,32,119,104,105,108,101,32,112,108,97,121,105,110,103,32,86,79,67,58,32,83,97,109,112,108,101,32,37,100,32,10,0,0,0,0,67,111,117,108,100,32,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,79,82,77,0,0,0,0,88,77,73,68,0,0,0,0,88,68,73,82,0,0,0,0,73,78,70,79,0,0,0,0,67,65,84,32,0,0,0,0,84,73,77,66,0,0,0,0,69,86,78,84,0,0,0,0,255,255,255,255,0,0,0,0,32,0,0,0,0,0,0,0,69,78,95,0,0,0,0,0,70,82,95,0,0,0,0,0,68,69,95,0,0,0,0,0,83,80,95,0,0,0,0,0,73,84,95,0,0,0,0,0,72,151,5,0,80,151,5,0,88,151,5,0,96,151,5,0,104,151,5,0,0,0,0,0,115,121,115,0,0,0,0,0,99,114,101,0,0,0,0,0,103,97,109,0,0,0,0,0,48,48,48,0,0,0,0,0,48,48,49,0,0,0,0,0,48,48,50,0,0,0,0,0,48,48,51,0,0,0,0,0,48,48,52,0,0,0,0,0,48,48,53,0,0,0,0,0,48,48,54,0,0,0,0,0,48,48,55,0,0,0,0,0,48,48,56,0,0,0,0,0,48,48,57,0,0,0,0,0,48,49,48,0,0,0,0,0,48,49,49,0,0,0,0,0,136,151,5,0,144,151,5,0,152,151,5,0,160,151,5,0,168,151,5,0,176,151,5,0,184,151,5,0,192,151,5,0,200,151,5,0,208,151,5,0,216,151,5,0,224,151,5,0,232,151,5,0,240,151,5,0,248,151,5,0,0,0,0,0,118,111,120,47,0,0,0,0,46,118,111,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+361888);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
        HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        // All SDLEvents take the same amount of memory
        var sdlEventPtr = allocate(28, "i8", ALLOC_STACK);
  
        while (SDL.pollEvent(sdlEventPtr)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, sdlEventPtr]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _Mix_VolumeMusic(volume) {
      return SDL.setGetVolume(SDL.music, volume);
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  function _Mix_LoadMUS_RW() {
  return _Mix_LoadWAV_RW.apply(null, arguments)
  }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _Mix_Volume(channel, volume) {
      if (channel == -1) {
        for (var i = 0; i < SDL.numChannels-1; i++) {
          _Mix_Volume(i, volume);
        }
        return _Mix_Volume(SDL.numChannels-1, volume);
      }
      return SDL.setGetVolume(SDL.channels[channel], volume);
    }

  function _Mix_Playing(channel) {
      if (channel === -1) {
        var count = 0;
        for (var i = 0; i < SDL.channels.length; i++) {
          count += _Mix_Playing(i);
        }
        return count;
      }
      var info = SDL.channels[channel];
      if (info && info.audio && !info.audio.paused) {
        return 1;
      }
      return 0;
    }

  function _SDL_CreateRGBSurfaceFrom(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask) {
      var surf = SDL.makeSurface(width, height, 0, false, 'CreateRGBSurfaceFrom', rmask, gmask, bmask, amask);
  
      if (depth !== 32) {
        // TODO: Actually fill pixel data to created surface.
        // TODO: Take into account depth and pitch parameters.
        console.log('TODO: Partially unimplemented SDL_CreateRGBSurfaceFrom called!');
        return surf;
      }
      
      var data = SDL.surfaces[surf];
      var image = data.ctx.createImageData(width, height);
      var pitchOfDst = width * 4;
  
      for (var row = 0; row < height; ++row) {
        var baseOfSrc = row * pitch;
        var baseOfDst = row * pitchOfDst;
  
        for (var col = 0; col < width * 4; ++col) {
          image.data[baseOfDst + col] = HEAPU8[(((pixels)+(baseOfDst + col))>>0)];
        }
      }
  
      data.ctx.putImageData(image, 0, 0);
   
      return surf;
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['webGLContextAttributes'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = 0;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
   
        GLctx.getSupportedExtensions().forEach(function(ext) {
          ext = ext.replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(HEAP32[((_stdin)>>2)]);
    }

  function _SDL_ShowCursor(toggle) {
      switch (toggle) {
        case 0: // SDL_DISABLE
          if (Browser.isFullScreen) { // only try to lock the pointer when in full screen mode
            Module['canvas'].requestPointerLock();
            return 0;
          } else { // else return SDL_ENABLE to indicate the failure
            return 1;
          }
          break;
        case 1: // SDL_ENABLE
          Module['canvas'].exitPointerLock();
          return 1;
          break;
        case -1: // SDL_QUERY
          return !Browser.pointerLock;
          break;
        default:
          console.log( "SDL_ShowCursor called with unknown toggle parameter value: " + toggle + "." );
          break;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  function _Mix_FadeOutMusic() {
  return _Mix_HaltMusic.apply(null, arguments)
  }



  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _SDL_SetAlpha(surf, flag, alpha) {
      var surfData = SDL.surfaces[surf];
      surfData.alpha = alpha;
  
      if (!(flag & 0x00010000)) { // !SDL_SRCALPHA
        surfData.alpha = 255;
      }
    }

  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

  function _Mix_OpenAudio(frequency, format, channels, chunksize) {
      SDL.openAudioContext();
      SDL.allocateChannels(32);
      // Just record the values for a later call to Mix_QuickLoad_RAW
      SDL.mixerFrequency = frequency;
      SDL.mixerFormat = format;
      SDL.mixerNumChannels = channels;
      SDL.mixerChunkSize = chunksize;
      return 0;
    }

  var _BDtoIHigh=true;

  function _Mix_HaltChannel(channel) {
      function halt(channel) {
        var info = SDL.channels[channel];
        if (info.audio) {
          info.audio.pause();
          info.audio = null;
        }
        if (SDL.channelFinished) {
          Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
        }
      }
      if (channel != -1) {
        halt(channel);
      } else {
        for (var i = 0; i < SDL.channels.length; ++i) halt(i);
      }
      return 0;
    }


  function _SDL_PumpEvents(){
      SDL.events.forEach(function(event) {
        SDL.handleEvent(event);
      });
    }

  function _SDL_WM_SetCaption(title, icon) {
      title = title && Pointer_stringify(title);
      icon = icon && Pointer_stringify(icon);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  
  function ___errno_location() {
      return ___errno_state;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;



  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  
  function _SDL_AudioQuit() {
      for (var i = 0; i < SDL.numChannels; ++i) {
        if (SDL.channels[i].audio) {
          SDL.channels[i].audio.pause();
          SDL.channels[i].audio = undefined;
        }
      }
      if (SDL.music.audio) SDL.music.audio.pause();
      SDL.music.audio = undefined;
    }function _SDL_Quit() {
      _SDL_AudioQuit();
      Module.print('SDL_Quit called (and ignored)');
    }

  function _Mix_Resume(channel) {
      if (channel === -1) {
        for (var i = 0; i<SDL.channels.length;i++) {
          _Mix_Resume(i);
        }
        return;
      }
      var info = SDL.channels[channel];
      if (info && info.audio) info.audio.play();
    }

  function _clamp() {
  Module['printErr']('missing function: clamp'); abort(-1);
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_strcat"] = _strcat;

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      if (!stream.currReading) {
        try {
          // load the list of entries now, then readdir will traverse that list, to ignore changes to files
          stream.currReading = FS.readdir(stream.path);
        } catch (e) {
          return FS.handleFSError(e);
        }
      }
      if (stream.position < 0 || stream.position >= stream.currReading.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = stream.currReading[stream.position++];
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        try {
          // child may have been removed since we started to read this directory
          var child = FS.lookupNode(stream.node, name);
        } catch (e) {
          // skip to the next entry (not infinite since position is incremented until currReading.length)
          return _readdir_r(dirp, entry, result);
        }
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=stream.position;
      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))>>0)]=0;
      HEAP8[(((entry)+(10))>>0)]=type;
      HEAP32[((result)>>2)]=entry;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  var _BItoD=true;

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  function _abort() {
      Module['abort']();
    }


  function _SDL_GetKeyboardState(numKeys) {
      if (numKeys) {
        HEAP32[((numKeys)>>2)]=65536;
      }
      return SDL.keyboardState;
    }



  var _fabs=Math_abs;

  function _Mix_FadeInMusic() {
  Module['printErr']('missing function: Mix_FadeInMusic'); abort(-1);
  }

  function _Mix_CloseAudio() {
  return _SDL_CloseAudio.apply(null, arguments)
  }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  var _sqrt=Math_sqrt;


  var _abs=Math_abs;


  function _Mix_PlayingMusic() {
      return (SDL.music.audio && !SDL.music.audio.paused) ? 1 : 0;
    }

  function _Mix_SetDistance() {
  Module['printErr']('missing function: Mix_SetDistance'); abort(-1);
  }

  function _SDL_UpdateRect(surf, x, y, w, h) {
      // We actually do the whole screen in Unlock...
    }

  function _SDL_CreateRGBSurface(flags, width, height, depth, rmask, gmask, bmask, amask) {
      return SDL.makeSurface(width, height, flags, false, 'CreateRGBSurface', rmask, gmask, bmask, amask);
    }

  var _sin=Math_sin;

  function _Mix_PlayChannelTimed() {
  return _Mix_PlayChannel.apply(null, arguments)
  }


  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      var stream = FS.getStream(fd);
      if (stream.currReading) stream.currReading = null;
      return _close(fd);
    }

  function _SDL_Delay(delay) {
      if (!ENVIRONMENT_IS_WORKER) abort('SDL_Delay called on the main thread! Potential infinite loop, quitting.');
      // horrible busy-wait, but in a worker it at least does not block rendering
      var now = Date.now();
      while (Date.now() - now < delay) {}
    }

  function _Mix_AllocateChannels(num) {
      SDL.allocateChannels(num);
      return num;
    }

  function _Mix_FreeMusic() {
  return _Mix_FreeChunk.apply(null, arguments)
  }

  var _cos=Math_cos;

  function _SDL_SetColors(surf, colors, firstColor, nColors) {
      var surfData = SDL.surfaces[surf];
  
      // we should create colors array
      // only once cause client code
      // often wants to change portion 
      // of palette not all palette.
      if (!surfData.colors) {
        var buffer = new ArrayBuffer(256 * 4); // RGBA, A is unused, but faster this way
        surfData.colors = new Uint8Array(buffer);
        surfData.colors32 = new Uint32Array(buffer);
      } 
  
      for (var i = 0; i < nColors; ++i) {
        var index = (firstColor + i) * 4;
        surfData.colors[index] = HEAPU8[(((colors)+(i*4))>>0)];
        surfData.colors[index + 1] = HEAPU8[(((colors)+(i*4 + 1))>>0)];
        surfData.colors[index + 2] = HEAPU8[(((colors)+(i*4 + 2))>>0)];
        surfData.colors[index + 3] = 255; // opaque
      }
  
      return 1;
    }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  function _Mix_RewindMusic() {
  Module['printErr']('missing function: Mix_RewindMusic'); abort(-1);
  }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

   
  Module["_strcpy"] = _strcpy;


  function _SDL_FreeSurface(surf) {
      if (surf) SDL.freeSurface(surf);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _acos=Math_acos;

  function _SDL_RWFromMem() {
  return _SDL_RWFromConstMem.apply(null, arguments)
  }

FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
var GLctx; GL.init()
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iii": nullFunc_iii, "nullFunc_v": nullFunc_v, "invoke_iiii": invoke_iiii, "invoke_iii": invoke_iii, "invoke_v": invoke_v, "_fabs": _fabs, "_Mix_Playing": _Mix_Playing, "_fread": _fread, "_SDL_RWFromFile": _SDL_RWFromFile, "_Mix_AllocateChannels": _Mix_AllocateChannels, "_Mix_Volume": _Mix_Volume, "_SDL_GetError": _SDL_GetError, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_SDL_FreeSurface": _SDL_FreeSurface, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_sysconf": _sysconf, "_close": _close, "_Mix_PlayMusic": _Mix_PlayMusic, "_Mix_Resume": _Mix_Resume, "_Mix_LoadMUS_RW": _Mix_LoadMUS_RW, "_readdir": _readdir, "_SDL_RWFromMem": _SDL_RWFromMem, "_puts": _puts, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_write": _write, "_fsync": _fsync, "__exit": __exit, "_Mix_HaltMusic": _Mix_HaltMusic, "_TTF_FontHeight": _TTF_FontHeight, "_closedir": _closedir, "_clamp": _clamp, "_Mix_SetDistance": _Mix_SetDistance, "_send": _send, "_SDL_CreateRGBSurfaceFrom": _SDL_CreateRGBSurfaceFrom, "_Mix_RewindMusic": _Mix_RewindMusic, "_SDL_GetTicks": _SDL_GetTicks, "_Mix_CloseAudio": _Mix_CloseAudio, "_SDL_GetKeyboardState": _SDL_GetKeyboardState, "_opendir": _opendir, "_SDL_LockSurface": _SDL_LockSurface, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_SDL_UpdateRect": _SDL_UpdateRect, "_abs": _abs, "_printf": _printf, "_SDL_CreateRGBSurface": _SDL_CreateRGBSurface, "_TTF_SizeText": _TTF_SizeText, "_read": _read, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_exit": _exit, "_readdir_r": _readdir_r, "_putenv": _putenv, "_SDL_ShowCursor": _SDL_ShowCursor, "_SDL_SetAlpha": _SDL_SetAlpha, "_IMG_Load": _IMG_Load, "_lseek": _lseek, "_SDL_Delay": _SDL_Delay, "___buildEnvironment": ___buildEnvironment, "_SDL_PumpEvents": _SDL_PumpEvents, "_Mix_FreeMusic": _Mix_FreeMusic, "_pwrite": _pwrite, "_open": _open, "_SDL_Init": _SDL_Init, "_SDL_Quit": _SDL_Quit, "_perror": _perror, "_Mix_PlayingMusic": _Mix_PlayingMusic, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fseek": _fseek, "_getenv": _getenv, "_fclose": _fclose, "_SDL_UpperBlit": _SDL_UpperBlit, "_SDL_PauseAudio": _SDL_PauseAudio, "_recv": _recv, "_abort": _abort, "_Mix_PlayChannelTimed": _Mix_PlayChannelTimed, "_Mix_VolumeMusic": _Mix_VolumeMusic, "_fopen": _fopen, "_Mix_FadeInMusic": _Mix_FadeInMusic, "_sin": _sin, "_getchar": _getchar, "_acos": _acos, "_SDL_CloseAudio": _SDL_CloseAudio, "_fflush": _fflush, "_SDL_FreeRW": _SDL_FreeRW, "__reallyNegative": __reallyNegative, "_SDL_PollEvent": _SDL_PollEvent, "_cos": _cos, "_Mix_OpenAudio": _Mix_OpenAudio, "_fileno": _fileno, "_Mix_FreeChunk": _Mix_FreeChunk, "_SDL_WM_SetCaption": _SDL_WM_SetCaption, "_IMG_Load_RW": _IMG_Load_RW, "__formatString": __formatString, "_atexit": _atexit, "_Mix_HaltChannel": _Mix_HaltChannel, "_SDL_SetColors": _SDL_SetColors, "_pread": _pread, "_mkport": _mkport, "_SDL_AudioQuit": _SDL_AudioQuit, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_fgetc": _fgetc, "_fputc": _fputc, "_Mix_FadeOutMusic": _Mix_FadeOutMusic, "_strerror": _strerror, "_fgets": _fgets, "_fputs": _fputs, "_sqrt": _sqrt, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_v=env.nullFunc_v;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iii=env.invoke_iii;
  var invoke_v=env.invoke_v;
  var _fabs=env._fabs;
  var _Mix_Playing=env._Mix_Playing;
  var _fread=env._fread;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _Mix_AllocateChannels=env._Mix_AllocateChannels;
  var _Mix_Volume=env._Mix_Volume;
  var _SDL_GetError=env._SDL_GetError;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _SDL_FreeSurface=env._SDL_FreeSurface;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _Mix_Resume=env._Mix_Resume;
  var _Mix_LoadMUS_RW=env._Mix_LoadMUS_RW;
  var _readdir=env._readdir;
  var _SDL_RWFromMem=env._SDL_RWFromMem;
  var _puts=env._puts;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _write=env._write;
  var _fsync=env._fsync;
  var __exit=env.__exit;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _closedir=env._closedir;
  var _clamp=env._clamp;
  var _Mix_SetDistance=env._Mix_SetDistance;
  var _send=env._send;
  var _SDL_CreateRGBSurfaceFrom=env._SDL_CreateRGBSurfaceFrom;
  var _Mix_RewindMusic=env._Mix_RewindMusic;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _Mix_CloseAudio=env._Mix_CloseAudio;
  var _SDL_GetKeyboardState=env._SDL_GetKeyboardState;
  var _opendir=env._opendir;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _SDL_UpdateRect=env._SDL_UpdateRect;
  var _abs=env._abs;
  var _printf=env._printf;
  var _SDL_CreateRGBSurface=env._SDL_CreateRGBSurface;
  var _TTF_SizeText=env._TTF_SizeText;
  var _read=env._read;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _exit=env._exit;
  var _readdir_r=env._readdir_r;
  var _putenv=env._putenv;
  var _SDL_ShowCursor=env._SDL_ShowCursor;
  var _SDL_SetAlpha=env._SDL_SetAlpha;
  var _IMG_Load=env._IMG_Load;
  var _lseek=env._lseek;
  var _SDL_Delay=env._SDL_Delay;
  var ___buildEnvironment=env.___buildEnvironment;
  var _SDL_PumpEvents=env._SDL_PumpEvents;
  var _Mix_FreeMusic=env._Mix_FreeMusic;
  var _pwrite=env._pwrite;
  var _open=env._open;
  var _SDL_Init=env._SDL_Init;
  var _SDL_Quit=env._SDL_Quit;
  var _perror=env._perror;
  var _Mix_PlayingMusic=env._Mix_PlayingMusic;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fseek=env._fseek;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _recv=env._recv;
  var _abort=env._abort;
  var _Mix_PlayChannelTimed=env._Mix_PlayChannelTimed;
  var _Mix_VolumeMusic=env._Mix_VolumeMusic;
  var _fopen=env._fopen;
  var _Mix_FadeInMusic=env._Mix_FadeInMusic;
  var _sin=env._sin;
  var _getchar=env._getchar;
  var _acos=env._acos;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _fflush=env._fflush;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var __reallyNegative=env.__reallyNegative;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _cos=env._cos;
  var _Mix_OpenAudio=env._Mix_OpenAudio;
  var _fileno=env._fileno;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _SDL_WM_SetCaption=env._SDL_WM_SetCaption;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _Mix_HaltChannel=env._Mix_HaltChannel;
  var _SDL_SetColors=env._SDL_SetColors;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _SDL_AudioQuit=env._SDL_AudioQuit;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var _Mix_FadeOutMusic=env._Mix_FadeOutMusic;
  var _strerror=env._strerror;
  var _fgets=env._fgets;
  var _fputs=env._fputs;
  var _sqrt=env._sqrt;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _restartHeroScene() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8>>2]|0;
 $1 = (($0) + 68|0);
 HEAP32[$1>>2] = 1;
 $2 = HEAP32[8>>2]|0;
 $3 = (($2) + 2|0);
 ;HEAP16[$3+0>>1]=0|0;
 $4 = HEAP32[8>>2]|0;
 ;HEAP16[$4+0>>1]=0|0;
 $5 = HEAP32[8>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & -2;
 $8 = $7 | 1;
 HEAP16[$5>>1] = $8;
 $9 = HEAP32[8>>2]|0;
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & -3;
 $12 = $11 | 2;
 HEAP16[$9>>1] = $12;
 $13 = HEAP32[8>>2]|0;
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 & -5;
 $16 = $15 | 4;
 HEAP16[$13>>1] = $16;
 $17 = HEAP32[8>>2]|0;
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & -65;
 $20 = $19 | 64;
 HEAP16[$17>>1] = $20;
 $21 = HEAP32[8>>2]|0;
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 & -2049;
 $24 = $23 | 2048;
 HEAP16[$21>>1] = $24;
 $25 = HEAP32[8>>2]|0;
 $26 = (($25) + 100|0);
 HEAP32[$26>>2] = 1;
 $27 = HEAP32[8>>2]|0;
 $28 = (($27) + 120|0);
 HEAP32[$28>>2] = -1;
 $29 = HEAP32[8>>2]|0;
 $30 = (($29) + 136|0);
 HEAP32[$30>>2] = -1;
 $31 = HEAP32[8>>2]|0;
 $32 = (($31) + 128|0);
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[8>>2]|0;
 $34 = (($33) + 160|0);
 HEAP32[$34>>2] = -1;
 $35 = HEAP16[16>>1]|0;
 $36 = $35 << 16 >> 16;
 $37 = HEAP32[8>>2]|0;
 $38 = (($37) + 60|0);
 HEAP32[$38>>2] = $36;
 $39 = HEAP32[8>>2]|0;
 $40 = (($39) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41&65535;
 $43 = HEAP32[8>>2]|0;
 $44 = (($43) + 60|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45&65535;
 $47 = HEAP32[8>>2]|0;
 $48 = (($47) + 212|0);
 _setActorAngleSafe($42,$46,0,$48);
 $49 = HEAP16[24>>1]|0;
 $50 = $49 << 16 >> 16;
 _setBehaviour($50);
 HEAP16[32>>1] = 0;
 STACKTOP = sp;return;
}
function _setBehaviour($behaviour) {
 $behaviour = $behaviour|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bodyIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $behaviour;
 $1 = $0;
 switch ($1|0) {
 case 1:  {
  HEAP16[128>>1] = 1;
  $5 = HEAP32[40>>2]|0;
  $6 = HEAP32[8>>2]|0;
  $7 = (($6) + 32|0);
  HEAP32[$7>>2] = $5;
  break;
 }
 case 2:  {
  HEAP16[128>>1] = 2;
  $8 = HEAP32[56>>2]|0;
  $9 = HEAP32[8>>2]|0;
  $10 = (($9) + 32|0);
  HEAP32[$10>>2] = $8;
  break;
 }
 case 4:  {
  HEAP16[128>>1] = 4;
  $14 = HEAP32[88>>2]|0;
  $15 = HEAP32[8>>2]|0;
  $16 = (($15) + 32|0);
  HEAP32[$16>>2] = $14;
  break;
 }
 case 3:  {
  HEAP16[128>>1] = 3;
  $11 = HEAP32[72>>2]|0;
  $12 = HEAP32[8>>2]|0;
  $13 = (($12) + 32|0);
  HEAP32[$13>>2] = $11;
  break;
 }
 case 0:  {
  HEAP16[128>>1] = 0;
  $2 = HEAP32[104>>2]|0;
  $3 = HEAP32[8>>2]|0;
  $4 = (($3) + 32|0);
  HEAP32[$4>>2] = $2;
  break;
 }
 default: {
 }
 }
 $17 = HEAP32[8>>2]|0;
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $bodyIdx = $19;
 $20 = HEAP32[8>>2]|0;
 $21 = (($20) + 4|0);
 HEAP32[$21>>2] = -1;
 $22 = HEAP32[8>>2]|0;
 $23 = (($22) + 8|0);
 HEAP32[$23>>2] = -1;
 $24 = $bodyIdx;
 _initModelActor($24,0);
 $25 = HEAP32[8>>2]|0;
 $26 = (($25) + 12|0);
 HEAP32[$26>>2] = -1;
 $27 = HEAP32[8>>2]|0;
 $28 = (($27) + 192|0);
 HEAP32[$28>>2] = 0;
 (_initAnim(0,0,-1,0)|0);
 STACKTOP = sp;return;
}
function _loadHeroEntities() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[362224>>2]|0;
 (_hqrGetallocEntry(40,$0,1)|0);
 $1 = HEAP32[40>>2]|0;
 $2 = HEAP32[8>>2]|0;
 $3 = (($2) + 32|0);
 HEAP32[$3>>2] = $1;
 $4 = (_getBodyAnimIndex(0,0)|0);
 $5 = $4&65535;
 HEAP16[48>>1] = $5;
 $6 = HEAP32[362224>>2]|0;
 (_hqrGetallocEntry(56,$6,2)|0);
 $7 = HEAP32[56>>2]|0;
 $8 = HEAP32[8>>2]|0;
 $9 = (($8) + 32|0);
 HEAP32[$9>>2] = $7;
 $10 = (_getBodyAnimIndex(0,0)|0);
 $11 = $10&65535;
 HEAP16[64>>1] = $11;
 $12 = HEAP32[362224>>2]|0;
 (_hqrGetallocEntry(72,$12,3)|0);
 $13 = HEAP32[72>>2]|0;
 $14 = HEAP32[8>>2]|0;
 $15 = (($14) + 32|0);
 HEAP32[$15>>2] = $13;
 $16 = (_getBodyAnimIndex(0,0)|0);
 $17 = $16&65535;
 HEAP16[80>>1] = $17;
 $18 = HEAP32[362224>>2]|0;
 (_hqrGetallocEntry(88,$18,4)|0);
 $19 = HEAP32[88>>2]|0;
 $20 = HEAP32[8>>2]|0;
 $21 = (($20) + 32|0);
 HEAP32[$21>>2] = $19;
 $22 = (_getBodyAnimIndex(0,0)|0);
 $23 = $22&65535;
 HEAP16[96>>1] = $23;
 $24 = HEAP32[362224>>2]|0;
 (_hqrGetallocEntry(104,$24,0)|0);
 $25 = HEAP32[104>>2]|0;
 $26 = HEAP32[8>>2]|0;
 $27 = (($26) + 32|0);
 HEAP32[$27>>2] = $25;
 $28 = (_getBodyAnimIndex(0,0)|0);
 $29 = $28&65535;
 HEAP16[112>>1] = $29;
 $30 = HEAP32[120>>2]|0;
 $31 = HEAP32[8>>2]|0;
 $32 = (($31) + 24|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _initModelActor($bodyIdx,$actorIdx) {
 $bodyIdx = $bodyIdx|0;
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $currentIndex = 0, $entityIdx = 0, $localActor = 0, $ptr = 0, $result = 0, $result1 = 0, $result2 = 0, $var1 = 0, $var2 = 0, $var3 = 0, $var4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bodyIdx;
 $1 = $actorIdx;
 $result = 0;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = (136 + (($3*232)|0)|0);
 $localActor = $4;
 $5 = $localActor;
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6&65535) >>> 10;
 $8 = $7 & 1;
 $9 = ($8<<16>>16)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = $10 << 16 >> 16;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP16[128>>1]|0;
  $14 = $13 << 16 >> 16;
  $15 = ($14|0)==(4);
  if ($15) {
   $16 = $localActor;
   $17 = (($16) + 100|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $localActor;
    $21 = (($20) + 100|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)!=(1);
    if ($23) {
     _setBehaviour(0);
    }
   }
  }
 }
 $24 = $0;
 $25 = ($24|0)!=(-1);
 if ($25) {
  $26 = $0;
  $27 = $1;
  $28 = $27 << 16 >> 16;
  $29 = (_initBody($26,$28)|0);
  $entityIdx = $29;
 } else {
  $entityIdx = -1;
 }
 $30 = $entityIdx;
 $31 = ($30|0)!=(-1);
 if (!($31)) {
  $182 = $localActor;
  $183 = (($182) + 8|0);
  HEAP32[$183>>2] = -1;
  $184 = $localActor;
  $185 = (($184) + 4|0);
  HEAP32[$185>>2] = -1;
  $186 = $localActor;
  $187 = (($186) + 200|0);
  HEAP16[$187>>1] = 0;
  $188 = $localActor;
  $189 = (($188) + 200|0);
  $190 = (($189) + 2|0);
  HEAP16[$190>>1] = 0;
  $191 = $localActor;
  $192 = (($191) + 200|0);
  $193 = (($192) + 4|0);
  HEAP16[$193>>1] = 0;
  $194 = $localActor;
  $195 = (($194) + 200|0);
  $196 = (($195) + 4|0);
  $197 = (($196) + 2|0);
  HEAP16[$197>>1] = 0;
  $198 = $localActor;
  $199 = (($198) + 200|0);
  $200 = (($199) + 8|0);
  HEAP16[$200>>1] = 0;
  $201 = $localActor;
  $202 = (($201) + 200|0);
  $203 = (($202) + 8|0);
  $204 = (($203) + 2|0);
  HEAP16[$204>>1] = 0;
  STACKTOP = sp;return;
 }
 $32 = $localActor;
 $33 = (($32) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $entityIdx;
 $36 = ($34|0)==($35|0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = $entityIdx;
 $38 = $localActor;
 $39 = (($38) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = $0;
 $41 = $localActor;
 $42 = (($41) + 8|0);
 HEAP32[$42>>2] = $40;
 $43 = $localActor;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $currentIndex = $45;
 $46 = HEAP16[24192>>1]|0;
 $47 = $46 << 16 >> 16;
 $48 = ($47|0)==(-32000);
 if ($48) {
  $49 = $localActor;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (23352 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $ptr = $53;
  $54 = $ptr;
  $55 = (($54) + 2|0);
  $ptr = $55;
  $56 = $ptr;
  $57 = (($56) + 2|0);
  $ptr = $57;
  $58 = HEAP16[$56>>1]|0;
  $var1 = $58;
  $59 = $ptr;
  $60 = (($59) + 2|0);
  $ptr = $60;
  $61 = HEAP16[$59>>1]|0;
  $var2 = $61;
  $62 = $ptr;
  $63 = (($62) + 2|0);
  $ptr = $63;
  $64 = HEAP16[$62>>1]|0;
  $65 = $localActor;
  $66 = (($65) + 200|0);
  $67 = (($66) + 4|0);
  HEAP16[$67>>1] = $64;
  $68 = $ptr;
  $69 = (($68) + 2|0);
  $ptr = $69;
  $70 = HEAP16[$68>>1]|0;
  $71 = $localActor;
  $72 = (($71) + 200|0);
  $73 = (($72) + 4|0);
  $74 = (($73) + 2|0);
  HEAP16[$74>>1] = $70;
  $75 = $ptr;
  $76 = (($75) + 2|0);
  $ptr = $76;
  $77 = HEAP16[$75>>1]|0;
  $var3 = $77;
  $78 = $ptr;
  $79 = (($78) + 2|0);
  $ptr = $79;
  $80 = HEAP16[$78>>1]|0;
  $var4 = $80;
  $81 = $localActor;
  $82 = HEAP16[$81>>1]|0;
  $83 = ($82&65535) >>> 15;
  $84 = ($83<<16>>16)!=(0);
  if ($84) {
   $85 = $var2;
   $86 = $85 << 16 >> 16;
   $87 = $var1;
   $88 = $87 << 16 >> 16;
   $89 = (($86) - ($88))|0;
   $result1 = $89;
   $90 = $var4;
   $91 = $90 << 16 >> 16;
   $92 = $var3;
   $93 = $92 << 16 >> 16;
   $94 = (($91) - ($93))|0;
   $result2 = $94;
   $95 = $result1;
   $96 = $result2;
   $97 = ($95|0)<($96|0);
   if ($97) {
    $98 = $result1;
    $result = $98;
   } else {
    $99 = $result2;
    $result = $99;
   }
   $100 = $result;
   $101 = (Math_abs(($100|0))|0);
   $result = $101;
   $102 = $result;
   $103 = $102 >> 1;
   $result = $103;
  } else {
   $104 = $var2;
   $105 = $104 << 16 >> 16;
   $106 = $var1;
   $107 = $106 << 16 >> 16;
   $108 = (($105) - ($107))|0;
   $result1 = $108;
   $109 = $var4;
   $110 = $109 << 16 >> 16;
   $111 = $var3;
   $112 = $111 << 16 >> 16;
   $113 = (($110) - ($112))|0;
   $result2 = $113;
   $114 = $result2;
   $115 = $result1;
   $116 = (($114) + ($115))|0;
   $result = $116;
   $117 = $result;
   $118 = (Math_abs(($117|0))|0);
   $result = $118;
   $119 = $result;
   $120 = $119 >> 2;
   $result = $120;
  }
  $121 = $result;
  $122 = (0 - ($121))|0;
  $123 = $122&65535;
  $124 = $localActor;
  $125 = (($124) + 200|0);
  HEAP16[$125>>1] = $123;
  $126 = $result;
  $127 = $126&65535;
  $128 = $localActor;
  $129 = (($128) + 200|0);
  $130 = (($129) + 2|0);
  HEAP16[$130>>1] = $127;
  $131 = $result;
  $132 = (0 - ($131))|0;
  $133 = $132&65535;
  $134 = $localActor;
  $135 = (($134) + 200|0);
  $136 = (($135) + 8|0);
  HEAP16[$136>>1] = $133;
  $137 = $result;
  $138 = $137&65535;
  $139 = $localActor;
  $140 = (($139) + 200|0);
  $141 = (($140) + 8|0);
  $142 = (($141) + 2|0);
  HEAP16[$142>>1] = $138;
 } else {
  $143 = HEAP16[24192>>1]|0;
  $144 = $localActor;
  $145 = (($144) + 200|0);
  HEAP16[$145>>1] = $143;
  $146 = HEAP16[24216>>1]|0;
  $147 = $localActor;
  $148 = (($147) + 200|0);
  $149 = (($148) + 2|0);
  HEAP16[$149>>1] = $146;
  $150 = HEAP16[24200>>1]|0;
  $151 = $localActor;
  $152 = (($151) + 200|0);
  $153 = (($152) + 4|0);
  HEAP16[$153>>1] = $150;
  $154 = HEAP16[24224>>1]|0;
  $155 = $localActor;
  $156 = (($155) + 200|0);
  $157 = (($156) + 4|0);
  $158 = (($157) + 2|0);
  HEAP16[$158>>1] = $154;
  $159 = HEAP16[24208>>1]|0;
  $160 = $localActor;
  $161 = (($160) + 200|0);
  $162 = (($161) + 8|0);
  HEAP16[$162>>1] = $159;
  $163 = HEAP16[24232>>1]|0;
  $164 = $localActor;
  $165 = (($164) + 200|0);
  $166 = (($165) + 8|0);
  $167 = (($166) + 2|0);
  HEAP16[$167>>1] = $163;
 }
 $168 = $currentIndex;
 $169 = ($168|0)==(-1);
 if ($169) {
  STACKTOP = sp;return;
 }
 $170 = $localActor;
 $171 = (($170) + 180|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)==(-1);
 if ($173) {
  STACKTOP = sp;return;
 } else {
  $174 = $currentIndex;
  $175 = (23352 + ($174<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $localActor;
  $178 = (($177) + 4|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (23352 + ($179<<2)|0);
  $181 = HEAP32[$180>>2]|0;
  _copyActorInternAnim($176,$181);
  STACKTOP = sp;return;
 }
}
function _initSpriteActor($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $localActor = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $localActor = $2;
 $3 = $localActor;
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4&65535) >>> 10;
 $6 = $5 & 1;
 $7 = $6&65535;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $localActor;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(-1);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $localActor;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $localActor;
 $17 = (($16) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)!=($18|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[23336>>2]|0;
 $21 = $localActor;
 $22 = (($21) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23<<4;
 $25 = (($20) + ($24)|0);
 $26 = (($25) + 4|0);
 $ptr = $26;
 $27 = $localActor;
 $28 = (($27) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $localActor;
 $31 = (($30) + 4|0);
 HEAP32[$31>>2] = $29;
 $32 = $ptr;
 $33 = (($32) + 2|0);
 $ptr = $33;
 $34 = HEAP16[$32>>1]|0;
 $35 = $localActor;
 $36 = (($35) + 200|0);
 HEAP16[$36>>1] = $34;
 $37 = $ptr;
 $38 = (($37) + 2|0);
 $ptr = $38;
 $39 = HEAP16[$37>>1]|0;
 $40 = $localActor;
 $41 = (($40) + 200|0);
 $42 = (($41) + 2|0);
 HEAP16[$42>>1] = $39;
 $43 = $ptr;
 $44 = (($43) + 2|0);
 $ptr = $44;
 $45 = HEAP16[$43>>1]|0;
 $46 = $localActor;
 $47 = (($46) + 200|0);
 $48 = (($47) + 4|0);
 HEAP16[$48>>1] = $45;
 $49 = $ptr;
 $50 = (($49) + 2|0);
 $ptr = $50;
 $51 = HEAP16[$49>>1]|0;
 $52 = $localActor;
 $53 = (($52) + 200|0);
 $54 = (($53) + 4|0);
 $55 = (($54) + 2|0);
 HEAP16[$55>>1] = $51;
 $56 = $ptr;
 $57 = (($56) + 2|0);
 $ptr = $57;
 $58 = HEAP16[$56>>1]|0;
 $59 = $localActor;
 $60 = (($59) + 200|0);
 $61 = (($60) + 8|0);
 HEAP16[$61>>1] = $58;
 $62 = $ptr;
 $63 = (($62) + 2|0);
 $ptr = $63;
 $64 = HEAP16[$62>>1]|0;
 $65 = $localActor;
 $66 = (($65) + 200|0);
 $67 = (($66) + 8|0);
 $68 = (($67) + 2|0);
 HEAP16[$68>>1] = $64;
 STACKTOP = sp;return;
}
function _initBody($bodyIdx,$actorIdx) {
 $bodyIdx = $bodyIdx|0;
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyPtr = 0, $bodyPtr2 = 0, $bodyPtr3 = 0, $bodyPtr4 = 0, $flag = 0, $index = 0, $localActor = 0, $var1 = 0, $var2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $bodyIdx;
 $2 = $actorIdx;
 $3 = $2;
 $4 = (136 + (($3*232)|0)|0);
 $localActor = $4;
 $5 = $localActor;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $bodyPtr = $7;
 while(1) {
  $8 = $bodyPtr;
  $9 = (($8) + 1|0);
  $bodyPtr = $9;
  $10 = HEAP8[$8>>0]|0;
  $var1 = $10;
  $11 = $var1;
  $12 = $11&255;
  $13 = ($12|0)==(255);
  if ($13) {
   label = 3;
   break;
  }
  $14 = $bodyPtr;
  $15 = (($14) + 1|0);
  $bodyPtr2 = $15;
  $16 = $var1;
  $17 = $16&255;
  $18 = ($17|0)==(1);
  if ($18) {
   $19 = $bodyPtr;
   $20 = HEAP8[$19>>0]|0;
   $var2 = $20;
   $21 = $var2;
   $22 = $21&255;
   $23 = $1;
   $24 = ($22|0)==($23|0);
   if ($24) {
    break;
   }
  }
  $101 = $bodyPtr2;
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $bodyPtr2;
  $105 = (($104) + ($103)|0);
  $bodyPtr = $105;
 }
 if ((label|0) == 3) {
  $0 = -1;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $25 = $bodyPtr2;
 $26 = (($25) + 1|0);
 $bodyPtr3 = $26;
 $27 = $bodyPtr3;
 $28 = HEAP16[$27>>1]|0;
 $flag = $28;
 $29 = $flag;
 $30 = $29 << 16 >> 16;
 $31 = $30 & 32768;
 $32 = ($31|0)!=(0);
 do {
  if ($32) {
   $53 = $flag;
   $54 = $53 << 16 >> 16;
   $55 = $54 & 32767;
   $56 = $55&65535;
   $flag = $56;
   $57 = $flag;
   $58 = $57 << 16 >> 16;
   $index = $58;
  } else {
   $33 = HEAP32[23344>>2]|0;
   $34 = (23352 + ($33<<2)|0);
   $35 = HEAP32[362248>>2]|0;
   $36 = $flag;
   $37 = $36 << 16 >> 16;
   $38 = $37 & 65535;
   (_hqrGetallocEntry($34,$35,$38)|0);
   $39 = HEAP32[23344>>2]|0;
   $40 = (23352 + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)!=(0|0);
   if ($42) {
    $43 = HEAP32[23344>>2]|0;
    $44 = (23352 + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    _prepareIsoModel($45);
    $46 = HEAP32[23344>>2]|0;
    $47 = (($46) + 32768)|0;
    $48 = $47&65535;
    $49 = $bodyPtr3;
    HEAP16[$49>>1] = $48;
    $50 = HEAP32[23344>>2]|0;
    $index = $50;
    $51 = HEAP32[23344>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[23344>>2] = $52;
    break;
   } else {
    (_printf((24152|0),($vararg_buffer|0))|0);
    _exit(1);
    // unreachable;
   }
  }
 } while(0);
 $59 = $bodyPtr3;
 $60 = (($59) + 2|0);
 $bodyPtr3 = $60;
 HEAP16[24192>>1] = -32000;
 $61 = $bodyPtr3;
 $bodyPtr4 = $61;
 $62 = $bodyPtr3;
 $63 = (($62) + 1|0);
 $bodyPtr3 = $63;
 $64 = $bodyPtr4;
 $65 = HEAP8[$64>>0]|0;
 $66 = ($65<<24>>24)!=(0);
 if (!($66)) {
  $67 = $index;
  $0 = $67;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $68 = $bodyPtr3;
 $bodyPtr4 = $68;
 $69 = $bodyPtr3;
 $70 = (($69) + 1|0);
 $bodyPtr3 = $70;
 $71 = $bodyPtr4;
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = ($73|0)!=(14);
 if ($74) {
  $75 = $index;
  $0 = $75;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 } else {
  $76 = $bodyPtr3;
  $77 = HEAP16[$76>>1]|0;
  HEAP16[24192>>1] = $77;
  $78 = $bodyPtr3;
  $79 = (($78) + 2|0);
  $bodyPtr3 = $79;
  $80 = $bodyPtr3;
  $81 = HEAP16[$80>>1]|0;
  HEAP16[24200>>1] = $81;
  $82 = $bodyPtr3;
  $83 = (($82) + 2|0);
  $bodyPtr3 = $83;
  $84 = $bodyPtr3;
  $85 = HEAP16[$84>>1]|0;
  HEAP16[24208>>1] = $85;
  $86 = $bodyPtr3;
  $87 = (($86) + 2|0);
  $bodyPtr3 = $87;
  $88 = $bodyPtr3;
  $89 = HEAP16[$88>>1]|0;
  HEAP16[24216>>1] = $89;
  $90 = $bodyPtr3;
  $91 = (($90) + 2|0);
  $bodyPtr3 = $91;
  $92 = $bodyPtr3;
  $93 = HEAP16[$92>>1]|0;
  HEAP16[24224>>1] = $93;
  $94 = $bodyPtr3;
  $95 = (($94) + 2|0);
  $bodyPtr3 = $95;
  $96 = $bodyPtr3;
  $97 = HEAP16[$96>>1]|0;
  HEAP16[24232>>1] = $97;
  $98 = $bodyPtr3;
  $99 = (($98) + 2|0);
  $bodyPtr3 = $99;
  $100 = $index;
  $0 = $100;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 return (0)|0;
}
function _initActor($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $actor = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = $1 << 16 >> 16;
 $3 = (136 + (($2*232)|0)|0);
 $actor = $3;
 $4 = $actor;
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5&65535) >>> 10;
 $7 = $6 & 1;
 $8 = ($7<<16>>16)!=(0);
 if (!($8)) {
  $44 = $actor;
  $45 = (($44) + 4|0);
  HEAP32[$45>>2] = -1;
  $46 = $actor;
  $47 = (($46) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $0;
  _initModelActor($48,$49);
  $50 = $actor;
  $51 = (($50) + 180|0);
  HEAP32[$51>>2] = -1;
  $52 = $actor;
  $53 = (($52) + 192|0);
  HEAP32[$53>>2] = 0;
  $54 = $actor;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(-1);
  if ($57) {
   $58 = $actor;
   $59 = (($58) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $0;
   $62 = $61 << 16 >> 16;
   (_initAnim($60,0,-1,$62)|0);
  }
  $63 = $actor;
  $64 = (($63) + 60|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65&65535;
  $67 = $actor;
  $68 = (($67) + 60|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69&65535;
  $71 = $actor;
  $72 = (($71) + 212|0);
  _setActorAngleSafe($66,$70,0,$72);
  $73 = $actor;
  $74 = (($73) + 120|0);
  HEAP32[$74>>2] = -1;
  $75 = $actor;
  $76 = (($75) + 136|0);
  HEAP32[$76>>2] = -1;
  $77 = $actor;
  $78 = (($77) + 128|0);
  HEAP32[$78>>2] = 0;
  STACKTOP = sp;return;
 }
 $9 = $actor;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $actor;
  $14 = (($13) + 2|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 & -3;
  $17 = $16 | 2;
  HEAP16[$14>>1] = $17;
 }
 $18 = $actor;
 $19 = (($18) + 4|0);
 HEAP32[$19>>2] = -1;
 $20 = $0;
 $21 = $20 << 16 >> 16;
 _initSpriteActor($21);
 $22 = $actor;
 $23 = (($22) + 212|0);
 _setActorAngleSafe(0,0,0,$23);
 $24 = $actor;
 $25 = HEAP16[$24>>1]|0;
 $26 = ($25&65535) >>> 3;
 $27 = $26 & 1;
 $28 = ($27<<16>>16)!=(0);
 if ($28) {
  $29 = $actor;
  $30 = (($29) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $actor;
  $33 = (($32) + 168|0);
  HEAP32[$33>>2] = $31;
  $34 = $actor;
  $35 = (($34) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $actor;
  $38 = (($37) + 176|0);
  HEAP32[$38>>2] = $36;
  $39 = $actor;
  $40 = (($39) + 44|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $actor;
  $43 = (($42) + 172|0);
  HEAP32[$43>>2] = $41;
 }
 $73 = $actor;
 $74 = (($73) + 120|0);
 HEAP32[$74>>2] = -1;
 $75 = $actor;
 $76 = (($75) + 136|0);
 HEAP32[$76>>2] = -1;
 $77 = $actor;
 $78 = (($77) + 128|0);
 HEAP32[$78>>2] = 0;
 STACKTOP = sp;return;
}
function _resetActor($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $actor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = $1 << 16 >> 16;
 $3 = (136 + (($2*232)|0)|0);
 $actor = $3;
 $4 = $actor;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = $actor;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = $actor;
 $9 = (($8) + 36|0);
 HEAP32[$9>>2] = 0;
 $10 = $actor;
 $11 = (($10) + 40|0);
 HEAP32[$11>>2] = -1;
 $12 = $actor;
 $13 = (($12) + 44|0);
 HEAP32[$13>>2] = 0;
 $14 = $actor;
 $15 = (($14) + 200|0);
 HEAP16[$15>>1] = 0;
 $16 = $actor;
 $17 = (($16) + 200|0);
 $18 = (($17) + 2|0);
 HEAP16[$18>>1] = 0;
 $19 = $actor;
 $20 = (($19) + 200|0);
 $21 = (($20) + 4|0);
 HEAP16[$21>>1] = 0;
 $22 = $actor;
 $23 = (($22) + 200|0);
 $24 = (($23) + 4|0);
 $25 = (($24) + 2|0);
 HEAP16[$25>>1] = 0;
 $26 = $actor;
 $27 = (($26) + 200|0);
 $28 = (($27) + 8|0);
 HEAP16[$28>>1] = 0;
 $29 = $actor;
 $30 = (($29) + 200|0);
 $31 = (($30) + 8|0);
 $32 = (($31) + 2|0);
 HEAP16[$32>>1] = 0;
 $33 = $actor;
 $34 = (($33) + 60|0);
 HEAP32[$34>>2] = 0;
 $35 = $actor;
 $36 = (($35) + 64|0);
 HEAP32[$36>>2] = 40;
 $37 = $actor;
 $38 = (($37) + 68|0);
 HEAP32[$38>>2] = 0;
 $39 = $actor;
 $40 = (($39) + 72|0);
 HEAP32[$40>>2] = 0;
 $41 = $actor;
 $42 = (($41) + 76|0);
 HEAP32[$42>>2] = 0;
 $43 = $actor;
 $44 = (($43) + 80|0);
 HEAP32[$44>>2] = 0;
 $45 = $actor;
 $46 = (($45) + 84|0);
 HEAP32[$46>>2] = 0;
 $47 = $actor;
 $48 = (($47) + 20|0);
 HEAP32[$48>>2] = 0;
 $49 = $actor;
 $50 = (($49) + 148|0);
 HEAP32[$50>>2] = -1;
 $51 = $actor;
 $52 = (($51) + 156|0);
 HEAP32[$52>>2] = -1;
 $53 = $actor;
 $54 = (($53) + 160|0);
 HEAP32[$54>>2] = -1;
 $55 = $actor;
 ;HEAP16[$55+0>>1]=0|0;
 $56 = $actor;
 $57 = (($56) + 2|0);
 ;HEAP16[$57+0>>1]=0|0;
 $58 = $actor;
 $59 = (($58) + 104|0);
 HEAP32[$59>>2] = 50;
 $60 = $actor;
 $61 = (($60) + 100|0);
 HEAP32[$61>>2] = 1;
 $62 = $actor;
 $63 = (($62) + 52|0);
 HEAP32[$63>>2] = -1;
 $64 = $actor;
 $65 = (($64) + 164|0);
 HEAP32[$65>>2] = 0;
 $66 = $actor;
 $67 = (($66) + 168|0);
 HEAP32[$67>>2] = 0;
 $68 = $actor;
 $69 = (($68) + 176|0);
 HEAP32[$69>>2] = 0;
 $70 = $actor;
 $71 = (($70) + 172|0);
 HEAP32[$71>>2] = 0;
 $72 = $actor;
 $73 = (($72) + 4|0);
 HEAP32[$73>>2] = -1;
 $74 = $actor;
 $75 = (($74) + 180|0);
 HEAP32[$75>>2] = -1;
 $76 = $actor;
 $77 = (($76) + 192|0);
 HEAP32[$77>>2] = 0;
 $78 = $actor;
 $79 = (($78) + 188|0);
 HEAP32[$79>>2] = 0;
 $80 = $actor;
 $81 = (($80) + 212|0);
 _setActorAngleSafe(0,0,0,$81);
 $82 = $actor;
 $83 = (($82) + 120|0);
 HEAP32[$83>>2] = -1;
 $84 = $actor;
 $85 = (($84) + 128|0);
 HEAP32[$85>>2] = 0;
 STACKTOP = sp;return;
}
function _hitActor($actorIdx,$actorIdxAttacked,$strengthOfHit,$angle) {
 $actorIdx = $actorIdx|0;
 $actorIdxAttacked = $actorIdxAttacked|0;
 $strengthOfHit = $strengthOfHit|0;
 $angle = $angle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $actor = 0, $tmpAnimPos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actorIdxAttacked;
 $2 = $strengthOfHit;
 $3 = $angle;
 $4 = $1;
 $5 = (136 + (($4*232)|0)|0);
 $actor = $5;
 $6 = $actor;
 $7 = (($6) + 104|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = $actor;
 $12 = (($11) + 52|0);
 HEAP32[$12>>2] = $10;
 $13 = $actor;
 $14 = (($13) + 100|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ($15|0)<=($16|0);
 if (!($17)) {
  $73 = $1;
  (_initAnim(5,3,-1,$73)|0);
  STACKTOP = sp;return;
 }
 $18 = $actor;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(6);
 if ($21) {
  label = 6;
 } else {
  $22 = $actor;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(22);
  if ($25) {
   label = 6;
  } else {
   $37 = $3;
   $38 = ($37|0)!=(-1);
   if ($38) {
    $39 = $3;
    $40 = $39&65535;
    $41 = $3;
    $42 = $41&65535;
    $43 = $actor;
    $44 = (($43) + 212|0);
    _setActorAngleSafe($40,$42,0,$44);
   }
   $45 = (_rand()|0);
   $46 = $45 & 1;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $1;
    (_initAnim(22,3,-1,$48)|0);
   } else {
    $49 = $1;
    (_initAnim(6,3,-1,$49)|0);
   }
  }
 }
 if ((label|0) == 6) {
  $26 = $actor;
  $27 = (($26) + 188|0);
  $28 = HEAP32[$27>>2]|0;
  $tmpAnimPos = $28;
  $29 = $actor;
  $30 = (($29) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $1;
   _processAnimActions($33);
  }
  $34 = $tmpAnimPos;
  $35 = $actor;
  $36 = (($35) + 188|0);
  HEAP32[$36>>2] = $34;
 }
 $50 = $actor;
 $51 = (($50) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $actor;
 $54 = (($53) + 40|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 1000)|0;
 $57 = $actor;
 $58 = (($57) + 44|0);
 $59 = HEAP32[$58>>2]|0;
 _addExtraSpecial($52,$56,$59,0);
 $60 = $1;
 $61 = ($60|0)!=(0);
 if (!($61)) {
  HEAP16[24240>>1] = 1;
 }
 $62 = $2;
 $63 = $actor;
 $64 = (($63) + 104|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) - ($62))|0;
 HEAP32[$64>>2] = $66;
 $67 = $actor;
 $68 = (($67) + 104|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)<(0);
 if ($70) {
  $71 = $actor;
  $72 = (($71) + 104|0);
  HEAP32[$72>>2] = 0;
 }
 STACKTOP = sp;return;
}
function _processActorCarrier($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $actor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $actor;
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4&65535) >>> 14;
 $6 = $5 & 1;
 $7 = ($6<<16>>16)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $a = 0;
 while(1) {
  $8 = $a;
  $9 = HEAP32[24248>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $actor;
  $12 = (($11) + 156|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = ($13|0)==($14|0);
  if ($15) {
   $16 = $actor;
   $17 = (($16) + 156|0);
   HEAP32[$17>>2] = -1;
  }
  $18 = $a;
  $19 = (($18) + 1)|0;
  $a = $19;
 }
 STACKTOP = sp;return;
}
function _processActorExtraBonus($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $actor = 0;
 var $angle = 0, $bonusTable = 0, $currentBonus = 0, $numBonus = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bonusTable = sp + 24|0;
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $numBonus = 0;
 $a = 0;
 while(1) {
  $3 = $a;
  $4 = ($3|0)<(5);
  if (!($4)) {
   break;
  }
  $5 = $actor;
  $6 = (($5) + 56|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $a;
  $9 = (($8) + 4)|0;
  $10 = 1 << $9;
  $11 = $7 & $10;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $a;
   $14 = $13&255;
   $15 = $numBonus;
   $16 = (($15) + 1)|0;
   $numBonus = $16;
   $17 = (($bonusTable) + ($15)|0);
   HEAP8[$17>>0] = $14;
  }
  $18 = $a;
  $19 = (($18) + 1)|0;
  $a = $19;
 }
 $20 = $numBonus;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = (_rand()|0);
 $23 = $numBonus;
 $24 = (($22|0) % ($23|0))&-1;
 $25 = (($bonusTable) + ($24)|0);
 $26 = HEAP8[$25>>0]|0;
 $currentBonus = $26;
 $27 = HEAP16[24256>>1]|0;
 $28 = ($27<<16>>16)!=(0);
 if (!($28)) {
  $29 = $currentBonus;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(2);
  if ($31) {
   $currentBonus = 1;
  }
 }
 $32 = $currentBonus;
 $33 = $32 << 24 >> 24;
 $34 = (($33) + 3)|0;
 $35 = $34&255;
 $currentBonus = $35;
 $36 = $actor;
 $37 = (($36) + 2|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38&65535) >>> 5;
 $40 = $39 & 1;
 $41 = ($40<<16>>16)!=(0);
 if ($41) {
  $42 = $actor;
  $43 = (($42) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $actor;
  $46 = (($45) + 40|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $actor;
  $49 = (($48) + 44|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $currentBonus;
  $52 = $51 << 24 >> 24;
  $53 = $actor;
  $54 = (($53) + 92|0);
  $55 = HEAP32[$54>>2]|0;
  (_addExtraBonus($44,$47,$50,256,0,$52,$55)|0);
  $56 = $actor;
  $57 = (($56) + 36|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $actor;
  $60 = (($59) + 40|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $actor;
  $63 = (($62) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $0;
  _playSample(11,4096,1,$58,$61,$64,$65);
 } else {
  $66 = $actor;
  $67 = (($66) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $actor;
  $70 = (($69) + 44|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[8>>2]|0;
  $73 = (($72) + 36|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[8>>2]|0;
  $76 = (($75) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (_getAngleAndSetTargetActorDistance($68,$71,$74,$77)|0);
  $angle = $78;
  $79 = $actor;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $actor;
  $83 = (($82) + 40|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $actor;
  $86 = (($85) + 200|0);
  $87 = (($86) + 4|0);
  $88 = (($87) + 2|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = (($84) + ($90))|0;
  $92 = $actor;
  $93 = (($92) + 44|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $angle;
  $96 = $currentBonus;
  $97 = $96 << 24 >> 24;
  $98 = $actor;
  $99 = (($98) + 92|0);
  $100 = HEAP32[$99>>2]|0;
  (_addExtraBonus($81,$91,$94,200,$95,$97,$100)|0);
  $101 = $actor;
  $102 = (($101) + 36|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $actor;
  $105 = (($104) + 40|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $actor;
  $108 = (($107) + 200|0);
  $109 = (($108) + 4|0);
  $110 = (($109) + 2|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = (($106) + ($112))|0;
  $114 = $actor;
  $115 = (($114) + 44|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $0;
  _playSample(11,4096,1,$103,$113,$116,$117);
 }
 STACKTOP = sp;return;
}
function _setAnimAtKeyframe($keyframeIdx,$animPtr,$bodyPtr,$animTimerDataPtr) {
 $keyframeIdx = $keyframeIdx|0;
 $animPtr = $animPtr|0;
 $bodyPtr = $bodyPtr|0;
 $animTimerDataPtr = $animTimerDataPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $bodyHeader = 0, $i = 0, $numOfBonesInAnim = 0, $numOfElementInBody = 0, $numOfKeyframeInAnim = 0;
 var $numOfPointInBody = 0, $ptrToBodyData = 0, $ptrToData = 0, $ptrToDataBackup = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $keyframeIdx;
 $2 = $animPtr;
 $3 = $bodyPtr;
 $4 = $animTimerDataPtr;
 $5 = $2;
 $6 = HEAP16[$5>>1]|0;
 $numOfKeyframeInAnim = $6;
 $7 = $1;
 $8 = $numOfKeyframeInAnim;
 $9 = $8 << 16 >> 16;
 $10 = ($7|0)>=($9|0);
 if ($10) {
  $11 = $numOfKeyframeInAnim;
  $12 = $11 << 16 >> 16;
  $0 = $12;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $13 = $2;
 $14 = (($13) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $numOfBonesInAnim = $15;
 $16 = $numOfBonesInAnim;
 $17 = $16 << 16 >> 16;
 $18 = $17<<3;
 $19 = (($18) + 8)|0;
 $20 = $1;
 $21 = Math_imul($19, $20)|0;
 $22 = $2;
 $23 = (($22) + ($21)|0);
 $24 = (($23) + 8|0);
 $ptrToData = $24;
 $25 = $3;
 $26 = HEAP16[$25>>1]|0;
 $bodyHeader = $26;
 $27 = $bodyHeader;
 $28 = $27 << 16 >> 16;
 $29 = $28 & 2;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $0 = 0;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $31 = $3;
 $32 = (($31) + 14|0);
 $ptrToBodyData = $32;
 $33 = $ptrToData;
 $34 = $4;
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[25920>>2]|0;
 $36 = $4;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = $35;
 $38 = $ptrToBodyData;
 $39 = $ptrToBodyData;
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 << 16 >> 16;
 $42 = (($38) + ($41)|0);
 $43 = (($42) + 2|0);
 $ptrToBodyData = $43;
 $44 = $ptrToBodyData;
 $45 = HEAP16[$44>>1]|0;
 $numOfElementInBody = $45;
 $46 = $ptrToBodyData;
 $47 = $numOfElementInBody;
 $48 = $47 << 16 >> 16;
 $49 = ($48*6)|0;
 $50 = (($46) + ($49)|0);
 $51 = (($50) + 12|0);
 $ptrToBodyData = $51;
 $52 = $ptrToBodyData;
 $53 = (($52) + -10|0);
 $54 = HEAP16[$53>>1]|0;
 $numOfPointInBody = $54;
 $55 = $numOfBonesInAnim;
 $56 = $55 << 16 >> 16;
 $57 = $numOfPointInBody;
 $58 = $57 << 16 >> 16;
 $59 = ($56|0)>($58|0);
 if ($59) {
  $60 = $numOfPointInBody;
  $numOfBonesInAnim = $60;
 }
 $61 = $ptrToData;
 $ptrToDataBackup = $61;
 $62 = $ptrToData;
 $63 = (($62) + 8|0);
 $ptrToData = $63;
 while(1) {
  $i = 0;
  while(1) {
   $64 = $i;
   $65 = ($64|0)<(8);
   if (!($65)) {
    break;
   }
   $66 = $ptrToData;
   $67 = (($66) + 1|0);
   $ptrToData = $67;
   $68 = HEAP8[$66>>0]|0;
   $69 = $ptrToBodyData;
   $70 = (($69) + 1|0);
   $ptrToBodyData = $70;
   HEAP8[$69>>0] = $68;
   $71 = $i;
   $72 = (($71) + 1)|0;
   $i = $72;
  }
  $73 = $ptrToBodyData;
  $74 = (($73) + 30|0);
  $ptrToBodyData = $74;
  $75 = $numOfBonesInAnim;
  $76 = (($75) + -1)<<16>>16;
  $numOfBonesInAnim = $76;
  $77 = ($76<<16>>16)!=(0);
  if (!($77)) {
   break;
  }
 }
 $78 = $ptrToDataBackup;
 $79 = (($78) + 2|0);
 $ptrToData = $79;
 $80 = $ptrToData;
 $81 = HEAP16[$80>>1]|0;
 HEAP16[44296>>1] = $81;
 $82 = $ptrToData;
 $83 = (($82) + 2|0);
 $84 = HEAP16[$83>>1]|0;
 HEAP16[44304>>1] = $84;
 $85 = $ptrToData;
 $86 = (($85) + 4|0);
 $87 = HEAP16[$86>>1]|0;
 HEAP16[44312>>1] = $87;
 $88 = $ptrToData;
 $89 = (($88) + 6|0);
 $90 = HEAP16[$89>>1]|0;
 HEAP16[44272>>1] = $90;
 $91 = $ptrToData;
 $92 = (($91) + 10|0);
 $93 = HEAP16[$92>>1]|0;
 HEAP16[44280>>1] = $93;
 $0 = 1;
 $94 = $0;
 STACKTOP = sp;return ($94|0);
}
function _getNumKeyframes($animPtr) {
 $animPtr = $animPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $animPtr;
 $1 = $0;
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 << 16 >> 16;
 STACKTOP = sp;return ($3|0);
}
function _getStartKeyframe($animPtr) {
 $animPtr = $animPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $animPtr;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 STACKTOP = sp;return ($4|0);
}
function _applyAnimStepRotation($ptr,$bp,$bx) {
 $ptr = $ptr|0;
 $bp = $bp|0;
 $bx = $bx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $angleDif = 0, $computedAngle = 0, $dest = 0, $lastAngle = 0, $newAngle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $bp;
 $2 = $bx;
 $3 = HEAP32[44328>>2]|0;
 $4 = HEAP16[$3>>1]|0;
 $lastAngle = $4;
 $5 = HEAP32[44328>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[44328>>2] = $6;
 $7 = HEAP32[44320>>2]|0;
 $8 = HEAP16[$7>>1]|0;
 $newAngle = $8;
 $9 = HEAP32[44320>>2]|0;
 $10 = (($9) + 2|0);
 HEAP32[44320>>2] = $10;
 $11 = $lastAngle;
 $12 = $11 << 16 >> 16;
 $13 = $12 & 1023;
 $14 = $13&65535;
 $lastAngle = $14;
 $15 = $newAngle;
 $16 = $15 << 16 >> 16;
 $17 = $16 & 1023;
 $18 = $17&65535;
 $newAngle = $18;
 $19 = $newAngle;
 $20 = $19 << 16 >> 16;
 $21 = $lastAngle;
 $22 = $21 << 16 >> 16;
 $23 = (($20) - ($22))|0;
 $24 = $23&65535;
 $angleDif = $24;
 $25 = $angleDif;
 $26 = ($25<<16>>16)!=(0);
 if (!($26)) {
  $51 = $lastAngle;
  $computedAngle = $51;
  $52 = $0;
  $53 = HEAP32[$52>>2]|0;
  $dest = $53;
  $54 = $computedAngle;
  $55 = $54 << 16 >> 16;
  $56 = $55 & 1023;
  $57 = $56&65535;
  $58 = $dest;
  HEAP16[$58>>1] = $57;
  $59 = $0;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 2|0);
  $62 = $0;
  HEAP32[$62>>2] = $61;
  STACKTOP = sp;return;
 }
 $27 = $angleDif;
 $28 = $27 << 16 >> 16;
 $29 = ($28|0)<(-512);
 if ($29) {
  $30 = $angleDif;
  $31 = $30 << 16 >> 16;
  $32 = (($31) + 1024)|0;
  $33 = $32&65535;
  $angleDif = $33;
 } else {
  $34 = $angleDif;
  $35 = $34 << 16 >> 16;
  $36 = ($35|0)>(512);
  if ($36) {
   $37 = $angleDif;
   $38 = $37 << 16 >> 16;
   $39 = (($38) - 1024)|0;
   $40 = $39&65535;
   $angleDif = $40;
  }
 }
 $41 = $lastAngle;
 $42 = $41 << 16 >> 16;
 $43 = $angleDif;
 $44 = $43 << 16 >> 16;
 $45 = $1;
 $46 = Math_imul($44, $45)|0;
 $47 = $2;
 $48 = (($46|0) / ($47|0))&-1;
 $49 = (($42) + ($48))|0;
 $50 = $49&65535;
 $computedAngle = $50;
 $52 = $0;
 $53 = HEAP32[$52>>2]|0;
 $dest = $53;
 $54 = $computedAngle;
 $55 = $54 << 16 >> 16;
 $56 = $55 & 1023;
 $57 = $56&65535;
 $58 = $dest;
 HEAP16[$58>>1] = $57;
 $59 = $0;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 2|0);
 $62 = $0;
 HEAP32[$62>>2] = $61;
 STACKTOP = sp;return;
}
function _applyAnimStep($ptr,$bp,$bx) {
 $ptr = $ptr|0;
 $bp = $bp|0;
 $bx = $bx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $angleDif = 0, $computedAngle = 0;
 var $dest = 0, $lastAngle = 0, $newAngle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $bp;
 $2 = $bx;
 $3 = HEAP32[44328>>2]|0;
 $4 = HEAP16[$3>>1]|0;
 $lastAngle = $4;
 $5 = HEAP32[44328>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[44328>>2] = $6;
 $7 = HEAP32[44320>>2]|0;
 $8 = HEAP16[$7>>1]|0;
 $newAngle = $8;
 $9 = HEAP32[44320>>2]|0;
 $10 = (($9) + 2|0);
 HEAP32[44320>>2] = $10;
 $11 = $newAngle;
 $12 = $11 << 16 >> 16;
 $13 = $lastAngle;
 $14 = $13 << 16 >> 16;
 $15 = (($12) - ($14))|0;
 $16 = $15&65535;
 $angleDif = $16;
 $17 = $angleDif;
 $18 = ($17<<16>>16)!=(0);
 if ($18) {
  $19 = $lastAngle;
  $20 = $19 << 16 >> 16;
  $21 = $angleDif;
  $22 = $21 << 16 >> 16;
  $23 = $1;
  $24 = Math_imul($22, $23)|0;
  $25 = $2;
  $26 = (($24|0) / ($25|0))&-1;
  $27 = (($20) + ($26))|0;
  $28 = $27&65535;
  $computedAngle = $28;
 } else {
  $29 = $lastAngle;
  $computedAngle = $29;
 }
 $30 = $0;
 $31 = HEAP32[$30>>2]|0;
 $dest = $31;
 $32 = $computedAngle;
 $33 = $dest;
 HEAP16[$33>>1] = $32;
 $34 = $0;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 2|0);
 $37 = $0;
 HEAP32[$37>>2] = $36;
 STACKTOP = sp;return;
}
function _getAnimMode($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lptr = 0, $opcode = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $lptr = $2;
 $3 = HEAP32[44320>>2]|0;
 $4 = HEAP16[$3>>1]|0;
 $opcode = $4;
 $5 = $opcode;
 $6 = $lptr;
 HEAP16[$6>>1] = $5;
 $7 = HEAP32[44320>>2]|0;
 $8 = (($7) + 2|0);
 HEAP32[44320>>2] = $8;
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 2|0);
 $12 = $0;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[44328>>2]|0;
 $14 = (($13) + 2|0);
 HEAP32[44328>>2] = $14;
 $15 = $opcode;
 $16 = $15 << 16 >> 16;
 STACKTOP = sp;return ($16|0);
}
function _setModelAnimation($animState,$animPtr,$bodyPtr,$animTimerDataPtr) {
 $animState = $animState|0;
 $animPtr = $animPtr|0;
 $bodyPtr = $bodyPtr|0;
 $animTimerDataPtr = $animTimerDataPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $animOpcode = 0, $bodyHeader = 0, $destPtr = 0, $eax = 0, $ebp = 0, $ebx = 0, $edi = 0;
 var $keyFrameLength = 0, $keyFramePtrOld = 0, $numOfPointInAnim = 0, $numOfPointInBody = 0, $sourcePtr = 0, $tmpNumOfPoints = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $edi = sp + 40|0;
 $1 = $animState;
 $2 = $animPtr;
 $3 = $bodyPtr;
 $4 = $animTimerDataPtr;
 $5 = $2;
 $6 = (($5) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $numOfPointInAnim = $8;
 $9 = $numOfPointInAnim;
 $10 = $9<<3;
 $11 = (($10) + 8)|0;
 $12 = $1;
 $13 = Math_imul($11, $12)|0;
 $14 = $2;
 $15 = (($14) + ($13)|0);
 $16 = (($15) + 8|0);
 HEAP32[44320>>2] = $16;
 $17 = HEAP32[44320>>2]|0;
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $keyFrameLength = $19;
 $20 = $3;
 $21 = HEAP16[$20>>1]|0;
 $bodyHeader = $21;
 $22 = $bodyHeader;
 $23 = $22 << 16 >> 16;
 $24 = $23 & 2;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $0 = 0;
  $192 = $0;
  STACKTOP = sp;return ($192|0);
 }
 $26 = $3;
 $27 = (($26) + 16|0);
 HEAP32[$edi>>2] = $27;
 $28 = $4;
 $29 = HEAP32[$28>>2]|0;
 $ebx = $29;
 $30 = $4;
 $31 = (($30) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $ebp = $32;
 $33 = $ebx;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = HEAP32[44320>>2]|0;
  $ebx = $35;
  $36 = $keyFrameLength;
  $ebp = $36;
 }
 $37 = $ebx;
 HEAP32[44328>>2] = $37;
 $38 = HEAP32[$edi>>2]|0;
 $39 = (($38) + -2|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 << 16 >> 16;
 $eax = $41;
 $42 = $eax;
 $43 = HEAP32[$edi>>2]|0;
 $44 = (($43) + ($42)|0);
 HEAP32[$edi>>2] = $44;
 $45 = HEAP32[$edi>>2]|0;
 $46 = HEAP16[$45>>1]|0;
 $47 = $46 << 16 >> 16;
 $eax = $47;
 $48 = $eax;
 $49 = $eax;
 $50 = $49<<1;
 $51 = (($48) + ($50))|0;
 $eax = $51;
 $52 = HEAP32[$edi>>2]|0;
 $53 = $eax;
 $54 = $53<<1;
 $55 = (($52) + ($54)|0);
 $56 = (($55) + 12|0);
 HEAP32[$edi>>2] = $56;
 $57 = HEAP32[$edi>>2]|0;
 $58 = (($57) + -10|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59 << 16 >> 16;
 $numOfPointInBody = $60;
 $61 = $numOfPointInAnim;
 $62 = $numOfPointInBody;
 $63 = ($61|0)>($62|0);
 if ($63) {
  $64 = $numOfPointInBody;
  $numOfPointInAnim = $64;
 }
 $65 = HEAP32[25920>>2]|0;
 $66 = $ebp;
 $67 = (($65) - ($66))|0;
 $eax = $67;
 $68 = $eax;
 $69 = $keyFrameLength;
 $70 = ($68|0)>=($69|0);
 if ($70) {
  $71 = HEAP32[44320>>2]|0;
  $72 = (($71) + 8|0);
  $sourcePtr = $72;
  $73 = HEAP32[$edi>>2]|0;
  $destPtr = $73;
  while(1) {
   $74 = $sourcePtr;
   $75 = (($74) + 4|0);
   $sourcePtr = $75;
   $76 = HEAP32[$74>>2]|0;
   $77 = $destPtr;
   $78 = (($77) + 4|0);
   $destPtr = $78;
   HEAP32[$77>>2] = $76;
   $79 = $sourcePtr;
   $80 = (($79) + 4|0);
   $sourcePtr = $80;
   $81 = HEAP32[$79>>2]|0;
   $82 = $destPtr;
   $83 = (($82) + 4|0);
   $destPtr = $83;
   HEAP32[$82>>2] = $81;
   $84 = $destPtr;
   $85 = (($84) + 30|0);
   $destPtr = $85;
   $86 = $numOfPointInAnim;
   $87 = (($86) + -1)|0;
   $numOfPointInAnim = $87;
   $88 = ($87|0)!=(0);
   if (!($88)) {
    break;
   }
  }
  $89 = HEAP32[44320>>2]|0;
  $90 = $4;
  HEAP32[$90>>2] = $89;
  $91 = HEAP32[25920>>2]|0;
  $92 = $4;
  $93 = (($92) + 4|0);
  HEAP32[$93>>2] = $91;
  $94 = HEAP32[44320>>2]|0;
  $95 = (($94) + 2|0);
  $96 = HEAP16[$95>>1]|0;
  HEAP16[44296>>1] = $96;
  $97 = HEAP32[44320>>2]|0;
  $98 = (($97) + 4|0);
  $99 = HEAP16[$98>>1]|0;
  HEAP16[44304>>1] = $99;
  $100 = HEAP32[44320>>2]|0;
  $101 = (($100) + 6|0);
  $102 = HEAP16[$101>>1]|0;
  HEAP16[44312>>1] = $102;
  $103 = HEAP32[44320>>2]|0;
  $104 = (($103) + 8|0);
  $105 = HEAP16[$104>>1]|0;
  HEAP16[44272>>1] = $105;
  $106 = HEAP32[44320>>2]|0;
  $107 = (($106) + 12|0);
  $108 = HEAP16[$107>>1]|0;
  HEAP16[44280>>1] = $108;
  $0 = 1;
  $192 = $0;
  STACKTOP = sp;return ($192|0);
 }
 $109 = HEAP32[44320>>2]|0;
 $keyFramePtrOld = $109;
 $110 = HEAP32[44328>>2]|0;
 $111 = (($110) + 8|0);
 HEAP32[44328>>2] = $111;
 $112 = HEAP32[44320>>2]|0;
 $113 = (($112) + 8|0);
 HEAP32[44320>>2] = $113;
 $114 = HEAP32[44320>>2]|0;
 $115 = HEAP16[$114>>1]|0;
 HEAP16[44272>>1] = $115;
 $116 = HEAP32[44320>>2]|0;
 $117 = (($116) + 4|0);
 $118 = HEAP16[$117>>1]|0;
 $119 = $118 << 16 >> 16;
 $120 = $eax;
 $121 = Math_imul($119, $120)|0;
 $122 = $keyFrameLength;
 $123 = (($121|0) / ($122|0))&-1;
 $124 = $123&65535;
 HEAP16[44280>>1] = $124;
 $125 = HEAP32[44328>>2]|0;
 $126 = (($125) + 8|0);
 HEAP32[44328>>2] = $126;
 $127 = HEAP32[44320>>2]|0;
 $128 = (($127) + 8|0);
 HEAP32[44320>>2] = $128;
 $129 = HEAP32[$edi>>2]|0;
 $130 = (($129) + 38|0);
 HEAP32[$edi>>2] = $130;
 $131 = $numOfPointInAnim;
 $132 = (($131) + -1)|0;
 $numOfPointInAnim = $132;
 $133 = ($132|0)!=(0);
 do {
  if ($133) {
   $134 = $numOfPointInAnim;
   $135 = $134&65535;
   $tmpNumOfPoints = $135;
   while(1) {
    $136 = (_getAnimMode($edi)|0);
    $137 = $136&65535;
    $animOpcode = $137;
    $138 = $animOpcode;
    $139 = $138 << 16 >> 16;
    if ((($139|0) == 0)) {
     $140 = $eax;
     $141 = $keyFrameLength;
     _applyAnimStepRotation($edi,$140,$141);
     $142 = $eax;
     $143 = $keyFrameLength;
     _applyAnimStepRotation($edi,$142,$143);
     $144 = $eax;
     $145 = $keyFrameLength;
     _applyAnimStepRotation($edi,$144,$145);
    } else if ((($139|0) == 2)) {
     $152 = $eax;
     $153 = $keyFrameLength;
     _applyAnimStep($edi,$152,$153);
     $154 = $eax;
     $155 = $keyFrameLength;
     _applyAnimStep($edi,$154,$155);
     $156 = $eax;
     $157 = $keyFrameLength;
     _applyAnimStep($edi,$156,$157);
    } else if ((($139|0) == 1)) {
     $146 = $eax;
     $147 = $keyFrameLength;
     _applyAnimStep($edi,$146,$147);
     $148 = $eax;
     $149 = $keyFrameLength;
     _applyAnimStep($edi,$148,$149);
     $150 = $eax;
     $151 = $keyFrameLength;
     _applyAnimStep($edi,$150,$151);
    } else {
     label = 18;
     break;
    }
    $160 = HEAP32[$edi>>2]|0;
    $161 = (($160) + 30|0);
    HEAP32[$edi>>2] = $161;
    $162 = $tmpNumOfPoints;
    $163 = (($162) + -1)<<16>>16;
    $tmpNumOfPoints = $163;
    $164 = ($163<<16>>16)!=(0);
    if (!($164)) {
     label = 21;
     break;
    }
   }
   if ((label|0) == 18) {
    $158 = $animOpcode;
    $159 = $158 << 16 >> 16;
    HEAP32[$vararg_buffer>>2] = $159;
    (_printf((47280|0),($vararg_buffer|0))|0);
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 21) {
    break;
   }
  }
 } while(0);
 $165 = $keyFramePtrOld;
 $166 = (($165) + 2|0);
 $167 = HEAP16[$166>>1]|0;
 $168 = $167 << 16 >> 16;
 $169 = $eax;
 $170 = Math_imul($168, $169)|0;
 $171 = $keyFrameLength;
 $172 = (($170|0) / ($171|0))&-1;
 $173 = $172&65535;
 HEAP16[44296>>1] = $173;
 $174 = $keyFramePtrOld;
 $175 = (($174) + 4|0);
 $176 = HEAP16[$175>>1]|0;
 $177 = $176 << 16 >> 16;
 $178 = $eax;
 $179 = Math_imul($177, $178)|0;
 $180 = $keyFrameLength;
 $181 = (($179|0) / ($180|0))&-1;
 $182 = $181&65535;
 HEAP16[44304>>1] = $182;
 $183 = $keyFramePtrOld;
 $184 = (($183) + 6|0);
 $185 = HEAP16[$184>>1]|0;
 $186 = $185 << 16 >> 16;
 $187 = $eax;
 $188 = Math_imul($186, $187)|0;
 $189 = $keyFrameLength;
 $190 = (($188|0) / ($189|0))&-1;
 $191 = $190&65535;
 HEAP16[44312>>1] = $191;
 $0 = 0;
 $192 = $0;
 STACKTOP = sp;return ($192|0);
}
function _getBodyAnimIndex($animIdx,$actorIdx) {
 $animIdx = $animIdx|0;
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor = 0, $bodyPtr = 0, $costumePtr = 0, $ptr = 0, $ptr2 = 0, $realAnimIdx = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $animIdx;
 $2 = $actorIdx;
 $costumePtr = 0;
 $3 = $2;
 $4 = (136 + (($3*232)|0)|0);
 $actor = $4;
 $5 = $actor;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $bodyPtr = $7;
 while(1) {
  $8 = $bodyPtr;
  $9 = (($8) + 1|0);
  $bodyPtr = $9;
  $10 = HEAP8[$8>>0]|0;
  $type = $10;
  $11 = $type;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(-1);
  if ($13) {
   label = 3;
   break;
  }
  $14 = $bodyPtr;
  $15 = (($14) + 1|0);
  $ptr = $15;
  $16 = $type;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(3);
  if ($18) {
   $19 = $1;
   $20 = $bodyPtr;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($19|0)==($22|0);
   if ($23) {
    break;
   }
  }
  $42 = $ptr;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $ptr;
  $46 = (($45) + ($44)|0);
  $bodyPtr = $46;
 }
 if ((label|0) == 3) {
  HEAP32[120>>2] = 0;
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $24 = $ptr;
 $25 = (($24) + 1|0);
 $ptr = $25;
 $26 = $ptr;
 $27 = HEAP16[$26>>1]|0;
 $realAnimIdx = $27;
 $28 = $ptr;
 $29 = (($28) + 2|0);
 $ptr = $29;
 $30 = $ptr;
 $ptr2 = $30;
 $31 = $ptr;
 $32 = (($31) + 1|0);
 $ptr = $32;
 $33 = $ptr2;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $ptr;
  $38 = (($37) + -1|0);
  $costumePtr = $38;
 }
 $39 = $costumePtr;
 HEAP32[120>>2] = $39;
 $40 = $realAnimIdx;
 $41 = $40&65535;
 $0 = $41;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _stockAnimation($animPtr,$bodyPtr,$animTimerDataPtr) {
 $animPtr = $animPtr|0;
 $bodyPtr = $bodyPtr|0;
 $animTimerDataPtr = $animTimerDataPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $counter = 0, $edi = 0, $esi = 0, $playAnim = 0, $ptr = 0, $var0 = 0, $var1 = 0, $var2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $animPtr;
 $2 = $bodyPtr;
 $3 = $animTimerDataPtr;
 $4 = $2;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $playAnim = $6;
 $7 = $playAnim;
 $8 = $7 & 2;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $10 = $2;
 $11 = (($10) + 16|0);
 $ptr = $11;
 $12 = HEAP32[25920>>2]|0;
 $13 = $3;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = $1;
 $16 = $3;
 HEAP32[$16>>2] = $15;
 $17 = $ptr;
 $18 = (($17) + -2|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $var0 = $20;
 $21 = $ptr;
 $22 = $var0;
 $23 = (($21) + ($22)|0);
 $ptr = $23;
 $24 = $ptr;
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $var1 = $26;
 $27 = $var1;
 $28 = $var1;
 $29 = $28<<1;
 $30 = (($27) + ($29))|0;
 $var1 = $30;
 $31 = $ptr;
 $32 = $var1;
 $33 = $32<<1;
 $34 = (($31) + ($33)|0);
 $35 = (($34) + 2|0);
 $ptr = $35;
 $36 = $ptr;
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 << 16 >> 16;
 $var2 = $38;
 $39 = $var2;
 $counter = $39;
 $40 = $var2;
 $41 = $40<<3;
 $42 = (($41) + 8)|0;
 $var2 = $42;
 $43 = $1;
 $44 = (($43) + 8|0);
 $edi = $44;
 $45 = $ptr;
 $46 = (($45) + 10|0);
 $esi = $46;
 while(1) {
  $47 = $esi;
  $48 = (($47) + 4|0);
  $esi = $48;
  $49 = HEAP32[$47>>2]|0;
  $50 = $edi;
  $51 = (($50) + 4|0);
  $edi = $51;
  HEAP32[$50>>2] = $49;
  $52 = $esi;
  $53 = (($52) + 4|0);
  $esi = $53;
  $54 = HEAP32[$52>>2]|0;
  $55 = $edi;
  $56 = (($55) + 4|0);
  $edi = $56;
  HEAP32[$55>>2] = $54;
  $57 = $esi;
  $58 = (($57) + 30|0);
  $esi = $58;
  $59 = $counter;
  $60 = (($59) + -1)|0;
  $counter = $60;
  $61 = ($59|0)!=(0);
  if (!($61)) {
   break;
  }
 }
 $62 = $var2;
 $0 = $62;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _verifyAnimAtKeyframe($animIdx,$animPtr,$bodyPtr,$animTimerDataPtr) {
 $animIdx = $animIdx|0;
 $animPtr = $animPtr|0;
 $bodyPtr = $bodyPtr|0;
 $animTimerDataPtr = $animTimerDataPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyHeader = 0, $eax = 0, $ebp = 0, $ebx = 0, $keyFrameLength = 0, $keyFramePtrOld = 0, $numOfPointInAnim = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $animIdx;
 $2 = $animPtr;
 $3 = $bodyPtr;
 $4 = $animTimerDataPtr;
 $numOfPointInAnim = -1;
 $5 = $2;
 $6 = (($5) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $numOfPointInAnim = $8;
 $9 = $numOfPointInAnim;
 $10 = $9<<3;
 $11 = (($10) + 8)|0;
 $12 = $1;
 $13 = Math_imul($11, $12)|0;
 $14 = $2;
 $15 = (($14) + ($13)|0);
 $16 = (($15) + 8|0);
 HEAP32[44320>>2] = $16;
 $17 = HEAP32[44320>>2]|0;
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $keyFrameLength = $19;
 $20 = $3;
 $21 = HEAP16[$20>>1]|0;
 $bodyHeader = $21;
 $22 = $bodyHeader;
 $23 = $22 << 16 >> 16;
 $24 = $23 & 2;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $0 = 0;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $26 = $4;
 $27 = HEAP32[$26>>2]|0;
 $ebx = $27;
 $28 = $4;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $ebp = $30;
 $31 = $ebx;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  $33 = HEAP32[44320>>2]|0;
  $ebx = $33;
  $34 = $keyFrameLength;
  $ebp = $34;
 }
 $35 = $ebx;
 HEAP32[44328>>2] = $35;
 $36 = HEAP32[25920>>2]|0;
 $37 = $ebp;
 $38 = (($36) - ($37))|0;
 $eax = $38;
 $39 = $eax;
 $40 = $keyFrameLength;
 $41 = ($39|0)>=($40|0);
 if ($41) {
  $42 = HEAP32[44320>>2]|0;
  $43 = $4;
  HEAP32[$43>>2] = $42;
  $44 = HEAP32[25920>>2]|0;
  $45 = $4;
  $46 = (($45) + 4|0);
  HEAP32[$46>>2] = $44;
  $47 = HEAP32[44320>>2]|0;
  $48 = (($47) + 2|0);
  $49 = HEAP16[$48>>1]|0;
  HEAP16[44296>>1] = $49;
  $50 = HEAP32[44320>>2]|0;
  $51 = (($50) + 4|0);
  $52 = HEAP16[$51>>1]|0;
  HEAP16[44304>>1] = $52;
  $53 = HEAP32[44320>>2]|0;
  $54 = (($53) + 6|0);
  $55 = HEAP16[$54>>1]|0;
  HEAP16[44312>>1] = $55;
  $56 = HEAP32[44320>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP16[$57>>1]|0;
  HEAP16[44272>>1] = $58;
  $59 = HEAP32[44320>>2]|0;
  $60 = (($59) + 12|0);
  $61 = HEAP16[$60>>1]|0;
  HEAP16[44280>>1] = $61;
  $0 = 1;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $62 = HEAP32[44320>>2]|0;
 $keyFramePtrOld = $62;
 $63 = HEAP32[44328>>2]|0;
 $64 = (($63) + 8|0);
 HEAP32[44328>>2] = $64;
 $65 = HEAP32[44320>>2]|0;
 $66 = (($65) + 8|0);
 HEAP32[44320>>2] = $66;
 $67 = HEAP32[44320>>2]|0;
 $68 = HEAP16[$67>>1]|0;
 HEAP16[44272>>1] = $68;
 $69 = HEAP32[44320>>2]|0;
 $70 = (($69) + 4|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = $71 << 16 >> 16;
 $73 = $eax;
 $74 = Math_imul($72, $73)|0;
 $75 = $keyFrameLength;
 $76 = (($74|0) / ($75|0))&-1;
 $77 = $76&65535;
 HEAP16[44280>>1] = $77;
 $78 = HEAP32[44328>>2]|0;
 $79 = (($78) + 8|0);
 HEAP32[44328>>2] = $79;
 $80 = HEAP32[44320>>2]|0;
 $81 = (($80) + 8|0);
 HEAP32[44320>>2] = $81;
 $82 = $keyFramePtrOld;
 $83 = (($82) + 2|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = $eax;
 $87 = Math_imul($85, $86)|0;
 $88 = $keyFrameLength;
 $89 = (($87|0) / ($88|0))&-1;
 $90 = $89&65535;
 HEAP16[44296>>1] = $90;
 $91 = $keyFramePtrOld;
 $92 = (($91) + 4|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93 << 16 >> 16;
 $95 = $eax;
 $96 = Math_imul($94, $95)|0;
 $97 = $keyFrameLength;
 $98 = (($96|0) / ($97|0))&-1;
 $99 = $98&65535;
 HEAP16[44304>>1] = $99;
 $100 = $keyFramePtrOld;
 $101 = (($100) + 6|0);
 $102 = HEAP16[$101>>1]|0;
 $103 = $102 << 16 >> 16;
 $104 = $eax;
 $105 = Math_imul($103, $104)|0;
 $106 = $keyFrameLength;
 $107 = (($105|0) / ($106|0))&-1;
 $108 = $107&65535;
 HEAP16[44312>>1] = $108;
 $0 = 0;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function _readByte($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[$1>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 STACKTOP = sp;return ($4|0);
}
function _readWord($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $result = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[$4>>2] = $6;
 $7 = $result;
 STACKTOP = sp;return ($7|0);
}
function _skipBytes($data,$n) {
 $data = $data|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $n;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function _processAnimActions($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actionType = 0, $actor = 0, $animPos = 0, $cx = 0, $cx14 = 0, $data = 0, $distanceX = 0, $distanceX24 = 0, $distanceX33 = 0, $distanceY = 0, $distanceY25 = 0;
 var $distanceY34 = 0, $distanceZ = 0, $distanceZ26 = 0, $distanceZ35 = 0, $dx = 0, $dx15 = 0, $dx2 = 0, $dx8 = 0, $endAnimEntityIdx = 0, $frequency = 0, $index = 0, $newAngle = 0, $param1 = 0, $param129 = 0, $param2 = 0, $param230 = 0, $param3 = 0, $param331 = 0, $param337 = 0, $param4 = 0;
 var $param432 = 0, $param438 = 0, $repeat = 0, $sampleIdx = 0, $sampleIdx1 = 0, $sampleIdx17 = 0, $sampleIdx18 = 0, $sampleIdx19 = 0, $sampleIdx5 = 0, $spriteIdx = 0, $spriteIdx27 = 0, $spriteIdx36 = 0, $strength = 0, $strength20 = 0, $strength28 = 0, $targetActor = 0, $temp = 0, $throwX = 0, $throwX21 = 0, $throwY = 0;
 var $throwY22 = 0, $throwZ = 0, $throwZ23 = 0, $var = 0, $var16 = 0, $var_14 = 0, $var_1413 = 0, $var_144 = 0, $var_24 = 0, $var_2412 = 0, $var_243 = 0, $var_249 = 0, $var_8 = 0, $var_86 = 0, $var_C = 0, $var_C11 = 0, $var_C7 = 0, $yHeight = 0, $yHeight10 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $index = 0;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $actor;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (_malloc(4)|0);
 $data = $7;
 $8 = $actor;
 $9 = (($8) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $data;
 HEAP32[$11>>2] = $10;
 $12 = $data;
 $13 = (_readByte($12)|0);
 $14 = $13 << 24 >> 24;
 $endAnimEntityIdx = $14;
 while(1) {
  $15 = $index;
  $16 = (($15) + 1)|0;
  $index = $16;
  $17 = $endAnimEntityIdx;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   label = 60;
   break;
  }
  $19 = $data;
  $20 = (_readByte($19)|0);
  $21 = $20 << 24 >> 24;
  $22 = (($21) - 5)|0;
  $actionType = $22;
  $23 = $actionType;
  $24 = ($23|0)>=(16);
  if ($24) {
   label = 6;
   break;
  }
  $25 = $actionType;
  do {
   switch ($25|0) {
   case 0:  {
    $26 = $data;
    $27 = (_readByte($26)|0);
    $28 = $27 << 24 >> 24;
    $29 = (($28) - 1)|0;
    $animPos = $29;
    $30 = $data;
    $31 = (_readByte($30)|0);
    $strength = $31;
    $32 = $animPos;
    $33 = $actor;
    $34 = (($33) + 188|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($32|0)==($35|0);
    if ($36) {
     $37 = $strength;
     $38 = $37 << 24 >> 24;
     $39 = $actor;
     $40 = (($39) + 48|0);
     HEAP32[$40>>2] = $38;
     $41 = $actor;
     $42 = (($41) + 2|0);
     $43 = HEAP16[$42>>1]|0;
     $44 = $43 & -3;
     $45 = $44 | 2;
     HEAP16[$42>>1] = $45;
    }
    break;
   }
   case 1:  {
    $46 = $data;
    $47 = (_readByte($46)|0);
    $48 = $47 << 24 >> 24;
    $animPos = $48;
    $49 = $data;
    $50 = (_readWord($49)|0);
    $sampleIdx = $50;
    $51 = $animPos;
    $52 = $actor;
    $53 = (($52) + 188|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($51|0)==($54|0);
    if ($55) {
     $56 = $sampleIdx;
     $57 = $56 << 16 >> 16;
     $58 = $actor;
     $59 = (($58) + 36|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $actor;
     $62 = (($61) + 40|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $actor;
     $65 = (($64) + 44|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $0;
     _playSample($57,4096,1,$60,$63,$66,$67);
    }
    break;
   }
   case 2:  {
    $68 = $data;
    $69 = (_readByte($68)|0);
    $70 = $69 << 24 >> 24;
    $animPos = $70;
    $71 = $data;
    $72 = (_readWord($71)|0);
    $sampleIdx1 = $72;
    $73 = $data;
    $74 = (_readWord($73)|0);
    $frequency = $74;
    $75 = $animPos;
    $76 = $actor;
    $77 = (($76) + 188|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($75|0)==($78|0);
    if ($79) {
     $80 = (_rand()|0);
     $81 = $frequency;
     $82 = $81 << 16 >> 16;
     $83 = (($80|0) % ($82|0))&-1;
     $84 = (($83) + 4096)|0;
     $85 = $frequency;
     $86 = $85 << 16 >> 16;
     $87 = (Math_abs(($86|0))|0);
     $88 = $87 >> 1;
     $89 = (($84) - ($88))|0;
     $90 = $89&65535;
     $frequency = $90;
     $91 = $sampleIdx1;
     $92 = $91 << 16 >> 16;
     $93 = $frequency;
     $94 = $93 << 16 >> 16;
     $95 = $actor;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $actor;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $actor;
     $102 = (($101) + 44|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $0;
     _playSample($92,$94,1,$97,$100,$103,$104);
    }
    break;
   }
   case 12:  {
    $394 = $data;
    $395 = (_readByte($394)|0);
    $396 = $395 << 24 >> 24;
    $397 = (($396) - 1)|0;
    $animPos = $397;
    $398 = $animPos;
    $399 = $actor;
    $400 = (($399) + 188|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = ($398|0)==($401|0);
    if ($402) {
     $403 = HEAP16[24256>>1]|0;
     $404 = $403 << 16 >> 16;
     $405 = (122448 + ($404<<2)|0);
     $406 = HEAPU8[$405>>0]|(HEAPU8[$405+1>>0]<<8)|(HEAPU8[$405+2>>0]<<16)|(HEAPU8[$405+3>>0]<<24);
     $407 = $actor;
     $408 = (($407) + 48|0);
     HEAP32[$408>>2] = $406;
     $409 = $actor;
     $410 = (($409) + 2|0);
     $411 = HEAP16[$410>>1]|0;
     $412 = $411 & -3;
     $413 = $412 | 2;
     HEAP16[$410>>1] = $413;
    }
    break;
   }
   case 11:  {
    $360 = $data;
    $361 = (_readByte($360)|0);
    $362 = $361 << 24 >> 24;
    $animPos = $362;
    $363 = $animPos;
    $364 = $actor;
    $365 = (($364) + 188|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = ($363|0)==($366|0);
    if ($367) {
     $368 = $actor;
     $369 = (($368) + 196|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = $370 & 240;
     $372 = ($371|0)!=(240);
     if ($372) {
      $373 = $actor;
      $374 = (($373) + 196|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = $375 & 15;
      $377 = (($376) + 126)|0;
      $378 = $377&65535;
      $sampleIdx19 = $378;
      $379 = $sampleIdx19;
      $380 = $379 << 16 >> 16;
      $381 = (_rand()|0);
      $382 = (($381|0) % 1000)&-1;
      $383 = (($382) + 3596)|0;
      $384 = $actor;
      $385 = (($384) + 36|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = $actor;
      $388 = (($387) + 40|0);
      $389 = HEAP32[$388>>2]|0;
      $390 = $actor;
      $391 = (($390) + 44|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = $0;
      _playSample($380,$383,1,$386,$389,$392,$393);
     }
    }
    break;
   }
   case 13:  {
    $414 = $data;
    $415 = (_readByte($414)|0);
    $416 = $415 << 24 >> 24;
    $animPos = $416;
    $417 = $data;
    $418 = (_readWord($417)|0);
    $419 = $418 << 16 >> 16;
    $distanceX = $419;
    $420 = $data;
    $421 = (_readWord($420)|0);
    $422 = $421 << 16 >> 16;
    $distanceY = $422;
    $423 = $data;
    $424 = (_readWord($423)|0);
    $425 = $424 << 16 >> 16;
    $distanceZ = $425;
    $426 = $data;
    $427 = (_readByte($426)|0);
    $428 = $427 << 24 >> 24;
    $spriteIdx = $428;
    $429 = $data;
    $430 = (_readWord($429)|0);
    $431 = $430 << 16 >> 16;
    $param1 = $431;
    $432 = $data;
    $433 = (_readWord($432)|0);
    $434 = $433 << 16 >> 16;
    $param2 = $434;
    $435 = $data;
    $436 = (_readWord($435)|0);
    $437 = $436 << 16 >> 16;
    $param3 = $437;
    $438 = $data;
    $439 = (_readByte($438)|0);
    $440 = $439 << 24 >> 24;
    $param4 = $440;
    $441 = $data;
    $442 = (_readByte($441)|0);
    $443 = $442 << 24 >> 24;
    $strength20 = $443;
    $444 = $animPos;
    $445 = $actor;
    $446 = (($445) + 188|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = ($444|0)==($447|0);
    if ($448) {
     $449 = $distanceX;
     $450 = $distanceZ;
     $451 = $actor;
     $452 = (($451) + 60|0);
     $453 = HEAP32[$452>>2]|0;
     _rotateActor($449,$450,$453);
     $454 = HEAP32[38952>>2]|0;
     $455 = $actor;
     $456 = (($455) + 36|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = (($454) + ($457))|0;
     $throwX = $458;
     $459 = $distanceY;
     $460 = $actor;
     $461 = (($460) + 40|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = (($459) + ($462))|0;
     $throwY = $463;
     $464 = HEAP32[38968>>2]|0;
     $465 = $actor;
     $466 = (($465) + 44|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = (($464) + ($467))|0;
     $throwZ = $468;
     $469 = $0;
     $470 = $throwX;
     $471 = $throwY;
     $472 = $throwZ;
     $473 = $spriteIdx;
     $474 = $param1;
     $475 = $param2;
     $476 = $actor;
     $477 = (($476) + 60|0);
     $478 = HEAP32[$477>>2]|0;
     $479 = (($475) + ($478))|0;
     $480 = $param3;
     $481 = $param4;
     $482 = $strength20;
     (_addExtraThrow($469,$470,$471,$472,$473,$474,$479,$480,$481,$482)|0);
    }
    break;
   }
   case 3:  {
    $105 = $data;
    $106 = (_readByte($105)|0);
    $107 = $106 << 24 >> 24;
    $animPos = $107;
    $108 = $data;
    $109 = (_readWord($108)|0);
    $110 = $109 << 16 >> 16;
    $yHeight = $110;
    $111 = $data;
    $112 = (_readByte($111)|0);
    $113 = $112 << 24 >> 24;
    $var_C = $113;
    $114 = $data;
    $115 = (_readWord($114)|0);
    $116 = $115 << 16 >> 16;
    $cx = $116;
    $117 = $actor;
    $118 = (($117) + 60|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $data;
    $121 = (_readWord($120)|0);
    $122 = $121 << 16 >> 16;
    $123 = (($119) + ($122))|0;
    $dx = $123;
    $124 = $data;
    $125 = (_readWord($124)|0);
    $126 = $125 << 16 >> 16;
    $var_24 = $126;
    $127 = $data;
    $128 = (_readByte($127)|0);
    $129 = $128 << 24 >> 24;
    $var_14 = $129;
    $130 = $data;
    $131 = (_readByte($130)|0);
    $132 = $131 << 24 >> 24;
    $var = $132;
    $133 = $animPos;
    $134 = $actor;
    $135 = (($134) + 188|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($133|0)==($136|0);
    if ($137) {
     $138 = $0;
     $139 = $actor;
     $140 = (($139) + 36|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $actor;
     $143 = (($142) + 40|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $yHeight;
     $146 = (($144) + ($145))|0;
     $147 = $actor;
     $148 = (($147) + 44|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = $var_C;
     $151 = $cx;
     $152 = $dx;
     $153 = $var_24;
     $154 = $var_14;
     $155 = $var;
     (_addExtraThrow($138,$141,$146,$149,$150,$151,$152,$153,$154,$155)|0);
    }
    break;
   }
   case 4:  {
    $156 = $data;
    $157 = (_readByte($156)|0);
    $158 = $157 << 24 >> 24;
    $animPos = $158;
    $159 = $data;
    $160 = (_readWord($159)|0);
    $161 = $160 << 16 >> 16;
    $var_8 = $161;
    $162 = $data;
    $163 = (_readWord($162)|0);
    $164 = $163 << 16 >> 16;
    $dx2 = $164;
    $165 = $data;
    $166 = (_readWord($165)|0);
    $167 = $166 << 16 >> 16;
    $var_243 = $167;
    $168 = $data;
    $169 = (_readByte($168)|0);
    $170 = $169 << 24 >> 24;
    $var_144 = $170;
    $171 = HEAP16[38264>>1]|0;
    $172 = $171 << 16 >> 16;
    $173 = ($172|0)==(-1);
    if ($173) {
     $174 = $animPos;
     $175 = $actor;
     $176 = (($175) + 188|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ($174|0)==($177|0);
     if ($178) {
      $179 = $actor;
      $180 = (($179) + 36|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = $actor;
      $183 = (($182) + 40|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = $var_8;
      $186 = (($184) + ($185))|0;
      $187 = $actor;
      $188 = (($187) + 44|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $dx2;
      $191 = $actor;
      $192 = (($191) + 60|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = $var_243;
      $195 = $var_144;
      _addExtraThrowMagicball($181,$186,$189,$190,$193,$194,$195);
     }
    }
    break;
   }
   case 5:  {
    $196 = $data;
    $197 = (_readByte($196)|0);
    $198 = $197 << 24 >> 24;
    $animPos = $198;
    $199 = $data;
    $200 = (_readWord($199)|0);
    $sampleIdx5 = $200;
    $201 = $data;
    $202 = (_readWord($201)|0);
    $repeat = $202;
    $203 = $animPos;
    $204 = $actor;
    $205 = (($204) + 188|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($203|0)==($206|0);
    if ($207) {
     $208 = $sampleIdx5;
     $209 = $208 << 16 >> 16;
     $210 = $repeat;
     $211 = $210 << 16 >> 16;
     $212 = $actor;
     $213 = (($212) + 36|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = $actor;
     $216 = (($215) + 40|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $actor;
     $219 = (($218) + 44|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = $0;
     _playSample($209,4096,$211,$214,$217,$220,$221);
    }
    break;
   }
   case 6:  {
    $222 = $data;
    $223 = (_readByte($222)|0);
    $224 = $223 << 24 >> 24;
    $animPos = $224;
    $225 = $animPos;
    $226 = $actor;
    $227 = (($226) + 188|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($225|0)==($228|0);
    if ($229) {
     $230 = $data;
     $231 = (_readWord($230)|0);
     $232 = $231 << 16 >> 16;
     $var_86 = $232;
     $233 = $data;
     $234 = (_readByte($233)|0);
     $235 = $234 << 24 >> 24;
     $var_C7 = $235;
     $236 = $data;
     $237 = (_readByte($236)|0);
     $238 = $237 << 24 >> 24;
     $dx8 = $238;
     $239 = $data;
     $240 = (_readWord($239)|0);
     $241 = $240 << 16 >> 16;
     $var_249 = $241;
     $242 = $data;
     $243 = (_readByte($242)|0);
     $244 = $243 << 24 >> 24;
     $temp = $244;
     $245 = $0;
     $246 = $actor;
     $247 = (($246) + 36|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = $actor;
     $250 = (($249) + 40|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = $var_86;
     $253 = (($251) + ($252))|0;
     $254 = $actor;
     $255 = (($254) + 44|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = $var_C7;
     $258 = $dx8;
     $259 = $var_249;
     $260 = $temp;
     (_addExtraAiming($245,$248,$253,$256,$257,$258,$259,$260)|0);
    } else {
     $261 = $data;
     _skipBytes($261,6);
    }
    break;
   }
   case 14:  {
    $483 = $data;
    $484 = (_readByte($483)|0);
    $485 = $484 << 24 >> 24;
    $animPos = $485;
    $486 = $data;
    $487 = (_readWord($486)|0);
    $488 = $487 << 16 >> 16;
    $distanceX24 = $488;
    $489 = $data;
    $490 = (_readWord($489)|0);
    $491 = $490 << 16 >> 16;
    $distanceY25 = $491;
    $492 = $data;
    $493 = (_readWord($492)|0);
    $494 = $493 << 16 >> 16;
    $distanceZ26 = $494;
    $495 = $data;
    $496 = (_readByte($495)|0);
    $497 = $496 << 24 >> 24;
    $spriteIdx27 = $497;
    $498 = $data;
    $499 = (_readWord($498)|0);
    $500 = $499 << 16 >> 16;
    $param129 = $500;
    $501 = $data;
    $502 = (_readWord($501)|0);
    $503 = $502 << 16 >> 16;
    $param230 = $503;
    $504 = $data;
    $505 = (_readWord($504)|0);
    $506 = $505 << 16 >> 16;
    $param331 = $506;
    $507 = $data;
    $508 = (_readByte($507)|0);
    $509 = $508 << 24 >> 24;
    $param432 = $509;
    $510 = $data;
    $511 = (_readByte($510)|0);
    $512 = $511 << 24 >> 24;
    $strength28 = $512;
    $513 = $animPos;
    $514 = $actor;
    $515 = (($514) + 188|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = ($513|0)==($516|0);
    if ($517) {
     $518 = $actor;
     $519 = (($518) + 40|0);
     $520 = HEAP32[$519>>2]|0;
     $521 = HEAP32[8>>2]|0;
     $522 = (($521) + 40|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = $actor;
     $525 = (($524) + 36|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = $actor;
     $528 = (($527) + 44|0);
     $529 = HEAP32[$528>>2]|0;
     $530 = HEAP32[8>>2]|0;
     $531 = (($530) + 36|0);
     $532 = HEAP32[$531>>2]|0;
     $533 = HEAP32[8>>2]|0;
     $534 = (($533) + 44|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = (_getDistance2D($526,$529,$532,$535)|0);
     $537 = (_getAngleAndSetTargetActorDistance($520,0,$523,$536)|0);
     $newAngle = $537;
     $538 = $distanceX24;
     $539 = $distanceZ26;
     $540 = $actor;
     $541 = (($540) + 60|0);
     $542 = HEAP32[$541>>2]|0;
     _rotateActor($538,$539,$542);
     $543 = HEAP32[38952>>2]|0;
     $544 = $actor;
     $545 = (($544) + 36|0);
     $546 = HEAP32[$545>>2]|0;
     $547 = (($543) + ($546))|0;
     $throwX21 = $547;
     $548 = $distanceY25;
     $549 = $actor;
     $550 = (($549) + 40|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = (($548) + ($551))|0;
     $throwY22 = $552;
     $553 = HEAP32[38968>>2]|0;
     $554 = $actor;
     $555 = (($554) + 44|0);
     $556 = HEAP32[$555>>2]|0;
     $557 = (($553) + ($556))|0;
     $throwZ23 = $557;
     $558 = $0;
     $559 = $throwX21;
     $560 = $throwY22;
     $561 = $throwZ23;
     $562 = $spriteIdx27;
     $563 = $param129;
     $564 = $newAngle;
     $565 = (($563) + ($564))|0;
     $566 = $param230;
     $567 = $actor;
     $568 = (($567) + 60|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = (($566) + ($569))|0;
     $571 = $param331;
     $572 = $param432;
     $573 = $strength28;
     (_addExtraThrow($558,$559,$560,$561,$562,$565,$570,$571,$572,$573)|0);
    }
    break;
   }
   case 15:  {
    $574 = $data;
    $575 = (_readByte($574)|0);
    $576 = $575 << 24 >> 24;
    $animPos = $576;
    $577 = $data;
    $578 = (_readWord($577)|0);
    $579 = $578 << 16 >> 16;
    $distanceX33 = $579;
    $580 = $data;
    $581 = (_readWord($580)|0);
    $582 = $581 << 16 >> 16;
    $distanceY34 = $582;
    $583 = $data;
    $584 = (_readWord($583)|0);
    $585 = $584 << 16 >> 16;
    $distanceZ35 = $585;
    $586 = $data;
    $587 = (_readByte($586)|0);
    $588 = $587 << 24 >> 24;
    $spriteIdx36 = $588;
    $589 = $data;
    $590 = (_readByte($589)|0);
    $591 = $590 << 24 >> 24;
    $targetActor = $591;
    $592 = $data;
    $593 = (_readWord($592)|0);
    $594 = $593 << 16 >> 16;
    $param337 = $594;
    $595 = $data;
    $596 = (_readByte($595)|0);
    $597 = $596 << 24 >> 24;
    $param438 = $597;
    $598 = $animPos;
    $599 = $actor;
    $600 = (($599) + 188|0);
    $601 = HEAP32[$600>>2]|0;
    $602 = ($598|0)==($601|0);
    if ($602) {
     $603 = $distanceX33;
     $604 = $distanceZ35;
     $605 = $actor;
     $606 = (($605) + 60|0);
     $607 = HEAP32[$606>>2]|0;
     _rotateActor($603,$604,$607);
     $608 = $0;
     $609 = $actor;
     $610 = (($609) + 36|0);
     $611 = HEAP32[$610>>2]|0;
     $612 = HEAP32[38952>>2]|0;
     $613 = (($611) + ($612))|0;
     $614 = $actor;
     $615 = (($614) + 40|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $distanceY34;
     $618 = (($616) + ($617))|0;
     $619 = $actor;
     $620 = (($619) + 44|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = $distanceZ35;
     $623 = (($621) + ($622))|0;
     $624 = $spriteIdx36;
     $625 = $targetActor;
     $626 = $param337;
     $627 = $param438;
     (_addExtraAiming($608,$613,$618,$623,$624,$625,$626,$627)|0);
    }
    break;
   }
   case 9:  {
    break;
   }
   case 7:  {
    $262 = $data;
    $263 = (_readByte($262)|0);
    $264 = $263 << 24 >> 24;
    $animPos = $264;
    $265 = $data;
    $266 = (_readWord($265)|0);
    $267 = $266 << 16 >> 16;
    $yHeight10 = $267;
    $268 = $data;
    $269 = (_readByte($268)|0);
    $270 = $269 << 24 >> 24;
    $var_C11 = $270;
    $271 = $data;
    $272 = (_readWord($271)|0);
    $273 = $272 << 16 >> 16;
    $dx15 = $273;
    $274 = $actor;
    $275 = (($274) + 60|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $data;
    $278 = (_readWord($277)|0);
    $279 = $278 << 16 >> 16;
    $280 = (($276) + ($279))|0;
    $cx14 = $280;
    $281 = $data;
    $282 = (_readWord($281)|0);
    $283 = $282 << 16 >> 16;
    $var_2412 = $283;
    $284 = $data;
    $285 = (_readByte($284)|0);
    $286 = $285 << 24 >> 24;
    $var_1413 = $286;
    $287 = $data;
    $288 = (_readByte($287)|0);
    $289 = $288 << 24 >> 24;
    $var16 = $289;
    $290 = $animPos;
    $291 = $actor;
    $292 = (($291) + 188|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = ($290|0)==($293|0);
    if ($294) {
     $295 = $0;
     $296 = $actor;
     $297 = (($296) + 36|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = $actor;
     $300 = (($299) + 40|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = $yHeight10;
     $303 = (($301) + ($302))|0;
     $304 = $actor;
     $305 = (($304) + 44|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $var_C11;
     $308 = $dx15;
     $309 = $cx14;
     $310 = $var_2412;
     $311 = $var_1413;
     $312 = $var16;
     (_addExtraThrow($295,$298,$303,$306,$307,$308,$309,$310,$311,$312)|0);
    }
    break;
   }
   case 8:  {
    $313 = $data;
    $314 = (_readByte($313)|0);
    $315 = $314 << 24 >> 24;
    $animPos = $315;
    $316 = $data;
    $317 = (_readByte($316)|0);
    $318 = $317 << 24 >> 24;
    $sampleIdx17 = $318;
    $319 = $data;
    _skipBytes($319,1);
    $320 = $animPos;
    $321 = $actor;
    $322 = (($321) + 188|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = ($320|0)==($323|0);
    if ($324) {
     $325 = $sampleIdx17;
     _stopSample($325);
    }
    break;
   }
   case 10:  {
    $326 = $data;
    $327 = (_readByte($326)|0);
    $328 = $327 << 24 >> 24;
    $animPos = $328;
    $329 = $animPos;
    $330 = $actor;
    $331 = (($330) + 188|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = ($329|0)==($332|0);
    if ($333) {
     $334 = $actor;
     $335 = (($334) + 196|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = $336 & 240;
     $338 = ($337|0)!=(240);
     if ($338) {
      $339 = $actor;
      $340 = (($339) + 196|0);
      $341 = HEAP32[$340>>2]|0;
      $342 = $341 & 15;
      $343 = (($342) + 126)|0;
      $344 = $343&65535;
      $sampleIdx18 = $344;
      $345 = $sampleIdx18;
      $346 = $345 << 16 >> 16;
      $347 = (_rand()|0);
      $348 = (($347|0) % 1000)&-1;
      $349 = (($348) + 3596)|0;
      $350 = $actor;
      $351 = (($350) + 36|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = $actor;
      $354 = (($353) + 40|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = $actor;
      $357 = (($356) + 44|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = $0;
      _playSample($346,$349,1,$352,$355,$358,$359);
     }
    }
    break;
   }
   default: {
   }
   }
  } while(0);
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 60) {
  $628 = $data;
  _free($628);
  STACKTOP = sp;return;
 }
}
function _initAnim($newAnim,$animType,$animExtra,$actorIdx) {
 $newAnim = $newAnim|0;
 $animType = $animType|0;
 $animExtra = $animExtra|0;
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actor = 0, $animIndex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $newAnim;
 $2 = $animType;
 $3 = $animExtra;
 $4 = $actorIdx;
 $5 = $4;
 $6 = (136 + (($5*232)|0)|0);
 $actor = $6;
 $7 = $actor;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(-1);
 if ($10) {
  $0 = 0;
  $150 = $0;
  STACKTOP = sp;return ($150|0);
 }
 $11 = $actor;
 $12 = HEAP16[$11>>1]|0;
 $13 = ($12&65535) >>> 10;
 $14 = $13 & 1;
 $15 = ($14<<16>>16)!=(0);
 if ($15) {
  $0 = 0;
  $150 = $0;
  STACKTOP = sp;return ($150|0);
 }
 $16 = $1;
 $17 = $actor;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)==($19|0);
 if ($20) {
  $21 = $actor;
  $22 = (($21) + 180|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(-1);
  if ($24) {
   $0 = 1;
   $150 = $0;
   STACKTOP = sp;return ($150|0);
  }
 }
 $25 = $3;
 $26 = $25&255;
 $27 = ($26|0)==(255);
 if ($27) {
  $28 = $actor;
  $29 = (($28) + 192|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(2);
  if ($31) {
   $32 = $actor;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34&255;
   $3 = $35;
  }
 }
 $36 = $1;
 $37 = $4;
 $38 = (_getBodyAnimIndex($36,$37)|0);
 $animIndex = $38;
 $39 = $animIndex;
 $40 = ($39|0)==(-1);
 if ($40) {
  $41 = $4;
  $42 = (_getBodyAnimIndex(0,$41)|0);
  $animIndex = $42;
 }
 $43 = $2;
 $44 = $43 << 16 >> 16;
 $45 = ($44|0)!=(4);
 if ($45) {
  $46 = $actor;
  $47 = (($46) + 192|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(2);
  if ($49) {
   $50 = $1;
   $51 = $actor;
   $52 = (($51) + 16|0);
   HEAP32[$52>>2] = $50;
   $0 = 0;
   $150 = $0;
   STACKTOP = sp;return ($150|0);
  }
 }
 $53 = $2;
 $54 = $53 << 16 >> 16;
 $55 = ($54|0)==(3);
 if ($55) {
  $2 = 2;
  $56 = $actor;
  $57 = (($56) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58&255;
  $3 = $59;
  $60 = $3;
  $61 = $60&255;
  $62 = ($61|0)==(15);
  if ($62) {
   label = 21;
  } else {
   $63 = $3;
   $64 = $63&255;
   $65 = ($64|0)==(7);
   if ($65) {
    label = 21;
   } else {
    $66 = $3;
    $67 = $66&255;
    $68 = ($67|0)==(8);
    if ($68) {
     label = 21;
    } else {
     $69 = $3;
     $70 = $69&255;
     $71 = ($70|0)==(9);
     if ($71) {
      label = 21;
     }
    }
   }
  }
  if ((label|0) == 21) {
   $3 = 0;
  }
 }
 $72 = $2;
 $73 = $72 << 16 >> 16;
 $74 = ($73|0)==(4);
 if ($74) {
  $2 = 2;
 }
 $75 = $actor;
 $76 = (($75) + 180|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(-1);
 if ($78) {
  $79 = $animIndex;
  $80 = (39472 + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $actor;
  $83 = (($82) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (23352 + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $actor;
  $88 = (($87) + 224|0);
  (_setAnimAtKeyframe(0,$81,$86,$88)|0);
 } else {
  $89 = HEAP32[44344>>2]|0;
  $90 = $actor;
  $91 = (($90) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (23352 + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $actor;
  $96 = (($95) + 224|0);
  $97 = (_stockAnimation($89,$94,$96)|0);
  $98 = HEAP32[44344>>2]|0;
  $99 = (($98) + ($97)|0);
  HEAP32[44344>>2] = $99;
  $100 = HEAP32[44336>>2]|0;
  $101 = (($100) + 4488|0);
  $102 = HEAP32[44344>>2]|0;
  $103 = ($101>>>0)<($102>>>0);
  if ($103) {
   $104 = HEAP32[44336>>2]|0;
   HEAP32[44344>>2] = $104;
  }
 }
 $105 = $animIndex;
 $106 = $actor;
 $107 = (($106) + 180|0);
 HEAP32[$107>>2] = $105;
 $108 = $1;
 $109 = $actor;
 $110 = (($109) + 12|0);
 HEAP32[$110>>2] = $108;
 $111 = $3;
 $112 = $111&255;
 $113 = $actor;
 $114 = (($113) + 16|0);
 HEAP32[$114>>2] = $112;
 $115 = HEAP32[120>>2]|0;
 $116 = $actor;
 $117 = (($116) + 24|0);
 HEAP32[$117>>2] = $115;
 $118 = $2;
 $119 = $118 << 16 >> 16;
 $120 = $actor;
 $121 = (($120) + 192|0);
 HEAP32[$121>>2] = $119;
 $122 = $actor;
 $123 = (($122) + 188|0);
 HEAP32[$123>>2] = 0;
 $124 = $actor;
 $125 = (($124) + 2|0);
 $126 = HEAP16[$125>>1]|0;
 $127 = $126 & -3;
 HEAP16[$125>>1] = $127;
 $128 = $actor;
 $129 = (($128) + 2|0);
 $130 = HEAP16[$129>>1]|0;
 $131 = $130 & -5;
 HEAP16[$129>>1] = $131;
 $132 = $actor;
 $133 = (($132) + 2|0);
 $134 = HEAP16[$133>>1]|0;
 $135 = $134 & -9;
 $136 = $135 | 8;
 HEAP16[$133>>1] = $136;
 $137 = $actor;
 $138 = (($137) + 24|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(0|0);
 if ($140) {
  $141 = $4;
  _processAnimActions($141);
 }
 $142 = $actor;
 $143 = (($142) + 164|0);
 HEAP32[$143>>2] = 0;
 $144 = $actor;
 $145 = (($144) + 168|0);
 HEAP32[$145>>2] = 0;
 $146 = $actor;
 $147 = (($146) + 176|0);
 HEAP32[$147>>2] = 0;
 $148 = $actor;
 $149 = (($148) + 172|0);
 HEAP32[$149>>2] = 0;
 $0 = 1;
 $150 = $0;
 STACKTOP = sp;return ($150|0);
}
function _processActorAnimations($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $actor = 0, $angle = 0, $animPtr = 0, $brickShape = 0, $keyFramePassed = 0, $numKeyframe = 0, $updatePos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $0;
 $4 = $3&65535;
 HEAP16[44288>>1] = $4;
 $5 = $actor;
 HEAP32[44384>>2] = $5;
 $6 = $actor;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(-1);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $actor;
 $11 = (($10) + 108|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 HEAP16[44392>>1] = $13;
 $14 = $actor;
 $15 = (($14) + 112|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 HEAP16[44400>>1] = $17;
 $18 = $actor;
 $19 = (($18) + 116|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20&65535;
 HEAP16[44408>>1] = $21;
 $22 = $actor;
 $23 = HEAP16[$22>>1]|0;
 $24 = ($23&65535) >>> 10;
 $25 = $24 & 1;
 $26 = ($25<<16>>16)!=(0);
 if ($26) {
  $27 = $actor;
  $28 = (($27) + 48|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $actor;
   $32 = (($31) + 2|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33 & -3;
   $35 = $34 | 2;
   HEAP16[$32>>1] = $35;
  }
  $36 = $actor;
  $37 = (($36) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38&65535;
  HEAP16[44360>>1] = $39;
  $40 = $actor;
  $41 = (($40) + 40|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42&65535;
  HEAP16[44368>>1] = $43;
  $44 = $actor;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $46&65535;
  HEAP16[44376>>1] = $47;
  $48 = $actor;
  $49 = (($48) + 2|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = ($50&65535) >>> 8;
  $52 = $51 & 1;
  $53 = ($52<<16>>16)!=(0);
  if (!($53)) {
   $54 = $actor;
   $55 = (($54) + 64|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = $actor;
    $59 = (($58) + 212|0);
    $60 = (_getRealValue($59)|0);
    $angle = $60;
    $61 = $angle;
    $62 = ($61|0)!=(0);
    if (!($62)) {
     $63 = $actor;
     $64 = (($63) + 212|0);
     $65 = (($64) + 2|0);
     $66 = HEAP16[$65>>1]|0;
     $67 = $66 << 16 >> 16;
     $68 = ($67|0)>(0);
     if ($68) {
      $angle = 1;
     } else {
      $angle = -1;
     }
    }
    $69 = $angle;
    $70 = $actor;
    $71 = (($70) + 192|0);
    $72 = HEAP32[$71>>2]|0;
    _rotateActor($69,0,$72);
    $73 = $actor;
    $74 = (($73) + 40|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[38968>>2]|0;
    $77 = (($75) - ($76))|0;
    $78 = $77&65535;
    HEAP16[44368>>1] = $78;
    $79 = HEAP32[38952>>2]|0;
    $80 = $actor;
    $81 = (($80) + 60|0);
    $82 = HEAP32[$81>>2]|0;
    _rotateActor(0,$79,$82);
    $83 = $actor;
    $84 = (($83) + 36|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP32[38952>>2]|0;
    $87 = (($85) + ($86))|0;
    $88 = $87&65535;
    HEAP16[44360>>1] = $88;
    $89 = $actor;
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = HEAP32[38968>>2]|0;
    $93 = (($91) + ($92))|0;
    $94 = $93&65535;
    HEAP16[44376>>1] = $94;
    $95 = $actor;
    $96 = (($95) + 64|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $97&65535;
    $99 = $actor;
    $100 = (($99) + 212|0);
    _setActorAngle(0,$98,50,$100);
    $101 = $actor;
    $102 = (($101) + 2|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = ($103&65535) >>> 6;
    $105 = $104 & 1;
    $106 = ($105<<16>>16)!=(0);
    if ($106) {
     $107 = $actor;
     $108 = (($107) + 184|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)!=(0);
     if ($110) {
      $111 = HEAP16[44360>>1]|0;
      $112 = $111 << 16 >> 16;
      $113 = HEAP16[44376>>1]|0;
      $114 = $113 << 16 >> 16;
      $115 = $actor;
      $116 = (($115) + 168|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = $actor;
      $119 = (($118) + 172|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (_getDistance2D($112,$114,$117,$120)|0);
      $122 = $actor;
      $123 = (($122) + 184|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($121|0)>=($124|0);
      if ($125) {
       $126 = $actor;
       $127 = (($126) + 60|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ($128|0)==(0);
       if ($129) {
        $130 = $actor;
        $131 = (($130) + 172|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = $actor;
        $134 = (($133) + 184|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = (($132) + ($135))|0;
        $137 = $136&65535;
        HEAP16[44376>>1] = $137;
       } else {
        $138 = $actor;
        $139 = (($138) + 60|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = ($140|0)==(256);
        if ($141) {
         $142 = $actor;
         $143 = (($142) + 168|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = $actor;
         $146 = (($145) + 184|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = (($144) + ($147))|0;
         $149 = $148&65535;
         HEAP16[44360>>1] = $149;
        } else {
         $150 = $actor;
         $151 = (($150) + 60|0);
         $152 = HEAP32[$151>>2]|0;
         $153 = ($152|0)==(512);
         if ($153) {
          $154 = $actor;
          $155 = (($154) + 172|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = $actor;
          $158 = (($157) + 184|0);
          $159 = HEAP32[$158>>2]|0;
          $160 = (($156) - ($159))|0;
          $161 = $160&65535;
          HEAP16[44376>>1] = $161;
         } else {
          $162 = $actor;
          $163 = (($162) + 60|0);
          $164 = HEAP32[$163>>2]|0;
          $165 = ($164|0)==(768);
          if ($165) {
           $166 = $actor;
           $167 = (($166) + 168|0);
           $168 = HEAP32[$167>>2]|0;
           $169 = $actor;
           $170 = (($169) + 184|0);
           $171 = HEAP32[$170>>2]|0;
           $172 = (($168) - ($171))|0;
           $173 = $172&65535;
           HEAP16[44360>>1] = $173;
          }
         }
        }
       }
       $174 = $actor;
       $175 = (($174) + 2|0);
       $176 = HEAP16[$175>>1]|0;
       $177 = $176 & -65;
       HEAP16[$175>>1] = $177;
       $178 = $actor;
       $179 = (($178) + 64|0);
       HEAP32[$179>>2] = 0;
      }
     } else {
      $updatePos = 0;
      $180 = $actor;
      $181 = (($180) + 60|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($182|0)==(0);
      if ($183) {
       $184 = HEAP16[44376>>1]|0;
       $185 = $184 << 16 >> 16;
       $186 = $actor;
       $187 = (($186) + 172|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($185|0)<=($188|0);
       if ($189) {
        $updatePos = 1;
       }
      } else {
       $190 = $actor;
       $191 = (($190) + 60|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = ($192|0)==(256);
       if ($193) {
        $194 = HEAP16[44360>>1]|0;
        $195 = $194 << 16 >> 16;
        $196 = $actor;
        $197 = (($196) + 168|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = ($195|0)<=($198|0);
        if ($199) {
         $updatePos = 1;
        }
       } else {
        $200 = $actor;
        $201 = (($200) + 60|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = ($202|0)==(512);
        if ($203) {
         $204 = HEAP16[44376>>1]|0;
         $205 = $204 << 16 >> 16;
         $206 = $actor;
         $207 = (($206) + 172|0);
         $208 = HEAP32[$207>>2]|0;
         $209 = ($205|0)>=($208|0);
         if ($209) {
          $updatePos = 1;
         }
        } else {
         $210 = $actor;
         $211 = (($210) + 60|0);
         $212 = HEAP32[$211>>2]|0;
         $213 = ($212|0)==(768);
         if ($213) {
          $214 = HEAP16[44360>>1]|0;
          $215 = $214 << 16 >> 16;
          $216 = $actor;
          $217 = (($216) + 168|0);
          $218 = HEAP32[$217>>2]|0;
          $219 = ($215|0)>=($218|0);
          if ($219) {
           $updatePos = 1;
          }
         }
        }
       }
      }
      $220 = $updatePos;
      $221 = ($220<<16>>16)!=(0);
      if ($221) {
       $222 = $actor;
       $223 = (($222) + 168|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = $224&65535;
       HEAP16[44360>>1] = $225;
       $226 = $actor;
       $227 = (($226) + 176|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = $228&65535;
       HEAP16[44368>>1] = $229;
       $230 = $actor;
       $231 = (($230) + 172|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = $232&65535;
       HEAP16[44376>>1] = $233;
       $234 = $actor;
       $235 = (($234) + 2|0);
       $236 = HEAP16[$235>>1]|0;
       $237 = $236 & -65;
       HEAP16[$235>>1] = $237;
       $238 = $actor;
       $239 = (($238) + 64|0);
       HEAP32[$239>>2] = 0;
      }
     }
    }
   }
   $240 = $actor;
   $241 = HEAP16[$240>>1]|0;
   $242 = ($241&65535) >>> 4;
   $243 = $242 & 1;
   $244 = ($243<<16>>16)!=(0);
   if ($244) {
    $245 = $actor;
    $246 = (($245) + 168|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = HEAP16[44360>>1]|0;
    $249 = $248 << 16 >> 16;
    $250 = (($249) + ($247))|0;
    $251 = $250&65535;
    HEAP16[44360>>1] = $251;
    $252 = $actor;
    $253 = (($252) + 176|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = HEAP16[44368>>1]|0;
    $256 = $255 << 16 >> 16;
    $257 = (($256) + ($254))|0;
    $258 = $257&65535;
    HEAP16[44368>>1] = $258;
    $259 = $actor;
    $260 = (($259) + 172|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = HEAP16[44376>>1]|0;
    $263 = $262 << 16 >> 16;
    $264 = (($263) + ($261))|0;
    $265 = $264&65535;
    HEAP16[44376>>1] = $265;
    $266 = $actor;
    $267 = HEAP16[$266>>1]|0;
    $268 = ($267&65535) >>> 15;
    $269 = ($268<<16>>16)!=(0);
    if ($269) {
     $270 = HEAP16[44360>>1]|0;
     $271 = $270 << 16 >> 16;
     $272 = (($271|0) / 128)&-1;
     $273 = $272<<7;
     $274 = $273&65535;
     HEAP16[44360>>1] = $274;
     $275 = HEAP16[44376>>1]|0;
     $276 = $275 << 16 >> 16;
     $277 = (($276|0) / 128)&-1;
     $278 = $277<<7;
     $279 = $278&65535;
     HEAP16[44376>>1] = $279;
    }
    $280 = $actor;
    $281 = (($280) + 168|0);
    HEAP32[$281>>2] = 0;
    $282 = $actor;
    $283 = (($282) + 176|0);
    HEAP32[$283>>2] = 0;
    $284 = $actor;
    $285 = (($284) + 172|0);
    HEAP32[$285>>2] = 0;
   }
  }
 } else {
  $286 = $actor;
  $287 = (($286) + 180|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ($288|0)!=(-1);
  if ($289) {
   $290 = $actor;
   $291 = (($290) + 180|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (39472 + ($292<<2)|0);
   $294 = HEAP32[$293>>2]|0;
   $animPtr = $294;
   $295 = $actor;
   $296 = (($295) + 188|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $animPtr;
   $299 = $actor;
   $300 = (($299) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (23352 + ($301<<2)|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = $actor;
   $305 = (($304) + 224|0);
   $306 = (_verifyAnimAtKeyframe($297,$298,$303,$305)|0);
   $keyFramePassed = $306;
   $307 = HEAP16[44272>>1]|0;
   $308 = ($307<<16>>16)!=(0);
   if ($308) {
    $309 = $actor;
    $310 = (($309) + 2|0);
    $311 = HEAP16[$310>>1]|0;
    $312 = $311 & -129;
    $313 = $312 | 128;
    HEAP16[$310>>1] = $313;
   } else {
    $314 = $actor;
    $315 = (($314) + 2|0);
    $316 = HEAP16[$315>>1]|0;
    $317 = $316 & -129;
    HEAP16[$315>>1] = $317;
   }
   $318 = $actor;
   $319 = (($318) + 60|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = HEAP16[44280>>1]|0;
   $322 = $321 << 16 >> 16;
   $323 = (($320) + ($322))|0;
   $324 = $actor;
   $325 = (($324) + 164|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = (($323) - ($326))|0;
   $328 = $327 & 1023;
   $329 = $actor;
   $330 = (($329) + 60|0);
   HEAP32[$330>>2] = $328;
   $331 = HEAP16[44280>>1]|0;
   $332 = $331 << 16 >> 16;
   $333 = $actor;
   $334 = (($333) + 164|0);
   HEAP32[$334>>2] = $332;
   $335 = HEAP16[44296>>1]|0;
   $336 = $335 << 16 >> 16;
   $337 = HEAP16[44312>>1]|0;
   $338 = $337 << 16 >> 16;
   $339 = $actor;
   $340 = (($339) + 60|0);
   $341 = HEAP32[$340>>2]|0;
   _rotateActor($336,$338,$341);
   $342 = HEAP32[38952>>2]|0;
   $343 = $342&65535;
   HEAP16[44296>>1] = $343;
   $344 = HEAP32[38968>>2]|0;
   $345 = $344&65535;
   HEAP16[44312>>1] = $345;
   $346 = $actor;
   $347 = (($346) + 36|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = HEAP16[44296>>1]|0;
   $350 = $349 << 16 >> 16;
   $351 = (($348) + ($350))|0;
   $352 = $actor;
   $353 = (($352) + 168|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = (($351) - ($354))|0;
   $356 = $355&65535;
   HEAP16[44360>>1] = $356;
   $357 = $actor;
   $358 = (($357) + 40|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = HEAP16[44304>>1]|0;
   $361 = $360 << 16 >> 16;
   $362 = (($359) + ($361))|0;
   $363 = $actor;
   $364 = (($363) + 176|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = (($362) - ($365))|0;
   $367 = $366&65535;
   HEAP16[44368>>1] = $367;
   $368 = $actor;
   $369 = (($368) + 44|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = HEAP16[44312>>1]|0;
   $372 = $371 << 16 >> 16;
   $373 = (($370) + ($372))|0;
   $374 = $actor;
   $375 = (($374) + 172|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = (($373) - ($376))|0;
   $378 = $377&65535;
   HEAP16[44376>>1] = $378;
   $379 = HEAP16[44296>>1]|0;
   $380 = $379 << 16 >> 16;
   $381 = $actor;
   $382 = (($381) + 168|0);
   HEAP32[$382>>2] = $380;
   $383 = HEAP16[44304>>1]|0;
   $384 = $383 << 16 >> 16;
   $385 = $actor;
   $386 = (($385) + 176|0);
   HEAP32[$386>>2] = $384;
   $387 = HEAP16[44312>>1]|0;
   $388 = $387 << 16 >> 16;
   $389 = $actor;
   $390 = (($389) + 172|0);
   HEAP32[$390>>2] = $388;
   $391 = $actor;
   $392 = (($391) + 2|0);
   $393 = HEAP16[$392>>1]|0;
   $394 = $393 & -5;
   HEAP16[$392>>1] = $394;
   $395 = $actor;
   $396 = (($395) + 2|0);
   $397 = HEAP16[$396>>1]|0;
   $398 = $397 & -9;
   HEAP16[$396>>1] = $398;
   $399 = $keyFramePassed;
   $400 = ($399|0)!=(0);
   if ($400) {
    $401 = $actor;
    $402 = (($401) + 188|0);
    $403 = HEAP32[$402>>2]|0;
    $404 = (($403) + 1)|0;
    HEAP32[$402>>2] = $404;
    $405 = $actor;
    $406 = (($405) + 24|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = ($407|0)!=(0|0);
    if ($408) {
     $409 = $0;
     _processAnimActions($409);
    }
    $410 = $actor;
    $411 = (($410) + 188|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = $412&65535;
    $numKeyframe = $413;
    $414 = $numKeyframe;
    $415 = $414 << 16 >> 16;
    $416 = $animPtr;
    $417 = (_getNumKeyframes($416)|0);
    $418 = ($415|0)==($417|0);
    if ($418) {
     $419 = $actor;
     $420 = (($419) + 2|0);
     $421 = HEAP16[$420>>1]|0;
     $422 = $421 & -3;
     HEAP16[$420>>1] = $422;
     $423 = $actor;
     $424 = (($423) + 192|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = ($425|0)==(0);
     if ($426) {
      $427 = $animPtr;
      $428 = (_getStartKeyframe($427)|0);
      $429 = $actor;
      $430 = (($429) + 188|0);
      HEAP32[$430>>2] = $428;
     } else {
      $431 = $actor;
      $432 = (($431) + 16|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = $actor;
      $435 = (($434) + 12|0);
      HEAP32[$435>>2] = $433;
      $436 = $actor;
      $437 = (($436) + 12|0);
      $438 = HEAP32[$437>>2]|0;
      $439 = $0;
      $440 = (_getBodyAnimIndex($438,$439)|0);
      $441 = $actor;
      $442 = (($441) + 180|0);
      HEAP32[$442>>2] = $440;
      $443 = $actor;
      $444 = (($443) + 180|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = ($445|0)==(-1);
      if ($446) {
       $447 = $0;
       $448 = (_getBodyAnimIndex(0,$447)|0);
       $449 = $actor;
       $450 = (($449) + 180|0);
       HEAP32[$450>>2] = $448;
       $451 = $actor;
       $452 = (($451) + 12|0);
       HEAP32[$452>>2] = 0;
      }
      $453 = HEAP32[120>>2]|0;
      $454 = $actor;
      $455 = (($454) + 24|0);
      HEAP32[$455>>2] = $453;
      $456 = $actor;
      $457 = (($456) + 192|0);
      HEAP32[$457>>2] = 0;
      $458 = $actor;
      $459 = (($458) + 188|0);
      HEAP32[$459>>2] = 0;
      $460 = $actor;
      $461 = (($460) + 48|0);
      HEAP32[$461>>2] = 0;
     }
     $462 = $actor;
     $463 = (($462) + 24|0);
     $464 = HEAP32[$463>>2]|0;
     $465 = ($464|0)!=(0|0);
     if ($465) {
      $466 = $0;
      _processAnimActions($466);
     }
     $467 = $actor;
     $468 = (($467) + 2|0);
     $469 = HEAP16[$468>>1]|0;
     $470 = $469 & -5;
     $471 = $470 | 4;
     HEAP16[$468>>1] = $471;
    }
    $472 = $actor;
    $473 = (($472) + 164|0);
    HEAP32[$473>>2] = 0;
    $474 = $actor;
    $475 = (($474) + 168|0);
    HEAP32[$475>>2] = 0;
    $476 = $actor;
    $477 = (($476) + 176|0);
    HEAP32[$477>>2] = 0;
    $478 = $actor;
    $479 = (($478) + 172|0);
    HEAP32[$479>>2] = 0;
   }
  }
 }
 $480 = $actor;
 $481 = (($480) + 156|0);
 $482 = HEAP32[$481>>2]|0;
 $483 = ($482|0)!=(-1);
 if ($483) {
  $484 = $actor;
  $485 = (($484) + 156|0);
  $486 = HEAP32[$485>>2]|0;
  $487 = (136 + (($486*232)|0)|0);
  $488 = (($487) + 108|0);
  $489 = HEAP32[$488>>2]|0;
  $490 = HEAP16[44360>>1]|0;
  $491 = $490 << 16 >> 16;
  $492 = (($491) - ($489))|0;
  $493 = $492&65535;
  HEAP16[44360>>1] = $493;
  $494 = $actor;
  $495 = (($494) + 156|0);
  $496 = HEAP32[$495>>2]|0;
  $497 = (136 + (($496*232)|0)|0);
  $498 = (($497) + 112|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = HEAP16[44368>>1]|0;
  $501 = $500 << 16 >> 16;
  $502 = (($501) - ($499))|0;
  $503 = $502&65535;
  HEAP16[44368>>1] = $503;
  $504 = $actor;
  $505 = (($504) + 156|0);
  $506 = HEAP32[$505>>2]|0;
  $507 = (136 + (($506*232)|0)|0);
  $508 = (($507) + 116|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = HEAP16[44376>>1]|0;
  $511 = $510 << 16 >> 16;
  $512 = (($511) - ($509))|0;
  $513 = $512&65535;
  HEAP16[44376>>1] = $513;
  $514 = $actor;
  $515 = (($514) + 156|0);
  $516 = HEAP32[$515>>2]|0;
  $517 = (136 + (($516*232)|0)|0);
  $518 = (($517) + 36|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = HEAP16[44360>>1]|0;
  $521 = $520 << 16 >> 16;
  $522 = (($521) + ($519))|0;
  $523 = $522&65535;
  HEAP16[44360>>1] = $523;
  $524 = $actor;
  $525 = (($524) + 156|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = (136 + (($526*232)|0)|0);
  $528 = (($527) + 40|0);
  $529 = HEAP32[$528>>2]|0;
  $530 = HEAP16[44368>>1]|0;
  $531 = $530 << 16 >> 16;
  $532 = (($531) + ($529))|0;
  $533 = $532&65535;
  HEAP16[44368>>1] = $533;
  $534 = $actor;
  $535 = (($534) + 156|0);
  $536 = HEAP32[$535>>2]|0;
  $537 = (136 + (($536*232)|0)|0);
  $538 = (($537) + 44|0);
  $539 = HEAP32[$538>>2]|0;
  $540 = HEAP16[44376>>1]|0;
  $541 = $540 << 16 >> 16;
  $542 = (($541) + ($539))|0;
  $543 = $542&65535;
  HEAP16[44376>>1] = $543;
  $544 = $0;
  $545 = $actor;
  $546 = (($545) + 156|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = (_standingOnActor($544,$547)|0);
  $549 = ($548|0)!=(0);
  if (!($549)) {
   $550 = $actor;
   $551 = (($550) + 156|0);
   HEAP32[$551>>2] = -1;
  }
 }
 $552 = $actor;
 $553 = (($552) + 2|0);
 $554 = HEAP16[$553>>1]|0;
 $555 = ($554&65535) >>> 8;
 $556 = $555 & 1;
 $557 = ($556<<16>>16)!=(0);
 if ($557) {
  $558 = HEAP16[44392>>1]|0;
  HEAP16[44360>>1] = $558;
  $559 = HEAP16[44400>>1]|0;
  $560 = $559 << 16 >> 16;
  $561 = HEAP32[34016>>2]|0;
  $562 = (($560) + ($561))|0;
  $563 = $562&65535;
  HEAP16[44368>>1] = $563;
  $564 = HEAP16[44408>>1]|0;
  HEAP16[44376>>1] = $564;
 }
 $565 = $actor;
 $566 = HEAP16[$565>>1]|0;
 $567 = ($566&65535) >>> 1;
 $568 = $567 & 1;
 $569 = ($568<<16>>16)!=(0);
 if ($569) {
  HEAP32[47328>>2] = 0;
  $570 = HEAP16[44392>>1]|0;
  $571 = $570 << 16 >> 16;
  $572 = HEAP16[44400>>1]|0;
  $573 = $572 << 16 >> 16;
  $574 = HEAP16[44408>>1]|0;
  $575 = $574 << 16 >> 16;
  $576 = (_getBrickShape($571,$573,$575)|0);
  $brickShape = $576;
  $577 = $brickShape;
  $578 = ($577|0)!=(0);
  if ($578) {
   $579 = $brickShape;
   $580 = ($579|0)!=(1);
   if ($580) {
    $581 = $brickShape;
    _reajustActorPosition($581);
   }
  }
  $582 = $actor;
  $583 = HEAP16[$582>>1]|0;
  $584 = $583 & 1;
  $585 = ($584<<16>>16)!=(0);
  if ($585) {
   $586 = $0;
   (_checkCollisionWithActors($586)|0);
  }
  $587 = $actor;
  $588 = (($587) + 156|0);
  $589 = HEAP32[$588>>2]|0;
  $590 = ($589|0)!=(-1);
  if ($590) {
   $591 = $actor;
   $592 = (($591) + 2|0);
   $593 = HEAP16[$592>>1]|0;
   $594 = ($593&65535) >>> 8;
   $595 = $594 & 1;
   $596 = $595&65535;
   $597 = ($596|0)!=(0);
   if ($597) {
    _stopFalling();
   }
  }
  HEAP32[47336>>2] = 0;
  $598 = HEAP16[44360>>1]|0;
  $599 = $598 << 16 >> 16;
  HEAP32[47344>>2] = $599;
  $600 = HEAP16[44368>>1]|0;
  $601 = $600 << 16 >> 16;
  HEAP32[47352>>2] = $601;
  $602 = HEAP16[44376>>1]|0;
  $603 = $602 << 16 >> 16;
  HEAP32[47360>>2] = $603;
  $604 = $0;
  $605 = ($604|0)!=(0);
  if ($605) {
   label = 97;
  } else {
   $606 = $actor;
   $607 = HEAP16[$606>>1]|0;
   $608 = ($607&65535) >>> 5;
   $609 = $608 & 1;
   $610 = ($609<<16>>16)!=(0);
   if ($610) {
    label = 97;
   } else {
    $611 = $actor;
    $612 = (($611) + 200|0);
    $613 = HEAP16[$612>>1]|0;
    $614 = $613 << 16 >> 16;
    $615 = $actor;
    $616 = (($615) + 200|0);
    $617 = (($616) + 4|0);
    $618 = HEAP16[$617>>1]|0;
    $619 = $618 << 16 >> 16;
    $620 = $actor;
    $621 = (($620) + 200|0);
    $622 = (($621) + 8|0);
    $623 = HEAP16[$622>>1]|0;
    $624 = $623 << 16 >> 16;
    _checkHeroCollisionWithBricks($614,$619,$624,1);
    $625 = $actor;
    $626 = (($625) + 200|0);
    $627 = (($626) + 2|0);
    $628 = HEAP16[$627>>1]|0;
    $629 = $628 << 16 >> 16;
    $630 = $actor;
    $631 = (($630) + 200|0);
    $632 = (($631) + 4|0);
    $633 = HEAP16[$632>>1]|0;
    $634 = $633 << 16 >> 16;
    $635 = $actor;
    $636 = (($635) + 200|0);
    $637 = (($636) + 8|0);
    $638 = HEAP16[$637>>1]|0;
    $639 = $638 << 16 >> 16;
    _checkHeroCollisionWithBricks($629,$634,$639,2);
    $640 = $actor;
    $641 = (($640) + 200|0);
    $642 = (($641) + 2|0);
    $643 = HEAP16[$642>>1]|0;
    $644 = $643 << 16 >> 16;
    $645 = $actor;
    $646 = (($645) + 200|0);
    $647 = (($646) + 4|0);
    $648 = HEAP16[$647>>1]|0;
    $649 = $648 << 16 >> 16;
    $650 = $actor;
    $651 = (($650) + 200|0);
    $652 = (($651) + 8|0);
    $653 = (($652) + 2|0);
    $654 = HEAP16[$653>>1]|0;
    $655 = $654 << 16 >> 16;
    _checkHeroCollisionWithBricks($644,$649,$655,4);
    $656 = $actor;
    $657 = (($656) + 200|0);
    $658 = HEAP16[$657>>1]|0;
    $659 = $658 << 16 >> 16;
    $660 = $actor;
    $661 = (($660) + 200|0);
    $662 = (($661) + 4|0);
    $663 = HEAP16[$662>>1]|0;
    $664 = $663 << 16 >> 16;
    $665 = $actor;
    $666 = (($665) + 200|0);
    $667 = (($666) + 8|0);
    $668 = (($667) + 2|0);
    $669 = HEAP16[$668>>1]|0;
    $670 = $669 << 16 >> 16;
    _checkHeroCollisionWithBricks($659,$664,$670,8);
   }
  }
  if ((label|0) == 97) {
   $671 = $actor;
   $672 = (($671) + 200|0);
   $673 = HEAP16[$672>>1]|0;
   $674 = $673 << 16 >> 16;
   $675 = $actor;
   $676 = (($675) + 200|0);
   $677 = (($676) + 4|0);
   $678 = HEAP16[$677>>1]|0;
   $679 = $678 << 16 >> 16;
   $680 = $actor;
   $681 = (($680) + 200|0);
   $682 = (($681) + 8|0);
   $683 = HEAP16[$682>>1]|0;
   $684 = $683 << 16 >> 16;
   _checkActorCollisionWithBricks($674,$679,$684,1);
   $685 = $actor;
   $686 = (($685) + 200|0);
   $687 = (($686) + 2|0);
   $688 = HEAP16[$687>>1]|0;
   $689 = $688 << 16 >> 16;
   $690 = $actor;
   $691 = (($690) + 200|0);
   $692 = (($691) + 4|0);
   $693 = HEAP16[$692>>1]|0;
   $694 = $693 << 16 >> 16;
   $695 = $actor;
   $696 = (($695) + 200|0);
   $697 = (($696) + 8|0);
   $698 = HEAP16[$697>>1]|0;
   $699 = $698 << 16 >> 16;
   _checkActorCollisionWithBricks($689,$694,$699,2);
   $700 = $actor;
   $701 = (($700) + 200|0);
   $702 = (($701) + 2|0);
   $703 = HEAP16[$702>>1]|0;
   $704 = $703 << 16 >> 16;
   $705 = $actor;
   $706 = (($705) + 200|0);
   $707 = (($706) + 4|0);
   $708 = HEAP16[$707>>1]|0;
   $709 = $708 << 16 >> 16;
   $710 = $actor;
   $711 = (($710) + 200|0);
   $712 = (($711) + 8|0);
   $713 = (($712) + 2|0);
   $714 = HEAP16[$713>>1]|0;
   $715 = $714 << 16 >> 16;
   _checkActorCollisionWithBricks($704,$709,$715,4);
   $716 = $actor;
   $717 = (($716) + 200|0);
   $718 = HEAP16[$717>>1]|0;
   $719 = $718 << 16 >> 16;
   $720 = $actor;
   $721 = (($720) + 200|0);
   $722 = (($721) + 4|0);
   $723 = HEAP16[$722>>1]|0;
   $724 = $723 << 16 >> 16;
   $725 = $actor;
   $726 = (($725) + 200|0);
   $727 = (($726) + 8|0);
   $728 = (($727) + 2|0);
   $729 = HEAP16[$728>>1]|0;
   $730 = $729 << 16 >> 16;
   _checkActorCollisionWithBricks($719,$724,$730,8);
  }
  $731 = HEAP32[47336>>2]|0;
  $732 = ($731|0)!=(0);
  if ($732) {
   $733 = $actor;
   $734 = (($733) + 2|0);
   $735 = HEAP16[$734>>1]|0;
   $736 = ($735&65535) >>> 8;
   $737 = $736 & 1;
   $738 = ($737<<16>>16)!=(0);
   if (!($738)) {
    $739 = HEAP16[44288>>1]|0;
    $740 = ($739<<16>>16)!=(0);
    if (!($740)) {
     $741 = HEAP16[128>>1]|0;
     $742 = $741 << 16 >> 16;
     $743 = ($742|0)==(1);
     if ($743) {
      $744 = $actor;
      $745 = (($744) + 12|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ($746|0)==(1);
      if ($747) {
       $748 = $actor;
       $749 = (($748) + 200|0);
       $750 = HEAP16[$749>>1]|0;
       $751 = $750 << 16 >> 16;
       $752 = $actor;
       $753 = (($752) + 200|0);
       $754 = (($753) + 8|0);
       $755 = HEAP16[$754>>1]|0;
       $756 = $755 << 16 >> 16;
       $757 = $actor;
       $758 = (($757) + 60|0);
       $759 = HEAP32[$758>>2]|0;
       $760 = (($759) + 1408)|0;
       _rotateActor($751,$756,$760);
       $761 = HEAP16[44360>>1]|0;
       $762 = $761 << 16 >> 16;
       $763 = HEAP32[38952>>2]|0;
       $764 = (($763) + ($762))|0;
       HEAP32[38952>>2] = $764;
       $765 = HEAP16[44376>>1]|0;
       $766 = $765 << 16 >> 16;
       $767 = HEAP32[38968>>2]|0;
       $768 = (($767) + ($766))|0;
       HEAP32[38968>>2] = $768;
       $769 = HEAP32[38952>>2]|0;
       $770 = ($769|0)>=(0);
       do {
        if ($770) {
         $771 = HEAP32[38968>>2]|0;
         $772 = ($771|0)>=(0);
         if ($772) {
          $773 = HEAP32[38952>>2]|0;
          $774 = ($773|0)<=(32256);
          if ($774) {
           $775 = HEAP32[38968>>2]|0;
           $776 = ($775|0)<=(32256);
           if (!($776)) {
            break;
           }
           $777 = HEAP32[38952>>2]|0;
           $778 = HEAP16[44368>>1]|0;
           $779 = $778 << 16 >> 16;
           $780 = (($779) + 256)|0;
           $781 = HEAP32[38968>>2]|0;
           $782 = (_getBrickShape($777,$780,$781)|0);
           $783 = ($782|0)!=(0);
           do {
            if ($783) {
             $784 = HEAP32[((308424 + 132|0))>>2]|0;
             $785 = ($784|0)==(1);
             if (!($785)) {
              break;
             }
             $786 = $actor;
             $787 = (($786) + 36|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = $actor;
             $790 = (($789) + 40|0);
             $791 = HEAP32[$790>>2]|0;
             $792 = (($791) + 1000)|0;
             $793 = $actor;
             $794 = (($793) + 44|0);
             $795 = HEAP32[$794>>2]|0;
             _addExtraSpecial($788,$792,$795,0);
             $796 = HEAP16[44288>>1]|0;
             $797 = $796 << 16 >> 16;
             (_initAnim(6,2,0,$797)|0);
             $798 = HEAP16[44288>>1]|0;
             $799 = $798 << 16 >> 16;
             $800 = ($799|0)==(0);
             if ($800) {
              HEAP16[24240>>1] = 1;
             }
             $801 = $actor;
             $802 = (($801) + 104|0);
             $803 = HEAP32[$802>>2]|0;
             $804 = (($803) + -1)|0;
             HEAP32[$802>>2] = $804;
            }
           } while(0);
          }
         }
        }
       } while(0);
      }
     }
    }
   }
  }
  $805 = HEAP16[44360>>1]|0;
  $806 = $805 << 16 >> 16;
  $807 = HEAP16[44368>>1]|0;
  $808 = $807 << 16 >> 16;
  $809 = HEAP16[44376>>1]|0;
  $810 = $809 << 16 >> 16;
  $811 = (_getBrickShape($806,$808,$810)|0);
  $brickShape = $811;
  $812 = $brickShape;
  $813 = $actor;
  $814 = (($813) + 20|0);
  HEAP32[$814>>2] = $812;
  $815 = $brickShape;
  $816 = ($815|0)!=(0);
  if ($816) {
   $817 = $brickShape;
   $818 = ($817|0)==(1);
   if ($818) {
    $819 = $actor;
    $820 = (($819) + 2|0);
    $821 = HEAP16[$820>>1]|0;
    $822 = ($821&65535) >>> 8;
    $823 = $822 & 1;
    $824 = ($823<<16>>16)!=(0);
    if ($824) {
     _stopFalling();
     $825 = HEAP32[47328>>2]|0;
     $826 = $825 << 8;
     $827 = (($826) + 256)|0;
     $828 = $827&65535;
     HEAP16[44368>>1] = $828;
    } else {
     $829 = $0;
     $830 = ($829|0)!=(0);
     do {
      if (!($830)) {
       $831 = HEAP16[128>>1]|0;
       $832 = $831 << 16 >> 16;
       $833 = ($832|0)==(1);
       if ($833) {
        $834 = $actor;
        $835 = (($834) + 12|0);
        $836 = HEAP32[$835>>2]|0;
        $837 = $brickShape;
        $838 = ($836|0)==($837|0);
        if (!($838)) {
         break;
        }
        $839 = HEAP32[((308424 + 132|0))>>2]|0;
        $840 = ($839|0)==(1);
        if (!($840)) {
         break;
        }
        $841 = $actor;
        $842 = (($841) + 36|0);
        $843 = HEAP32[$842>>2]|0;
        $844 = $actor;
        $845 = (($844) + 40|0);
        $846 = HEAP32[$845>>2]|0;
        $847 = (($846) + 1000)|0;
        $848 = $actor;
        $849 = (($848) + 44|0);
        $850 = HEAP32[$849>>2]|0;
        _addExtraSpecial($843,$847,$850,0);
        $851 = HEAP16[44288>>1]|0;
        $852 = $851 << 16 >> 16;
        (_initAnim(6,2,0,$852)|0);
        $853 = $0;
        $854 = ($853|0)!=(0);
        if (!($854)) {
         HEAP16[24240>>1] = 1;
        }
        $855 = $actor;
        $856 = (($855) + 104|0);
        $857 = HEAP32[$856>>2]|0;
        $858 = (($857) + -1)|0;
        HEAP32[$856>>2] = $858;
       }
      }
     } while(0);
     $859 = HEAP16[44360>>1]|0;
     $860 = $859 << 16 >> 16;
     $861 = HEAP16[44368>>1]|0;
     $862 = $861 << 16 >> 16;
     $863 = HEAP16[44408>>1]|0;
     $864 = $863 << 16 >> 16;
     $865 = (_getBrickShape($860,$862,$864)|0);
     $866 = ($865|0)!=(0);
     if (!($866)) {
      $867 = HEAP16[44408>>1]|0;
      HEAP16[44376>>1] = $867;
     }
     $868 = HEAP16[44392>>1]|0;
     $869 = $868 << 16 >> 16;
     $870 = HEAP16[44368>>1]|0;
     $871 = $870 << 16 >> 16;
     $872 = HEAP16[44376>>1]|0;
     $873 = $872 << 16 >> 16;
     $874 = (_getBrickShape($869,$871,$873)|0);
     $875 = ($874|0)!=(0);
     if (!($875)) {
      $876 = HEAP16[44392>>1]|0;
      HEAP16[44360>>1] = $876;
     }
     $877 = HEAP16[44360>>1]|0;
     $878 = $877 << 16 >> 16;
     $879 = HEAP16[44368>>1]|0;
     $880 = $879 << 16 >> 16;
     $881 = HEAP16[44408>>1]|0;
     $882 = $881 << 16 >> 16;
     $883 = (_getBrickShape($878,$880,$882)|0);
     $884 = ($883|0)!=(0);
     do {
      if ($884) {
       $885 = HEAP16[44392>>1]|0;
       $886 = $885 << 16 >> 16;
       $887 = HEAP16[44368>>1]|0;
       $888 = $887 << 16 >> 16;
       $889 = HEAP16[44376>>1]|0;
       $890 = $889 << 16 >> 16;
       $891 = (_getBrickShape($886,$888,$890)|0);
       $892 = ($891|0)!=(0);
       if (!($892)) {
        break;
       }
       STACKTOP = sp;return;
      }
     } while(0);
    }
   } else {
    $893 = $actor;
    $894 = (($893) + 2|0);
    $895 = HEAP16[$894>>1]|0;
    $896 = ($895&65535) >>> 8;
    $897 = $896 & 1;
    $898 = ($897<<16>>16)!=(0);
    if ($898) {
     _stopFalling();
    }
    $899 = $brickShape;
    _reajustActorPosition($899);
   }
   $900 = $actor;
   $901 = (($900) + 2|0);
   $902 = HEAP16[$901>>1]|0;
   $903 = $902 & -257;
   HEAP16[$901>>1] = $903;
  } else {
   $904 = $actor;
   $905 = HEAP16[$904>>1]|0;
   $906 = ($905&65535) >>> 11;
   $907 = $906 & 1;
   $908 = $907&65535;
   $909 = ($908|0)!=(0);
   if ($909) {
    $910 = $actor;
    $911 = (($910) + 156|0);
    $912 = HEAP32[$911>>2]|0;
    $913 = ($912|0)==(-1);
    if ($913) {
     $914 = HEAP16[44360>>1]|0;
     $915 = $914 << 16 >> 16;
     $916 = HEAP16[44368>>1]|0;
     $917 = $916 << 16 >> 16;
     $918 = (($917) - 1)|0;
     $919 = HEAP16[44376>>1]|0;
     $920 = $919 << 16 >> 16;
     $921 = (_getBrickShape($915,$918,$920)|0);
     $brickShape = $921;
     $922 = $brickShape;
     $923 = ($922|0)!=(0);
     if ($923) {
      $924 = $actor;
      $925 = (($924) + 2|0);
      $926 = HEAP16[$925>>1]|0;
      $927 = ($926&65535) >>> 8;
      $928 = $927 & 1;
      $929 = ($928<<16>>16)!=(0);
      if ($929) {
       _stopFalling();
      }
      $930 = $brickShape;
      _reajustActorPosition($930);
     } else {
      $931 = $actor;
      $932 = (($931) + 2|0);
      $933 = HEAP16[$932>>1]|0;
      $934 = ($933&65535) >>> 7;
      $935 = $934 & 1;
      $936 = ($935<<16>>16)!=(0);
      if (!($936)) {
       $937 = $actor;
       $938 = (($937) + 2|0);
       $939 = HEAP16[$938>>1]|0;
       $940 = $939 & -257;
       $941 = $940 | 256;
       HEAP16[$938>>1] = $941;
       $942 = $0;
       $943 = ($942|0)!=(0);
       do {
        if (!($943)) {
         $944 = HEAP16[34232>>1]|0;
         $945 = $944 << 16 >> 16;
         $946 = ($945|0)==(0);
         if (!($946)) {
          break;
         }
         $947 = HEAP16[44368>>1]|0;
         HEAP16[34232>>1] = $947;
        }
       } while(0);
       $948 = $0;
       (_initAnim(7,0,-1,$948)|0);
      }
     }
    }
   }
  }
  $949 = HEAP32[47328>>2]|0;
  $950 = ($949|0)==(-1);
  if ($950) {
   $951 = $actor;
   $952 = (($951) + 104|0);
   HEAP32[$952>>2] = 0;
  }
 } else {
  $953 = $actor;
  $954 = HEAP16[$953>>1]|0;
  $955 = $954 & 1;
  $956 = ($955<<16>>16)!=(0);
  if ($956) {
   $957 = $0;
   (_checkCollisionWithActors($957)|0);
  }
 }
 $958 = HEAP32[47336>>2]|0;
 $959 = ($958|0)!=(0);
 if ($959) {
  $960 = $actor;
  $961 = (($960) + 20|0);
  $962 = HEAP32[$961>>2]|0;
  $963 = $962 | 128;
  HEAP32[$961>>2] = $963;
 }
 $964 = HEAP16[44360>>1]|0;
 $965 = $964 << 16 >> 16;
 $966 = ($965|0)<(0);
 if ($966) {
  HEAP16[44360>>1] = 0;
 }
 $967 = HEAP16[44368>>1]|0;
 $968 = $967 << 16 >> 16;
 $969 = ($968|0)<(0);
 if ($969) {
  HEAP16[44368>>1] = 0;
 }
 $970 = HEAP16[44376>>1]|0;
 $971 = $970 << 16 >> 16;
 $972 = ($971|0)<(0);
 if ($972) {
  HEAP16[44376>>1] = 0;
 }
 $973 = HEAP16[44360>>1]|0;
 $974 = $973 << 16 >> 16;
 $975 = ($974|0)>(32256);
 if ($975) {
  HEAP16[44360>>1] = 32256;
 }
 $976 = HEAP16[44376>>1]|0;
 $977 = $976 << 16 >> 16;
 $978 = ($977|0)>(32256);
 if ($978) {
  HEAP16[44376>>1] = 32256;
 }
 $979 = HEAP16[44360>>1]|0;
 $980 = $979 << 16 >> 16;
 $981 = $actor;
 $982 = (($981) + 36|0);
 HEAP32[$982>>2] = $980;
 $983 = HEAP16[44368>>1]|0;
 $984 = $983 << 16 >> 16;
 $985 = $actor;
 $986 = (($985) + 40|0);
 HEAP32[$986>>2] = $984;
 $987 = HEAP16[44376>>1]|0;
 $988 = $987 << 16 >> 16;
 $989 = $actor;
 $990 = (($989) + 44|0);
 HEAP32[$990>>2] = $988;
 STACKTOP = sp;return;
}
function _standingOnActor($actorIdx1,$actorIdx2) {
 $actorIdx1 = $actorIdx1|0;
 $actorIdx2 = $actorIdx2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actor1 = 0, $actor2 = 0, $x1Left = 0, $x1Right = 0, $x2Left = 0;
 var $x2Right = 0, $y1Left = 0, $y1Right = 0, $y2Left = 0, $y2Right = 0, $z1Left = 0, $z1Right = 0, $z2Left = 0, $z2Right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $actorIdx1;
 $2 = $actorIdx2;
 $3 = $1;
 $4 = (136 + (($3*232)|0)|0);
 $actor1 = $4;
 $5 = $2;
 $6 = (136 + (($5*232)|0)|0);
 $actor2 = $6;
 $7 = HEAP16[44360>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $actor1;
 $10 = (($9) + 200|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = (($8) + ($12))|0;
 $x1Left = $13;
 $14 = HEAP16[44360>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = $actor1;
 $17 = (($16) + 200|0);
 $18 = (($17) + 2|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = (($15) + ($20))|0;
 $x1Right = $21;
 $22 = HEAP16[44368>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = $actor1;
 $25 = (($24) + 200|0);
 $26 = (($25) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (($23) + ($28))|0;
 $y1Left = $29;
 $30 = HEAP16[44368>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = $actor1;
 $33 = (($32) + 200|0);
 $34 = (($33) + 4|0);
 $35 = (($34) + 2|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36 << 16 >> 16;
 $38 = (($31) + ($37))|0;
 $y1Right = $38;
 $39 = HEAP16[44376>>1]|0;
 $40 = $39 << 16 >> 16;
 $41 = $actor1;
 $42 = (($41) + 200|0);
 $43 = (($42) + 8|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 << 16 >> 16;
 $46 = (($40) + ($45))|0;
 $z1Left = $46;
 $47 = HEAP16[44376>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = $actor1;
 $50 = (($49) + 200|0);
 $51 = (($50) + 8|0);
 $52 = (($51) + 2|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 << 16 >> 16;
 $55 = (($48) + ($54))|0;
 $z1Right = $55;
 $56 = $actor2;
 $57 = (($56) + 36|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $actor2;
 $60 = (($59) + 200|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 $63 = (($58) + ($62))|0;
 $x2Left = $63;
 $64 = $actor2;
 $65 = (($64) + 36|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $actor2;
 $68 = (($67) + 200|0);
 $69 = (($68) + 2|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = $70 << 16 >> 16;
 $72 = (($66) + ($71))|0;
 $x2Right = $72;
 $73 = $actor2;
 $74 = (($73) + 40|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $actor2;
 $77 = (($76) + 200|0);
 $78 = (($77) + 4|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 << 16 >> 16;
 $81 = (($75) + ($80))|0;
 $y2Left = $81;
 $82 = $actor2;
 $83 = (($82) + 40|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $actor2;
 $86 = (($85) + 200|0);
 $87 = (($86) + 4|0);
 $88 = (($87) + 2|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = $89 << 16 >> 16;
 $91 = (($84) + ($90))|0;
 $y2Right = $91;
 $92 = $actor2;
 $93 = (($92) + 44|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $actor2;
 $96 = (($95) + 200|0);
 $97 = (($96) + 8|0);
 $98 = HEAP16[$97>>1]|0;
 $99 = $98 << 16 >> 16;
 $100 = (($94) + ($99))|0;
 $z2Left = $100;
 $101 = $actor2;
 $102 = (($101) + 44|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $actor2;
 $105 = (($104) + 200|0);
 $106 = (($105) + 8|0);
 $107 = (($106) + 2|0);
 $108 = HEAP16[$107>>1]|0;
 $109 = $108 << 16 >> 16;
 $110 = (($103) + ($109))|0;
 $z2Right = $110;
 $111 = $x1Left;
 $112 = $x2Right;
 $113 = ($111|0)>=($112|0);
 if ($113) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $114 = $x1Right;
 $115 = $x2Left;
 $116 = ($114|0)<=($115|0);
 if ($116) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $117 = $y1Left;
 $118 = $y2Right;
 $119 = (($118) + 1)|0;
 $120 = ($117|0)>($119|0);
 if ($120) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $121 = $y1Left;
 $122 = $y2Right;
 $123 = (($122) - 256)|0;
 $124 = ($121|0)<=($123|0);
 if ($124) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $125 = $y1Right;
 $126 = $y2Left;
 $127 = ($125|0)<=($126|0);
 if ($127) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $128 = $z1Left;
 $129 = $z2Right;
 $130 = ($128|0)>=($129|0);
 if ($130) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $131 = $z1Right;
 $132 = $z2Left;
 $133 = ($131|0)<=($132|0);
 if ($133) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 } else {
  $0 = 1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 return (0)|0;
}
function _getAverageValue($var0,$var1,$var2,$var3) {
 $var0 = $var0|0;
 $var1 = $var1|0;
 $var2 = $var2|0;
 $var3 = $var3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $var0;
 $2 = $var1;
 $3 = $var2;
 $4 = $var3;
 $5 = $4;
 $6 = ($5|0)<=(0);
 do {
  if ($6) {
   $7 = $1;
   $0 = $7;
  } else {
   $8 = $4;
   $9 = $3;
   $10 = ($8|0)>=($9|0);
   if ($10) {
    $11 = $2;
    $0 = $11;
    break;
   } else {
    $12 = $2;
    $13 = $1;
    $14 = (($12) - ($13))|0;
    $15 = $4;
    $16 = Math_imul($14, $15)|0;
    $17 = $3;
    $18 = (($16|0) / ($17|0))&-1;
    $19 = $1;
    $20 = (($18) + ($19))|0;
    $0 = $20;
    break;
   }
  }
 } while(0);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _reajustActorPosition($brickShape) {
 $brickShape = $brickShape|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brkX = 0, $brkY = 0, $brkZ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $brickShape;
 $1 = $0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[47368>>2]|0;
 $4 = $3 << 9;
 $5 = (($4) - 256)|0;
 $brkX = $5;
 $6 = HEAP32[47328>>2]|0;
 $7 = $6 << 8;
 $brkY = $7;
 $8 = HEAP32[47376>>2]|0;
 $9 = $8 << 9;
 $10 = (($9) - 256)|0;
 $brkZ = $10;
 $11 = $0;
 $12 = ($11|0)>=(6);
 if ($12) {
  $13 = $0;
  $14 = ($13|0)<=(13);
  if ($14) {
   $15 = $0;
   switch ($15|0) {
   case 10:  {
    $54 = HEAP16[44360>>1]|0;
    $55 = $54 << 16 >> 16;
    $56 = HEAP32[47368>>2]|0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP16[44376>>1]|0;
    $59 = $58 << 16 >> 16;
    $60 = HEAP32[47376>>2]|0;
    $61 = (($59) - ($60))|0;
    $62 = ($57|0)>=($61|0);
    if ($62) {
     $0 = 3;
    } else {
     $0 = 2;
    }
    break;
   }
   case 11:  {
    $63 = HEAP16[44376>>1]|0;
    $64 = $63 << 16 >> 16;
    $65 = HEAP32[47376>>2]|0;
    $66 = (($64) - ($65))|0;
    $67 = HEAP16[44360>>1]|0;
    $68 = $67 << 16 >> 16;
    $69 = HEAP32[47368>>2]|0;
    $70 = (($68) - ($69))|0;
    $71 = ($66|0)<=($70|0);
    if ($71) {
     $0 = 5;
    } else {
     $0 = 4;
    }
    break;
   }
   case 8:  {
    $34 = HEAP16[44360>>1]|0;
    $35 = $34 << 16 >> 16;
    $36 = (512 - ($35))|0;
    $37 = HEAP32[47368>>2]|0;
    $38 = (($36) - ($37))|0;
    $39 = HEAP16[44376>>1]|0;
    $40 = $39 << 16 >> 16;
    $41 = HEAP32[47376>>2]|0;
    $42 = (($40) - ($41))|0;
    $43 = ($38|0)<=($42|0);
    if ($43) {
     $0 = 2;
    } else {
     $0 = 4;
    }
    break;
   }
   case 9:  {
    $44 = HEAP16[44360>>1]|0;
    $45 = $44 << 16 >> 16;
    $46 = (512 - ($45))|0;
    $47 = HEAP32[47368>>2]|0;
    $48 = (($46) - ($47))|0;
    $49 = HEAP16[44376>>1]|0;
    $50 = $49 << 16 >> 16;
    $51 = HEAP32[47376>>2]|0;
    $52 = (($50) - ($51))|0;
    $53 = ($48|0)<=($52|0);
    if ($53) {
     $0 = 3;
    } else {
     $0 = 5;
    }
    break;
   }
   case 6:  {
    $16 = HEAP16[44376>>1]|0;
    $17 = $16 << 16 >> 16;
    $18 = HEAP32[47376>>2]|0;
    $19 = (($17) - ($18))|0;
    $20 = HEAP16[44360>>1]|0;
    $21 = $20 << 16 >> 16;
    $22 = HEAP32[47368>>2]|0;
    $23 = (($21) - ($22))|0;
    $24 = ($19|0)<=($23|0);
    if ($24) {
     $0 = 2;
    } else {
     $0 = 3;
    }
    break;
   }
   case 7:  {
    $25 = HEAP16[44376>>1]|0;
    $26 = $25 << 16 >> 16;
    $27 = HEAP32[47376>>2]|0;
    $28 = (($26) - ($27))|0;
    $29 = HEAP16[44360>>1]|0;
    $30 = $29 << 16 >> 16;
    $31 = HEAP32[47368>>2]|0;
    $32 = (($30) - ($31))|0;
    $33 = ($28|0)<=($32|0);
    if ($33) {
     $0 = 4;
    } else {
     $0 = 5;
    }
    break;
   }
   case 12:  {
    $72 = HEAP16[44360>>1]|0;
    $73 = $72 << 16 >> 16;
    $74 = (512 - ($73))|0;
    $75 = HEAP32[47368>>2]|0;
    $76 = (($74) - ($75))|0;
    $77 = HEAP16[44376>>1]|0;
    $78 = $77 << 16 >> 16;
    $79 = HEAP32[47376>>2]|0;
    $80 = (($78) - ($79))|0;
    $81 = ($76|0)<=($80|0);
    if ($81) {
     $0 = 4;
    } else {
     $0 = 2;
    }
    break;
   }
   case 13:  {
    $82 = HEAP16[44360>>1]|0;
    $83 = $82 << 16 >> 16;
    $84 = (512 - ($83))|0;
    $85 = HEAP32[47368>>2]|0;
    $86 = (($84) - ($85))|0;
    $87 = HEAP16[44376>>1]|0;
    $88 = $87 << 16 >> 16;
    $89 = HEAP32[47376>>2]|0;
    $90 = (($88) - ($89))|0;
    $91 = ($86|0)<=($90|0);
    if ($91) {
     $0 = 5;
    } else {
     $0 = 3;
    }
    break;
   }
   default: {
    $92 = HEAP32[((308424 + 100|0))>>2]|0;
    $93 = ($92|0)==(1);
    if ($93) {
     $94 = $0;
     HEAP32[$vararg_buffer>>2] = $94;
     (_printf((47384|0),($vararg_buffer|0))|0);
    }
   }
   }
  }
 }
 $95 = $0;
 $96 = ($95|0)>=(2);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = $0;
 $98 = ($97|0)<=(5);
 if (!($98)) {
  STACKTOP = sp;return;
 }
 $99 = $0;
 if ((($99|0) == 2)) {
  $100 = $brkY;
  $101 = HEAP16[44360>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = $brkX;
  $104 = (($102) - ($103))|0;
  $105 = (_getAverageValue(0,256,512,$104)|0);
  $106 = (($100) + ($105))|0;
  $107 = $106&65535;
  HEAP16[44368>>1] = $107;
 } else if ((($99|0) == 4)) {
  $116 = $brkY;
  $117 = HEAP16[44376>>1]|0;
  $118 = $117 << 16 >> 16;
  $119 = $brkZ;
  $120 = (($118) - ($119))|0;
  $121 = (_getAverageValue(256,0,512,$120)|0);
  $122 = (($116) + ($121))|0;
  $123 = $122&65535;
  HEAP16[44368>>1] = $123;
 } else if ((($99|0) == 5)) {
  $124 = $brkY;
  $125 = HEAP16[44360>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = $brkX;
  $128 = (($126) - ($127))|0;
  $129 = (_getAverageValue(256,0,512,$128)|0);
  $130 = (($124) + ($129))|0;
  $131 = $130&65535;
  HEAP16[44368>>1] = $131;
 } else if ((($99|0) == 3)) {
  $108 = $brkY;
  $109 = HEAP16[44376>>1]|0;
  $110 = $109 << 16 >> 16;
  $111 = $brkZ;
  $112 = (($110) - ($111))|0;
  $113 = (_getAverageValue(0,256,512,$112)|0);
  $114 = (($108) + ($113))|0;
  $115 = $114&65535;
  HEAP16[44368>>1] = $115;
 } else {
 }
 STACKTOP = sp;return;
}
function _checkCollisionWithActors($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $actor = 0, $actorTest = 0, $newAngle = 0, $newAngle1 = 0, $xLeft = 0, $xLeftTest = 0, $xLeftTest2 = 0, $xRight = 0, $xRightTest = 0, $xRightTest3 = 0, $yLeft = 0, $yLeftTest = 0, $yLeftTest4 = 0, $yRight = 0, $yRightTest = 0;
 var $yRightTest5 = 0, $zLeft = 0, $zLeftTest = 0, $zLeftTest6 = 0, $zRight = 0, $zRightTest = 0, $zRightTest7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = HEAP16[44360>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $actor;
 $6 = (($5) + 200|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($4) + ($8))|0;
 $xLeft = $9;
 $10 = HEAP16[44360>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = $actor;
 $13 = (($12) + 200|0);
 $14 = (($13) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = (($11) + ($16))|0;
 $xRight = $17;
 $18 = HEAP16[44368>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = $actor;
 $21 = (($20) + 200|0);
 $22 = (($21) + 4|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = (($19) + ($24))|0;
 $yLeft = $25;
 $26 = HEAP16[44368>>1]|0;
 $27 = $26 << 16 >> 16;
 $28 = $actor;
 $29 = (($28) + 200|0);
 $30 = (($29) + 4|0);
 $31 = (($30) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 << 16 >> 16;
 $34 = (($27) + ($33))|0;
 $yRight = $34;
 $35 = HEAP16[44376>>1]|0;
 $36 = $35 << 16 >> 16;
 $37 = $actor;
 $38 = (($37) + 200|0);
 $39 = (($38) + 8|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 << 16 >> 16;
 $42 = (($36) + ($41))|0;
 $zLeft = $42;
 $43 = HEAP16[44376>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = $actor;
 $46 = (($45) + 200|0);
 $47 = (($46) + 8|0);
 $48 = (($47) + 2|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49 << 16 >> 16;
 $51 = (($44) + ($50))|0;
 $zRight = $51;
 $52 = $actor;
 $53 = (($52) + 148|0);
 HEAP32[$53>>2] = -1;
 $a = 0;
 while(1) {
  $54 = $a;
  $55 = HEAP32[24248>>2]|0;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  $57 = $a;
  $58 = (136 + (($57*232)|0)|0);
  $actorTest = $58;
  $59 = $a;
  $60 = $0;
  $61 = ($59|0)!=($60|0);
  if ($61) {
   $62 = $actorTest;
   $63 = (($62) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(-1);
   if ($65) {
    $66 = $actor;
    $67 = HEAP16[$66>>1]|0;
    $68 = ($67&65535) >>> 5;
    $69 = $68 & 1;
    $70 = ($69<<16>>16)!=(0);
    if (!($70)) {
     $71 = $actorTest;
     $72 = (($71) + 156|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $0;
     $75 = ($73|0)!=($74|0);
     if ($75) {
      $76 = $actorTest;
      $77 = (($76) + 36|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $actorTest;
      $80 = (($79) + 200|0);
      $81 = HEAP16[$80>>1]|0;
      $82 = $81 << 16 >> 16;
      $83 = (($78) + ($82))|0;
      $xLeftTest = $83;
      $84 = $actorTest;
      $85 = (($84) + 36|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $actorTest;
      $88 = (($87) + 200|0);
      $89 = (($88) + 2|0);
      $90 = HEAP16[$89>>1]|0;
      $91 = $90 << 16 >> 16;
      $92 = (($86) + ($91))|0;
      $xRightTest = $92;
      $93 = $actorTest;
      $94 = (($93) + 40|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $actorTest;
      $97 = (($96) + 200|0);
      $98 = (($97) + 4|0);
      $99 = HEAP16[$98>>1]|0;
      $100 = $99 << 16 >> 16;
      $101 = (($95) + ($100))|0;
      $yLeftTest = $101;
      $102 = $actorTest;
      $103 = (($102) + 40|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = $actorTest;
      $106 = (($105) + 200|0);
      $107 = (($106) + 4|0);
      $108 = (($107) + 2|0);
      $109 = HEAP16[$108>>1]|0;
      $110 = $109 << 16 >> 16;
      $111 = (($104) + ($110))|0;
      $yRightTest = $111;
      $112 = $actorTest;
      $113 = (($112) + 44|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = $actorTest;
      $116 = (($115) + 200|0);
      $117 = (($116) + 8|0);
      $118 = HEAP16[$117>>1]|0;
      $119 = $118 << 16 >> 16;
      $120 = (($114) + ($119))|0;
      $zLeftTest = $120;
      $121 = $actorTest;
      $122 = (($121) + 44|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = $actorTest;
      $125 = (($124) + 200|0);
      $126 = (($125) + 8|0);
      $127 = (($126) + 2|0);
      $128 = HEAP16[$127>>1]|0;
      $129 = $128 << 16 >> 16;
      $130 = (($123) + ($129))|0;
      $zRightTest = $130;
      $131 = $xLeft;
      $132 = $xRightTest;
      $133 = ($131|0)<($132|0);
      if ($133) {
       $134 = $xRight;
       $135 = $xLeftTest;
       $136 = ($134|0)>($135|0);
       if ($136) {
        $137 = $yLeft;
        $138 = $yRightTest;
        $139 = ($137|0)<($138|0);
        if ($139) {
         $140 = $yRight;
         $141 = $yLeftTest;
         $142 = ($140|0)>($141|0);
         if ($142) {
          $143 = $zLeft;
          $144 = $zRightTest;
          $145 = ($143|0)<($144|0);
          if ($145) {
           $146 = $zRight;
           $147 = $zLeftTest;
           $148 = ($146|0)>($147|0);
           if ($148) {
            $149 = $a;
            $150 = $actor;
            $151 = (($150) + 148|0);
            HEAP32[$151>>2] = $149;
            $152 = $actorTest;
            $153 = HEAP16[$152>>1]|0;
            $154 = ($153&65535) >>> 14;
            $155 = $154 & 1;
            $156 = ($155<<16>>16)!=(0);
            if ($156) {
             $157 = $actor;
             $158 = (($157) + 2|0);
             $159 = HEAP16[$158>>1]|0;
             $160 = ($159&65535) >>> 8;
             $161 = $160 & 1;
             $162 = ($161<<16>>16)!=(0);
             if ($162) {
              $163 = $yRightTest;
              $164 = $actor;
              $165 = (($164) + 200|0);
              $166 = (($165) + 4|0);
              $167 = HEAP16[$166>>1]|0;
              $168 = $167 << 16 >> 16;
              $169 = (($163) - ($168))|0;
              $170 = (($169) + 1)|0;
              $171 = $170&65535;
              HEAP16[44368>>1] = $171;
              $172 = $a;
              $173 = $actor;
              $174 = (($173) + 156|0);
              HEAP32[$174>>2] = $172;
             } else {
              $175 = $0;
              $176 = $a;
              $177 = (_standingOnActor($175,$176)|0);
              $178 = ($177|0)!=(0);
              if ($178) {
               $179 = $yRightTest;
               $180 = $actor;
               $181 = (($180) + 200|0);
               $182 = (($181) + 4|0);
               $183 = HEAP16[$182>>1]|0;
               $184 = $183 << 16 >> 16;
               $185 = (($179) - ($184))|0;
               $186 = (($185) + 1)|0;
               $187 = $186&65535;
               HEAP16[44368>>1] = $187;
               $188 = $a;
               $189 = $actor;
               $190 = (($189) + 156|0);
               HEAP32[$190>>2] = $188;
              } else {
               $191 = HEAP16[44360>>1]|0;
               $192 = $191 << 16 >> 16;
               $193 = HEAP16[44376>>1]|0;
               $194 = $193 << 16 >> 16;
               $195 = $actorTest;
               $196 = (($195) + 36|0);
               $197 = HEAP32[$196>>2]|0;
               $198 = $actorTest;
               $199 = (($198) + 44|0);
               $200 = HEAP32[$199>>2]|0;
               $201 = (_getAngleAndSetTargetActorDistance($192,$194,$197,$200)|0);
               $newAngle = $201;
               $202 = $actorTest;
               $203 = HEAP16[$202>>1]|0;
               $204 = ($203&65535) >>> 4;
               $205 = $204 & 1;
               $206 = $205&65535;
               $207 = ($206|0)!=(0);
               do {
                if ($207) {
                 $208 = $actor;
                 $209 = HEAP16[$208>>1]|0;
                 $210 = ($209&65535) >>> 4;
                 $211 = $210 & 1;
                 $212 = ($211<<16>>16)!=(0);
                 if ($212) {
                  break;
                 }
                 $213 = $actorTest;
                 $214 = (($213) + 176|0);
                 HEAP32[$214>>2] = 0;
                 $215 = $actorTest;
                 $216 = HEAP16[$215>>1]|0;
                 $217 = ($216&65535) >>> 15;
                 $218 = ($217<<16>>16)!=(0);
                 if ($218) {
                  $219 = $newAngle;
                  $220 = ($219|0)>=(128);
                  do {
                   if ($220) {
                    $221 = $newAngle;
                    $222 = ($221|0)<(384);
                    if (!($222)) {
                     break;
                    }
                    $223 = $actor;
                    $224 = (($223) + 60|0);
                    $225 = HEAP32[$224>>2]|0;
                    $226 = ($225|0)>(128);
                    if (!($226)) {
                     break;
                    }
                    $227 = $actor;
                    $228 = (($227) + 60|0);
                    $229 = HEAP32[$228>>2]|0;
                    $230 = ($229|0)<(384);
                    if (!($230)) {
                     break;
                    }
                    $231 = $actorTest;
                    $232 = (($231) + 168|0);
                    HEAP32[$232>>2] = 192;
                   }
                  } while(0);
                  $233 = $newAngle;
                  $234 = ($233|0)>=(384);
                  do {
                   if ($234) {
                    $235 = $newAngle;
                    $236 = ($235|0)<(640);
                    if (!($236)) {
                     break;
                    }
                    $237 = $actor;
                    $238 = (($237) + 60|0);
                    $239 = HEAP32[$238>>2]|0;
                    $240 = ($239|0)>(384);
                    if (!($240)) {
                     break;
                    }
                    $241 = $actor;
                    $242 = (($241) + 60|0);
                    $243 = HEAP32[$242>>2]|0;
                    $244 = ($243|0)<(640);
                    if (!($244)) {
                     break;
                    }
                    $245 = $actorTest;
                    $246 = (($245) + 172|0);
                    HEAP32[$246>>2] = -64;
                   }
                  } while(0);
                  $247 = $newAngle;
                  $248 = ($247|0)>=(640);
                  do {
                   if ($248) {
                    $249 = $newAngle;
                    $250 = ($249|0)<(896);
                    if (!($250)) {
                     break;
                    }
                    $251 = $actor;
                    $252 = (($251) + 60|0);
                    $253 = HEAP32[$252>>2]|0;
                    $254 = ($253|0)>(640);
                    if (!($254)) {
                     break;
                    }
                    $255 = $actor;
                    $256 = (($255) + 60|0);
                    $257 = HEAP32[$256>>2]|0;
                    $258 = ($257|0)<(896);
                    if (!($258)) {
                     break;
                    }
                    $259 = $actorTest;
                    $260 = (($259) + 168|0);
                    HEAP32[$260>>2] = -64;
                   }
                  } while(0);
                  $261 = $newAngle;
                  $262 = ($261|0)>=(896);
                  if ($262) {
                   label = 38;
                  } else {
                   $263 = $newAngle;
                   $264 = ($263|0)<(128);
                   if ($264) {
                    label = 38;
                   }
                  }
                  do {
                   if ((label|0) == 38) {
                    label = 0;
                    $265 = $actor;
                    $266 = (($265) + 60|0);
                    $267 = HEAP32[$266>>2]|0;
                    $268 = ($267|0)>(896);
                    if (!($268)) {
                     $269 = $actor;
                     $270 = (($269) + 60|0);
                     $271 = HEAP32[$270>>2]|0;
                     $272 = ($271|0)<(128);
                     if (!($272)) {
                      break;
                     }
                    }
                    $273 = $actorTest;
                    $274 = (($273) + 168|0);
                    HEAP32[$274>>2] = 192;
                   }
                  } while(0);
                 } else {
                  $275 = HEAP16[44360>>1]|0;
                  $276 = $275 << 16 >> 16;
                  $277 = $actor;
                  $278 = (($277) + 108|0);
                  $279 = HEAP32[$278>>2]|0;
                  $280 = (($276) - ($279))|0;
                  $281 = $actorTest;
                  $282 = (($281) + 168|0);
                  HEAP32[$282>>2] = $280;
                  $283 = HEAP16[44376>>1]|0;
                  $284 = $283 << 16 >> 16;
                  $285 = $actor;
                  $286 = (($285) + 116|0);
                  $287 = HEAP32[$286>>2]|0;
                  $288 = (($284) - ($287))|0;
                  $289 = $actorTest;
                  $290 = (($289) + 172|0);
                  HEAP32[$290>>2] = $288;
                 }
                }
               } while(0);
               $291 = $actorTest;
               $292 = (($291) + 200|0);
               $293 = (($292) + 2|0);
               $294 = HEAP16[$293>>1]|0;
               $295 = $294 << 16 >> 16;
               $296 = $actorTest;
               $297 = (($296) + 200|0);
               $298 = HEAP16[$297>>1]|0;
               $299 = $298 << 16 >> 16;
               $300 = (($295) - ($299))|0;
               $301 = $actorTest;
               $302 = (($301) + 200|0);
               $303 = (($302) + 8|0);
               $304 = (($303) + 2|0);
               $305 = HEAP16[$304>>1]|0;
               $306 = $305 << 16 >> 16;
               $307 = $actorTest;
               $308 = (($307) + 200|0);
               $309 = (($308) + 8|0);
               $310 = HEAP16[$309>>1]|0;
               $311 = $310 << 16 >> 16;
               $312 = (($306) - ($311))|0;
               $313 = ($300|0)==($312|0);
               do {
                if ($313) {
                 $314 = $actor;
                 $315 = (($314) + 200|0);
                 $316 = (($315) + 2|0);
                 $317 = HEAP16[$316>>1]|0;
                 $318 = $317 << 16 >> 16;
                 $319 = $actor;
                 $320 = (($319) + 200|0);
                 $321 = HEAP16[$320>>1]|0;
                 $322 = $321 << 16 >> 16;
                 $323 = (($318) - ($322))|0;
                 $324 = $actor;
                 $325 = (($324) + 200|0);
                 $326 = (($325) + 8|0);
                 $327 = (($326) + 2|0);
                 $328 = HEAP16[$327>>1]|0;
                 $329 = $328 << 16 >> 16;
                 $330 = $actor;
                 $331 = (($330) + 200|0);
                 $332 = (($331) + 8|0);
                 $333 = HEAP16[$332>>1]|0;
                 $334 = $333 << 16 >> 16;
                 $335 = (($329) - ($334))|0;
                 $336 = ($323|0)==($335|0);
                 if (!($336)) {
                  label = 59;
                  break;
                 }
                 $337 = $newAngle;
                 $338 = ($337|0)<(384);
                 if ($338) {
                  $339 = $xLeftTest;
                  $340 = $actor;
                  $341 = (($340) + 200|0);
                  $342 = (($341) + 2|0);
                  $343 = HEAP16[$342>>1]|0;
                  $344 = $343 << 16 >> 16;
                  $345 = (($339) - ($344))|0;
                  $346 = $345&65535;
                  HEAP16[44360>>1] = $346;
                 }
                 $347 = $newAngle;
                 $348 = ($347|0)>=(384);
                 do {
                  if ($348) {
                   $349 = $newAngle;
                   $350 = ($349|0)<(640);
                   if (!($350)) {
                    break;
                   }
                   $351 = $zRightTest;
                   $352 = $actor;
                   $353 = (($352) + 200|0);
                   $354 = (($353) + 8|0);
                   $355 = HEAP16[$354>>1]|0;
                   $356 = $355 << 16 >> 16;
                   $357 = (($351) - ($356))|0;
                   $358 = $357&65535;
                   HEAP16[44376>>1] = $358;
                  }
                 } while(0);
                 $359 = $newAngle;
                 $360 = ($359|0)>=(640);
                 do {
                  if ($360) {
                   $361 = $newAngle;
                   $362 = ($361|0)<(896);
                   if (!($362)) {
                    break;
                   }
                   $363 = $xRightTest;
                   $364 = $actor;
                   $365 = (($364) + 200|0);
                   $366 = HEAP16[$365>>1]|0;
                   $367 = $366 << 16 >> 16;
                   $368 = (($363) - ($367))|0;
                   $369 = $368&65535;
                   HEAP16[44360>>1] = $369;
                  }
                 } while(0);
                 $370 = $newAngle;
                 $371 = ($370|0)>=(896);
                 do {
                  if ($371) {
                   label = 57;
                  } else {
                   $372 = $newAngle;
                   $373 = ($372|0)<(896);
                   if (!($373)) {
                    break;
                   }
                   $374 = $newAngle;
                   $375 = ($374|0)<(128);
                   if ($375) {
                    label = 57;
                   }
                  }
                 } while(0);
                 if ((label|0) == 57) {
                  label = 0;
                  $376 = $zLeftTest;
                  $377 = $actor;
                  $378 = (($377) + 200|0);
                  $379 = (($378) + 8|0);
                  $380 = (($379) + 2|0);
                  $381 = HEAP16[$380>>1]|0;
                  $382 = $381 << 16 >> 16;
                  $383 = (($376) - ($382))|0;
                  $384 = $383&65535;
                  HEAP16[44376>>1] = $384;
                 }
                } else {
                 label = 59;
                }
               } while(0);
               if ((label|0) == 59) {
                label = 0;
                $385 = $actor;
                $386 = (($385) + 2|0);
                $387 = HEAP16[$386>>1]|0;
                $388 = ($387&65535) >>> 8;
                $389 = $388 & 1;
                $390 = ($389<<16>>16)!=(0);
                if (!($390)) {
                 $391 = HEAP16[44392>>1]|0;
                 HEAP16[44360>>1] = $391;
                 $392 = HEAP16[44400>>1]|0;
                 HEAP16[44368>>1] = $392;
                 $393 = HEAP16[44408>>1]|0;
                 HEAP16[44376>>1] = $393;
                }
               }
              }
             }
            } else {
             $394 = $0;
             $395 = $a;
             $396 = (_standingOnActor($394,$395)|0);
             $397 = ($396|0)!=(0);
             if ($397) {
              $398 = $0;
              $399 = $a;
              _hitActor($398,$399,1,-1);
             }
             $400 = HEAP16[44360>>1]|0;
             $401 = $400 << 16 >> 16;
             $402 = HEAP16[44376>>1]|0;
             $403 = $402 << 16 >> 16;
             $404 = $actorTest;
             $405 = (($404) + 36|0);
             $406 = HEAP32[$405>>2]|0;
             $407 = $actorTest;
             $408 = (($407) + 44|0);
             $409 = HEAP32[$408>>2]|0;
             $410 = (_getAngleAndSetTargetActorDistance($401,$403,$406,$409)|0);
             $newAngle1 = $410;
             $411 = $actorTest;
             $412 = HEAP16[$411>>1]|0;
             $413 = ($412&65535) >>> 4;
             $414 = $413 & 1;
             $415 = $414&65535;
             $416 = ($415|0)!=(0);
             if ($416) {
              $417 = $actor;
              $418 = HEAP16[$417>>1]|0;
              $419 = ($418&65535) >>> 4;
              $420 = $419 & 1;
              $421 = ($420<<16>>16)!=(0);
              if (!($421)) {
               $422 = $actorTest;
               $423 = (($422) + 176|0);
               HEAP32[$423>>2] = 0;
               $424 = $actorTest;
               $425 = HEAP16[$424>>1]|0;
               $426 = ($425&65535) >>> 15;
               $427 = ($426<<16>>16)!=(0);
               if ($427) {
                $428 = $newAngle1;
                $429 = ($428|0)>=(128);
                do {
                 if ($429) {
                  $430 = $newAngle1;
                  $431 = ($430|0)<(384);
                  if (!($431)) {
                   break;
                  }
                  $432 = $actor;
                  $433 = (($432) + 60|0);
                  $434 = HEAP32[$433>>2]|0;
                  $435 = ($434|0)>(128);
                  if (!($435)) {
                   break;
                  }
                  $436 = $actor;
                  $437 = (($436) + 60|0);
                  $438 = HEAP32[$437>>2]|0;
                  $439 = ($438|0)<(384);
                  if (!($439)) {
                   break;
                  }
                  $440 = $actorTest;
                  $441 = (($440) + 168|0);
                  HEAP32[$441>>2] = 192;
                 }
                } while(0);
                $442 = $newAngle1;
                $443 = ($442|0)>=(384);
                do {
                 if ($443) {
                  $444 = $newAngle1;
                  $445 = ($444|0)<(640);
                  if (!($445)) {
                   break;
                  }
                  $446 = $actor;
                  $447 = (($446) + 60|0);
                  $448 = HEAP32[$447>>2]|0;
                  $449 = ($448|0)>(384);
                  if (!($449)) {
                   break;
                  }
                  $450 = $actor;
                  $451 = (($450) + 60|0);
                  $452 = HEAP32[$451>>2]|0;
                  $453 = ($452|0)<(640);
                  if (!($453)) {
                   break;
                  }
                  $454 = $actorTest;
                  $455 = (($454) + 172|0);
                  HEAP32[$455>>2] = -64;
                 }
                } while(0);
                $456 = $newAngle1;
                $457 = ($456|0)>=(640);
                do {
                 if ($457) {
                  $458 = $newAngle1;
                  $459 = ($458|0)<(896);
                  if (!($459)) {
                   break;
                  }
                  $460 = $actor;
                  $461 = (($460) + 60|0);
                  $462 = HEAP32[$461>>2]|0;
                  $463 = ($462|0)>(640);
                  if (!($463)) {
                   break;
                  }
                  $464 = $actor;
                  $465 = (($464) + 60|0);
                  $466 = HEAP32[$465>>2]|0;
                  $467 = ($466|0)<(896);
                  if (!($467)) {
                   break;
                  }
                  $468 = $actorTest;
                  $469 = (($468) + 168|0);
                  HEAP32[$469>>2] = -64;
                 }
                } while(0);
                $470 = $newAngle1;
                $471 = ($470|0)>=(896);
                if ($471) {
                 label = 87;
                } else {
                 $472 = $newAngle1;
                 $473 = ($472|0)<(128);
                 if ($473) {
                  label = 87;
                 }
                }
                do {
                 if ((label|0) == 87) {
                  label = 0;
                  $474 = $actor;
                  $475 = (($474) + 60|0);
                  $476 = HEAP32[$475>>2]|0;
                  $477 = ($476|0)>(896);
                  if (!($477)) {
                   $478 = $actor;
                   $479 = (($478) + 60|0);
                   $480 = HEAP32[$479>>2]|0;
                   $481 = ($480|0)<(128);
                   if (!($481)) {
                    break;
                   }
                  }
                  $482 = $actorTest;
                  $483 = (($482) + 168|0);
                  HEAP32[$483>>2] = 192;
                 }
                } while(0);
               } else {
                $484 = HEAP16[44360>>1]|0;
                $485 = $484 << 16 >> 16;
                $486 = $actor;
                $487 = (($486) + 108|0);
                $488 = HEAP32[$487>>2]|0;
                $489 = (($485) - ($488))|0;
                $490 = $actorTest;
                $491 = (($490) + 168|0);
                HEAP32[$491>>2] = $489;
                $492 = HEAP16[44376>>1]|0;
                $493 = $492 << 16 >> 16;
                $494 = $actor;
                $495 = (($494) + 116|0);
                $496 = HEAP32[$495>>2]|0;
                $497 = (($493) - ($496))|0;
                $498 = $actorTest;
                $499 = (($498) + 172|0);
                HEAP32[$499>>2] = $497;
               }
              }
             }
             $500 = $actorTest;
             $501 = (($500) + 200|0);
             $502 = (($501) + 2|0);
             $503 = HEAP16[$502>>1]|0;
             $504 = $503 << 16 >> 16;
             $505 = $actorTest;
             $506 = (($505) + 200|0);
             $507 = HEAP16[$506>>1]|0;
             $508 = $507 << 16 >> 16;
             $509 = (($504) - ($508))|0;
             $510 = $actorTest;
             $511 = (($510) + 200|0);
             $512 = (($511) + 8|0);
             $513 = (($512) + 2|0);
             $514 = HEAP16[$513>>1]|0;
             $515 = $514 << 16 >> 16;
             $516 = $actorTest;
             $517 = (($516) + 200|0);
             $518 = (($517) + 8|0);
             $519 = HEAP16[$518>>1]|0;
             $520 = $519 << 16 >> 16;
             $521 = (($515) - ($520))|0;
             $522 = ($509|0)==($521|0);
             do {
              if ($522) {
               $523 = $actor;
               $524 = (($523) + 200|0);
               $525 = (($524) + 2|0);
               $526 = HEAP16[$525>>1]|0;
               $527 = $526 << 16 >> 16;
               $528 = $actor;
               $529 = (($528) + 200|0);
               $530 = HEAP16[$529>>1]|0;
               $531 = $530 << 16 >> 16;
               $532 = (($527) - ($531))|0;
               $533 = $actor;
               $534 = (($533) + 200|0);
               $535 = (($534) + 8|0);
               $536 = (($535) + 2|0);
               $537 = HEAP16[$536>>1]|0;
               $538 = $537 << 16 >> 16;
               $539 = $actor;
               $540 = (($539) + 200|0);
               $541 = (($540) + 8|0);
               $542 = HEAP16[$541>>1]|0;
               $543 = $542 << 16 >> 16;
               $544 = (($538) - ($543))|0;
               $545 = ($532|0)==($544|0);
               if (!($545)) {
                label = 108;
                break;
               }
               $546 = $newAngle1;
               $547 = ($546|0)<(384);
               if ($547) {
                $548 = $xLeftTest;
                $549 = $actor;
                $550 = (($549) + 200|0);
                $551 = (($550) + 2|0);
                $552 = HEAP16[$551>>1]|0;
                $553 = $552 << 16 >> 16;
                $554 = (($548) - ($553))|0;
                $555 = $554&65535;
                HEAP16[44360>>1] = $555;
               }
               $556 = $newAngle1;
               $557 = ($556|0)>=(384);
               do {
                if ($557) {
                 $558 = $newAngle1;
                 $559 = ($558|0)<(640);
                 if (!($559)) {
                  break;
                 }
                 $560 = $zRightTest;
                 $561 = $actor;
                 $562 = (($561) + 200|0);
                 $563 = (($562) + 8|0);
                 $564 = HEAP16[$563>>1]|0;
                 $565 = $564 << 16 >> 16;
                 $566 = (($560) - ($565))|0;
                 $567 = $566&65535;
                 HEAP16[44376>>1] = $567;
                }
               } while(0);
               $568 = $newAngle1;
               $569 = ($568|0)>=(640);
               do {
                if ($569) {
                 $570 = $newAngle1;
                 $571 = ($570|0)<(896);
                 if (!($571)) {
                  break;
                 }
                 $572 = $xRightTest;
                 $573 = $actor;
                 $574 = (($573) + 200|0);
                 $575 = HEAP16[$574>>1]|0;
                 $576 = $575 << 16 >> 16;
                 $577 = (($572) - ($576))|0;
                 $578 = $577&65535;
                 HEAP16[44360>>1] = $578;
                }
               } while(0);
               $579 = $newAngle1;
               $580 = ($579|0)>=(896);
               do {
                if ($580) {
                 label = 106;
                } else {
                 $581 = $newAngle1;
                 $582 = ($581|0)<(896);
                 if (!($582)) {
                  break;
                 }
                 $583 = $newAngle1;
                 $584 = ($583|0)<(128);
                 if ($584) {
                  label = 106;
                 }
                }
               } while(0);
               if ((label|0) == 106) {
                label = 0;
                $585 = $zLeftTest;
                $586 = $actor;
                $587 = (($586) + 200|0);
                $588 = (($587) + 8|0);
                $589 = (($588) + 2|0);
                $590 = HEAP16[$589>>1]|0;
                $591 = $590 << 16 >> 16;
                $592 = (($585) - ($591))|0;
                $593 = $592&65535;
                HEAP16[44376>>1] = $593;
               }
              } else {
               label = 108;
              }
             } while(0);
             if ((label|0) == 108) {
              label = 0;
              $594 = $actor;
              $595 = (($594) + 2|0);
              $596 = HEAP16[$595>>1]|0;
              $597 = ($596&65535) >>> 8;
              $598 = $597 & 1;
              $599 = ($598<<16>>16)!=(0);
              if (!($599)) {
               $600 = HEAP16[44392>>1]|0;
               HEAP16[44360>>1] = $600;
               $601 = HEAP16[44400>>1]|0;
               HEAP16[44368>>1] = $601;
               $602 = HEAP16[44408>>1]|0;
               HEAP16[44376>>1] = $602;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $603 = $a;
  $604 = (($603) + 1)|0;
  $a = $604;
 }
 $605 = $actor;
 $606 = (($605) + 2|0);
 $607 = HEAP16[$606>>1]|0;
 $608 = ($607&65535) >>> 1;
 $609 = $608 & 1;
 $610 = ($609<<16>>16)!=(0);
 if (!($610)) {
  $781 = $actor;
  $782 = (($781) + 148|0);
  $783 = HEAP32[$782>>2]|0;
  STACKTOP = sp;return ($783|0);
 }
 $611 = $actor;
 $612 = (($611) + 60|0);
 $613 = HEAP32[$612>>2]|0;
 _rotateActor(0,200,$613);
 $614 = HEAP32[38952>>2]|0;
 $615 = HEAP16[44360>>1]|0;
 $616 = $615 << 16 >> 16;
 $617 = (($614) + ($616))|0;
 $618 = $actor;
 $619 = (($618) + 200|0);
 $620 = HEAP16[$619>>1]|0;
 $621 = $620 << 16 >> 16;
 $622 = (($617) + ($621))|0;
 $xLeft = $622;
 $623 = HEAP32[38952>>2]|0;
 $624 = HEAP16[44360>>1]|0;
 $625 = $624 << 16 >> 16;
 $626 = (($623) + ($625))|0;
 $627 = $actor;
 $628 = (($627) + 200|0);
 $629 = (($628) + 2|0);
 $630 = HEAP16[$629>>1]|0;
 $631 = $630 << 16 >> 16;
 $632 = (($626) + ($631))|0;
 $xRight = $632;
 $633 = HEAP16[44368>>1]|0;
 $634 = $633 << 16 >> 16;
 $635 = $actor;
 $636 = (($635) + 200|0);
 $637 = (($636) + 4|0);
 $638 = HEAP16[$637>>1]|0;
 $639 = $638 << 16 >> 16;
 $640 = (($634) + ($639))|0;
 $yLeft = $640;
 $641 = HEAP16[44368>>1]|0;
 $642 = $641 << 16 >> 16;
 $643 = $actor;
 $644 = (($643) + 200|0);
 $645 = (($644) + 4|0);
 $646 = (($645) + 2|0);
 $647 = HEAP16[$646>>1]|0;
 $648 = $647 << 16 >> 16;
 $649 = (($642) + ($648))|0;
 $yRight = $649;
 $650 = HEAP32[38968>>2]|0;
 $651 = HEAP16[44376>>1]|0;
 $652 = $651 << 16 >> 16;
 $653 = (($650) + ($652))|0;
 $654 = $actor;
 $655 = (($654) + 200|0);
 $656 = (($655) + 8|0);
 $657 = HEAP16[$656>>1]|0;
 $658 = $657 << 16 >> 16;
 $659 = (($653) + ($658))|0;
 $zLeft = $659;
 $660 = HEAP32[38968>>2]|0;
 $661 = HEAP16[44376>>1]|0;
 $662 = $661 << 16 >> 16;
 $663 = (($660) + ($662))|0;
 $664 = $actor;
 $665 = (($664) + 200|0);
 $666 = (($665) + 8|0);
 $667 = (($666) + 2|0);
 $668 = HEAP16[$667>>1]|0;
 $669 = $668 << 16 >> 16;
 $670 = (($663) + ($669))|0;
 $zRight = $670;
 $a = 0;
 while(1) {
  $671 = $a;
  $672 = HEAP32[24248>>2]|0;
  $673 = ($671|0)<($672|0);
  if (!($673)) {
   break;
  }
  $674 = $a;
  $675 = (136 + (($674*232)|0)|0);
  $actorTest = $675;
  $676 = $a;
  $677 = $0;
  $678 = ($676|0)!=($677|0);
  if ($678) {
   $679 = $actorTest;
   $680 = (($679) + 4|0);
   $681 = HEAP32[$680>>2]|0;
   $682 = ($681|0)!=(-1);
   if ($682) {
    $683 = $actorTest;
    $684 = HEAP16[$683>>1]|0;
    $685 = ($684&65535) >>> 9;
    $686 = $685 & 1;
    $687 = ($686<<16>>16)!=(0);
    if (!($687)) {
     $688 = $actorTest;
     $689 = (($688) + 156|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = $0;
     $692 = ($690|0)!=($691|0);
     if ($692) {
      $693 = $actorTest;
      $694 = (($693) + 36|0);
      $695 = HEAP32[$694>>2]|0;
      $696 = $actorTest;
      $697 = (($696) + 200|0);
      $698 = HEAP16[$697>>1]|0;
      $699 = $698 << 16 >> 16;
      $700 = (($695) + ($699))|0;
      $xLeftTest2 = $700;
      $701 = $actorTest;
      $702 = (($701) + 36|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = $actorTest;
      $705 = (($704) + 200|0);
      $706 = (($705) + 2|0);
      $707 = HEAP16[$706>>1]|0;
      $708 = $707 << 16 >> 16;
      $709 = (($703) + ($708))|0;
      $xRightTest3 = $709;
      $710 = $actorTest;
      $711 = (($710) + 40|0);
      $712 = HEAP32[$711>>2]|0;
      $713 = $actorTest;
      $714 = (($713) + 200|0);
      $715 = (($714) + 4|0);
      $716 = HEAP16[$715>>1]|0;
      $717 = $716 << 16 >> 16;
      $718 = (($712) + ($717))|0;
      $yLeftTest4 = $718;
      $719 = $actorTest;
      $720 = (($719) + 40|0);
      $721 = HEAP32[$720>>2]|0;
      $722 = $actorTest;
      $723 = (($722) + 200|0);
      $724 = (($723) + 4|0);
      $725 = (($724) + 2|0);
      $726 = HEAP16[$725>>1]|0;
      $727 = $726 << 16 >> 16;
      $728 = (($721) + ($727))|0;
      $yRightTest5 = $728;
      $729 = $actorTest;
      $730 = (($729) + 44|0);
      $731 = HEAP32[$730>>2]|0;
      $732 = $actorTest;
      $733 = (($732) + 200|0);
      $734 = (($733) + 8|0);
      $735 = HEAP16[$734>>1]|0;
      $736 = $735 << 16 >> 16;
      $737 = (($731) + ($736))|0;
      $zLeftTest6 = $737;
      $738 = $actorTest;
      $739 = (($738) + 44|0);
      $740 = HEAP32[$739>>2]|0;
      $741 = $actorTest;
      $742 = (($741) + 200|0);
      $743 = (($742) + 8|0);
      $744 = (($743) + 2|0);
      $745 = HEAP16[$744>>1]|0;
      $746 = $745 << 16 >> 16;
      $747 = (($740) + ($746))|0;
      $zRightTest7 = $747;
      $748 = $xLeft;
      $749 = $xRightTest3;
      $750 = ($748|0)<($749|0);
      if ($750) {
       $751 = $xRight;
       $752 = $xLeftTest2;
       $753 = ($751|0)>($752|0);
       if ($753) {
        $754 = $yLeft;
        $755 = $yRightTest5;
        $756 = ($754|0)<($755|0);
        if ($756) {
         $757 = $yRight;
         $758 = $yLeftTest4;
         $759 = ($757|0)>($758|0);
         if ($759) {
          $760 = $zLeft;
          $761 = $zRightTest7;
          $762 = ($760|0)<($761|0);
          if ($762) {
           $763 = $zRight;
           $764 = $zLeftTest6;
           $765 = ($763|0)>($764|0);
           if ($765) {
            $766 = $0;
            $767 = $a;
            $768 = $actor;
            $769 = (($768) + 48|0);
            $770 = HEAP32[$769>>2]|0;
            $771 = $actor;
            $772 = (($771) + 60|0);
            $773 = HEAP32[$772>>2]|0;
            $774 = (($773) + 512)|0;
            _hitActor($766,$767,$770,$774);
            $775 = $actor;
            $776 = (($775) + 2|0);
            $777 = HEAP16[$776>>1]|0;
            $778 = $777 & -3;
            HEAP16[$776>>1] = $778;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $779 = $a;
  $780 = (($779) + 1)|0;
  $a = $780;
 }
 $781 = $actor;
 $782 = (($781) + 148|0);
 $783 = HEAP32[$782>>2]|0;
 STACKTOP = sp;return ($783|0);
}
function _checkHeroCollisionWithBricks($X,$Y,$Z,$damageMask) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $damageMask = $damageMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $brickShape = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $damageMask;
 $4 = HEAP16[44360>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = HEAP16[44368>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = HEAP16[44376>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = (_getBrickShape($5,$7,$9)|0);
 $brickShape = $10;
 $11 = $0;
 $12 = HEAP16[44360>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = (($13) + ($11))|0;
 $15 = $14&65535;
 HEAP16[44360>>1] = $15;
 $16 = $1;
 $17 = HEAP16[44368>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + ($16))|0;
 $20 = $19&65535;
 HEAP16[44368>>1] = $20;
 $21 = $2;
 $22 = HEAP16[44376>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = (($23) + ($21))|0;
 $25 = $24&65535;
 HEAP16[44376>>1] = $25;
 $26 = HEAP16[44360>>1]|0;
 $27 = $26 << 16 >> 16;
 $28 = ($27|0)>=(0);
 if ($28) {
  $29 = HEAP16[44376>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ($30|0)>=(0);
  if ($31) {
   $32 = HEAP16[44360>>1]|0;
   $33 = $32 << 16 >> 16;
   $34 = ($33|0)<=(32256);
   if ($34) {
    $35 = HEAP16[44376>>1]|0;
    $36 = $35 << 16 >> 16;
    $37 = ($36|0)<=(32256);
    if ($37) {
     $38 = $brickShape;
     _reajustActorPosition($38);
     $39 = HEAP16[44360>>1]|0;
     $40 = $39 << 16 >> 16;
     $41 = HEAP16[44368>>1]|0;
     $42 = $41 << 16 >> 16;
     $43 = HEAP16[44376>>1]|0;
     $44 = $43 << 16 >> 16;
     $45 = HEAP32[44384>>2]|0;
     $46 = (($45) + 200|0);
     $47 = (($46) + 4|0);
     $48 = (($47) + 2|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = $49 << 16 >> 16;
     $51 = (_getBrickShapeFull($40,$42,$44,$50)|0);
     $brickShape = $51;
     $52 = $brickShape;
     $53 = ($52|0)==(1);
     if ($53) {
      $54 = $3;
      $55 = HEAP32[47336>>2]|0;
      $56 = $55 | $54;
      HEAP32[47336>>2] = $56;
      $57 = HEAP16[44360>>1]|0;
      $58 = $57 << 16 >> 16;
      $59 = HEAP16[44368>>1]|0;
      $60 = $59 << 16 >> 16;
      $61 = HEAP16[44408>>1]|0;
      $62 = $61 << 16 >> 16;
      $63 = $2;
      $64 = (($62) + ($63))|0;
      $65 = HEAP32[44384>>2]|0;
      $66 = (($65) + 200|0);
      $67 = (($66) + 4|0);
      $68 = (($67) + 2|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 << 16 >> 16;
      $71 = (_getBrickShapeFull($58,$60,$64,$70)|0);
      $brickShape = $71;
      $72 = $brickShape;
      $73 = ($72|0)==(1);
      if ($73) {
       $74 = $0;
       $75 = HEAP16[44392>>1]|0;
       $76 = $75 << 16 >> 16;
       $77 = (($74) + ($76))|0;
       $78 = HEAP16[44368>>1]|0;
       $79 = $78 << 16 >> 16;
       $80 = HEAP16[44376>>1]|0;
       $81 = $80 << 16 >> 16;
       $82 = HEAP32[44384>>2]|0;
       $83 = (($82) + 200|0);
       $84 = (($83) + 4|0);
       $85 = (($84) + 2|0);
       $86 = HEAP16[$85>>1]|0;
       $87 = $86 << 16 >> 16;
       $88 = (_getBrickShapeFull($77,$79,$81,$87)|0);
       $brickShape = $88;
       $89 = $brickShape;
       $90 = ($89|0)!=(1);
       if ($90) {
        $91 = HEAP16[44392>>1]|0;
        $92 = $91 << 16 >> 16;
        HEAP32[47344>>2] = $92;
       }
      } else {
       $93 = HEAP16[44408>>1]|0;
       $94 = $93 << 16 >> 16;
       HEAP32[47360>>2] = $94;
      }
     }
    }
   }
  }
 }
 $95 = HEAP32[47344>>2]|0;
 $96 = $95&65535;
 HEAP16[44360>>1] = $96;
 $97 = HEAP32[47352>>2]|0;
 $98 = $97&65535;
 HEAP16[44368>>1] = $98;
 $99 = HEAP32[47360>>2]|0;
 $100 = $99&65535;
 HEAP16[44376>>1] = $100;
 STACKTOP = sp;return;
}
function _checkActorCollisionWithBricks($X,$Y,$Z,$damageMask) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $damageMask = $damageMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $brickShape = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $damageMask;
 $4 = HEAP16[44360>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = HEAP16[44368>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = HEAP16[44376>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = (_getBrickShape($5,$7,$9)|0);
 $brickShape = $10;
 $11 = $0;
 $12 = HEAP16[44360>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = (($13) + ($11))|0;
 $15 = $14&65535;
 HEAP16[44360>>1] = $15;
 $16 = $1;
 $17 = HEAP16[44368>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($18) + ($16))|0;
 $20 = $19&65535;
 HEAP16[44368>>1] = $20;
 $21 = $2;
 $22 = HEAP16[44376>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = (($23) + ($21))|0;
 $25 = $24&65535;
 HEAP16[44376>>1] = $25;
 $26 = HEAP16[44360>>1]|0;
 $27 = $26 << 16 >> 16;
 $28 = ($27|0)>=(0);
 if ($28) {
  $29 = HEAP16[44376>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ($30|0)>=(0);
  if ($31) {
   $32 = HEAP16[44360>>1]|0;
   $33 = $32 << 16 >> 16;
   $34 = ($33|0)<=(32256);
   if ($34) {
    $35 = HEAP16[44376>>1]|0;
    $36 = $35 << 16 >> 16;
    $37 = ($36|0)<=(32256);
    if ($37) {
     $38 = $brickShape;
     _reajustActorPosition($38);
     $39 = HEAP16[44360>>1]|0;
     $40 = $39 << 16 >> 16;
     $41 = HEAP16[44368>>1]|0;
     $42 = $41 << 16 >> 16;
     $43 = HEAP16[44376>>1]|0;
     $44 = $43 << 16 >> 16;
     $45 = (_getBrickShape($40,$42,$44)|0);
     $brickShape = $45;
     $46 = $brickShape;
     $47 = ($46|0)==(1);
     if ($47) {
      $48 = $3;
      $49 = HEAP32[47336>>2]|0;
      $50 = $49 | $48;
      HEAP32[47336>>2] = $50;
      $51 = HEAP16[44360>>1]|0;
      $52 = $51 << 16 >> 16;
      $53 = HEAP16[44368>>1]|0;
      $54 = $53 << 16 >> 16;
      $55 = HEAP16[44408>>1]|0;
      $56 = $55 << 16 >> 16;
      $57 = $2;
      $58 = (($56) + ($57))|0;
      $59 = (_getBrickShape($52,$54,$58)|0);
      $brickShape = $59;
      $60 = $brickShape;
      $61 = ($60|0)==(1);
      if ($61) {
       $62 = $0;
       $63 = HEAP16[44392>>1]|0;
       $64 = $63 << 16 >> 16;
       $65 = (($62) + ($64))|0;
       $66 = HEAP16[44368>>1]|0;
       $67 = $66 << 16 >> 16;
       $68 = HEAP16[44376>>1]|0;
       $69 = $68 << 16 >> 16;
       $70 = (_getBrickShape($65,$67,$69)|0);
       $brickShape = $70;
       $71 = $brickShape;
       $72 = ($71|0)!=(1);
       if ($72) {
        $73 = HEAP16[44392>>1]|0;
        $74 = $73 << 16 >> 16;
        HEAP32[47344>>2] = $74;
       }
      } else {
       $75 = HEAP16[44408>>1]|0;
       $76 = $75 << 16 >> 16;
       HEAP32[47360>>2] = $76;
      }
     }
    }
   }
  }
 }
 $77 = HEAP32[47344>>2]|0;
 $78 = $77&65535;
 HEAP16[44360>>1] = $78;
 $79 = HEAP32[47352>>2]|0;
 $80 = $79&65535;
 HEAP16[44368>>1] = $80;
 $81 = HEAP32[47360>>2]|0;
 $82 = $81&65535;
 HEAP16[44376>>1] = $82;
 STACKTOP = sp;return;
}
function _stopFalling() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fall = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[44288>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $50 = HEAP32[44384>>2]|0;
  $51 = (($50) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52&255;
  $54 = HEAP16[44288>>1]|0;
  $55 = $54 << 16 >> 16;
  (_initAnim(8,2,$53,$55)|0);
  $56 = HEAP32[44384>>2]|0;
  $57 = (($56) + 2|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 & -257;
  HEAP16[$57>>1] = $59;
  STACKTOP = sp;return;
 }
 $3 = HEAP16[34232>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = HEAP16[44368>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (($4) - ($6))|0;
 $fall = $7;
 $8 = $fall;
 $9 = ($8|0)>=(4096);
 if ($9) {
  $10 = HEAP32[44384>>2]|0;
  $11 = (($10) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[44384>>2]|0;
  $14 = (($13) + 40|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1000)|0;
  $17 = HEAP32[44384>>2]|0;
  $18 = (($17) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  _addExtraSpecial($12,$16,$19,0);
  $20 = HEAP32[44384>>2]|0;
  $21 = (($20) + 104|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -1)|0;
  HEAP32[$21>>2] = $23;
  $24 = HEAP16[44288>>1]|0;
  $25 = $24 << 16 >> 16;
  (_initAnim(9,2,0,$25)|0);
 } else {
  $26 = $fall;
  $27 = ($26|0)>=(2048);
  if ($27) {
   $28 = HEAP32[44384>>2]|0;
   $29 = (($28) + 36|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[44384>>2]|0;
   $32 = (($31) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1000)|0;
   $35 = HEAP32[44384>>2]|0;
   $36 = (($35) + 44|0);
   $37 = HEAP32[$36>>2]|0;
   _addExtraSpecial($30,$34,$37,0);
   $38 = HEAP32[44384>>2]|0;
   $39 = (($38) + 104|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + -1)|0;
   HEAP32[$39>>2] = $41;
   $42 = HEAP16[44288>>1]|0;
   $43 = $42 << 16 >> 16;
   (_initAnim(9,2,0,$43)|0);
  } else {
   $44 = $fall;
   $45 = ($44|0)>(10);
   if ($45) {
    $46 = HEAP16[44288>>1]|0;
    $47 = $46 << 16 >> 16;
    (_initAnim(8,2,0,$47)|0);
   } else {
    $48 = HEAP16[44288>>1]|0;
    $49 = $48 << 16 >> 16;
    (_initAnim(0,0,0,$49)|0);
   }
  }
 }
 HEAP16[34232>>1] = 0;
 $56 = HEAP32[44384>>2]|0;
 $57 = (($56) + 2|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = $58 & -257;
 HEAP16[$57>>1] = $59;
 STACKTOP = sp;return;
}
function _checkExtraCollisionWithActors($extra,$actorIdx) {
 $extra = $extra|0;
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $actorTest = 0, $spriteBounding = 0, $xLeft = 0, $xLeftTest = 0, $xRight = 0, $xRightTest = 0, $yLeft = 0, $yLeftTest = 0, $yRight = 0, $yRightTest = 0, $zLeft = 0, $zLeftTest = 0, $zRight = 0, $zRightTest = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $extra;
 $2 = $actorIdx;
 $3 = HEAP32[23336>>2]|0;
 $4 = $1;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = $6<<4;
 $8 = (($3) + ($7)|0);
 $9 = (($8) + 4|0);
 $spriteBounding = $9;
 $10 = $spriteBounding;
 $11 = (($10) + 2|0);
 $spriteBounding = $11;
 $12 = HEAP16[$10>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = $1;
 $15 = (($14) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $18 = (($13) + ($17))|0;
 $xLeft = $18;
 $19 = $spriteBounding;
 $20 = (($19) + 2|0);
 $spriteBounding = $20;
 $21 = HEAP16[$19>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $1;
 $24 = (($23) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (($22) + ($26))|0;
 $xRight = $27;
 $28 = $spriteBounding;
 $29 = (($28) + 2|0);
 $spriteBounding = $29;
 $30 = HEAP16[$28>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = $1;
 $33 = (($32) + 4|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = (($31) + ($35))|0;
 $yLeft = $36;
 $37 = $spriteBounding;
 $38 = (($37) + 2|0);
 $spriteBounding = $38;
 $39 = HEAP16[$37>>1]|0;
 $40 = $39 << 16 >> 16;
 $41 = $1;
 $42 = (($41) + 4|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = (($40) + ($44))|0;
 $yRight = $45;
 $46 = $spriteBounding;
 $47 = (($46) + 2|0);
 $spriteBounding = $47;
 $48 = HEAP16[$46>>1]|0;
 $49 = $48 << 16 >> 16;
 $50 = $1;
 $51 = (($50) + 6|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52 << 16 >> 16;
 $54 = (($49) + ($53))|0;
 $zLeft = $54;
 $55 = $spriteBounding;
 $56 = (($55) + 2|0);
 $spriteBounding = $56;
 $57 = HEAP16[$55>>1]|0;
 $58 = $57 << 16 >> 16;
 $59 = $1;
 $60 = (($59) + 6|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 $63 = (($58) + ($62))|0;
 $zRight = $63;
 $a = 0;
 while(1) {
  $64 = $a;
  $65 = HEAP32[24248>>2]|0;
  $66 = ($64|0)<($65|0);
  if (!($66)) {
   label = 17;
   break;
  }
  $67 = $a;
  $68 = (136 + (($67*232)|0)|0);
  $actorTest = $68;
  $69 = $a;
  $70 = $2;
  $71 = ($69|0)!=($70|0);
  if ($71) {
   $72 = $actorTest;
   $73 = (($72) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)!=(-1);
   if ($75) {
    $76 = $actorTest;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $actorTest;
    $80 = (($79) + 200|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81 << 16 >> 16;
    $83 = (($78) + ($82))|0;
    $xLeftTest = $83;
    $84 = $actorTest;
    $85 = (($84) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $actorTest;
    $88 = (($87) + 200|0);
    $89 = (($88) + 2|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90 << 16 >> 16;
    $92 = (($86) + ($91))|0;
    $xRightTest = $92;
    $93 = $actorTest;
    $94 = (($93) + 40|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $actorTest;
    $97 = (($96) + 200|0);
    $98 = (($97) + 4|0);
    $99 = HEAP16[$98>>1]|0;
    $100 = $99 << 16 >> 16;
    $101 = (($95) + ($100))|0;
    $yLeftTest = $101;
    $102 = $actorTest;
    $103 = (($102) + 40|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $actorTest;
    $106 = (($105) + 200|0);
    $107 = (($106) + 4|0);
    $108 = (($107) + 2|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109 << 16 >> 16;
    $111 = (($104) + ($110))|0;
    $yRightTest = $111;
    $112 = $actorTest;
    $113 = (($112) + 44|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $actorTest;
    $116 = (($115) + 200|0);
    $117 = (($116) + 8|0);
    $118 = HEAP16[$117>>1]|0;
    $119 = $118 << 16 >> 16;
    $120 = (($114) + ($119))|0;
    $zLeftTest = $120;
    $121 = $actorTest;
    $122 = (($121) + 44|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $actorTest;
    $125 = (($124) + 200|0);
    $126 = (($125) + 8|0);
    $127 = (($126) + 2|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = $128 << 16 >> 16;
    $130 = (($123) + ($129))|0;
    $zRightTest = $130;
    $131 = $xLeft;
    $132 = $xRightTest;
    $133 = ($131|0)<($132|0);
    if ($133) {
     $134 = $xRight;
     $135 = $xLeftTest;
     $136 = ($134|0)>($135|0);
     if ($136) {
      $137 = $yLeft;
      $138 = $yRightTest;
      $139 = ($137|0)<($138|0);
      if ($139) {
       $140 = $yRight;
       $141 = $yLeftTest;
       $142 = ($140|0)>($141|0);
       if ($142) {
        $143 = $zLeft;
        $144 = $zRightTest;
        $145 = ($143|0)<($144|0);
        if ($145) {
         $146 = $zRight;
         $147 = $zLeftTest;
         $148 = ($146|0)>($147|0);
         if ($148) {
          break;
         }
        }
       }
      }
     }
    }
   }
  }
  $161 = $a;
  $162 = (($161) + 1)|0;
  $a = $162;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 $149 = $1;
 $150 = (($149) + 46|0);
 $151 = HEAP16[$150>>1]|0;
 $152 = $151 << 16 >> 16;
 $153 = ($152|0)!=(0);
 if ($153) {
  $154 = $2;
  $155 = $a;
  $156 = $1;
  $157 = (($156) + 46|0);
  $158 = HEAP16[$157>>1]|0;
  $159 = $158 << 16 >> 16;
  _hitActor($154,$155,$159,-1);
 }
 $160 = $a;
 $0 = $160;
 $163 = $0;
 STACKTOP = sp;return ($163|0);
}
function _checkExtraCollisionWithBricks($X,$Y,$Z,$oldX,$oldY,$oldZ) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $oldX = $oldX|0;
 $oldY = $oldY|0;
 $oldZ = $oldZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $averageX = 0, $averageY = 0, $averageZ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $X;
 $2 = $Y;
 $3 = $Z;
 $4 = $oldX;
 $5 = $oldY;
 $6 = $oldZ;
 $7 = $4;
 $8 = $5;
 $9 = $6;
 $10 = (_getBrickShape($7,$8,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $12 = $1;
 $13 = $4;
 $14 = (($12) + ($13))|0;
 $15 = (Math_abs(($14|0))|0);
 $16 = (($15|0) / 2)&-1;
 $averageX = $16;
 $17 = $2;
 $18 = $5;
 $19 = (($17) + ($18))|0;
 $20 = (Math_abs(($19|0))|0);
 $21 = (($20|0) / 2)&-1;
 $averageY = $21;
 $22 = $3;
 $23 = $6;
 $24 = (($22) + ($23))|0;
 $25 = (Math_abs(($24|0))|0);
 $26 = (($25|0) / 2)&-1;
 $averageZ = $26;
 $27 = $averageX;
 $28 = $averageY;
 $29 = $averageZ;
 $30 = (_getBrickShape($27,$28,$29)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  $0 = 1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $32 = $4;
 $33 = $averageX;
 $34 = (($32) + ($33))|0;
 $35 = (Math_abs(($34|0))|0);
 $36 = (($35|0) / 2)&-1;
 $37 = $5;
 $38 = $averageY;
 $39 = (($37) + ($38))|0;
 $40 = (Math_abs(($39|0))|0);
 $41 = (($40|0) / 2)&-1;
 $42 = $6;
 $43 = $averageZ;
 $44 = (($42) + ($43))|0;
 $45 = (Math_abs(($44|0))|0);
 $46 = (($45|0) / 2)&-1;
 $47 = (_getBrickShape($36,$41,$46)|0);
 $48 = ($47|0)!=(0);
 if ($48) {
  $0 = 1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $49 = $1;
 $50 = $averageX;
 $51 = (($49) + ($50))|0;
 $52 = (Math_abs(($51|0))|0);
 $53 = (($52|0) / 2)&-1;
 $54 = $2;
 $55 = $averageY;
 $56 = (($54) + ($55))|0;
 $57 = (Math_abs(($56|0))|0);
 $58 = (($57|0) / 2)&-1;
 $59 = $3;
 $60 = $averageZ;
 $61 = (($59) + ($60))|0;
 $62 = (Math_abs(($61|0))|0);
 $63 = (($62|0) / 2)&-1;
 $64 = (_getBrickShape($53,$58,$63)|0);
 $65 = ($64|0)!=(0);
 if ($65) {
  $0 = 1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 } else {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _checkExtraCollisionWithExtra($extra,$extraIdx) {
 $extra = $extra|0;
 $extraIdx = $extraIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extraTest = 0, $i = 0, $spriteBounding = 0, $xLeft = 0, $xLeftTest = 0, $xRight = 0;
 var $xRightTest = 0, $yLeft = 0, $yLeftTest = 0, $yRight = 0, $yRightTest = 0, $zLeft = 0, $zLeftTest = 0, $zRight = 0, $zRightTest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $extra;
 $2 = $extraIdx;
 $3 = HEAP32[23336>>2]|0;
 $4 = $1;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = $6<<4;
 $8 = (($3) + ($7)|0);
 $9 = (($8) + 4|0);
 $spriteBounding = $9;
 $10 = $spriteBounding;
 $11 = (($10) + 2|0);
 $spriteBounding = $11;
 $12 = HEAP16[$10>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = $1;
 $15 = (($14) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $18 = (($13) + ($17))|0;
 $xLeft = $18;
 $19 = $spriteBounding;
 $20 = (($19) + 2|0);
 $spriteBounding = $20;
 $21 = HEAP16[$19>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $1;
 $24 = (($23) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (($22) + ($26))|0;
 $xRight = $27;
 $28 = $spriteBounding;
 $29 = (($28) + 2|0);
 $spriteBounding = $29;
 $30 = HEAP16[$28>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = $1;
 $33 = (($32) + 4|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = (($31) + ($35))|0;
 $yLeft = $36;
 $37 = $spriteBounding;
 $38 = (($37) + 2|0);
 $spriteBounding = $38;
 $39 = HEAP16[$37>>1]|0;
 $40 = $39 << 16 >> 16;
 $41 = $1;
 $42 = (($41) + 4|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = (($40) + ($44))|0;
 $yRight = $45;
 $46 = $spriteBounding;
 $47 = (($46) + 2|0);
 $spriteBounding = $47;
 $48 = HEAP16[$46>>1]|0;
 $49 = $48 << 16 >> 16;
 $50 = $1;
 $51 = (($50) + 6|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52 << 16 >> 16;
 $54 = (($49) + ($53))|0;
 $zLeft = $54;
 $55 = $spriteBounding;
 $56 = (($55) + 2|0);
 $spriteBounding = $56;
 $57 = HEAP16[$55>>1]|0;
 $58 = $57 << 16 >> 16;
 $59 = $1;
 $60 = (($59) + 6|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 $63 = (($58) + ($62))|0;
 $zRight = $63;
 $i = 0;
 while(1) {
  $64 = $i;
  $65 = ($64|0)<(50);
  if (!($65)) {
   label = 17;
   break;
  }
  $66 = $i;
  $67 = (44680 + (($66*52)|0)|0);
  $extraTest = $67;
  $68 = $i;
  $69 = $2;
  $70 = ($68|0)!=($69|0);
  if ($70) {
   $71 = $extraTest;
   $72 = HEAP16[$71>>1]|0;
   $73 = $72 << 16 >> 16;
   $74 = ($73|0)!=(-1);
   if ($74) {
    $75 = $spriteBounding;
    $76 = (($75) + 2|0);
    $spriteBounding = $76;
    $77 = HEAP16[$75>>1]|0;
    $78 = $77 << 16 >> 16;
    $79 = $extraTest;
    $80 = (($79) + 2|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81 << 16 >> 16;
    $83 = (($78) + ($82))|0;
    $xLeftTest = $83;
    $84 = $spriteBounding;
    $85 = (($84) + 2|0);
    $spriteBounding = $85;
    $86 = HEAP16[$84>>1]|0;
    $87 = $86 << 16 >> 16;
    $88 = $extraTest;
    $89 = (($88) + 2|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90 << 16 >> 16;
    $92 = (($87) + ($91))|0;
    $xRightTest = $92;
    $93 = $spriteBounding;
    $94 = (($93) + 2|0);
    $spriteBounding = $94;
    $95 = HEAP16[$93>>1]|0;
    $96 = $95 << 16 >> 16;
    $97 = $extraTest;
    $98 = (($97) + 4|0);
    $99 = HEAP16[$98>>1]|0;
    $100 = $99 << 16 >> 16;
    $101 = (($96) + ($100))|0;
    $yLeftTest = $101;
    $102 = $spriteBounding;
    $103 = (($102) + 2|0);
    $spriteBounding = $103;
    $104 = HEAP16[$102>>1]|0;
    $105 = $104 << 16 >> 16;
    $106 = $extraTest;
    $107 = (($106) + 4|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = $108 << 16 >> 16;
    $110 = (($105) + ($109))|0;
    $yRightTest = $110;
    $111 = $spriteBounding;
    $112 = (($111) + 2|0);
    $spriteBounding = $112;
    $113 = HEAP16[$111>>1]|0;
    $114 = $113 << 16 >> 16;
    $115 = $extraTest;
    $116 = (($115) + 6|0);
    $117 = HEAP16[$116>>1]|0;
    $118 = $117 << 16 >> 16;
    $119 = (($114) + ($118))|0;
    $zLeftTest = $119;
    $120 = $spriteBounding;
    $121 = (($120) + 2|0);
    $spriteBounding = $121;
    $122 = HEAP16[$120>>1]|0;
    $123 = $122 << 16 >> 16;
    $124 = $extraTest;
    $125 = (($124) + 6|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = $126 << 16 >> 16;
    $128 = (($123) + ($127))|0;
    $zRightTest = $128;
    $129 = $xLeft;
    $130 = $xLeftTest;
    $131 = ($129|0)<($130|0);
    if ($131) {
     $132 = $xLeft;
     $133 = $xRightTest;
     $134 = ($132|0)<($133|0);
     if ($134) {
      $135 = $xRight;
      $136 = $xLeftTest;
      $137 = ($135|0)>($136|0);
      if ($137) {
       $138 = $yLeft;
       $139 = $yRightTest;
       $140 = ($138|0)<($139|0);
       if ($140) {
        $141 = $yRight;
        $142 = $yLeftTest;
        $143 = ($141|0)>($142|0);
        if ($143) {
         $144 = $zLeft;
         $145 = $zRightTest;
         $146 = ($144|0)<($145|0);
         if ($146) {
          $147 = $zRight;
          $148 = $zLeftTest;
          $149 = ($147|0)>($148|0);
          if ($149) {
           label = 12;
           break;
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $151 = $i;
  $152 = (($151) + 1)|0;
  $i = $152;
 }
 if ((label|0) == 12) {
  $150 = $i;
  $0 = $150;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 return (0)|0;
}
function _addExtra($actorIdx,$X,$Y,$Z,$info0,$targetActor,$maxSpeed,$strengthOfHit) {
 $actorIdx = $actorIdx|0;
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $info0 = $info0|0;
 $targetActor = $targetActor|0;
 $maxSpeed = $maxSpeed|0;
 $strengthOfHit = $strengthOfHit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $extra = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $actorIdx;
 $2 = $X;
 $3 = $Y;
 $4 = $Z;
 $5 = $info0;
 $6 = $targetActor;
 $7 = $maxSpeed;
 $8 = $strengthOfHit;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(50);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $i;
  $12 = (44680 + (($11*52)|0)|0);
  $extra = $12;
  $13 = $extra;
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = ($15|0)==(-1);
  if ($16) {
   label = 4;
   break;
  }
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 if ((label|0) == 4) {
  $17 = $5;
  $18 = $17&65535;
  $19 = $extra;
  HEAP16[$19>>1] = $18;
  $20 = $extra;
  $21 = (($20) + 34|0);
  HEAP16[$21>>1] = 128;
  $22 = $extra;
  $23 = (($22) + 48|0);
  HEAP16[$23>>1] = 0;
  $24 = $2;
  $25 = $24&65535;
  $26 = $extra;
  $27 = (($26) + 2|0);
  HEAP16[$27>>1] = $25;
  $28 = $3;
  $29 = $28&65535;
  $30 = $extra;
  $31 = (($30) + 4|0);
  HEAP16[$31>>1] = $29;
  $32 = $4;
  $33 = $32&65535;
  $34 = $extra;
  $35 = (($34) + 6|0);
  HEAP16[$35>>1] = $33;
  $36 = $1;
  $37 = $36&65535;
  $38 = $extra;
  $39 = (($38) + 44|0);
  HEAP16[$39>>1] = $37;
  $40 = $6;
  $41 = $extra;
  $42 = (($41) + 40|0);
  HEAP32[$42>>2] = $40;
  $43 = $7;
  $44 = $43&65535;
  $45 = $extra;
  $46 = (($45) + 32|0);
  HEAP16[$46>>1] = $44;
  $47 = $8;
  $48 = $47&65535;
  $49 = $extra;
  $50 = (($49) + 46|0);
  HEAP16[$50>>1] = $48;
  $51 = $7;
  $52 = $51&65535;
  $53 = $extra;
  $54 = (($53) + 16|0);
  _setActorAngle(0,$52,50,$54);
  $55 = $2;
  $56 = $4;
  $57 = $6;
  $58 = (136 + (($57*232)|0)|0);
  $59 = (($58) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $6;
  $62 = (136 + (($61*232)|0)|0);
  $63 = (($62) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_getAngleAndSetTargetActorDistance($55,$56,$60,$64)|0);
  $66 = $65&65535;
  $67 = $extra;
  $68 = (($67) + 36|0);
  HEAP16[$68>>1] = $66;
  $69 = $i;
  $0 = $69;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _addExtraExplode($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $extra = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $X;
 $2 = $Y;
 $3 = $Z;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(50);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $i;
  $7 = (44680 + (($6*52)|0)|0);
  $extra = $7;
  $8 = $extra;
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 << 16 >> 16;
  $11 = ($10|0)==(-1);
  if ($11) {
   label = 4;
   break;
  }
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 if ((label|0) == 4) {
  $12 = $extra;
  HEAP16[$12>>1] = 97;
  $13 = $extra;
  $14 = (($13) + 34|0);
  HEAP16[$14>>1] = 4097;
  $15 = $extra;
  $16 = (($15) + 48|0);
  HEAP16[$16>>1] = 0;
  $17 = $1;
  $18 = $17&65535;
  $19 = $extra;
  $20 = (($19) + 2|0);
  HEAP16[$20>>1] = $18;
  $21 = $2;
  $22 = $21&65535;
  $23 = $extra;
  $24 = (($23) + 4|0);
  HEAP16[$24>>1] = $22;
  $25 = $3;
  $26 = $25&65535;
  $27 = $extra;
  $28 = (($27) + 6|0);
  HEAP16[$28>>1] = $26;
  $29 = $extra;
  $30 = (($29) + 44|0);
  HEAP16[$30>>1] = 40;
  $31 = HEAP32[25920>>2]|0;
  $32 = $extra;
  $33 = (($32) + 40|0);
  HEAP32[$33>>2] = $31;
  $34 = $extra;
  $35 = (($34) + 46|0);
  HEAP16[$35>>1] = 0;
  $36 = $i;
  $0 = $36;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _resetExtras() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $extra = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(50);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (44680 + (($2*52)|0)|0);
  $extra = $3;
  $4 = $extra;
  HEAP16[$4>>1] = -1;
  $5 = $extra;
  $6 = (($5) + 48|0);
  HEAP16[$6>>1] = 1;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $i = $8;
 }
 STACKTOP = sp;return;
}
function _throwExtra($extra,$var1,$var2,$var3,$var4) {
 $extra = $extra|0;
 $var1 = $var1|0;
 $var2 = $var2|0;
 $var3 = $var3|0;
 $var4 = $var4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $extra;
 $1 = $var1;
 $2 = $var2;
 $3 = $var3;
 $4 = $var4;
 $5 = $0;
 $6 = (($5) + 34|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $8 | 2;
 $10 = $9&65535;
 HEAP16[$6>>1] = $10;
 $11 = $0;
 $12 = (($11) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $0;
 $15 = (($14) + 8|0);
 HEAP16[$15>>1] = $13;
 $16 = $0;
 $17 = (($16) + 4|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $0;
 $20 = (($19) + 10|0);
 HEAP16[$20>>1] = $18;
 $21 = $0;
 $22 = (($21) + 6|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $0;
 $25 = (($24) + 12|0);
 HEAP16[$25>>1] = $23;
 $26 = $3;
 $27 = $1;
 _rotateActor($26,0,$27);
 $28 = HEAP32[38968>>2]|0;
 $29 = (0 - ($28))|0;
 $30 = $29&65535;
 $31 = $0;
 $32 = (($31) + 30|0);
 HEAP16[$32>>1] = $30;
 $33 = HEAP32[38952>>2]|0;
 $34 = $2;
 _rotateActor(0,$33,$34);
 $35 = HEAP32[38952>>2]|0;
 $36 = $35&65535;
 $37 = $0;
 $38 = (($37) + 28|0);
 HEAP16[$38>>1] = $36;
 $39 = HEAP32[38968>>2]|0;
 $40 = $39&65535;
 $41 = $0;
 $42 = (($41) + 32|0);
 HEAP16[$42>>1] = $40;
 $43 = $4;
 $44 = $43&65535;
 $45 = $0;
 $46 = (($45) + 36|0);
 HEAP16[$46>>1] = $44;
 $47 = HEAP32[25920>>2]|0;
 $48 = $0;
 $49 = (($48) + 40|0);
 HEAP32[$49>>2] = $47;
 STACKTOP = sp;return;
}
function _addExtraSpecial($X,$Y,$Z,$type) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $extra = 0, $flag = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $type;
 $4 = $3;
 $5 = (32768 + ($4))|0;
 $6 = $5&65535;
 $flag = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(50);
  if (!($8)) {
   label = 12;
   break;
  }
  $9 = $i;
  $10 = (44680 + (($9*52)|0)|0);
  $extra = $10;
  $11 = $extra;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($13|0)==(-1);
  if ($14) {
   $15 = $flag;
   $16 = $extra;
   HEAP16[$16>>1] = $15;
   $17 = $extra;
   $18 = (($17) + 48|0);
   HEAP16[$18>>1] = 0;
   $19 = $3;
   $20 = ($19|0)==(0);
   if ($20) {
    label = 5;
    break;
   }
   $48 = $3;
   $49 = ($48|0)==(1);
   if ($49) {
    label = 7;
    break;
   }
  }
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 if ((label|0) == 5) {
  $21 = $extra;
  $22 = (($21) + 34|0);
  HEAP16[$22>>1] = 9;
  $23 = $0;
  $24 = $23&65535;
  $25 = $extra;
  $26 = (($25) + 2|0);
  HEAP16[$26>>1] = $24;
  $27 = $1;
  $28 = $27&65535;
  $29 = $extra;
  $30 = (($29) + 4|0);
  HEAP16[$30>>1] = $28;
  $31 = $2;
  $32 = $31&65535;
  $33 = $extra;
  $34 = (($33) + 6|0);
  HEAP16[$34>>1] = $32;
  $35 = $extra;
  $36 = (_rand()|0);
  $37 = (($36|0) % 256)&-1;
  $38 = (($37) + 128)|0;
  $39 = (_rand()|0);
  $40 = (($39|0) % 1024)&-1;
  _throwExtra($35,$38,$40,50,20);
  $41 = $extra;
  $42 = (($41) + 46|0);
  HEAP16[$42>>1] = 0;
  $43 = HEAP32[25920>>2]|0;
  $44 = $extra;
  $45 = (($44) + 40|0);
  HEAP32[$45>>2] = $43;
  $46 = $extra;
  $47 = (($46) + 44|0);
  HEAP16[$47>>1] = 100;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $50 = $extra;
  $51 = (($50) + 34|0);
  HEAP16[$51>>1] = 1;
  $52 = $0;
  $53 = $52&65535;
  $54 = $extra;
  $55 = (($54) + 2|0);
  HEAP16[$55>>1] = $53;
  $56 = $1;
  $57 = $56&65535;
  $58 = $extra;
  $59 = (($58) + 4|0);
  HEAP16[$59>>1] = $57;
  $60 = $2;
  $61 = $60&65535;
  $62 = $extra;
  $63 = (($62) + 6|0);
  HEAP16[$63>>1] = $61;
  $64 = $extra;
  $65 = (($64) + 46|0);
  HEAP16[$65>>1] = 0;
  $66 = HEAP32[25920>>2]|0;
  $67 = $extra;
  $68 = (($67) + 40|0);
  HEAP32[$68>>2] = $66;
  $69 = $extra;
  $70 = (($69) + 44|0);
  HEAP16[$70>>1] = 5;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _addExtraBonus($X,$Y,$Z,$param,$angle,$type,$bonusAmount) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $param = $param|0;
 $angle = $angle|0;
 $type = $type|0;
 $bonusAmount = $bonusAmount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extra = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $X;
 $2 = $Y;
 $3 = $Z;
 $4 = $param;
 $5 = $angle;
 $6 = $type;
 $7 = $bonusAmount;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(50);
  if (!($9)) {
   label = 7;
   break;
  }
  $10 = $i;
  $11 = (44680 + (($10*52)|0)|0);
  $extra = $11;
  $12 = $extra;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 << 16 >> 16;
  $15 = ($14|0)==(-1);
  if ($15) {
   label = 4;
   break;
  }
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
 }
 if ((label|0) == 4) {
  $16 = $6;
  $17 = $16&65535;
  $18 = $extra;
  HEAP16[$18>>1] = $17;
  $19 = $extra;
  $20 = (($19) + 34|0);
  HEAP16[$20>>1] = 16497;
  $21 = $1;
  $22 = $21&65535;
  $23 = $extra;
  $24 = (($23) + 2|0);
  HEAP16[$24>>1] = $22;
  $25 = $2;
  $26 = $25&65535;
  $27 = $extra;
  $28 = (($27) + 4|0);
  HEAP16[$28>>1] = $26;
  $29 = $3;
  $30 = $29&65535;
  $31 = $extra;
  $32 = (($31) + 6|0);
  HEAP16[$32>>1] = $30;
  $33 = $extra;
  $34 = $4;
  $35 = $5;
  _throwExtra($33,$34,$35,40,15);
  $36 = $extra;
  $37 = (($36) + 46|0);
  HEAP16[$37>>1] = 0;
  $38 = HEAP32[25920>>2]|0;
  $39 = $extra;
  $40 = (($39) + 40|0);
  HEAP32[$40>>2] = $38;
  $41 = $extra;
  $42 = (($41) + 44|0);
  HEAP16[$42>>1] = 1000;
  $43 = $7;
  $44 = $43&65535;
  $45 = $extra;
  $46 = (($45) + 48|0);
  HEAP16[$46>>1] = $44;
  $47 = $i;
  $0 = $47;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _addExtraThrow($actorIdx,$X,$Y,$Z,$sprite,$var2,$var3,$var4,$var5,$strengthOfHit) {
 $actorIdx = $actorIdx|0;
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $sprite = $sprite|0;
 $var2 = $var2|0;
 $var3 = $var3|0;
 $var4 = $var4|0;
 $var5 = $var5|0;
 $strengthOfHit = $strengthOfHit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extra = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $actorIdx;
 $2 = $X;
 $3 = $Y;
 $4 = $Z;
 $5 = $sprite;
 $6 = $var2;
 $7 = $var3;
 $8 = $var4;
 $9 = $var5;
 $10 = $strengthOfHit;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(50);
  if (!($12)) {
   label = 7;
   break;
  }
  $13 = $i;
  $14 = (44680 + (($13*52)|0)|0);
  $extra = $14;
  $15 = $extra;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = ($17|0)==(-1);
  if ($18) {
   label = 4;
   break;
  }
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 if ((label|0) == 4) {
  $19 = $5;
  $20 = $19&65535;
  $21 = $extra;
  HEAP16[$21>>1] = $20;
  $22 = $extra;
  $23 = (($22) + 34|0);
  HEAP16[$23>>1] = 8460;
  $24 = $2;
  $25 = $24&65535;
  $26 = $extra;
  $27 = (($26) + 2|0);
  HEAP16[$27>>1] = $25;
  $28 = $3;
  $29 = $28&65535;
  $30 = $extra;
  $31 = (($30) + 4|0);
  HEAP16[$31>>1] = $29;
  $32 = $4;
  $33 = $32&65535;
  $34 = $extra;
  $35 = (($34) + 6|0);
  HEAP16[$35>>1] = $33;
  $36 = $extra;
  $37 = $6;
  $38 = $7;
  $39 = $8;
  $40 = $9;
  _throwExtra($36,$37,$38,$39,$40);
  $41 = $10;
  $42 = $41&65535;
  $43 = $extra;
  $44 = (($43) + 46|0);
  HEAP16[$44>>1] = $42;
  $45 = HEAP32[25920>>2]|0;
  $46 = $extra;
  $47 = (($46) + 40|0);
  HEAP32[$47>>2] = $45;
  $48 = $1;
  $49 = $48&65535;
  $50 = $extra;
  $51 = (($50) + 44|0);
  HEAP16[$51>>1] = $49;
  $52 = $extra;
  $53 = (($52) + 48|0);
  HEAP16[$53>>1] = 0;
  $54 = $i;
  $0 = $54;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _addExtraAiming($actorIdx,$X,$Y,$Z,$spriteIdx,$targetActorIdx,$maxSpeed,$strengthOfHit) {
 $actorIdx = $actorIdx|0;
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $spriteIdx = $spriteIdx|0;
 $targetActorIdx = $targetActorIdx|0;
 $maxSpeed = $maxSpeed|0;
 $strengthOfHit = $strengthOfHit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $extra = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $actorIdx;
 $2 = $X;
 $3 = $Y;
 $4 = $Z;
 $5 = $spriteIdx;
 $6 = $targetActorIdx;
 $7 = $maxSpeed;
 $8 = $strengthOfHit;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(50);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $i;
  $12 = (44680 + (($11*52)|0)|0);
  $extra = $12;
  $13 = $extra;
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = ($15|0)==(-1);
  if ($16) {
   label = 4;
   break;
  }
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 if ((label|0) == 4) {
  $17 = $5;
  $18 = $17&65535;
  $19 = $extra;
  HEAP16[$19>>1] = $18;
  $20 = $extra;
  $21 = (($20) + 34|0);
  HEAP16[$21>>1] = 128;
  $22 = $extra;
  $23 = (($22) + 48|0);
  HEAP16[$23>>1] = 0;
  $24 = $2;
  $25 = $24&65535;
  $26 = $extra;
  $27 = (($26) + 2|0);
  HEAP16[$27>>1] = $25;
  $28 = $3;
  $29 = $28&65535;
  $30 = $extra;
  $31 = (($30) + 4|0);
  HEAP16[$31>>1] = $29;
  $32 = $4;
  $33 = $32&65535;
  $34 = $extra;
  $35 = (($34) + 6|0);
  HEAP16[$35>>1] = $33;
  $36 = $1;
  $37 = $36&65535;
  $38 = $extra;
  $39 = (($38) + 44|0);
  HEAP16[$39>>1] = $37;
  $40 = $6;
  $41 = $extra;
  $42 = (($41) + 40|0);
  HEAP32[$42>>2] = $40;
  $43 = $7;
  $44 = $43&65535;
  $45 = $extra;
  $46 = (($45) + 32|0);
  HEAP16[$46>>1] = $44;
  $47 = $8;
  $48 = $47&65535;
  $49 = $extra;
  $50 = (($49) + 46|0);
  HEAP16[$50>>1] = $48;
  $51 = $7;
  $52 = $51&65535;
  $53 = $extra;
  $54 = (($53) + 16|0);
  _setActorAngle(0,$52,50,$54);
  $55 = $2;
  $56 = $4;
  $57 = $6;
  $58 = (136 + (($57*232)|0)|0);
  $59 = (($58) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $6;
  $62 = (136 + (($61*232)|0)|0);
  $63 = (($62) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_getAngleAndSetTargetActorDistance($55,$56,$60,$64)|0);
  $66 = $65&65535;
  $67 = $extra;
  $68 = (($67) + 36|0);
  HEAP16[$68>>1] = $66;
  $69 = $i;
  $0 = $69;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _findExtraKey() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extra = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(50);
  if (!($2)) {
   label = 7;
   break;
  }
  $3 = $i;
  $4 = (44680 + (($3*52)|0)|0);
  $extra = $4;
  $5 = $extra;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($7|0)==(6);
  if ($8) {
   label = 4;
   break;
  }
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 if ((label|0) == 4) {
  $9 = $i;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _addExtraAimingAtKey($actorIdx,$X,$Y,$Z,$spriteIdx,$extraIdx) {
 $actorIdx = $actorIdx|0;
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $spriteIdx = $spriteIdx|0;
 $extraIdx = $extraIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $extra = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $actorIdx;
 $2 = $X;
 $3 = $Y;
 $4 = $Z;
 $5 = $spriteIdx;
 $6 = $extraIdx;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(50);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $i;
  $10 = (44680 + (($9*52)|0)|0);
  $extra = $10;
  $11 = $extra;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($13|0)==(-1);
  if ($14) {
   label = 4;
   break;
  }
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 if ((label|0) == 4) {
  $15 = $5;
  $16 = $15&65535;
  $17 = $extra;
  HEAP16[$17>>1] = $16;
  $18 = $extra;
  $19 = (($18) + 34|0);
  HEAP16[$19>>1] = 512;
  $20 = $extra;
  $21 = (($20) + 48|0);
  HEAP16[$21>>1] = 0;
  $22 = $2;
  $23 = $22&65535;
  $24 = $extra;
  $25 = (($24) + 2|0);
  HEAP16[$25>>1] = $23;
  $26 = $3;
  $27 = $26&65535;
  $28 = $extra;
  $29 = (($28) + 4|0);
  HEAP16[$29>>1] = $27;
  $30 = $4;
  $31 = $30&65535;
  $32 = $extra;
  $33 = (($32) + 6|0);
  HEAP16[$33>>1] = $31;
  $34 = $6;
  $35 = $34&65535;
  $36 = $extra;
  $37 = (($36) + 44|0);
  HEAP16[$37>>1] = $35;
  $38 = $extra;
  $39 = (($38) + 32|0);
  HEAP16[$39>>1] = 4000;
  $40 = $extra;
  $41 = (($40) + 46|0);
  HEAP16[$41>>1] = 0;
  $42 = $extra;
  $43 = (($42) + 16|0);
  _setActorAngle(0,4000,50,$43);
  $44 = $2;
  $45 = $4;
  $46 = $6;
  $47 = (44680 + (($46*52)|0)|0);
  $48 = (($47) + 2|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = $6;
  $52 = (44680 + (($51*52)|0)|0);
  $53 = (($52) + 6|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = (_getAngleAndSetTargetActorDistance($44,$45,$50,$55)|0);
  $57 = $56&65535;
  $58 = $extra;
  $59 = (($58) + 36|0);
  HEAP16[$59>>1] = $57;
  $60 = $i;
  $0 = $60;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _addExtraThrowMagicball($X,$Y,$Z,$param1,$angle,$param2,$param3) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $param1 = $param1|0;
 $angle = $angle|0;
 $param2 = $param2|0;
 $param3 = $param3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $ballSprite = 0, $ballStrength = 0, $extraIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $param1;
 $4 = $angle;
 $5 = $param2;
 $6 = $param3;
 $ballSprite = -1;
 $ballStrength = 0;
 $extraIdx = -1;
 $7 = HEAP16[24256>>1]|0;
 $8 = $7 << 16 >> 16;
 switch ($8|0) {
 case 2:  {
  $ballSprite = 42;
  $ballStrength = 6;
  break;
 }
 case 1: case 0:  {
  $ballSprite = 1;
  $ballStrength = 4;
  break;
 }
 case 3:  {
  $ballSprite = 43;
  $ballStrength = 8;
  break;
 }
 case 4:  {
  $ballSprite = 13;
  $ballStrength = 10;
  break;
 }
 default: {
 }
 }
 $9 = HEAP16[38320>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($10) - 1)|0;
 $12 = (($11|0) / 20)&-1;
 $13 = (($12) + 1)|0;
 $14 = $13&65535;
 HEAP16[38272>>1] = $14;
 $15 = HEAP16[38320>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = ($16|0)==(0);
 if ($17) {
  HEAP16[38272>>1] = 0;
 }
 $18 = (_findExtraKey()|0);
 $extraIdx = $18;
 $19 = $extraIdx;
 $20 = ($19|0)!=(-1);
 if ($20) {
  HEAP16[38272>>1] = 5;
 }
 $21 = HEAP16[38272>>1]|0;
 $22 = $21 << 16 >> 16;
 switch ($22|0) {
 case 4: case 3: case 2:  {
  HEAP16[38272>>1] = 1;
  HEAP16[38280>>1] = 4;
  $45 = $0;
  $46 = $1;
  $47 = $2;
  $48 = $ballSprite;
  $49 = $3;
  $50 = $4;
  $51 = $5;
  $52 = $6;
  $53 = $ballStrength;
  $54 = (_addExtraThrow(0,$45,$46,$47,$48,$49,$50,$51,$52,$53)|0);
  $55 = $54&65535;
  HEAP16[38264>>1] = $55;
  break;
 }
 case 1:  {
  HEAP16[38280>>1] = 4;
  $34 = $0;
  $35 = $1;
  $36 = $2;
  $37 = $ballSprite;
  $38 = $3;
  $39 = $4;
  $40 = $5;
  $41 = $6;
  $42 = $ballStrength;
  $43 = (_addExtraThrow(0,$34,$35,$36,$37,$38,$39,$40,$41,$42)|0);
  $44 = $43&65535;
  HEAP16[38264>>1] = $44;
  break;
 }
 case 5:  {
  $56 = $0;
  $57 = $1;
  $58 = $2;
  $59 = $ballSprite;
  $60 = $extraIdx;
  $61 = (_addExtraAimingAtKey(0,$56,$57,$58,$59,$60)|0);
  $62 = $61&65535;
  HEAP16[38264>>1] = $62;
  break;
 }
 case 0:  {
  $23 = $0;
  $24 = $1;
  $25 = $2;
  $26 = $ballSprite;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  $30 = $6;
  $31 = $ballStrength;
  $32 = (_addExtraThrow(0,$23,$24,$25,$26,$27,$28,$29,$30,$31)|0);
  $33 = $32&65535;
  HEAP16[38264>>1] = $33;
  break;
 }
 default: {
 }
 }
 $63 = HEAP16[38320>>1]|0;
 $64 = $63 << 16 >> 16;
 $65 = ($64|0)>(0);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = HEAP16[38320>>1]|0;
 $67 = (($66) + -1)<<16>>16;
 HEAP16[38320>>1] = $67;
 STACKTOP = sp;return;
}
function _drawSpecialShape($shapeTable,$X,$Y,$color,$angle,$size) {
 $shapeTable = $shapeTable|0;
 $X = $X|0;
 $Y = $Y|0;
 $color = $color|0;
 $angle = $angle|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $computedX = 0, $computedY = 0, $currentShapeTable = 0, $currentX = 0, $currentY = 0, $numEntries = 0, $oldComputedX = 0, $oldComputedY = 0, $temp1 = 0;
 var $var_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $shapeTable;
 $1 = $X;
 $2 = $Y;
 $3 = $color;
 $4 = $angle;
 $5 = $size;
 $6 = $0;
 $7 = (($6) + 2|0);
 $0 = $7;
 $8 = HEAP16[$6>>1]|0;
 $currentShapeTable = $8;
 $9 = $0;
 $10 = (($9) + 2|0);
 $0 = $10;
 $11 = HEAP16[$9>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = $5;
 $14 = Math_imul($12, $13)|0;
 $15 = $14 >> 4;
 $16 = $15&65535;
 $var_8 = $16;
 $17 = $0;
 $18 = (($17) + 2|0);
 $0 = $18;
 $19 = HEAP16[$17>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = $5;
 $22 = Math_imul($20, $21)|0;
 $23 = $22 >> 4;
 $24 = $23&65535;
 $temp1 = $24;
 HEAP32[47432>>2] = 32000;
 HEAP32[47440>>2] = -32000;
 HEAP32[47448>>2] = 32000;
 HEAP32[47456>>2] = -32000;
 $25 = $var_8;
 $26 = $25 << 16 >> 16;
 $27 = $temp1;
 $28 = $27 << 16 >> 16;
 $29 = $4;
 _rotateActor($26,$28,$29);
 $30 = HEAP32[38952>>2]|0;
 $31 = $1;
 $32 = (($30) + ($31))|0;
 $computedX = $32;
 $33 = HEAP32[38968>>2]|0;
 $34 = $2;
 $35 = (($33) + ($34))|0;
 $computedY = $35;
 $36 = $computedX;
 $37 = HEAP32[47432>>2]|0;
 $38 = ($36|0)<($37|0);
 if ($38) {
  $39 = $computedX;
  HEAP32[47432>>2] = $39;
 }
 $40 = $computedX;
 $41 = HEAP32[47440>>2]|0;
 $42 = ($40|0)>($41|0);
 if ($42) {
  $43 = $computedX;
  HEAP32[47440>>2] = $43;
 }
 $44 = $computedY;
 $45 = HEAP32[47448>>2]|0;
 $46 = ($44|0)<($45|0);
 if ($46) {
  $47 = $computedY;
  HEAP32[47448>>2] = $47;
 }
 $48 = $computedY;
 $49 = HEAP32[47456>>2]|0;
 $50 = ($48|0)>($49|0);
 if ($50) {
  $51 = $computedY;
  HEAP32[47456>>2] = $51;
 }
 $numEntries = 1;
 $52 = $computedX;
 $currentX = $52;
 $53 = $computedY;
 $currentY = $53;
 while(1) {
  $54 = $numEntries;
  $55 = $currentShapeTable;
  $56 = $55 << 16 >> 16;
  $57 = ($54|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $0;
  $59 = (($58) + 2|0);
  $0 = $59;
  $60 = HEAP16[$58>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = $5;
  $63 = Math_imul($61, $62)|0;
  $64 = $63 >> 4;
  $65 = $64&65535;
  $var_8 = $65;
  $66 = $0;
  $67 = (($66) + 2|0);
  $0 = $67;
  $68 = HEAP16[$66>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = $5;
  $71 = Math_imul($69, $70)|0;
  $72 = $71 >> 4;
  $73 = $72&65535;
  $temp1 = $73;
  $74 = $currentX;
  $oldComputedX = $74;
  $75 = $currentY;
  $oldComputedY = $75;
  $76 = $currentX;
  $77 = $76&65535;
  HEAP16[38904>>1] = $77;
  $78 = $currentY;
  $79 = $78&65535;
  HEAP16[38912>>1] = $79;
  $80 = $var_8;
  $81 = $80 << 16 >> 16;
  $82 = $temp1;
  $83 = $82 << 16 >> 16;
  $84 = $4;
  _rotateActor($81,$83,$84);
  $85 = HEAP32[38952>>2]|0;
  $86 = $1;
  $87 = (($85) + ($86))|0;
  $currentX = $87;
  $88 = HEAP32[38968>>2]|0;
  $89 = $2;
  $90 = (($88) + ($89))|0;
  $currentY = $90;
  $91 = $currentX;
  $92 = HEAP32[47432>>2]|0;
  $93 = ($91|0)<($92|0);
  if ($93) {
   $94 = $currentX;
   HEAP32[47432>>2] = $94;
  }
  $95 = $currentX;
  $96 = HEAP32[47440>>2]|0;
  $97 = ($95|0)>($96|0);
  if ($97) {
   $98 = $currentX;
   HEAP32[47440>>2] = $98;
  }
  $99 = $currentY;
  $100 = HEAP32[47448>>2]|0;
  $101 = ($99|0)<($100|0);
  if ($101) {
   $102 = $currentY;
   HEAP32[47448>>2] = $102;
  }
  $103 = $currentY;
  $104 = HEAP32[47456>>2]|0;
  $105 = ($103|0)>($104|0);
  if ($105) {
   $106 = $currentY;
   HEAP32[47456>>2] = $106;
  }
  $107 = $currentX;
  $108 = $107&65535;
  HEAP16[38904>>1] = $108;
  $109 = $currentY;
  $110 = $109&65535;
  HEAP16[38912>>1] = $110;
  $111 = $oldComputedX;
  $112 = $oldComputedY;
  $113 = $currentX;
  $114 = $currentY;
  $115 = $3;
  _drawLine($111,$112,$113,$114,$115);
  $116 = $numEntries;
  $117 = (($116) + 1)|0;
  $numEntries = $117;
  $118 = HEAP16[38904>>1]|0;
  $119 = $118 << 16 >> 16;
  $currentX = $119;
  $120 = HEAP16[38912>>1]|0;
  $121 = $120 << 16 >> 16;
  $currentY = $121;
 }
 $122 = $currentX;
 $123 = $122&65535;
 HEAP16[38904>>1] = $123;
 $124 = $currentY;
 $125 = $124&65535;
 HEAP16[38912>>1] = $125;
 $126 = $currentX;
 $127 = $currentY;
 $128 = $computedX;
 $129 = $computedY;
 $130 = $3;
 _drawLine($126,$127,$128,$129,$130);
 STACKTOP = sp;return;
}
function _drawExtraSpecial($extraIdx,$X,$Y) {
 $extraIdx = $extraIdx|0;
 $X = $X|0;
 $Y = $Y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cloudTime = 0, $extra = 0, $specialType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $extraIdx;
 $1 = $X;
 $2 = $Y;
 $3 = $0;
 $4 = (44680 + (($3*52)|0)|0);
 $extra = $4;
 $5 = $extra;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = $7 & 32767;
 $specialType = $8;
 $9 = $specialType;
 if ((($9|0) == 0)) {
  $10 = $1;
  $11 = $2;
  $12 = HEAP32[25920>>2]|0;
  $13 = $12 << 5;
  $14 = $13 & 768;
  _drawSpecialShape(47712,$10,$11,15,$14,4);
  STACKTOP = sp;return;
 } else if ((($9|0) == 1)) {
  $15 = HEAP32[25920>>2]|0;
  $16 = (1 + ($15))|0;
  $17 = $extra;
  $18 = (($17) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($16) - ($19))|0;
  $cloudTime = $20;
  $21 = $cloudTime;
  $22 = ($21|0)>(32);
  if ($22) {
   $cloudTime = 32;
  }
  $23 = $1;
  $24 = $2;
  $25 = $cloudTime;
  _drawSpecialShape(47760,$23,$24,15,0,$25);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _processMagicballBounce($extra,$X,$Y,$Z) {
 $extra = $extra|0;
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $extra;
 $1 = $X;
 $2 = $Y;
 $3 = $Z;
 $4 = $1;
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $3;
 $10 = (_getBrickShape($4,$8,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 30|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = (0 - ($15))|0;
  $17 = $16&65535;
  $18 = $0;
  $19 = (($18) + 30|0);
  HEAP16[$19>>1] = $17;
 }
 $20 = $0;
 $21 = (($20) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = $2;
 $25 = $3;
 $26 = (_getBrickShape($23,$24,$25)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $0;
  $29 = (($28) + 28|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = (0 - ($31))|0;
  $33 = $32&65535;
  $34 = $0;
  $35 = (($34) + 28|0);
  HEAP16[$35>>1] = $33;
 }
 $36 = $1;
 $37 = $2;
 $38 = $0;
 $39 = (($38) + 6|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 << 16 >> 16;
 $42 = (_getBrickShape($36,$37,$41)|0);
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $0;
  $45 = (($44) + 32|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = (0 - ($47))|0;
  $49 = $48&65535;
  $50 = $0;
  $51 = (($50) + 32|0);
  HEAP16[$51>>1] = $49;
 }
 $52 = $1;
 $53 = $52&65535;
 $54 = $0;
 $55 = (($54) + 2|0);
 HEAP16[$55>>1] = $53;
 $56 = $1;
 $57 = $56&65535;
 $58 = $0;
 $59 = (($58) + 8|0);
 HEAP16[$59>>1] = $57;
 $60 = $2;
 $61 = $60&65535;
 $62 = $0;
 $63 = (($62) + 4|0);
 HEAP16[$63>>1] = $61;
 $64 = $2;
 $65 = $64&65535;
 $66 = $0;
 $67 = (($66) + 10|0);
 HEAP16[$67>>1] = $65;
 $68 = $3;
 $69 = $68&65535;
 $70 = $0;
 $71 = (($70) + 6|0);
 HEAP16[$71>>1] = $69;
 $72 = $3;
 $73 = $72&65535;
 $74 = $0;
 $75 = (($74) + 12|0);
 HEAP16[$75>>1] = $73;
 $76 = HEAP32[25920>>2]|0;
 $77 = $0;
 $78 = (($77) + 40|0);
 HEAP32[$78>>2] = $76;
 STACKTOP = sp;return;
}
function _processExtras() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $98 = 0, $99 = 0, $actorIdx = 0, $actorIdx2 = 0, $actorIdxAttacked = 0, $angle = 0, $angle1 = 0, $angle4 = 0;
 var $angle5 = 0, $currentExtraSpeedX = 0, $currentExtraSpeedY = 0, $currentExtraX = 0, $currentExtraY = 0, $currentExtraZ = 0, $extra = 0, $extraKey = 0, $i = 0, $pos = 0, $pos6 = 0, $process = 0, $process11 = 0, $spriteBounds = 0, $spriteIdx = 0, $spriteIdx10 = 0, $spriteIdx7 = 0, $spriteIdx8 = 0, $spriteIdx9 = 0, $tmpAngle = 0;
 var $tmpAngle3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $currentExtraX = 0;
 $currentExtraY = 0;
 $currentExtraZ = 0;
 $currentExtraSpeedX = 0;
 $currentExtraSpeedY = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(50);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (44680 + (($2*52)|0)|0);
  $extra = $3;
  $4 = $extra;
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = ($6|0)!=(-1);
  L4: do {
   if ($7) {
    $8 = $extra;
    $9 = (($8) + 34|0);
    $10 = HEAP16[$9>>1]|0;
    $11 = $10 << 16 >> 16;
    $12 = $11 & 1;
    $13 = ($12|0)!=(0);
    do {
     if ($13) {
      $14 = $extra;
      $15 = (($14) + 44|0);
      $16 = HEAP16[$15>>1]|0;
      $17 = $16 << 16 >> 16;
      $18 = $extra;
      $19 = (($18) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($17) + ($20))|0;
      $22 = HEAP32[25920>>2]|0;
      $23 = ($21|0)<=($22|0);
      if ($23) {
       $24 = $extra;
       HEAP16[$24>>1] = -1;
       break L4;
      } else {
       break;
      }
     }
    } while(0);
    $25 = $extra;
    $26 = (($25) + 34|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = $28 & 2048;
    $30 = ($29|0)!=(0);
    if ($30) {
     $31 = $extra;
     HEAP16[$31>>1] = -1;
     break;
    }
    $32 = $extra;
    $33 = (($32) + 34|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34 << 16 >> 16;
    $36 = $35 & 4096;
    $37 = ($36|0)!=(0);
    if ($37) {
     $38 = HEAP32[25920>>2]|0;
     $39 = $extra;
     $40 = (($39) + 40|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) - ($41))|0;
     $43 = (_getAverageValue(97,100,30,$42)|0);
     $44 = $43&65535;
     $45 = $extra;
     HEAP16[$45>>1] = $44;
     break;
    }
    $46 = $extra;
    $47 = (($46) + 34|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = $48 << 16 >> 16;
    $50 = $49 & 2;
    $51 = ($50|0)!=(0);
    do {
     if ($51) {
      $52 = $extra;
      $53 = (($52) + 2|0);
      $54 = HEAP16[$53>>1]|0;
      $55 = $54 << 16 >> 16;
      $currentExtraX = $55;
      $56 = $extra;
      $57 = (($56) + 4|0);
      $58 = HEAP16[$57>>1]|0;
      $59 = $58 << 16 >> 16;
      $currentExtraY = $59;
      $60 = $extra;
      $61 = (($60) + 6|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62 << 16 >> 16;
      $currentExtraZ = $63;
      $64 = $extra;
      $65 = (($64) + 28|0);
      $66 = HEAP16[$65>>1]|0;
      $67 = $66 << 16 >> 16;
      $68 = HEAP32[25920>>2]|0;
      $69 = $extra;
      $70 = (($69) + 40|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($68) - ($71))|0;
      $73 = Math_imul($67, $72)|0;
      $currentExtraSpeedX = $73;
      $74 = $currentExtraSpeedX;
      $75 = $extra;
      $76 = (($75) + 8|0);
      $77 = HEAP16[$76>>1]|0;
      $78 = $77 << 16 >> 16;
      $79 = (($74) + ($78))|0;
      $80 = $79&65535;
      $81 = $extra;
      $82 = (($81) + 2|0);
      HEAP16[$82>>1] = $80;
      $83 = $extra;
      $84 = (($83) + 30|0);
      $85 = HEAP16[$84>>1]|0;
      $86 = $85 << 16 >> 16;
      $87 = HEAP32[25920>>2]|0;
      $88 = $extra;
      $89 = (($88) + 40|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($87) - ($90))|0;
      $92 = Math_imul($86, $91)|0;
      $currentExtraSpeedY = $92;
      $93 = $extra;
      $94 = (($93) + 10|0);
      $95 = HEAP16[$94>>1]|0;
      $96 = $95 << 16 >> 16;
      $97 = $currentExtraSpeedY;
      $98 = (($97) + ($96))|0;
      $currentExtraSpeedY = $98;
      $99 = $currentExtraSpeedY;
      $100 = $extra;
      $101 = (($100) + 36|0);
      $102 = HEAP16[$101>>1]|0;
      $103 = $102 << 16 >> 16;
      $104 = HEAP32[25920>>2]|0;
      $105 = $extra;
      $106 = (($105) + 40|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (($104) - ($107))|0;
      $109 = Math_imul($103, $108)|0;
      $110 = HEAP32[25920>>2]|0;
      $111 = $extra;
      $112 = (($111) + 40|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($110) - ($113))|0;
      $115 = Math_imul($109, $114)|0;
      $116 = $115 >> 4;
      $117 = (Math_abs(($116|0))|0);
      $118 = (($99) - ($117))|0;
      $119 = $118&65535;
      $120 = $extra;
      $121 = (($120) + 4|0);
      HEAP16[$121>>1] = $119;
      $122 = $extra;
      $123 = (($122) + 32|0);
      $124 = HEAP16[$123>>1]|0;
      $125 = $124 << 16 >> 16;
      $126 = HEAP32[25920>>2]|0;
      $127 = $extra;
      $128 = (($127) + 40|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (($126) - ($129))|0;
      $131 = Math_imul($125, $130)|0;
      $132 = $extra;
      $133 = (($132) + 12|0);
      $134 = HEAP16[$133>>1]|0;
      $135 = $134 << 16 >> 16;
      $136 = (($131) + ($135))|0;
      $137 = $136&65535;
      $138 = $extra;
      $139 = (($138) + 6|0);
      HEAP16[$139>>1] = $137;
      $140 = $extra;
      $141 = (($140) + 4|0);
      $142 = HEAP16[$141>>1]|0;
      $143 = $142 << 16 >> 16;
      $144 = ($143|0)<(0);
      if (!($144)) {
       $145 = $extra;
       $146 = (($145) + 2|0);
       $147 = HEAP16[$146>>1]|0;
       $148 = $147 << 16 >> 16;
       $149 = ($148|0)<(0);
       if (!($149)) {
        $150 = $extra;
        $151 = (($150) + 2|0);
        $152 = HEAP16[$151>>1]|0;
        $153 = $152 << 16 >> 16;
        $154 = ($153|0)>(32256);
        if (!($154)) {
         $155 = $extra;
         $156 = (($155) + 6|0);
         $157 = HEAP16[$156>>1]|0;
         $158 = $157 << 16 >> 16;
         $159 = ($158|0)<(0);
         if (!($159)) {
          $160 = $extra;
          $161 = (($160) + 6|0);
          $162 = HEAP16[$161>>1]|0;
          $163 = $162 << 16 >> 16;
          $164 = ($163|0)>(32256);
          if (!($164)) {
           break;
          }
         }
        }
       }
      }
      $165 = $i;
      $166 = HEAP16[38264>>1]|0;
      $167 = $166 << 16 >> 16;
      $168 = ($165|0)==($167|0);
      if ($168) {
       $spriteIdx = 44;
       $169 = $extra;
       $170 = HEAP16[$169>>1]|0;
       $171 = $170 << 16 >> 16;
       $172 = ($171|0)==(42);
       if ($172) {
        $spriteIdx = 109;
       }
       $173 = $extra;
       $174 = HEAP16[$173>>1]|0;
       $175 = $174 << 16 >> 16;
       $176 = ($175|0)==(43);
       if ($176) {
        $spriteIdx = 110;
       }
       $177 = $extra;
       $178 = (($177) + 2|0);
       $179 = HEAP16[$178>>1]|0;
       $180 = $179 << 16 >> 16;
       $181 = $extra;
       $182 = (($181) + 4|0);
       $183 = HEAP16[$182>>1]|0;
       $184 = $183 << 16 >> 16;
       $185 = $extra;
       $186 = (($185) + 6|0);
       $187 = HEAP16[$186>>1]|0;
       $188 = $187 << 16 >> 16;
       $189 = $spriteIdx;
       $190 = (_addExtra(-1,$180,$184,$188,$189,0,10000,0)|0);
       $191 = $190&65535;
       HEAP16[38264>>1] = $191;
      }
      $192 = $extra;
      $193 = (($192) + 34|0);
      $194 = HEAP16[$193>>1]|0;
      $195 = $194 << 16 >> 16;
      $196 = $195 & 32;
      $197 = ($196|0)!=(0);
      if ($197) {
       $198 = $extra;
       $199 = (($198) + 34|0);
       $200 = HEAP16[$199>>1]|0;
       $201 = $200 << 16 >> 16;
       $202 = $201 & 65517;
       $203 = $202&65535;
       HEAP16[$199>>1] = $203;
      } else {
       $204 = $extra;
       HEAP16[$204>>1] = -1;
      }
      break L4;
     }
    } while(0);
    $205 = $extra;
    $206 = (($205) + 34|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $207 << 16 >> 16;
    $209 = $208 & 16384;
    $210 = ($209|0)!=(0);
    if ($210) {
     $211 = HEAP32[25920>>2]|0;
     $212 = $extra;
     $213 = (($212) + 40|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($211) - ($214))|0;
     $216 = ($215|0)>(40);
     if ($216) {
      $217 = $extra;
      $218 = (($217) + 34|0);
      $219 = HEAP16[$218>>1]|0;
      $220 = $219 << 16 >> 16;
      $221 = $220 & 49151;
      $222 = $221&65535;
      HEAP16[$218>>1] = $222;
     }
     break;
    }
    $223 = $extra;
    $224 = (($223) + 34|0);
    $225 = HEAP16[$224>>1]|0;
    $226 = $225 << 16 >> 16;
    $227 = $226 & 128;
    $228 = ($227|0)!=(0);
    do {
     if ($228) {
      $229 = $extra;
      $230 = (($229) + 40|0);
      $231 = HEAP32[$230>>2]|0;
      $actorIdxAttacked = $231;
      $232 = $extra;
      $233 = (($232) + 44|0);
      $234 = HEAP16[$233>>1]|0;
      $235 = $234 << 16 >> 16;
      $actorIdx = $235;
      $236 = $actorIdxAttacked;
      $237 = (136 + (($236*232)|0)|0);
      $238 = (($237) + 36|0);
      $239 = HEAP32[$238>>2]|0;
      $currentExtraX = $239;
      $240 = $actorIdxAttacked;
      $241 = (136 + (($240*232)|0)|0);
      $242 = (($241) + 40|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = (($243) + 1000)|0;
      $currentExtraY = $244;
      $245 = $actorIdxAttacked;
      $246 = (136 + (($245*232)|0)|0);
      $247 = (($246) + 44|0);
      $248 = HEAP32[$247>>2]|0;
      $currentExtraZ = $248;
      $249 = $extra;
      $250 = (($249) + 2|0);
      $251 = HEAP16[$250>>1]|0;
      $252 = $251 << 16 >> 16;
      $253 = $extra;
      $254 = (($253) + 6|0);
      $255 = HEAP16[$254>>1]|0;
      $256 = $255 << 16 >> 16;
      $257 = $currentExtraX;
      $258 = $currentExtraZ;
      $259 = (_getAngleAndSetTargetActorDistance($252,$256,$257,$258)|0);
      $tmpAngle = $259;
      $260 = $tmpAngle;
      $261 = $extra;
      $262 = (($261) + 36|0);
      $263 = HEAP16[$262>>1]|0;
      $264 = $263 << 16 >> 16;
      $265 = (($260) - ($264))|0;
      $266 = $265 & 1023;
      $angle = $266;
      $267 = $angle;
      $268 = ($267|0)>(400);
      if ($268) {
       $269 = $angle;
       $270 = ($269|0)<(600);
       if ($270) {
        $271 = $extra;
        $272 = (($271) + 46|0);
        $273 = HEAP16[$272>>1]|0;
        $274 = ($273<<16>>16)!=(0);
        if ($274) {
         $275 = $actorIdx;
         $276 = $actorIdxAttacked;
         $277 = $extra;
         $278 = (($277) + 46|0);
         $279 = HEAP16[$278>>1]|0;
         $280 = $279 << 16 >> 16;
         _hitActor($275,$276,$280,-1);
        }
        $281 = $i;
        $282 = HEAP16[38264>>1]|0;
        $283 = $282 << 16 >> 16;
        $284 = ($281|0)==($283|0);
        if ($284) {
         HEAP16[38264>>1] = -1;
        }
        $285 = $extra;
        HEAP16[$285>>1] = -1;
        break L4;
       }
      }
      $286 = $extra;
      $287 = (($286) + 4|0);
      $288 = HEAP16[$287>>1]|0;
      $289 = $288 << 16 >> 16;
      $290 = $currentExtraY;
      $291 = HEAP32[44416>>2]|0;
      $292 = (_getAngleAndSetTargetActorDistance($289,0,$290,$291)|0);
      $angle1 = $292;
      $293 = $extra;
      $294 = (($293) + 16|0);
      $295 = (_getRealAngle($294)|0);
      $pos = $295;
      $296 = $pos;
      $297 = ($296|0)!=(0);
      if (!($297)) {
       $pos = 1;
      }
      $298 = $pos;
      $299 = $angle1;
      _rotateActor($298,0,$299);
      $300 = HEAP32[38968>>2]|0;
      $301 = $extra;
      $302 = (($301) + 4|0);
      $303 = HEAP16[$302>>1]|0;
      $304 = $303 << 16 >> 16;
      $305 = (($304) - ($300))|0;
      $306 = $305&65535;
      HEAP16[$302>>1] = $306;
      $307 = HEAP32[38952>>2]|0;
      $308 = $tmpAngle;
      _rotateActor(0,$307,$308);
      $309 = HEAP32[38952>>2]|0;
      $310 = $extra;
      $311 = (($310) + 2|0);
      $312 = HEAP16[$311>>1]|0;
      $313 = $312 << 16 >> 16;
      $314 = (($313) + ($309))|0;
      $315 = $314&65535;
      HEAP16[$311>>1] = $315;
      $316 = HEAP32[38968>>2]|0;
      $317 = $extra;
      $318 = (($317) + 6|0);
      $319 = HEAP16[$318>>1]|0;
      $320 = $319 << 16 >> 16;
      $321 = (($320) + ($316))|0;
      $322 = $321&65535;
      HEAP16[$318>>1] = $322;
      $323 = $extra;
      $324 = (($323) + 32|0);
      $325 = HEAP16[$324>>1]|0;
      $326 = $extra;
      $327 = (($326) + 16|0);
      _setActorAngle(0,$325,50,$327);
      $328 = $actorIdxAttacked;
      $329 = $extra;
      $330 = $actorIdx;
      $331 = (_checkExtraCollisionWithActors($329,$330)|0);
      $332 = ($328|0)==($331|0);
      if (!($332)) {
       break;
      }
      $333 = $i;
      $334 = HEAP16[38264>>1]|0;
      $335 = $334 << 16 >> 16;
      $336 = ($333|0)==($335|0);
      if ($336) {
       HEAP16[38264>>1] = -1;
      }
      $337 = $extra;
      HEAP16[$337>>1] = -1;
      break L4;
     }
    } while(0);
    $338 = $extra;
    $339 = (($338) + 34|0);
    $340 = HEAP16[$339>>1]|0;
    $341 = $340 << 16 >> 16;
    $342 = $341 & 512;
    $343 = ($342|0)!=(0);
    do {
     if ($343) {
      $344 = $extra;
      $345 = (($344) + 44|0);
      $346 = HEAP16[$345>>1]|0;
      $347 = $346 << 16 >> 16;
      $348 = (44680 + (($347*52)|0)|0);
      $extraKey = $348;
      $349 = $extra;
      $350 = (($349) + 44|0);
      $351 = HEAP16[$350>>1]|0;
      $352 = $351 << 16 >> 16;
      $actorIdx2 = $352;
      $353 = $extra;
      $354 = (($353) + 2|0);
      $355 = HEAP16[$354>>1]|0;
      $356 = $355 << 16 >> 16;
      $357 = $extra;
      $358 = (($357) + 6|0);
      $359 = HEAP16[$358>>1]|0;
      $360 = $359 << 16 >> 16;
      $361 = $extraKey;
      $362 = (($361) + 2|0);
      $363 = HEAP16[$362>>1]|0;
      $364 = $363 << 16 >> 16;
      $365 = $extraKey;
      $366 = (($365) + 6|0);
      $367 = HEAP16[$366>>1]|0;
      $368 = $367 << 16 >> 16;
      $369 = (_getAngleAndSetTargetActorDistance($356,$360,$364,$368)|0);
      $tmpAngle3 = $369;
      $370 = $tmpAngle3;
      $371 = $extra;
      $372 = (($371) + 36|0);
      $373 = HEAP16[$372>>1]|0;
      $374 = $373 << 16 >> 16;
      $375 = (($370) - ($374))|0;
      $376 = $375 & 1023;
      $angle4 = $376;
      $377 = $angle4;
      $378 = ($377|0)>(400);
      if ($378) {
       $379 = $angle4;
       $380 = ($379|0)<(600);
       if ($380) {
        $381 = HEAP32[8>>2]|0;
        $382 = (($381) + 36|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = HEAP32[8>>2]|0;
        $385 = (($384) + 40|0);
        $386 = HEAP32[$385>>2]|0;
        $387 = HEAP32[8>>2]|0;
        $388 = (($387) + 44|0);
        $389 = HEAP32[$388>>2]|0;
        _playSample(97,4096,1,$383,$386,$389,0);
        $390 = $extraKey;
        $391 = (($390) + 48|0);
        $392 = HEAP16[$391>>1]|0;
        $393 = $392 << 16 >> 16;
        $394 = ($393|0)>(1);
        if ($394) {
         $395 = $extraKey;
         $396 = (($395) + 2|0);
         $397 = HEAP16[$396>>1]|0;
         $398 = $397 << 16 >> 16;
         $399 = HEAP32[39424>>2]|0;
         $400 = (($398) - ($399))|0;
         $401 = $extraKey;
         $402 = (($401) + 4|0);
         $403 = HEAP16[$402>>1]|0;
         $404 = $403 << 16 >> 16;
         $405 = HEAP32[39432>>2]|0;
         $406 = (($404) - ($405))|0;
         $407 = $extraKey;
         $408 = (($407) + 6|0);
         $409 = HEAP16[$408>>1]|0;
         $410 = $409 << 16 >> 16;
         $411 = HEAP32[39440>>2]|0;
         $412 = (($410) - ($411))|0;
         (_projectPositionOnScreen($400,$406,$412)|0);
         $413 = $extraKey;
         $414 = (($413) + 48|0);
         $415 = HEAP16[$414>>1]|0;
         $416 = HEAP16[38904>>1]|0;
         $417 = HEAP16[38912>>1]|0;
         _addOverlay(1,$415,$416,$417,0,0,2);
        }
        _addOverlay(0,6,10,30,0,0,2);
        $418 = $extraKey;
        $419 = (($418) + 48|0);
        $420 = HEAP16[$419>>1]|0;
        $421 = $420 << 16 >> 16;
        $422 = HEAP16[38288>>1]|0;
        $423 = $422 << 16 >> 16;
        $424 = (($423) + ($421))|0;
        $425 = $424&65535;
        HEAP16[38288>>1] = $425;
        $426 = $extraKey;
        HEAP16[$426>>1] = -1;
        $427 = $extra;
        HEAP16[$427>>1] = -1;
        $428 = $extra;
        $429 = (($428) + 2|0);
        $430 = HEAP16[$429>>1]|0;
        $431 = $430 << 16 >> 16;
        $432 = $extra;
        $433 = (($432) + 4|0);
        $434 = HEAP16[$433>>1]|0;
        $435 = $434 << 16 >> 16;
        $436 = $extra;
        $437 = (($436) + 6|0);
        $438 = HEAP16[$437>>1]|0;
        $439 = $438 << 16 >> 16;
        $440 = (_addExtra(-1,$431,$435,$439,6,0,8000,0)|0);
        $441 = $440&65535;
        HEAP16[38264>>1] = $441;
        break L4;
       }
      }
      $442 = $extra;
      $443 = (($442) + 4|0);
      $444 = HEAP16[$443>>1]|0;
      $445 = $444 << 16 >> 16;
      $446 = $extraKey;
      $447 = (($446) + 4|0);
      $448 = HEAP16[$447>>1]|0;
      $449 = $448 << 16 >> 16;
      $450 = HEAP32[44416>>2]|0;
      $451 = (_getAngleAndSetTargetActorDistance($445,0,$449,$450)|0);
      $angle5 = $451;
      $452 = $extra;
      $453 = (($452) + 16|0);
      $454 = (_getRealAngle($453)|0);
      $pos6 = $454;
      $455 = $pos6;
      $456 = ($455|0)!=(0);
      if (!($456)) {
       $pos6 = 1;
      }
      $457 = $pos6;
      $458 = $angle5;
      _rotateActor($457,0,$458);
      $459 = HEAP32[38968>>2]|0;
      $460 = $extra;
      $461 = (($460) + 4|0);
      $462 = HEAP16[$461>>1]|0;
      $463 = $462 << 16 >> 16;
      $464 = (($463) - ($459))|0;
      $465 = $464&65535;
      HEAP16[$461>>1] = $465;
      $466 = HEAP32[38952>>2]|0;
      $467 = $tmpAngle3;
      _rotateActor(0,$466,$467);
      $468 = HEAP32[38952>>2]|0;
      $469 = $extra;
      $470 = (($469) + 2|0);
      $471 = HEAP16[$470>>1]|0;
      $472 = $471 << 16 >> 16;
      $473 = (($472) + ($468))|0;
      $474 = $473&65535;
      HEAP16[$470>>1] = $474;
      $475 = HEAP32[38968>>2]|0;
      $476 = $extra;
      $477 = (($476) + 6|0);
      $478 = HEAP16[$477>>1]|0;
      $479 = $478 << 16 >> 16;
      $480 = (($479) + ($475))|0;
      $481 = $480&65535;
      HEAP16[$477>>1] = $481;
      $482 = $extra;
      $483 = (($482) + 32|0);
      $484 = HEAP16[$483>>1]|0;
      $485 = $extra;
      $486 = (($485) + 16|0);
      _setActorAngle(0,$484,50,$486);
      $487 = $actorIdx2;
      $488 = $extra;
      $489 = HEAP16[38264>>1]|0;
      $490 = $489 << 16 >> 16;
      $491 = (_checkExtraCollisionWithExtra($488,$490)|0);
      $492 = ($487|0)==($491|0);
      if ($492) {
       $493 = HEAP32[8>>2]|0;
       $494 = (($493) + 36|0);
       $495 = HEAP32[$494>>2]|0;
       $496 = HEAP32[8>>2]|0;
       $497 = (($496) + 40|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = HEAP32[8>>2]|0;
       $500 = (($499) + 44|0);
       $501 = HEAP32[$500>>2]|0;
       _playSample(97,4096,1,$495,$498,$501,0);
       $502 = $extraKey;
       $503 = (($502) + 48|0);
       $504 = HEAP16[$503>>1]|0;
       $505 = $504 << 16 >> 16;
       $506 = ($505|0)>(1);
       if ($506) {
        $507 = $extraKey;
        $508 = (($507) + 2|0);
        $509 = HEAP16[$508>>1]|0;
        $510 = $509 << 16 >> 16;
        $511 = HEAP32[39424>>2]|0;
        $512 = (($510) - ($511))|0;
        $513 = $extraKey;
        $514 = (($513) + 4|0);
        $515 = HEAP16[$514>>1]|0;
        $516 = $515 << 16 >> 16;
        $517 = HEAP32[39432>>2]|0;
        $518 = (($516) - ($517))|0;
        $519 = $extraKey;
        $520 = (($519) + 6|0);
        $521 = HEAP16[$520>>1]|0;
        $522 = $521 << 16 >> 16;
        $523 = HEAP32[39440>>2]|0;
        $524 = (($522) - ($523))|0;
        (_projectPositionOnScreen($512,$518,$524)|0);
        $525 = $extraKey;
        $526 = (($525) + 48|0);
        $527 = HEAP16[$526>>1]|0;
        $528 = HEAP16[38904>>1]|0;
        $529 = HEAP16[38912>>1]|0;
        _addOverlay(1,$527,$528,$529,0,0,2);
       }
       _addOverlay(0,6,10,30,0,0,2);
       $530 = $extraKey;
       $531 = (($530) + 48|0);
       $532 = HEAP16[$531>>1]|0;
       $533 = $532 << 16 >> 16;
       $534 = HEAP16[38288>>1]|0;
       $535 = $534 << 16 >> 16;
       $536 = (($535) + ($533))|0;
       $537 = $536&65535;
       HEAP16[38288>>1] = $537;
       $538 = $extraKey;
       HEAP16[$538>>1] = -1;
       $539 = $extra;
       HEAP16[$539>>1] = -1;
       $540 = $extra;
       $541 = (($540) + 2|0);
       $542 = HEAP16[$541>>1]|0;
       $543 = $542 << 16 >> 16;
       $544 = $extra;
       $545 = (($544) + 4|0);
       $546 = HEAP16[$545>>1]|0;
       $547 = $546 << 16 >> 16;
       $548 = $extra;
       $549 = (($548) + 6|0);
       $550 = HEAP16[$549>>1]|0;
       $551 = $550 << 16 >> 16;
       $552 = (_addExtra(-1,$543,$547,$551,6,0,8000,0)|0);
       $553 = $552&65535;
       HEAP16[38264>>1] = $553;
       break L4;
      }
      $554 = $extraKey;
      $555 = HEAP16[$554>>1]|0;
      $556 = $555 << 16 >> 16;
      $557 = ($556|0)==(-1);
      if (!($557)) {
       break;
      }
      $spriteIdx7 = 44;
      $558 = $extra;
      $559 = HEAP16[$558>>1]|0;
      $560 = $559 << 16 >> 16;
      $561 = ($560|0)==(42);
      if ($561) {
       $spriteIdx7 = 109;
      }
      $562 = $extra;
      $563 = HEAP16[$562>>1]|0;
      $564 = $563 << 16 >> 16;
      $565 = ($564|0)==(43);
      if ($565) {
       $spriteIdx7 = 110;
      }
      $566 = $extra;
      HEAP16[$566>>1] = -1;
      $567 = $extra;
      $568 = (($567) + 2|0);
      $569 = HEAP16[$568>>1]|0;
      $570 = $569 << 16 >> 16;
      $571 = $extra;
      $572 = (($571) + 4|0);
      $573 = HEAP16[$572>>1]|0;
      $574 = $573 << 16 >> 16;
      $575 = $extra;
      $576 = (($575) + 6|0);
      $577 = HEAP16[$576>>1]|0;
      $578 = $577 << 16 >> 16;
      $579 = $spriteIdx7;
      $580 = (_addExtra(-1,$570,$574,$578,$579,0,8000,0)|0);
      $581 = $580&65535;
      HEAP16[38264>>1] = $581;
      break L4;
     }
    } while(0);
    $582 = $extra;
    $583 = (($582) + 34|0);
    $584 = HEAP16[$583>>1]|0;
    $585 = $584 << 16 >> 16;
    $586 = $585 & 4;
    $587 = ($586|0)!=(0);
    do {
     if ($587) {
      $588 = $extra;
      $589 = $extra;
      $590 = (($589) + 44|0);
      $591 = HEAP16[$590>>1]|0;
      $592 = $591 << 16 >> 16;
      $593 = (_checkExtraCollisionWithActors($588,$592)|0);
      $594 = ($593|0)!=(-1);
      if (!($594)) {
       break;
      }
      $595 = $i;
      $596 = HEAP16[38264>>1]|0;
      $597 = $596 << 16 >> 16;
      $598 = ($595|0)==($597|0);
      if ($598) {
       $spriteIdx8 = 44;
       $599 = $extra;
       $600 = HEAP16[$599>>1]|0;
       $601 = $600 << 16 >> 16;
       $602 = ($601|0)==(42);
       if ($602) {
        $spriteIdx8 = 109;
       }
       $603 = $extra;
       $604 = HEAP16[$603>>1]|0;
       $605 = $604 << 16 >> 16;
       $606 = ($605|0)==(43);
       if ($606) {
        $spriteIdx8 = 110;
       }
       $607 = $extra;
       $608 = (($607) + 2|0);
       $609 = HEAP16[$608>>1]|0;
       $610 = $609 << 16 >> 16;
       $611 = $extra;
       $612 = (($611) + 4|0);
       $613 = HEAP16[$612>>1]|0;
       $614 = $613 << 16 >> 16;
       $615 = $extra;
       $616 = (($615) + 6|0);
       $617 = HEAP16[$616>>1]|0;
       $618 = $617 << 16 >> 16;
       $619 = $spriteIdx8;
       $620 = (_addExtra(-1,$610,$614,$618,$619,0,10000,0)|0);
       $621 = $620&65535;
       HEAP16[38264>>1] = $621;
      }
      $622 = $extra;
      HEAP16[$622>>1] = -1;
      break L4;
     }
    } while(0);
    $623 = $extra;
    $624 = (($623) + 34|0);
    $625 = HEAP16[$624>>1]|0;
    $626 = $625 << 16 >> 16;
    $627 = $626 & 8;
    $628 = ($627|0)!=(0);
    if ($628) {
     $process = 0;
     $629 = $currentExtraX;
     $630 = $currentExtraY;
     $631 = $currentExtraZ;
     $632 = $extra;
     $633 = (($632) + 2|0);
     $634 = HEAP16[$633>>1]|0;
     $635 = $634 << 16 >> 16;
     $636 = $extra;
     $637 = (($636) + 4|0);
     $638 = HEAP16[$637>>1]|0;
     $639 = $638 << 16 >> 16;
     $640 = $extra;
     $641 = (($640) + 6|0);
     $642 = HEAP16[$641>>1]|0;
     $643 = $642 << 16 >> 16;
     $644 = (_checkExtraCollisionWithBricks($629,$630,$631,$635,$639,$643)|0);
     $645 = ($644|0)!=(0);
     if ($645) {
      $646 = $extra;
      $647 = (($646) + 34|0);
      $648 = HEAP16[$647>>1]|0;
      $649 = $648 << 16 >> 16;
      $650 = $649 & 8192;
      $651 = ($650|0)!=(0);
      if (!($651)) {
       $process = 1;
      }
     } else {
      $652 = $extra;
      $653 = (($652) + 34|0);
      $654 = HEAP16[$653>>1]|0;
      $655 = $654 << 16 >> 16;
      $656 = $655 & 8192;
      $657 = ($656|0)!=(0);
      if ($657) {
       $658 = $extra;
       $659 = (($658) + 34|0);
       $660 = HEAP16[$659>>1]|0;
       $661 = $660 << 16 >> 16;
       $662 = $661 & 57343;
       $663 = $662&65535;
       HEAP16[$659>>1] = $663;
      }
     }
     $664 = $process;
     $665 = ($664|0)!=(0);
     if ($665) {
      $666 = $extra;
      $667 = (($666) + 34|0);
      $668 = HEAP16[$667>>1]|0;
      $669 = $668 << 16 >> 16;
      $670 = $669 & 256;
      $671 = ($670|0)!=(0);
      if ($671) {
       $672 = $currentExtraX;
       $673 = $currentExtraY;
       $674 = $currentExtraZ;
       _addExtraSpecial($672,$673,$674,1);
      }
      $675 = $i;
      $676 = HEAP16[38264>>1]|0;
      $677 = $676 << 16 >> 16;
      $678 = ($675|0)==($677|0);
      if (!($678)) {
       $755 = $extra;
       HEAP16[$755>>1] = -1;
       break;
      }
      $679 = (_rand()|0);
      $680 = (($679|0) % 300)&-1;
      $681 = (($680) + 3946)|0;
      $682 = $extra;
      $683 = (($682) + 2|0);
      $684 = HEAP16[$683>>1]|0;
      $685 = $684 << 16 >> 16;
      $686 = $extra;
      $687 = (($686) + 4|0);
      $688 = HEAP16[$687>>1]|0;
      $689 = $688 << 16 >> 16;
      $690 = $extra;
      $691 = (($690) + 6|0);
      $692 = HEAP16[$691>>1]|0;
      $693 = $692 << 16 >> 16;
      _playSample(86,$681,1,$685,$689,$693,-1);
      $694 = HEAP16[38272>>1]|0;
      $695 = $694 << 16 >> 16;
      $696 = ($695|0)<=(0);
      if ($696) {
       $spriteIdx9 = 44;
       $697 = $extra;
       $698 = HEAP16[$697>>1]|0;
       $699 = $698 << 16 >> 16;
       $700 = ($699|0)==(42);
       if ($700) {
        $spriteIdx9 = 109;
       }
       $701 = $extra;
       $702 = HEAP16[$701>>1]|0;
       $703 = $702 << 16 >> 16;
       $704 = ($703|0)==(43);
       if ($704) {
        $spriteIdx9 = 110;
       }
       $705 = $extra;
       $706 = (($705) + 2|0);
       $707 = HEAP16[$706>>1]|0;
       $708 = $707 << 16 >> 16;
       $709 = $extra;
       $710 = (($709) + 4|0);
       $711 = HEAP16[$710>>1]|0;
       $712 = $711 << 16 >> 16;
       $713 = $extra;
       $714 = (($713) + 6|0);
       $715 = HEAP16[$714>>1]|0;
       $716 = $715 << 16 >> 16;
       $717 = $spriteIdx9;
       $718 = (_addExtra(-1,$708,$712,$716,$717,0,10000,0)|0);
       $719 = $718&65535;
       HEAP16[38264>>1] = $719;
       $720 = $extra;
       HEAP16[$720>>1] = -1;
       break;
      }
      $721 = HEAP16[38272>>1]|0;
      $722 = $721 << 16 >> 16;
      $723 = ($722|0)==(1);
      do {
       if ($723) {
        $724 = HEAP16[38280>>1]|0;
        $725 = (($724) + -1)<<16>>16;
        HEAP16[38280>>1] = $725;
        $726 = ($724<<16>>16)!=(0);
        if ($726) {
         $751 = $extra;
         $752 = $currentExtraX;
         $753 = $currentExtraY;
         $754 = $currentExtraZ;
         _processMagicballBounce($751,$752,$753,$754);
         break;
        }
        $spriteIdx10 = 44;
        $727 = $extra;
        $728 = HEAP16[$727>>1]|0;
        $729 = $728 << 16 >> 16;
        $730 = ($729|0)==(42);
        if ($730) {
         $spriteIdx10 = 109;
        }
        $731 = $extra;
        $732 = HEAP16[$731>>1]|0;
        $733 = $732 << 16 >> 16;
        $734 = ($733|0)==(43);
        if ($734) {
         $spriteIdx10 = 110;
        }
        $735 = $extra;
        $736 = (($735) + 2|0);
        $737 = HEAP16[$736>>1]|0;
        $738 = $737 << 16 >> 16;
        $739 = $extra;
        $740 = (($739) + 4|0);
        $741 = HEAP16[$740>>1]|0;
        $742 = $741 << 16 >> 16;
        $743 = $extra;
        $744 = (($743) + 6|0);
        $745 = HEAP16[$744>>1]|0;
        $746 = $745 << 16 >> 16;
        $747 = $spriteIdx10;
        $748 = (_addExtra(-1,$738,$742,$746,$747,0,10000,0)|0);
        $749 = $748&65535;
        HEAP16[38264>>1] = $749;
        $750 = $extra;
        HEAP16[$750>>1] = -1;
        break L4;
       }
      } while(0);
     }
    }
    $756 = $extra;
    $757 = (($756) + 34|0);
    $758 = HEAP16[$757>>1]|0;
    $759 = $758 << 16 >> 16;
    $760 = $759 & 16;
    $761 = ($760|0)!=(0);
    do {
     if ($761) {
      $process11 = 0;
      $762 = $currentExtraX;
      $763 = $currentExtraY;
      $764 = $currentExtraZ;
      $765 = $extra;
      $766 = (($765) + 2|0);
      $767 = HEAP16[$766>>1]|0;
      $768 = $767 << 16 >> 16;
      $769 = $extra;
      $770 = (($769) + 4|0);
      $771 = HEAP16[$770>>1]|0;
      $772 = $771 << 16 >> 16;
      $773 = $extra;
      $774 = (($773) + 6|0);
      $775 = HEAP16[$774>>1]|0;
      $776 = $775 << 16 >> 16;
      $777 = (_checkExtraCollisionWithBricks($762,$763,$764,$768,$772,$776)|0);
      $778 = ($777|0)!=(0);
      if ($778) {
       $779 = $extra;
       $780 = (($779) + 34|0);
       $781 = HEAP16[$780>>1]|0;
       $782 = $781 << 16 >> 16;
       $783 = $782 & 8192;
       $784 = ($783|0)!=(0);
       if (!($784)) {
        $process11 = 1;
       }
      } else {
       $785 = $extra;
       $786 = (($785) + 34|0);
       $787 = HEAP16[$786>>1]|0;
       $788 = $787 << 16 >> 16;
       $789 = $788 & 8192;
       $790 = ($789|0)!=(0);
       if ($790) {
        $791 = $extra;
        $792 = (($791) + 34|0);
        $793 = HEAP16[$792>>1]|0;
        $794 = $793 << 16 >> 16;
        $795 = $794 & 57343;
        $796 = $795&65535;
        HEAP16[$792>>1] = $796;
       }
      }
      $797 = $process11;
      $798 = ($797|0)!=(0);
      if ($798) {
       $799 = HEAP32[23336>>2]|0;
       $800 = $extra;
       $801 = HEAP16[$800>>1]|0;
       $802 = $801 << 16 >> 16;
       $803 = $802<<4;
       $804 = (($799) + ($803)|0);
       $805 = (($804) + 8|0);
       $spriteBounds = $805;
       $806 = HEAP32[47328>>2]|0;
       $807 = $806 << 8;
       $808 = (($807) + 256)|0;
       $809 = $spriteBounds;
       $810 = HEAP16[$809>>1]|0;
       $811 = $810 << 16 >> 16;
       $812 = (($808) - ($811))|0;
       $813 = $812&65535;
       $814 = $extra;
       $815 = (($814) + 4|0);
       HEAP16[$815>>1] = $813;
       $816 = $extra;
       $817 = (($816) + 34|0);
       $818 = HEAP16[$817>>1]|0;
       $819 = $818 << 16 >> 16;
       $820 = $819 & 65517;
       $821 = $820&65535;
       HEAP16[$817>>1] = $821;
       break L4;
      } else {
       break;
      }
     }
    } while(0);
    $822 = $extra;
    $823 = (($822) + 34|0);
    $824 = HEAP16[$823>>1]|0;
    $825 = $824 << 16 >> 16;
    $826 = $825 & 32;
    $827 = ($826|0)!=(0);
    if ($827) {
     $828 = $extra;
     $829 = (($828) + 34|0);
     $830 = HEAP16[$829>>1]|0;
     $831 = $830 << 16 >> 16;
     $832 = $831 & 2;
     $833 = ($832|0)!=(0);
     if (!($833)) {
      $834 = $extra;
      $835 = (_checkExtraCollisionWithActors($834,-1)|0);
      $836 = ($835|0)==(0);
      if ($836) {
       $837 = $extra;
       $838 = (($837) + 2|0);
       $839 = HEAP16[$838>>1]|0;
       $840 = $839 << 16 >> 16;
       $841 = $extra;
       $842 = (($841) + 4|0);
       $843 = HEAP16[$842>>1]|0;
       $844 = $843 << 16 >> 16;
       $845 = $extra;
       $846 = (($845) + 6|0);
       $847 = HEAP16[$846>>1]|0;
       $848 = $847 << 16 >> 16;
       _playSample(97,4096,1,$840,$844,$848,-1);
       $849 = $extra;
       $850 = (($849) + 48|0);
       $851 = HEAP16[$850>>1]|0;
       $852 = $851 << 16 >> 16;
       $853 = ($852|0)>(1);
       do {
        if ($853) {
         $854 = HEAP32[33984>>2]|0;
         $855 = $854 & 2;
         $856 = ($855|0)!=(0);
         if ($856) {
          break;
         }
         $857 = $extra;
         $858 = (($857) + 2|0);
         $859 = HEAP16[$858>>1]|0;
         $860 = $859 << 16 >> 16;
         $861 = HEAP32[39424>>2]|0;
         $862 = (($860) - ($861))|0;
         $863 = $extra;
         $864 = (($863) + 4|0);
         $865 = HEAP16[$864>>1]|0;
         $866 = $865 << 16 >> 16;
         $867 = HEAP32[39432>>2]|0;
         $868 = (($866) - ($867))|0;
         $869 = $extra;
         $870 = (($869) + 6|0);
         $871 = HEAP16[$870>>1]|0;
         $872 = $871 << 16 >> 16;
         $873 = HEAP32[39440>>2]|0;
         $874 = (($872) - ($873))|0;
         (_projectPositionOnScreen($862,$868,$874)|0);
         $875 = $extra;
         $876 = (($875) + 48|0);
         $877 = HEAP16[$876>>1]|0;
         $878 = HEAP16[38904>>1]|0;
         $879 = HEAP16[38912>>1]|0;
         _addOverlay(1,$877,$878,$879,158,0,2);
        }
       } while(0);
       $880 = $extra;
       $881 = HEAP16[$880>>1]|0;
       _addOverlay(0,$881,10,30,0,0,2);
       $882 = $extra;
       $883 = HEAP16[$882>>1]|0;
       $884 = $883 << 16 >> 16;
       $885 = ($884|0)==(3);
       if ($885) {
        $886 = $extra;
        $887 = (($886) + 48|0);
        $888 = HEAP16[$887>>1]|0;
        $889 = $888 << 16 >> 16;
        $890 = HEAP16[38296>>1]|0;
        $891 = $890 << 16 >> 16;
        $892 = (($891) + ($889))|0;
        $893 = $892&65535;
        HEAP16[38296>>1] = $893;
        $894 = HEAP16[38296>>1]|0;
        $895 = $894 << 16 >> 16;
        $896 = ($895|0)>(999);
        if ($896) {
         HEAP16[38296>>1] = 999;
        }
       }
       $897 = $extra;
       $898 = HEAP16[$897>>1]|0;
       $899 = $898 << 16 >> 16;
       $900 = ($899|0)==(4);
       if ($900) {
        $901 = $extra;
        $902 = (($901) + 48|0);
        $903 = HEAP16[$902>>1]|0;
        $904 = $903 << 16 >> 16;
        $905 = HEAP32[8>>2]|0;
        $906 = (($905) + 104|0);
        $907 = HEAP32[$906>>2]|0;
        $908 = (($907) + ($904))|0;
        HEAP32[$906>>2] = $908;
        $909 = HEAP32[8>>2]|0;
        $910 = (($909) + 104|0);
        $911 = HEAP32[$910>>2]|0;
        $912 = ($911|0)>(50);
        if ($912) {
         $913 = HEAP32[8>>2]|0;
         $914 = (($913) + 104|0);
         HEAP32[$914>>2] = 50;
        }
       }
       $915 = $extra;
       $916 = HEAP16[$915>>1]|0;
       $917 = $916 << 16 >> 16;
       $918 = ($917|0)==(5);
       do {
        if ($918) {
         $919 = HEAP16[24256>>1]|0;
         $920 = $919 << 16 >> 16;
         $921 = ($920|0)!=(0);
         if (!($921)) {
          break;
         }
         $922 = $extra;
         $923 = (($922) + 48|0);
         $924 = HEAP16[$923>>1]|0;
         $925 = $924 << 16 >> 16;
         $926 = $925<<1;
         $927 = HEAP16[38320>>1]|0;
         $928 = $927 << 16 >> 16;
         $929 = (($928) + ($926))|0;
         $930 = $929&65535;
         HEAP16[38320>>1] = $930;
         $931 = HEAP16[38320>>1]|0;
         $932 = $931 << 16 >> 16;
         $933 = HEAP16[24256>>1]|0;
         $934 = $933 << 16 >> 16;
         $935 = ($934*20)|0;
         $936 = ($932|0)>($935|0);
         if ($936) {
          $937 = HEAP16[24256>>1]|0;
          $938 = $937 << 16 >> 16;
          $939 = ($938*20)|0;
          $940 = $939&65535;
          HEAP16[38320>>1] = $940;
         }
        }
       } while(0);
       $941 = $extra;
       $942 = HEAP16[$941>>1]|0;
       $943 = $942 << 16 >> 16;
       $944 = ($943|0)==(6);
       if ($944) {
        $945 = $extra;
        $946 = (($945) + 48|0);
        $947 = HEAP16[$946>>1]|0;
        $948 = $947 << 16 >> 16;
        $949 = HEAP16[38288>>1]|0;
        $950 = $949 << 16 >> 16;
        $951 = (($950) + ($948))|0;
        $952 = $951&65535;
        HEAP16[38288>>1] = $952;
       }
       $953 = $extra;
       $954 = HEAP16[$953>>1]|0;
       $955 = $954 << 16 >> 16;
       $956 = ($955|0)==(7);
       if ($956) {
        $957 = $extra;
        $958 = (($957) + 48|0);
        $959 = HEAP16[$958>>1]|0;
        $960 = $959 << 16 >> 16;
        $961 = HEAP16[38312>>1]|0;
        $962 = $961 << 16 >> 16;
        $963 = (($962) + ($960))|0;
        $964 = $963&65535;
        HEAP16[38312>>1] = $964;
        $965 = HEAP16[38312>>1]|0;
        $966 = $965 << 16 >> 16;
        $967 = HEAP16[38304>>1]|0;
        $968 = $967 << 16 >> 16;
        $969 = ($966|0)>($968|0);
        if ($969) {
         $970 = HEAP16[38304>>1]|0;
         HEAP16[38312>>1] = $970;
        }
       }
       $971 = $extra;
       HEAP16[$971>>1] = -1;
      }
     }
    }
    label = 149;
   } else {
    label = 149;
   }
  } while(0);
  if ((label|0) == 149) {
   label = 0;
  }
  $972 = $i;
  $973 = (($972) + 1)|0;
  $i = $973;
 }
 STACKTOP = sp;return;
}
function _fcaseopen($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $mode;
 $2 = $0;
 $3 = $1;
 $4 = (_fopen(($2|0),($3|0))|0);
 $f = $4;
 $5 = $f;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $18 = $f;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $0;
 $8 = (_strlen(($7|0))|0);
 $9 = (($8) + 2)|0;
 $10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$9)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $r = $10;
 $11 = $0;
 $12 = $r;
 $13 = (_casepath($11,$12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $r;
  $16 = $1;
  $17 = (_fopen(($15|0),($16|0))|0);
  $f = $17;
 }
 $18 = $f;
 STACKTOP = sp;return ($18|0);
}
function _casepath($path,$r) {
 $path = $path|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, $e = 0, $l = 0;
 var $last = 0, $p = 0, $rl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 20|0;
 $1 = $path;
 $2 = $r;
 $3 = $1;
 $4 = (_strlen(($3|0))|0);
 $l = $4;
 $5 = $l;
 $6 = (($5) + 1)|0;
 $7 = STACKTOP; STACKTOP = STACKTOP + ((((1*$6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 HEAP32[$p>>2] = $7;
 $8 = HEAP32[$p>>2]|0;
 $9 = $1;
 (_strcpy(($8|0),($9|0))|0);
 $rl = 0;
 $10 = HEAP32[$p>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(47);
 if ($13) {
  $14 = (_opendir((47840|0))|0);
  $d = $14;
  $15 = HEAP32[$p>>2]|0;
  $16 = (($15) + 1|0);
  HEAP32[$p>>2] = $16;
 } else {
  $17 = (_opendir((47848|0))|0);
  $d = $17;
  $18 = $2;
  HEAP8[$18>>0] = 46;
  $19 = $2;
  $20 = (($19) + 1|0);
  HEAP8[$20>>0] = 0;
  $rl = 1;
 }
 $last = 0;
 $21 = (_strsep($p,47840)|0);
 $c = $21;
 while(1) {
  $22 = $c;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   label = 18;
   break;
  }
  $24 = $d;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   label = 7;
   break;
  }
  $26 = $last;
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 9;
   break;
  }
  $29 = $rl;
  $30 = $2;
  $31 = (($30) + ($29)|0);
  HEAP8[$31>>0] = 47;
  $32 = $rl;
  $33 = (($32) + 1)|0;
  $rl = $33;
  $34 = $rl;
  $35 = $2;
  $36 = (($35) + ($34)|0);
  HEAP8[$36>>0] = 0;
  $37 = $d;
  $38 = (_readdir(($37|0))|0);
  $e = $38;
  while(1) {
   $39 = $e;
   $40 = ($39|0)!=(0|0);
   if (!($40)) {
    break;
   }
   $41 = $c;
   $42 = $e;
   $43 = (($42) + 11|0);
   $44 = (_strcasecmp($41,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    label = 13;
    break;
   }
   $59 = $d;
   $60 = (_readdir(($59|0))|0);
   $e = $60;
  }
  if ((label|0) == 13) {
   label = 0;
   $46 = $2;
   $47 = $rl;
   $48 = (($46) + ($47)|0);
   $49 = $e;
   $50 = (($49) + 11|0);
   (_strcpy(($48|0),($50|0))|0);
   $51 = $e;
   $52 = (($51) + 11|0);
   $53 = (_strlen(($52|0))|0);
   $54 = $rl;
   $55 = (($54) + ($53))|0;
   $rl = $55;
   $56 = $d;
   (_closedir(($56|0))|0);
   $57 = $2;
   $58 = (_opendir(($57|0))|0);
   $d = $58;
  }
  $61 = $e;
  $62 = ($61|0)!=(0|0);
  if (!($62)) {
   $63 = $2;
   $64 = $rl;
   $65 = (($63) + ($64)|0);
   $66 = $c;
   (_strcpy(($65|0),($66|0))|0);
   $67 = $c;
   $68 = (_strlen(($67|0))|0);
   $69 = $rl;
   $70 = (($69) + ($68))|0;
   $rl = $70;
   $last = 1;
  }
  $71 = (_strsep($p,47840)|0);
  $c = $71;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 9) {
  $28 = $d;
  (_closedir(($28|0))|0);
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 18) {
  $72 = $d;
  $73 = ($72|0)!=(0|0);
  if ($73) {
   $74 = $d;
   (_closedir(($74|0))|0);
  }
  $0 = 1;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _frfeed($fr) {
 $fr = $fr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 (_fread(($2|0),6144,1,($4|0))|0);
 $5 = $0;
 $6 = (($5) + 6148|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _frread($fr,$destPtr,$size) {
 $fr = $fr|0;
 $destPtr = $destPtr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $tempPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $destPtr;
 $2 = $size;
 $3 = $0;
 $4 = (($3) + 6148|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (6144 - ($5))|0;
 $7 = $2;
 $8 = ($6>>>0)>=($7>>>0);
 if ($8) {
  $9 = $1;
  $10 = $0;
  $11 = (($10) + 6148|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = (($13) + 4|0);
  $15 = (($14) + ($12)|0);
  $16 = $2;
  _memcpy(($9|0),($15|0),($16|0))|0;
  $17 = $2;
  $18 = $0;
  $19 = (($18) + 6148|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17))|0;
  HEAP32[$19>>2] = $21;
  STACKTOP = sp;return;
 }
 $22 = $1;
 $tempPtr = $22;
 $23 = $tempPtr;
 $24 = $0;
 $25 = (($24) + 6148|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = (($27) + 4|0);
 $29 = (($28) + ($26)|0);
 $30 = $0;
 $31 = (($30) + 6148|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (6144 - ($32))|0;
 _memcpy(($23|0),($29|0),($33|0))|0;
 $34 = $0;
 $35 = (($34) + 6148|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (6144 - ($36))|0;
 $38 = $tempPtr;
 $39 = (($38) + ($37)|0);
 $tempPtr = $39;
 $40 = $0;
 $41 = (($40) + 6148|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (6144 - ($42))|0;
 $44 = $2;
 $45 = (($44) - ($43))|0;
 $2 = $45;
 while(1) {
  $46 = $0;
  $47 = (($46) + 6152|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$47>>2] = $49;
  $50 = $0;
  _frfeed($50);
  $51 = $2;
  $52 = ($51>>>0)>=(6144);
  if ($52) {
   $53 = $tempPtr;
   $54 = $0;
   $55 = (($54) + 4|0);
   _memcpy(($53|0),($55|0),6144)|0;
   $56 = $tempPtr;
   $57 = (($56) + 6144|0);
   $tempPtr = $57;
   $58 = $2;
   $59 = (($58) - 6144)|0;
   $2 = $59;
  } else {
   $60 = $tempPtr;
   $61 = $0;
   $62 = (($61) + 4|0);
   $63 = $2;
   _memcpy(($60|0),($62|0),($63|0))|0;
   $64 = $2;
   $65 = $0;
   $66 = (($65) + 6148|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($64))|0;
   HEAP32[$66>>2] = $68;
   $2 = 0;
  }
  $69 = $2;
  $70 = ($69>>>0)>(0);
  if (!($70)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _frseek($fr,$seekPosition) {
 $fr = $fr|0;
 $seekPosition = $seekPosition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sectorToSeek = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $seekPosition;
 $2 = $1;
 $3 = (($2>>>0) / 2048)&-1;
 $sectorToSeek = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $sectorToSeek;
 $7 = $6<<11;
 (_fseek(($5|0),($7|0),0)|0);
 $8 = $sectorToSeek;
 $9 = $0;
 $10 = (($9) + 6152|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 _frfeed($11);
 $12 = $1;
 $13 = $sectorToSeek;
 $14 = $13<<11;
 $15 = (($12) - ($14))|0;
 $16 = $0;
 $17 = (($16) + 6148|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _fropen2($fr,$filename,$mode) {
 $fr = $fr|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fr;
 $2 = $filename;
 $3 = $mode;
 $4 = $2;
 $5 = $3;
 $6 = (_fcaseopen($4,$5)|0);
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 6152|0);
  HEAP32[$12>>2] = 0;
  $13 = $1;
  _frfeed($13);
  $0 = 1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _frwrite($fr,$destPtr,$size,$count) {
 $fr = $fr|0;
 $destPtr = $destPtr|0;
 $size = $size|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $destPtr;
 $2 = $size;
 $3 = $count;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 (_fwrite(($4|0),($5|0),($6|0),($8|0))|0);
 STACKTOP = sp;return;
}
function _frclose($fr) {
 $fr = $fr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fr;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 (_fclose(($2|0))|0);
 STACKTOP = sp;return;
}
function _drawKeyFrame($ptr,$width,$height) {
 $ptr = $ptr|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $colorFill = 0, $destPtr = 0, $flag1 = 0, $flag2 = 0, $startOfLine = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $width;
 $2 = $height;
 $destPtr = 47856;
 $3 = $destPtr;
 $startOfLine = $3;
 while(1) {
  $4 = $0;
  $5 = (($4) + 1|0);
  $0 = $5;
  $6 = HEAP8[$4>>0]|0;
  $flag1 = $6;
  $a = 0;
  while(1) {
   $7 = $a;
   $8 = $flag1;
   $9 = $8 << 24 >> 24;
   $10 = ($7|0)<($9|0);
   if (!($10)) {
    break;
   }
   $11 = $0;
   $12 = (($11) + 1|0);
   $0 = $12;
   $13 = HEAP8[$11>>0]|0;
   $flag2 = $13;
   $14 = $flag2;
   $15 = $14 << 24 >> 24;
   $16 = ($15|0)<(0);
   if ($16) {
    $17 = $flag2;
    $18 = $17 << 24 >> 24;
    $19 = (0 - ($18))|0;
    $20 = $19&255;
    $flag2 = $20;
    $b = 0;
    while(1) {
     $21 = $b;
     $22 = $flag2;
     $23 = $22 << 24 >> 24;
     $24 = ($21|0)<($23|0);
     if (!($24)) {
      break;
     }
     $25 = $0;
     $26 = (($25) + 1|0);
     $0 = $26;
     $27 = HEAP8[$25>>0]|0;
     $28 = $destPtr;
     $29 = (($28) + 1|0);
     $destPtr = $29;
     HEAP8[$28>>0] = $27;
     $30 = $b;
     $31 = (($30) + 1)|0;
     $b = $31;
    }
   } else {
    $32 = $0;
    $33 = (($32) + 1|0);
    $0 = $33;
    $34 = HEAP8[$32>>0]|0;
    $colorFill = $34;
    $b = 0;
    while(1) {
     $35 = $b;
     $36 = $flag2;
     $37 = $36 << 24 >> 24;
     $38 = ($35|0)<($37|0);
     if (!($38)) {
      break;
     }
     $39 = $colorFill;
     $40 = $destPtr;
     $41 = (($40) + 1|0);
     $destPtr = $41;
     HEAP8[$40>>0] = $39;
     $42 = $b;
     $43 = (($42) + 1)|0;
     $b = $43;
    }
   }
   $44 = $a;
   $45 = (($44) + 1)|0;
   $a = $45;
  }
  $46 = $startOfLine;
  $47 = $1;
  $48 = (($46) + ($47)|0);
  $destPtr = $48;
  $startOfLine = $48;
  $49 = $2;
  $50 = (($49) + -1)|0;
  $2 = $50;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _drawDeltaFrame($ptr,$width) {
 $ptr = $ptr|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $colorFill = 0, $destPtr = 0, $flag1 = 0, $flag2 = 0, $height = 0;
 var $skip = 0, $startOfLine = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $width;
 $2 = $0;
 $3 = HEAP16[$2>>1]|0;
 $skip = $3;
 $4 = $0;
 $5 = (($4) + 2|0);
 $0 = $5;
 $6 = $1;
 $7 = $skip;
 $8 = $7&65535;
 $9 = Math_imul($8, $6)|0;
 $10 = $9&65535;
 $skip = $10;
 $11 = $skip;
 $12 = $11&65535;
 $13 = (47856 + ($12)|0);
 $destPtr = $13;
 $startOfLine = $13;
 $14 = $0;
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $height = $16;
 $17 = $0;
 $18 = (($17) + 2|0);
 $0 = $18;
 while(1) {
  $19 = $0;
  $20 = (($19) + 1|0);
  $0 = $20;
  $21 = HEAP8[$19>>0]|0;
  $flag1 = $21;
  $a = 0;
  while(1) {
   $22 = $a;
   $23 = $flag1;
   $24 = $23 << 24 >> 24;
   $25 = ($22|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = $0;
   $27 = (($26) + 1|0);
   $0 = $27;
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $destPtr;
   $31 = (($30) + ($29)|0);
   $destPtr = $31;
   $32 = $0;
   $33 = (($32) + 1|0);
   $0 = $33;
   $34 = HEAP8[$32>>0]|0;
   $flag2 = $34;
   $35 = $flag2;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)>(0);
   if ($37) {
    $b = 0;
    while(1) {
     $38 = $b;
     $39 = $flag2;
     $40 = $39 << 24 >> 24;
     $41 = ($38|0)<($40|0);
     if (!($41)) {
      break;
     }
     $42 = $0;
     $43 = (($42) + 1|0);
     $0 = $43;
     $44 = HEAP8[$42>>0]|0;
     $45 = $destPtr;
     $46 = (($45) + 1|0);
     $destPtr = $46;
     HEAP8[$45>>0] = $44;
     $47 = $b;
     $48 = (($47) + 1)|0;
     $b = $48;
    }
   } else {
    $49 = $flag2;
    $50 = $49 << 24 >> 24;
    $51 = (0 - ($50))|0;
    $52 = $51&255;
    $flag2 = $52;
    $53 = $0;
    $54 = (($53) + 1|0);
    $0 = $54;
    $55 = HEAP8[$53>>0]|0;
    $colorFill = $55;
    $b = 0;
    while(1) {
     $56 = $b;
     $57 = $flag2;
     $58 = $57 << 24 >> 24;
     $59 = ($56|0)<($58|0);
     if (!($59)) {
      break;
     }
     $60 = $colorFill;
     $61 = $destPtr;
     $62 = (($61) + 1|0);
     $destPtr = $62;
     HEAP8[$61>>0] = $60;
     $63 = $b;
     $64 = (($63) + 1)|0;
     $b = $64;
    }
   }
   $65 = $a;
   $66 = (($65) + 1)|0;
   $a = $66;
  }
  $67 = $startOfLine;
  $68 = $1;
  $69 = (($67) + ($68)|0);
  $destPtr = $69;
  $startOfLine = $69;
  $70 = $height;
  $71 = (($70) + -1)|0;
  $height = $71;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _scaleFla2x() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $i = 0, $j = 0;
 var $source = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $source = 47856;
 $0 = HEAP32[25944>>2]|0;
 $dest = $0;
 $1 = HEAP32[((308424 + 88|0))>>2]|0;
 $2 = ($1|0)==(2);
 if ($2) {
  $i = 0;
  while(1) {
   $3 = $i;
   $4 = ($3|0)<(25600);
   if (!($4)) {
    break;
   }
   $5 = $dest;
   $6 = (($5) + 1|0);
   $dest = $6;
   HEAP8[$5>>0] = 0;
   $7 = $i;
   $8 = (($7) + 1)|0;
   $i = $8;
  }
 }
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(200);
  if (!($10)) {
   break;
  }
  $j = 0;
  while(1) {
   $11 = $j;
   $12 = ($11|0)<(320);
   if (!($12)) {
    break;
   }
   $13 = $source;
   $14 = HEAP8[$13>>0]|0;
   $15 = $dest;
   $16 = (($15) + 1|0);
   $dest = $16;
   HEAP8[$15>>0] = $14;
   $17 = $source;
   $18 = (($17) + 1|0);
   $source = $18;
   $19 = HEAP8[$17>>0]|0;
   $20 = $dest;
   $21 = (($20) + 1|0);
   $dest = $21;
   HEAP8[$20>>0] = $19;
   $22 = $j;
   $23 = (($22) + 1)|0;
   $j = $23;
  }
  $24 = HEAP32[((308424 + 88|0))>>2]|0;
  $25 = ($24|0)==(2);
  if ($25) {
   $26 = $dest;
   $27 = $dest;
   $28 = (($27) + -640|0);
   _memcpy(($26|0),($28|0),640)|0;
   $29 = $dest;
   $30 = (($29) + 640|0);
   $dest = $30;
  } else {
   $31 = $i;
   $32 = (($31|0) % 2)&-1;
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = $dest;
    $35 = $dest;
    $36 = (($35) + -640|0);
    _memcpy(($34|0),($36|0),640)|0;
    $37 = $dest;
    $38 = (($37) + 640|0);
    $dest = $38;
   }
   $39 = $i;
   $40 = (($39|0) % 10)&-1;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $dest;
    $43 = $dest;
    $44 = (($43) + -640|0);
    _memcpy(($42|0),($44|0),640)|0;
    $45 = $dest;
    $46 = (($45) + 640|0);
    $dest = $46;
   }
  }
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 $49 = HEAP32[((308424 + 88|0))>>2]|0;
 $50 = ($49|0)==(2);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $51 = $i;
  $52 = ($51|0)<(25600);
  if (!($52)) {
   break;
  }
  $53 = $dest;
  $54 = (($53) + 1|0);
  $dest = $54;
  HEAP8[$53>>0] = 0;
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 STACKTOP = sp;return;
}
function _processFrame() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $aux = 0, $numOfColor = 0, $opcode = 0, $opcodeBlockSize = 0, $ptr = 0, $sample = 0, $startColor = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sample = sp + 16|0;
 $aux = 0;
 _frread(111856,118016,1);
 _frread(111856,((118016 + 1|0)),1);
 _frread(111856,((118016 + 4|0)),4);
 $0 = HEAP32[118024>>2]|0;
 $1 = HEAP32[((118016 + 4|0))>>2]|0;
 _frread(111856,$0,$1);
 $2 = HEAP8[118016>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[118024>>2]|0;
 $ptr = $5;
 L5: while(1) {
  $6 = $ptr;
  $7 = HEAP8[$6>>0]|0;
  $opcode = $7;
  $8 = $ptr;
  $9 = (($8) + 2|0);
  $ptr = $9;
  $10 = $ptr;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $opcodeBlockSize = $12;
  $13 = $ptr;
  $14 = (($13) + 2|0);
  $ptr = $14;
  $15 = $opcode;
  $16 = $15&255;
  $17 = (($16) - 1)|0;
  switch ($17|0) {
  case 7:  {
   $56 = $ptr;
   _drawKeyFrame($56,320,200);
   break;
  }
  case 1:  {
   $32 = HEAP32[118800>>2]|0;
   $33 = ($32|0)!=(1);
   if ($33) {
    _convertPalToRGBA(118032,118808);
    _fadeToBlack(118808);
    HEAP32[118800>>2] = 1;
   }
   break;
  }
  case 4:  {
   $49 = HEAP16[$sample>>1]|0;
   $50 = $49 << 16 >> 16;
   _stopSample($50);
   break;
  }
  case 2:  {
   $34 = $ptr;
   dest=$sample+0|0; src=$34+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $35 = HEAP16[$sample>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = (($sample) + 2|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 << 16 >> 16;
   $40 = (($sample) + 4|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = (($sample) + 7|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = (($sample) + 8|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   _playFlaSample($36,$39,$42,$45,$48);
   break;
  }
  case 5:  {
   $51 = $ptr;
   _drawDeltaFrame($51,320);
   $52 = HEAP32[118800>>2]|0;
   $53 = ($52|0)==(1);
   if ($53) {
    $54 = HEAP32[119832>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[119832>>2] = $55;
   }
   break;
  }
  case 0:  {
   $18 = $ptr;
   $19 = HEAP16[$18>>1]|0;
   $numOfColor = $19;
   $20 = $ptr;
   $21 = (($20) + 2|0);
   $22 = HEAP16[$21>>1]|0;
   $startColor = $22;
   $23 = $startColor;
   $24 = $23 << 16 >> 16;
   $25 = ($24*3)|0;
   $26 = (118032 + ($25)|0);
   $27 = $ptr;
   $28 = (($27) + 4|0);
   $29 = $numOfColor;
   $30 = $29 << 16 >> 16;
   $31 = ($30*3)|0;
   _memcpy(($26|0),($28|0),($31|0))|0;
   break;
  }
  default: {
   break L5;
  }
  }
  $57 = $aux;
  $58 = (($57) + 1)|0;
  $aux = $58;
  $59 = $opcodeBlockSize;
  $60 = $ptr;
  $61 = (($60) + ($59)|0);
  $ptr = $61;
  $62 = $aux;
  $63 = HEAP8[118016>>0]|0;
  $64 = $63 << 24 >> 24;
  $65 = ($62|0)<($64|0);
  if (!($65)) {
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _fla_pcxList($flaName) {
 $flaName = $flaName|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $flaName;
 STACKTOP = sp;return;
}
function _playFlaMovie($flaName) {
 $flaName = $flaName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $currentFrame = 0, $fileNamePath = 0, $i = 0, $quit = 0, $tmpValue = 0, $var0 = 0, $var1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmpValue = sp + 24|0;
 $fileNamePath = sp + 32|0;
 $var0 = sp + 22|0;
 $var1 = sp + 20|0;
 $0 = $flaName;
 $quit = 0;
 _stopSamples();
 $1 = HEAP32[((308424 + 88|0))>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = $0;
  _fla_pcxList($3);
  STACKTOP = sp;return;
 }
 _stopMusic();
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $0;
  $6 = (_strlen(($5|0))|0);
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(46);
  if ($13) {
   $14 = $i;
   $15 = $0;
   $16 = (($15) + ($14)|0);
   HEAP8[$16>>0] = 0;
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 (_sprintf($fileNamePath,119840,$vararg_buffer)|0);
 $19 = $0;
 (_strcat(($fileNamePath|0),($19|0))|0);
 (_strcat(($fileNamePath|0),(119848|0))|0);
 HEAP32[118800>>2] = -1;
 HEAP32[119832>>2] = 0;
 $20 = (_fropen2(111856,$fileNamePath,119856)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[25944>>2]|0;
 HEAP32[118024>>2] = $22;
 _frread(111856,119864,6);
 _frread(111856,((119864 + 8|0)),4);
 _frread(111856,((119864 + 12|0)),1);
 _frread(111856,((119864 + 13|0)),1);
 _frread(111856,((119864 + 14|0)),2);
 _frread(111856,((119864 + 16|0)),2);
 _frread(111856,119888,2);
 _frread(111856,$tmpValue,2);
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = HEAP32[119888>>2]|0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  _frread(111856,$var0,2);
  _frread(111856,$var1,2);
  $26 = HEAP16[$var0>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $i;
  $29 = (119896 + ($28<<2)|0);
  HEAP32[$29>>2] = $27;
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 $32 = (_strcmp(119864,120296)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $currentFrame = 0;
  $34 = $quit;
  $35 = ($34|0)!=(0);
  if (!($35)) {
   while(1) {
    $36 = $currentFrame;
    $37 = HEAP32[((119864 + 8|0))>>2]|0;
    $38 = ($36|0)==($37|0);
    if ($38) {
     $quit = 1;
    } else {
     _processFrame();
     _scaleFla2x();
     $39 = HEAP32[25944>>2]|0;
     $40 = HEAP32[25952>>2]|0;
     _copyScreen($39,$40);
     $41 = HEAP32[118800>>2]|0;
     $42 = ($41|0)==(-1);
     if ($42) {
      _convertPalToRGBA(118032,118808);
      $43 = $currentFrame;
      $44 = ($43|0)!=(0);
      if ($44) {
       _setPalette(118808);
      } else {
       _fadeIn(118808);
      }
     }
     $45 = HEAP32[119832>>2]|0;
     $46 = ($45|0)>=(2);
     if ($46) {
      _flip();
      _convertPalToRGBA(118032,118808);
      _fadeToPal(118808);
      HEAP32[118800>>2] = -1;
      HEAP32[119832>>2] = 0;
     }
     $47 = $currentFrame;
     $48 = (($47) + 1)|0;
     $currentFrame = $48;
     $49 = HEAP8[((119864 + 12|0))>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = (($50) + 1)|0;
     _fpsCycles($51);
     _readKeys();
     $52 = HEAP16[120304>>1]|0;
     $53 = ($52<<16>>16)!=(0);
     if ($53) {
      label = 28;
      break;
     }
    }
    $54 = $quit;
    $55 = ($54|0)!=(0);
    $56 = $55 ^ 1;
    if (!($56)) {
     break;
    }
   }
   if ((label|0) == 28) {
   }
  }
 }
 $57 = HEAP32[((308424 + 92|0))>>2]|0;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = HEAP32[25952>>2]|0;
  _crossFade($59,118808);
 } else {
  _fadeToBlack(118808);
 }
 _stopSamples();
 STACKTOP = sp;return;
}
function _initEngineProjections() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setOrthoProjection(311,240,512);
 _setBaseTranslation(0,0,0);
 _setBaseRotation(0,0,0);
 $0 = HEAP32[34080>>2]|0;
 $1 = HEAP32[34088>>2]|0;
 _setLightVector($0,$1,0);
 STACKTOP = sp;return;
}
function _initSceneVars() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _resetExtras();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(10);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (47504 + (($2*14)|0)|0);
  $4 = (($3) + 2|0);
  HEAP16[$4>>1] = -1;
  $5 = $i;
  $6 = (($5) + 1)|0;
  $i = $6;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(80);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = (37920 + ($9)|0);
  HEAP8[$10>>0] = 0;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(255);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = (38000 + ($15)|0);
  HEAP8[$16>>0] = 0;
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = ($19|0)<(28);
  if (!($20)) {
   break;
  }
  $21 = $i;
  $22 = (38344 + ($21)|0);
  HEAP8[$22>>0] = 0;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 HEAP16[34104>>1] = -1;
 HEAP16[((34104 + 2|0))>>1] = -1;
 HEAP16[((34104 + 4|0))>>1] = -1;
 HEAP16[((34104 + 6|0))>>1] = -1;
 HEAP16[34112>>1] = 0;
 HEAP16[((34112 + 2|0))>>1] = 0;
 HEAP16[((34112 + 4|0))>>1] = 0;
 HEAP16[((34112 + 6|0))>>1] = 0;
 HEAP16[34120>>1] = 0;
 HEAP16[((34120 + 2|0))>>1] = 0;
 HEAP16[((34120 + 4|0))>>1] = 0;
 HEAP16[((34120 + 6|0))>>1] = 0;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = ($25|0)<(150);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = (38376 + ($27)|0);
  HEAP8[$28>>0] = 0;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 HEAP32[24248>>2] = 0;
 HEAP32[34288>>2] = 0;
 HEAP32[36696>>2] = 0;
 HEAP32[23344>>2] = 0;
 STACKTOP = sp;return;
}
function _initHeroVars() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _resetActor(0);
 HEAP16[38264>>1] = -1;
 HEAP16[38304>>1] = 2;
 HEAP16[38312>>1] = 2;
 HEAP16[38296>>1] = 0;
 HEAP16[38288>>1] = 0;
 HEAP16[38320>>1] = 0;
 HEAP16[38336>>1] = 0;
 $0 = HEAP32[8>>2]|0;
 $1 = (($0) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[8>>2]|0;
 $3 = (($2) + 104|0);
 HEAP32[$3>>2] = 50;
 $4 = HEAP32[8>>2]|0;
 $5 = (($4) + 96|0);
 HEAP32[$5>>2] = 4;
 STACKTOP = sp;return;
}
function _initEngineVars($save) {
 $save = $save|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $save;
 _resetClip();
 HEAP32[34080>>2] = 896;
 HEAP32[34088>>2] = 950;
 _initEngineProjections();
 _initSceneVars();
 _initHeroVars();
 HEAP16[34184>>1] = 8192;
 HEAP16[34192>>1] = 6144;
 HEAP16[34200>>1] = 8192;
 HEAP32[34048>>2] = -1;
 HEAP32[34040>>2] = 0;
 HEAP32[25912>>2] = -1;
 HEAP16[34248>>1] = -1;
 HEAP32[122472>>2] = 0;
 HEAP16[38312>>1] = 0;
 HEAP16[38304>>1] = 2;
 HEAP16[38320>>1] = 0;
 HEAP16[38296>>1] = 0;
 HEAP16[38288>>1] = 0;
 HEAP16[38328>>1] = 0;
 HEAP16[32>>1] = 0;
 HEAP16[24256>>1] = 0;
 HEAP16[38336>>1] = 0;
 HEAP16[38256>>1] = 0;
 HEAP32[122480>>2] = 0;
 HEAP16[34256>>1] = 0;
 HEAP16[128>>1] = 0;
 HEAP16[16>>1] = 0;
 HEAP16[24>>1] = 0;
 $1 = $0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _loadGame();
 $3 = HEAP16[34184>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = ($4|0)==(-1);
 if ($5) {
  HEAP16[34240>>1] = 0;
 }
 STACKTOP = sp;return;
}
function _loadGame() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $fr = 0, $namePtr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fr = sp + 8|0;
 $data = sp + 6164|0;
 $0 = (_fropen2($fr,122488,122504)|0);
 $1 = ($0|0)!=(0);
 if (!($1)) {
  (_printf((122512|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $namePtr = 38528;
 _frread($fr,$data,1);
 while(1) {
  _frread($fr,$data,1);
  $2 = HEAP8[$data>>0]|0;
  $3 = $namePtr;
  $4 = (($3) + 1|0);
  $namePtr = $4;
  HEAP8[$3>>0] = $2;
  $5 = HEAP8[$data>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   break;
  }
 }
 _frread($fr,$data,1);
 $7 = HEAP8[$data>>0]|0;
 $8 = $7&255;
 _frread($fr,38000,$8);
 _frread($fr,34040,1);
 _frread($fr,38256,1);
 _frread($fr,128,1);
 $9 = HEAP16[128>>1]|0;
 HEAP16[24>>1] = $9;
 $10 = HEAP32[8>>2]|0;
 $11 = (($10) + 104|0);
 _frread($fr,$11,1);
 _frread($fr,38296,2);
 _frread($fr,24256,1);
 _frread($fr,38320,1);
 _frread($fr,38304,1);
 _frread($fr,34184,2);
 _frread($fr,34192,2);
 _frread($fr,34200,2);
 $12 = HEAP32[8>>2]|0;
 $13 = (($12) + 60|0);
 _frread($fr,$13,2);
 $14 = HEAP32[8>>2]|0;
 $15 = (($14) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 HEAP16[16>>1] = $17;
 $18 = HEAP32[8>>2]|0;
 $19 = (($18) + 8|0);
 _frread($fr,$19,1);
 _frread($fr,$data,1);
 $20 = HEAP8[$data>>0]|0;
 $21 = $20&255;
 _frread($fr,38376,$21);
 _frread($fr,38328,1);
 _frread($fr,$data,1);
 $22 = HEAP8[$data>>0]|0;
 $23 = $22&255;
 _frread($fr,38344,$23);
 _frread($fr,38312,1);
 _frread($fr,38336,1);
 _frclose($fr);
 HEAP32[34048>>2] = -1;
 HEAP16[34240>>1] = 3;
 STACKTOP = sp;return;
}
function _saveGame() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $data = 0, $fr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fr = sp + 4|0;
 $data = sp + 6160|0;
 $0 = (_fropen2($fr,122488,122552)|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  HEAP8[$data>>0] = 3;
  _frwrite($fr,$data,1,1);
  HEAP8[$data>>0] = 0;
  _frwrite($fr,122600,15,1);
  HEAP8[$data>>0] = -1;
  _frwrite($fr,$data,1,1);
  _frwrite($fr,38000,255,1);
  _frwrite($fr,34048,1,1);
  _frwrite($fr,38256,1,1);
  _frwrite($fr,128,1,1);
  $2 = HEAP32[8>>2]|0;
  $3 = (($2) + 104|0);
  _frwrite($fr,$3,1,1);
  _frwrite($fr,38296,2,1);
  _frwrite($fr,24256,1,1);
  _frwrite($fr,38320,1,1);
  _frwrite($fr,38304,1,1);
  _frwrite($fr,34184,2,1);
  _frwrite($fr,34192,2,1);
  _frwrite($fr,34200,2,1);
  $4 = HEAP32[8>>2]|0;
  $5 = (($4) + 60|0);
  _frwrite($fr,$5,2,1);
  $6 = HEAP32[8>>2]|0;
  $7 = (($6) + 8|0);
  _frwrite($fr,$7,1,1);
  HEAP8[$data>>0] = -106;
  _frwrite($fr,$data,1,1);
  _frwrite($fr,38376,150,1);
  _frwrite($fr,38328,1,1);
  HEAP8[$data>>0] = 28;
  _frwrite($fr,$data,1,1);
  _frwrite($fr,38344,28,1);
  _frwrite($fr,38312,1,1);
  _frwrite($fr,38336,1,1);
  _frclose($fr);
  STACKTOP = sp;return;
 } else {
  (_printf((122560|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
}
function _processFoundItem($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $boxBottomRightX = 0, $boxBottomRightY = 0, $boxTopLeftX = 0;
 var $boxTopLeftY = 0, $currentAnim = 0, $currentAnimState = 0, $itemCameraX = 0, $itemCameraY = 0, $itemCameraZ = 0, $itemX = 0, $itemY = 0, $itemZ = 0, $quitItem = 0, $textState = 0, $tmpAnimTimer = 0, $tmpLanguageCDId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpAnimTimer = sp;
 $0 = $item;
 $1 = HEAP32[8>>2]|0;
 $2 = (($1) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 256)|0;
 $5 = $4 >> 9;
 HEAP32[39400>>2] = $5;
 $6 = HEAP32[8>>2]|0;
 $7 = (($6) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 256)|0;
 $10 = $9 >> 8;
 HEAP32[39408>>2] = $10;
 $11 = HEAP32[8>>2]|0;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 256)|0;
 $15 = $14 >> 9;
 HEAP32[39416>>2] = $15;
 $16 = HEAP32[8>>2]|0;
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 & -513;
 $19 = $18 | 512;
 HEAP16[$16>>1] = $19;
 _redrawEngineActions(1);
 $20 = HEAP32[8>>2]|0;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 & -513;
 HEAP16[$20>>1] = $22;
 $23 = HEAP32[25952>>2]|0;
 $24 = HEAP32[25944>>2]|0;
 _copyScreen($23,$24);
 $25 = HEAP32[39400>>2]|0;
 $26 = $25 << 9;
 $itemCameraX = $26;
 $27 = HEAP32[39408>>2]|0;
 $28 = $27 << 8;
 $itemCameraY = $28;
 $29 = HEAP32[39416>>2]|0;
 $30 = $29 << 9;
 $itemCameraZ = $30;
 $31 = HEAP32[8>>2]|0;
 $32 = (($31) + 36|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $itemCameraX;
 $35 = (($33) - ($34))|0;
 $36 = HEAP32[8>>2]|0;
 $37 = (($36) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $itemCameraY;
 $40 = (($38) - ($39))|0;
 $41 = HEAP32[8>>2]|0;
 $42 = (($41) + 44|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $itemCameraZ;
 $45 = (($43) - ($44))|0;
 $46 = HEAP32[8>>2]|0;
 $47 = (($46) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (23352 + ($48<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 (_renderIsoModel($35,$40,$45,0,128,0,$50)|0);
 $51 = HEAP32[47432>>2]|0;
 $52 = HEAP32[47448>>2]|0;
 $53 = HEAP32[47440>>2]|0;
 $54 = HEAP32[47456>>2]|0;
 _setClip($51,$52,$53,$54);
 $55 = HEAP32[8>>2]|0;
 $56 = (($55) + 36|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + 256)|0;
 $59 = $58 >> 9;
 $itemX = $59;
 $60 = HEAP32[8>>2]|0;
 $61 = (($60) + 40|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 >> 8;
 $itemY = $63;
 $64 = HEAP32[8>>2]|0;
 $65 = (($64) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 127;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $itemY;
  $70 = (($69) + 1)|0;
  $itemY = $70;
 }
 $71 = HEAP32[8>>2]|0;
 $72 = (($71) + 44|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + 256)|0;
 $75 = $74 >> 9;
 $itemZ = $75;
 $76 = $itemX;
 $77 = $itemY;
 $78 = $itemZ;
 _drawOverModelActor($76,$77,$78);
 _flip();
 $79 = HEAP32[8>>2]|0;
 $80 = (($79) + 36|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $itemCameraX;
 $83 = (($81) - ($82))|0;
 $84 = HEAP32[8>>2]|0;
 $85 = (($84) + 40|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $itemCameraY;
 $88 = (($86) - ($87))|0;
 $89 = HEAP32[8>>2]|0;
 $90 = (($89) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $itemCameraZ;
 $93 = (($91) - ($92))|0;
 (_projectPositionOnScreen($83,$88,$93)|0);
 $94 = HEAP16[38912>>1]|0;
 $95 = $94 << 16 >> 16;
 $96 = (($95) - 150)|0;
 $97 = $96&65535;
 HEAP16[38912>>1] = $97;
 $98 = HEAP16[38904>>1]|0;
 $99 = $98 << 16 >> 16;
 $100 = (($99) - 65)|0;
 $boxTopLeftX = $100;
 $101 = HEAP16[38912>>1]|0;
 $102 = $101 << 16 >> 16;
 $103 = (($102) - 65)|0;
 $boxTopLeftY = $103;
 $104 = HEAP16[38904>>1]|0;
 $105 = $104 << 16 >> 16;
 $106 = (($105) + 65)|0;
 $boxBottomRightX = $106;
 $107 = HEAP16[38912>>1]|0;
 $108 = $107 << 16 >> 16;
 $109 = (($108) + 65)|0;
 $boxBottomRightY = $109;
 _playSample(41,4096,1,128,128,128,-1);
 _stopMusic();
 $110 = HEAP32[((308424 + 24|0))>>2]|0;
 $tmpLanguageCDId = $110;
 _initTextBank(2);
 $111 = $tmpLanguageCDId;
 HEAP32[((308424 + 24|0))>>2] = $111;
 _resetClip();
 $112 = $0;
 _initText($112);
 _initDialogueBox();
 $textState = 1;
 $quitItem = 0;
 $113 = HEAP32[((308424 + 24|0))>>2]|0;
 $114 = ($113|0)!=(0);
 if ($114) {
  $115 = $0;
  (_initVoxToPlay($115)|0);
 }
 $116 = (_getBodyAnimIndex(20,0)|0);
 $117 = (39472 + ($116<<2)|0);
 $118 = HEAP32[$117>>2]|0;
 $currentAnim = $118;
 $119 = HEAP32[8>>2]|0;
 $120 = (($119) + 224|0);
 ;HEAP32[$tmpAnimTimer+0>>2]=HEAP32[$120+0>>2]|0;HEAP32[$tmpAnimTimer+4>>2]=HEAP32[$120+4>>2]|0;
 $121 = HEAP32[44344>>2]|0;
 $122 = HEAP32[8>>2]|0;
 $123 = (($122) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (23352 + ($124<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = HEAP32[8>>2]|0;
 $128 = (($127) + 224|0);
 $129 = (_stockAnimation($121,$126,$128)|0);
 $130 = HEAP32[44344>>2]|0;
 $131 = (($130) + ($129)|0);
 HEAP32[44344>>2] = $131;
 $132 = HEAP32[44336>>2]|0;
 $133 = (($132) + 4488|0);
 $134 = HEAP32[44344>>2]|0;
 $135 = ($133>>>0)<($134>>>0);
 if ($135) {
  $136 = HEAP32[44336>>2]|0;
  HEAP32[44344>>2] = $136;
 }
 $currentAnimState = 0;
 $137 = $0;
 $138 = (38656 + ($137<<2)|0);
 $139 = HEAP32[$138>>2]|0;
 _prepareIsoModel($139);
 HEAP32[47480>>2] = 0;
 while(1) {
  $140 = $quitItem;
  $141 = ($140|0)!=(0);
  $142 = $141 ^ 1;
  if (!($142)) {
   break;
  }
  _resetClip();
  HEAP32[47472>>2] = 0;
  _blitBackgroundAreas();
  $143 = $boxTopLeftX;
  $144 = $boxTopLeftY;
  $145 = $boxBottomRightX;
  $146 = $boxBottomRightY;
  _drawTransparentBox($143,$144,$145,$146,4);
  $147 = $boxTopLeftX;
  $148 = $boxTopLeftY;
  $149 = $boxBottomRightX;
  $150 = $boxBottomRightY;
  _setClip($147,$148,$149,$150);
  $151 = $0;
  $152 = (122616 + ($151<<1)|0);
  $153 = HEAP16[$152>>1]|0;
  $154 = $153 << 16 >> 16;
  $155 = (($154) + 8)|0;
  $156 = $155&65535;
  HEAP16[$152>>1] = $156;
  $157 = HEAP16[38904>>1]|0;
  $158 = $157 << 16 >> 16;
  $159 = HEAP16[38912>>1]|0;
  $160 = $159 << 16 >> 16;
  $161 = $0;
  $162 = (38656 + ($161<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $0;
  $165 = (122616 + ($164<<1)|0);
  $166 = HEAP16[$165>>1]|0;
  $167 = $166 << 16 >> 16;
  _renderInventoryItem($158,$160,$163,$167,10000);
  $168 = $boxTopLeftX;
  $169 = $boxTopLeftY;
  $170 = $boxBottomRightX;
  $171 = $boxBottomRightY;
  _drawBox($168,$169,$170,$171);
  $172 = $boxTopLeftX;
  $173 = $boxTopLeftY;
  $174 = $boxBottomRightX;
  $175 = $boxBottomRightY;
  _addRedrawArea($172,$173,$174,$175);
  _resetClip();
  _initEngineProjections();
  $176 = $currentAnimState;
  $177 = $currentAnim;
  $178 = HEAP32[8>>2]|0;
  $179 = (($178) + 4|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (23352 + ($180<<2)|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = HEAP32[8>>2]|0;
  $184 = (($183) + 224|0);
  $185 = (_setModelAnimation($176,$177,$182,$184)|0);
  $186 = ($185|0)!=(0);
  if ($186) {
   $187 = $currentAnimState;
   $188 = (($187) + 1)|0;
   $currentAnimState = $188;
   $189 = $currentAnimState;
   $190 = $currentAnim;
   $191 = (_getNumKeyframes($190)|0);
   $192 = ($189|0)>=($191|0);
   if ($192) {
    $193 = $currentAnim;
    $194 = (_getStartKeyframe($193)|0);
    $currentAnimState = $194;
   }
  }
  $195 = HEAP32[8>>2]|0;
  $196 = (($195) + 36|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $itemCameraX;
  $199 = (($197) - ($198))|0;
  $200 = HEAP32[8>>2]|0;
  $201 = (($200) + 40|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $itemCameraY;
  $204 = (($202) - ($203))|0;
  $205 = HEAP32[8>>2]|0;
  $206 = (($205) + 44|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $itemCameraZ;
  $209 = (($207) - ($208))|0;
  $210 = HEAP32[8>>2]|0;
  $211 = (($210) + 4|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (23352 + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  (_renderIsoModel($199,$204,$209,0,128,0,$214)|0);
  $215 = HEAP32[47432>>2]|0;
  $216 = HEAP32[47448>>2]|0;
  $217 = HEAP32[47440>>2]|0;
  $218 = HEAP32[47456>>2]|0;
  _setClip($215,$216,$217,$218);
  $219 = $itemX;
  $220 = $itemY;
  $221 = $itemZ;
  _drawOverModelActor($219,$220,$221);
  $222 = HEAP32[47432>>2]|0;
  $223 = HEAP32[47448>>2]|0;
  $224 = HEAP32[47440>>2]|0;
  $225 = HEAP32[47456>>2]|0;
  _addRedrawArea($222,$223,$224,$225);
  $226 = $textState;
  $227 = ($226|0)!=(0);
  if ($227) {
   _resetClip();
   $228 = (_printText10()|0);
   $textState = $228;
  }
  $229 = $textState;
  $230 = ($229|0)==(0);
  if ($230) {
   label = 17;
  } else {
   $231 = $textState;
   $232 = ($231|0)==(2);
   if ($232) {
    label = 17;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   _sdldelay(15);
  }
  _flipRedrawAreas();
  _readKeys();
  $233 = HEAP16[122408>>1]|0;
  $234 = ($233<<16>>16)!=(0);
  if ($234) {
   $235 = $textState;
   $236 = ($235|0)!=(0);
   if (!($236)) {
    $quitItem = 1;
   }
   $237 = $textState;
   $238 = ($237|0)==(2);
   if ($238) {
    $textState = 1;
   }
  }
  $239 = HEAP32[25920>>2]|0;
  $240 = (($239) + 1)|0;
  HEAP32[25920>>2] = $240;
 }
 while(1) {
  $241 = HEAP32[123128>>2]|0;
  $242 = (_playVoxSimple($241)|0);
  $243 = ($242|0)!=(0);
  if (!($243)) {
   break;
  }
  _readKeys();
  $244 = HEAP16[120304>>1]|0;
  $245 = $244 << 16 >> 16;
  $246 = ($245|0)==(1);
  if ($246) {
   label = 28;
   break;
  }
  _delaySkip(1);
 }
 if ((label|0) == 28) {
 }
 _initEngineProjections();
 $247 = HEAP32[122480>>2]|0;
 $248 = (($247) + 3)|0;
 _initTextBank($248);
 $249 = HEAP32[((308424 + 24|0))>>2]|0;
 $250 = ($249|0)!=(0);
 if (!($250)) {
  $255 = HEAP32[8>>2]|0;
  $256 = (($255) + 224|0);
  ;HEAP32[$256+0>>2]=HEAP32[$tmpAnimTimer+0>>2]|0;HEAP32[$256+4>>2]=HEAP32[$tmpAnimTimer+4>>2]|0;
  STACKTOP = sp;return;
 }
 $251 = HEAP32[123128>>2]|0;
 $252 = (_isSamplePlaying($251)|0);
 $253 = ($252|0)!=(0);
 if (!($253)) {
  $255 = HEAP32[8>>2]|0;
  $256 = (($255) + 224|0);
  ;HEAP32[$256+0>>2]=HEAP32[$tmpAnimTimer+0>>2]|0;HEAP32[$256+4>>2]=HEAP32[$tmpAnimTimer+4>>2]|0;
  STACKTOP = sp;return;
 }
 $254 = HEAP32[123128>>2]|0;
 _stopVox($254);
 $255 = HEAP32[8>>2]|0;
 $256 = (($255) + 224|0);
 ;HEAP32[$256+0>>2]=HEAP32[$tmpAnimTimer+0>>2]|0;HEAP32[$256+4>>2]=HEAP32[$tmpAnimTimer+4>>2]|0;
 STACKTOP = sp;return;
}
function _processGameChoices($choiceIdx) {
 $choiceIdx = $choiceIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $choiceIdx;
 $1 = HEAP32[25952>>2]|0;
 $2 = HEAP32[25944>>2]|0;
 _copyScreen($1,$2);
 HEAP16[38608>>1] = 0;
 $3 = HEAP32[38600>>2]|0;
 $4 = $3&65535;
 HEAP16[((38608 + 2|0))>>1] = $4;
 HEAP16[((38608 + 4|0))>>1] = 0;
 $5 = HEAP32[122480>>2]|0;
 $6 = (($5) + 3)|0;
 $7 = $6&65535;
 HEAP16[((38608 + 6|0))>>1] = $7;
 $8 = HEAP32[38600>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = HEAP32[38600>>2]|0;
   $12 = ($10|0)<($11|0);
   if (!($12)) {
    break;
   }
   $13 = $i;
   $14 = $13<<1;
   $15 = (($14) + 4)|0;
   $16 = (38608 + ($15<<1)|0);
   HEAP16[$16>>1] = 0;
   $17 = $i;
   $18 = (38560 + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19&65535;
   $21 = $i;
   $22 = $21<<1;
   $23 = (($22) + 5)|0;
   $24 = (38608 + ($23<<1)|0);
   HEAP16[$24>>1] = $20;
   $25 = $i;
   $26 = (($25) + 1)|0;
   $i = $26;
  }
 }
 $27 = $0;
 _drawAskQuestion($27);
 (_processMenu(38608)|0);
 $28 = HEAP16[38608>>1]|0;
 $29 = $28 << 16 >> 16;
 $30 = (38560 + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[38648>>2] = $31;
 $32 = HEAP32[((308424 + 24|0))>>2]|0;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[38648>>2]|0;
 (_initVoxToPlay($34)|0);
 while(1) {
  $35 = HEAP32[123128>>2]|0;
  $36 = (_playVoxSimple($35)|0);
  $37 = ($36|0)!=(0);
  if (!($37)) {
   break;
  }
 }
 $38 = HEAP32[123128>>2]|0;
 _stopVox($38);
 HEAP32[123136>>2] = 0;
 HEAP32[123144>>2] = 0;
 STACKTOP = sp;return;
}
function _processGameoverAnimation() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avg = 0, $cdot = 0, $gameOverPtr = 0, $startLbaTime = 0, $tmpLbaTime = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[25920>>2]|0;
 $tmpLbaTime = $0;
 $1 = HEAP32[8>>2]|0;
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & -513;
 $4 = $3 | 512;
 HEAP16[$1>>1] = $4;
 _redrawEngineActions(1);
 $5 = HEAP32[8>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & -513;
 HEAP16[$5>>1] = $7;
 _setPalette(120312);
 $8 = HEAP32[25952>>2]|0;
 $9 = HEAP32[25944>>2]|0;
 _copyScreen($8,$9);
 $10 = HEAP32[361952>>2]|0;
 $11 = (_hqrEntrySize($10,21)|0);
 $12 = (_malloc($11)|0);
 $gameOverPtr = $12;
 $13 = $gameOverPtr;
 $14 = HEAP32[361952>>2]|0;
 (_hqrGetEntry($13,$14,21)|0);
 $15 = $gameOverPtr;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $gameOverPtr;
 _prepareIsoModel($17);
 _stopSamples();
 _stopMidiMusic();
 _setCameraPosition(320,240,128,200,200);
 $18 = HEAP32[25920>>2]|0;
 $startLbaTime = $18;
 _setClip(120,120,519,359);
 while(1) {
  $19 = HEAP16[120304>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = ($20|0)!=(1);
  if ($21) {
   $22 = HEAP32[25920>>2]|0;
   $23 = $startLbaTime;
   $24 = (($22) - ($23))|0;
   $25 = ($24|0)<=(500);
   $53 = $25;
  } else {
   $53 = 0;
  }
  if (!($53)) {
   break;
  }
  _readKeys();
  $26 = HEAP32[25920>>2]|0;
  $27 = $startLbaTime;
  $28 = (($26) - ($27))|0;
  $29 = (_getAverageValue(40000,3200,500,$28)|0);
  $avg = $29;
  $30 = HEAP32[25920>>2]|0;
  $31 = $startLbaTime;
  $32 = (($30) - ($31))|0;
  $33 = (($32|0) % 100)&-1;
  $34 = (_crossDot(1,1024,100,$33)|0);
  $cdot = $34;
  $35 = HEAP32[25944>>2]|0;
  $36 = HEAP32[25952>>2]|0;
  _blitBox(120,120,519,359,$35,120,120,$36);
  $37 = $cdot;
  $38 = (0 - ($37))|0;
  $39 = $avg;
  _setCameraAngle(0,0,0,0,$38,0,$39);
  $40 = $gameOverPtr;
  (_renderIsoModel(0,0,0,0,0,0,$40)|0);
  _copyBlockPhys(120,120,519,359);
  $41 = HEAP32[25920>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[25920>>2] = $42;
  _sdldelay(15);
 }
 $43 = (_rand()|0);
 $44 = (($43|0) % 2000)&-1;
 $45 = (($44) + 3096)|0;
 _playSample(37,$45,1,128,128,128,-1);
 $46 = HEAP32[25944>>2]|0;
 $47 = HEAP32[25952>>2]|0;
 _blitBox(120,120,519,359,$46,120,120,$47);
 _setCameraAngle(0,0,0,0,0,0,3200);
 $48 = $gameOverPtr;
 (_renderIsoModel(0,0,0,0,0,0,$48)|0);
 _copyBlockPhys(120,120,519,359);
 _delaySkip(2000);
 _resetClip();
 $49 = $gameOverPtr;
 _free($49);
 $50 = HEAP32[25944>>2]|0;
 $51 = HEAP32[25952>>2]|0;
 _copyScreen($50,$51);
 _flip();
 _initEngineProjections();
 $52 = $tmpLbaTime;
 HEAP32[25920>>2] = $52;
 STACKTOP = sp;return;
}
function _copyGridMask($index,$x,$y,$buffer) {
 $index = $index|0;
 $x = $x|0;
 $y = $y|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $absX = 0, $absY = 0, $bottom = 0, $inPtr = 0, $j = 0, $left = 0, $lineDataSize = 0, $numOfLineToRemove = 0;
 var $offset = 0, $outPtr = 0, $ptr = 0, $right = 0, $temp = 0, $top = 0, $vSize = 0, $vc3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $x;
 $2 = $y;
 $3 = $buffer;
 $4 = $0;
 $5 = (124944 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $ptr = $6;
 $7 = $1;
 $8 = $ptr;
 $9 = (($8) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($7) + ($11))|0;
 $left = $12;
 $13 = $2;
 $14 = $ptr;
 $15 = (($14) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (($13) + ($17))|0;
 $top = $18;
 $19 = $ptr;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $left;
 $23 = (($21) + ($22))|0;
 $24 = (($23) - 1)|0;
 $right = $24;
 $25 = $ptr;
 $26 = (($25) + 1|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $top;
 $30 = (($28) + ($29))|0;
 $31 = (($30) - 1)|0;
 $bottom = $31;
 $32 = $left;
 $33 = HEAP32[47680>>2]|0;
 $34 = ($32|0)>($33|0);
 if (!($34)) {
  $35 = $right;
  $36 = HEAP32[47664>>2]|0;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   $38 = $bottom;
   $39 = HEAP32[47648>>2]|0;
   $40 = ($38|0)<($39|0);
   if (!($40)) {
    $41 = $top;
    $42 = HEAP32[47696>>2]|0;
    $43 = ($41|0)>($42|0);
    if (!($43)) {
     $44 = $ptr;
     $45 = (($44) + 4|0);
     $ptr = $45;
     $46 = $left;
     $absX = $46;
     $47 = $top;
     $absY = $47;
     $48 = $bottom;
     $49 = $top;
     $50 = (($48) - ($49))|0;
     $51 = (($50) + 1)|0;
     $vSize = $51;
     $52 = $vSize;
     $53 = ($52|0)<=(0);
     if ($53) {
      STACKTOP = sp;return;
     }
     $54 = $right;
     $55 = $left;
     $56 = (($54) - ($55))|0;
     $57 = (($56) - 640)|0;
     $58 = (0 - ($57))|0;
     $59 = (($58) - 1)|0;
     $offset = $59;
     $60 = $right;
     $61 = (($60) + 1)|0;
     $right = $61;
     $62 = $bottom;
     $63 = (($62) + 1)|0;
     $bottom = $63;
     $64 = $absY;
     $65 = HEAP32[47648>>2]|0;
     $66 = ($64|0)<($65|0);
     if ($66) {
      $67 = HEAP32[47648>>2]|0;
      $68 = $absY;
      $69 = (($67) - ($68))|0;
      $numOfLineToRemove = $69;
      $70 = $numOfLineToRemove;
      $71 = $vSize;
      $72 = (($71) - ($70))|0;
      $vSize = $72;
      $73 = $vSize;
      $74 = ($73|0)<=(0);
      if ($74) {
       STACKTOP = sp;return;
      }
      $75 = $numOfLineToRemove;
      $76 = $absY;
      $77 = (($76) + ($75))|0;
      $absY = $77;
      while(1) {
       $78 = $ptr;
       $79 = (($78) + 1|0);
       $ptr = $79;
       $80 = HEAP8[$78>>0]|0;
       $81 = $80&255;
       $lineDataSize = $81;
       $82 = $lineDataSize;
       $83 = $ptr;
       $84 = (($83) + ($82)|0);
       $ptr = $84;
       $85 = $numOfLineToRemove;
       $86 = (($85) + -1)|0;
       $numOfLineToRemove = $86;
       $87 = ($86|0)!=(0);
       if (!($87)) {
        break;
       }
      }
     }
     $88 = $absY;
     $89 = $vSize;
     $90 = (($88) + ($89))|0;
     $91 = (($90) - 1)|0;
     $92 = HEAP32[47696>>2]|0;
     $93 = ($91|0)>($92|0);
     do {
      if ($93) {
       $94 = HEAP32[47696>>2]|0;
       $95 = $absY;
       $96 = (($94) - ($95))|0;
       $97 = (($96) + 1)|0;
       $vSize = $97;
       $98 = $vSize;
       $99 = ($98|0)<=(0);
       if (!($99)) {
        break;
       }
       STACKTOP = sp;return;
      }
     } while(0);
     $100 = HEAP32[25952>>2]|0;
     $101 = $absY;
     $102 = (25968 + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (($100) + ($103)|0);
     $105 = $left;
     $106 = (($104) + ($105)|0);
     $outPtr = $106;
     $107 = $3;
     $108 = $absY;
     $109 = (25968 + ($108<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (($107) + ($110)|0);
     $112 = $left;
     $113 = (($111) + ($112)|0);
     $inPtr = $113;
     while(1) {
      $114 = $ptr;
      $115 = (($114) + 1|0);
      $ptr = $115;
      $116 = HEAP8[$114>>0]|0;
      $117 = $116&255;
      $vc3 = $117;
      while(1) {
       $118 = $ptr;
       $119 = (($118) + 1|0);
       $ptr = $119;
       $120 = HEAP8[$118>>0]|0;
       $121 = $120&255;
       $temp = $121;
       $122 = $temp;
       $123 = $outPtr;
       $124 = (($123) + ($122)|0);
       $outPtr = $124;
       $125 = $temp;
       $126 = $inPtr;
       $127 = (($126) + ($125)|0);
       $inPtr = $127;
       $128 = $temp;
       $129 = $absX;
       $130 = (($129) + ($128))|0;
       $absX = $130;
       $131 = $vc3;
       $132 = (($131) + -1)|0;
       $vc3 = $132;
       $133 = $vc3;
       $134 = ($133|0)!=(0);
       if (!($134)) {
        label = 22;
        break;
       }
       $135 = $ptr;
       $136 = (($135) + 1|0);
       $ptr = $136;
       $137 = HEAP8[$135>>0]|0;
       $138 = $137&255;
       $temp = $138;
       $j = 0;
       while(1) {
        $139 = $j;
        $140 = $temp;
        $141 = ($139|0)<($140|0);
        if (!($141)) {
         break;
        }
        $142 = $absX;
        $143 = HEAP32[47664>>2]|0;
        $144 = ($142|0)>=($143|0);
        if ($144) {
         $145 = $absX;
         $146 = HEAP32[47680>>2]|0;
         $147 = ($145|0)<=($146|0);
         if ($147) {
          $148 = $inPtr;
          $149 = HEAP8[$148>>0]|0;
          $150 = $outPtr;
          HEAP8[$150>>0] = $149;
         }
        }
        $151 = $absX;
        $152 = (($151) + 1)|0;
        $absX = $152;
        $153 = $outPtr;
        $154 = (($153) + 1|0);
        $outPtr = $154;
        $155 = $inPtr;
        $156 = (($155) + 1|0);
        $inPtr = $156;
        $157 = $j;
        $158 = (($157) + 1)|0;
        $j = $158;
       }
       $159 = $vc3;
       $160 = (($159) + -1)|0;
       $vc3 = $160;
       $161 = ($160|0)!=(0);
       if (!($161)) {
        break;
       }
      }
      if ((label|0) == 22) {
       label = 0;
      }
      $162 = $left;
      $absX = $162;
      $163 = $offset;
      $164 = $outPtr;
      $165 = (($164) + ($163)|0);
      $outPtr = $165;
      $166 = $offset;
      $167 = $inPtr;
      $168 = (($167) + ($166)|0);
      $inPtr = $168;
      $169 = $vSize;
      $170 = (($169) + -1)|0;
      $vSize = $170;
      $171 = ($170|0)!=(0);
      if (!($171)) {
       break;
      }
     }
     STACKTOP = sp;return;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _drawOverModelActor($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $CopyBlockPhysLeft = 0, $CopyBlockPhysRight = 0, $currBrickEntry = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = HEAP32[47664>>2]|0;
 $4 = (($3) + 24)|0;
 $5 = (($4|0) / 24)&-1;
 $6 = (($5) - 1)|0;
 $CopyBlockPhysLeft = $6;
 $7 = HEAP32[47680>>2]|0;
 $8 = (($7) + 24)|0;
 $9 = (($8|0) / 24)&-1;
 $CopyBlockPhysRight = $9;
 $10 = $CopyBlockPhysLeft;
 $j = $10;
 while(1) {
  $11 = $j;
  $12 = $CopyBlockPhysRight;
  $13 = ($11|0)<=($12|0);
  if (!($13)) {
   break;
  }
  $i = 0;
  while(1) {
   $14 = $i;
   $15 = $j;
   $16 = (160944 + ($15<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = ($14|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $i;
   $21 = $j;
   $22 = (161000 + (($21*2100)|0)|0);
   $23 = (($22) + (($20*14)|0)|0);
   $currBrickEntry = $23;
   $24 = $currBrickEntry;
   $25 = (($24) + 8|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $28 = (($27) + 38)|0;
   $29 = HEAP32[47648>>2]|0;
   $30 = ($28|0)>($29|0);
   if ($30) {
    $31 = $currBrickEntry;
    $32 = (($31) + 8|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $33 << 16 >> 16;
    $35 = HEAP32[47696>>2]|0;
    $36 = ($34|0)<=($35|0);
    if ($36) {
     $37 = $currBrickEntry;
     $38 = (($37) + 2|0);
     $39 = HEAP16[$38>>1]|0;
     $40 = $39 << 16 >> 16;
     $41 = $1;
     $42 = ($40|0)>=($41|0);
     if ($42) {
      $43 = $currBrickEntry;
      $44 = HEAP16[$43>>1]|0;
      $45 = $44 << 16 >> 16;
      $46 = $currBrickEntry;
      $47 = (($46) + 4|0);
      $48 = HEAP16[$47>>1]|0;
      $49 = $48 << 16 >> 16;
      $50 = (($45) + ($49))|0;
      $51 = $2;
      $52 = $0;
      $53 = (($51) + ($52))|0;
      $54 = ($50|0)>($53|0);
      if ($54) {
       $55 = $currBrickEntry;
       $56 = (($55) + 10|0);
       $57 = HEAP16[$56>>1]|0;
       $58 = $57 << 16 >> 16;
       $59 = $j;
       $60 = ($59*24)|0;
       $61 = (($60) - 24)|0;
       $62 = $currBrickEntry;
       $63 = (($62) + 8|0);
       $64 = HEAP16[$63>>1]|0;
       $65 = $64 << 16 >> 16;
       $66 = HEAP32[25944>>2]|0;
       _copyGridMask($58,$61,$65,$66);
      }
     }
    }
   }
   $67 = $i;
   $68 = (($67) + 1)|0;
   $i = $68;
  }
  $69 = $j;
  $70 = (($69) + 1)|0;
  $j = $70;
 }
 STACKTOP = sp;return;
}
function _drawOverSpriteActor($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $CopyBlockPhysLeft = 0, $CopyBlockPhysRight = 0, $currBrickEntry = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = HEAP32[47664>>2]|0;
 $4 = (($3) + 24)|0;
 $5 = (($4|0) / 24)&-1;
 $6 = (($5) - 1)|0;
 $CopyBlockPhysLeft = $6;
 $7 = HEAP32[47680>>2]|0;
 $8 = (($7) + 24)|0;
 $9 = (($8|0) / 24)&-1;
 $CopyBlockPhysRight = $9;
 $10 = $CopyBlockPhysLeft;
 $j = $10;
 while(1) {
  $11 = $j;
  $12 = $CopyBlockPhysRight;
  $13 = ($11|0)<=($12|0);
  if (!($13)) {
   break;
  }
  $i = 0;
  while(1) {
   $14 = $i;
   $15 = $j;
   $16 = (160944 + ($15<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = ($14|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $i;
   $21 = $j;
   $22 = (161000 + (($21*2100)|0)|0);
   $23 = (($22) + (($20*14)|0)|0);
   $currBrickEntry = $23;
   $24 = $currBrickEntry;
   $25 = (($24) + 8|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $28 = (($27) + 38)|0;
   $29 = HEAP32[47648>>2]|0;
   $30 = ($28|0)>($29|0);
   if ($30) {
    $31 = $currBrickEntry;
    $32 = (($31) + 8|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $33 << 16 >> 16;
    $35 = HEAP32[47696>>2]|0;
    $36 = ($34|0)<=($35|0);
    if ($36) {
     $37 = $currBrickEntry;
     $38 = (($37) + 2|0);
     $39 = HEAP16[$38>>1]|0;
     $40 = $39 << 16 >> 16;
     $41 = $1;
     $42 = ($40|0)>=($41|0);
     if ($42) {
      $43 = $currBrickEntry;
      $44 = HEAP16[$43>>1]|0;
      $45 = $44 << 16 >> 16;
      $46 = $0;
      $47 = ($45|0)==($46|0);
      if ($47) {
       $48 = $currBrickEntry;
       $49 = (($48) + 4|0);
       $50 = HEAP16[$49>>1]|0;
       $51 = $50 << 16 >> 16;
       $52 = $2;
       $53 = ($51|0)==($52|0);
       if ($53) {
        $54 = $currBrickEntry;
        $55 = (($54) + 10|0);
        $56 = HEAP16[$55>>1]|0;
        $57 = $56 << 16 >> 16;
        $58 = $j;
        $59 = ($58*24)|0;
        $60 = (($59) - 24)|0;
        $61 = $currBrickEntry;
        $62 = (($61) + 8|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = $63 << 16 >> 16;
        $65 = HEAP32[25944>>2]|0;
        _copyGridMask($57,$60,$64,$65);
       }
      }
      $66 = $currBrickEntry;
      $67 = HEAP16[$66>>1]|0;
      $68 = $67 << 16 >> 16;
      $69 = $0;
      $70 = ($68|0)>($69|0);
      if ($70) {
       label = 13;
      } else {
       $71 = $currBrickEntry;
       $72 = (($71) + 4|0);
       $73 = HEAP16[$72>>1]|0;
       $74 = $73 << 16 >> 16;
       $75 = $2;
       $76 = ($74|0)>($75|0);
       if ($76) {
        label = 13;
       }
      }
      if ((label|0) == 13) {
       label = 0;
       $77 = $currBrickEntry;
       $78 = (($77) + 10|0);
       $79 = HEAP16[$78>>1]|0;
       $80 = $79 << 16 >> 16;
       $81 = $j;
       $82 = ($81*24)|0;
       $83 = (($82) - 24)|0;
       $84 = $currBrickEntry;
       $85 = (($84) + 8|0);
       $86 = HEAP16[$85>>1]|0;
       $87 = $86 << 16 >> 16;
       $88 = HEAP32[25944>>2]|0;
       _copyGridMask($80,$83,$87,$88);
      }
     }
    }
   }
   $89 = $i;
   $90 = (($89) + 1)|0;
   $i = $90;
  }
  $91 = $j;
  $92 = (($91) + 1)|0;
  $j = $92;
 }
 STACKTOP = sp;return;
}
function _processGridMask($buffer,$ptr) {
 $buffer = $buffer|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ah = 0, $al = 0, $bh = 0, $bl = 0, $ebx = 0, $edi = 0, $esi = 0, $iteration = 0, $numOfBlock = 0, $ptr2 = 0, $ptrSave = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $ptr;
 $2 = $1;
 $ptrSave = $2;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $ebx = $4;
 $5 = $0;
 $6 = (($5) + 4|0);
 $0 = $6;
 $7 = $ebx;
 $8 = $1;
 HEAP32[$8>>2] = $7;
 $9 = $1;
 $10 = (($9) + 4|0);
 $1 = $10;
 $11 = $ebx;
 $12 = $11 & 65280;
 $13 = $12 >> 8;
 $14 = $13&255;
 $bh = $14;
 $15 = $0;
 $esi = $15;
 $16 = $1;
 $edi = $16;
 $iteration = 0;
 while(1) {
  $numOfBlock = 0;
  $ah = 0;
  $17 = $edi;
  $ptr2 = $17;
  $18 = $edi;
  $19 = (($18) + 1|0);
  $edi = $19;
  $20 = $esi;
  $21 = (($20) + 1|0);
  $esi = $21;
  $22 = HEAP8[$20>>0]|0;
  $bl = $22;
  $23 = $esi;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 & 192;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $edi;
   $29 = (($28) + 1|0);
   $edi = $29;
   HEAP8[$28>>0] = 0;
   $30 = $numOfBlock;
   $31 = (($30) + 1)<<24>>24;
   $numOfBlock = $31;
  }
  while(1) {
   $32 = $esi;
   $33 = (($32) + 1|0);
   $esi = $33;
   $34 = HEAP8[$32>>0]|0;
   $al = $34;
   $35 = $al;
   $iteration = $35;
   $36 = $iteration;
   $37 = $36&255;
   $38 = $37 & 63;
   $39 = $38&255;
   $iteration = $39;
   $40 = $iteration;
   $41 = (($40) + 1)<<24>>24;
   $iteration = $41;
   $42 = $al;
   $43 = $42&255;
   $44 = $43 & 128;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = $iteration;
    $47 = $46&255;
    $48 = $ah;
    $49 = $48&255;
    $50 = (($49) + ($47))|0;
    $51 = $50&255;
    $ah = $51;
    $52 = $esi;
    $53 = (($52) + 1|0);
    $esi = $53;
   } else {
    $54 = $al;
    $55 = $54&255;
    $56 = $55 & 64;
    $57 = ($56|0)!=(0);
    if ($57) {
     $58 = $iteration;
     $59 = $58&255;
     $60 = $ah;
     $61 = $60&255;
     $62 = (($61) + ($59))|0;
     $63 = $62&255;
     $ah = $63;
     $64 = $iteration;
     $65 = $64&255;
     $66 = $esi;
     $67 = (($66) + ($65)|0);
     $esi = $67;
    } else {
     $68 = $ah;
     $69 = ($68<<24>>24)!=(0);
     if ($69) {
      $70 = $ah;
      $71 = $edi;
      $72 = (($71) + 1|0);
      $edi = $72;
      HEAP8[$71>>0] = $70;
      $73 = $numOfBlock;
      $74 = (($73) + 1)<<24>>24;
      $numOfBlock = $74;
      $ah = 0;
     }
     $75 = $iteration;
     $76 = $edi;
     $77 = (($76) + 1|0);
     $edi = $77;
     HEAP8[$76>>0] = $75;
     $78 = $numOfBlock;
     $79 = (($78) + 1)<<24>>24;
     $numOfBlock = $79;
    }
   }
   $80 = $bl;
   $81 = (($80) + -1)<<24>>24;
   $bl = $81;
   $82 = $81&255;
   $83 = ($82|0)>(0);
   if (!($83)) {
    break;
   }
  }
  $84 = $ah;
  $85 = ($84<<24>>24)!=(0);
  if ($85) {
   $86 = $ah;
   $87 = $edi;
   $88 = (($87) + 1|0);
   $edi = $88;
   HEAP8[$87>>0] = $86;
   $89 = $numOfBlock;
   $90 = (($89) + 1)<<24>>24;
   $numOfBlock = $90;
   $ah = 0;
  }
  $91 = $numOfBlock;
  $92 = $ptr2;
  HEAP8[$92>>0] = $91;
  $93 = $bh;
  $94 = (($93) + -1)<<24>>24;
  $bh = $94;
  $95 = $94&255;
  $96 = ($95|0)>(0);
  if (!($96)) {
   break;
  }
 }
 $97 = $edi;
 $98 = $ptrSave;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 STACKTOP = sp;return ($101|0);
}
function _createGridMask() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = 0;
 while(1) {
  $0 = $b;
  $1 = ($0|0)<(9000);
  if (!($1)) {
   break;
  }
  $2 = $b;
  $3 = (219800 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  if ($5) {
   $6 = $b;
   $7 = (124944 + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $b;
    $11 = (124944 + ($10<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    _free($12);
   }
   $13 = $b;
   $14 = (228800 + ($13<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_malloc($15)|0);
   $17 = $b;
   $18 = (124944 + ($17<<2)|0);
   HEAP32[$18>>2] = $16;
   $19 = $b;
   $20 = (264800 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $b;
   $23 = (124944 + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   (_processGridMask($21,$24)|0);
  }
  $25 = $b;
  $26 = (($25) + 1)|0;
  $b = $26;
 }
 STACKTOP = sp;return;
}
function _getSpriteSize($offset,$width,$height,$spritePtr) {
 $offset = $offset|0;
 $width = $width|0;
 $height = $height|0;
 $spritePtr = $spritePtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $offset;
 $1 = $width;
 $2 = $height;
 $3 = $spritePtr;
 $4 = $3;
 $5 = $0;
 $6 = $5<<2;
 $7 = (($4) + ($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = (($9) + ($8)|0);
 $3 = $10;
 $11 = $3;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $1;
 HEAP32[$14>>2] = $13;
 $15 = $3;
 $16 = (($15) + 1|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function _loadGridBricks($gridSize) {
 $gridSize = $gridSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $bllDataPtr = 0, $bllSize = 0, $bllSizeX = 0, $bllSizeY = 0, $bllSizeZ = 0, $brickIdx = 0, $currentBitByte = 0;
 var $currentBitMask = 0, $currentBllEntryIdx = 0, $currentBllOffset = 0, $currentBllPtr = 0, $firstBrick = 0, $i = 0, $j = 0, $lastBrick = 0, $ptrToBllBits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gridSize;
 $firstBrick = 60000;
 $lastBrick = 0;
 $currentBllEntryIdx = 0;
 _memset((264800|0),0,36000)|0;
 _memset((228800|0),0,36000)|0;
 _memset((219800|0),0,9000)|0;
 $1 = HEAP32[300800>>2]|0;
 $2 = $0;
 $3 = (($2) - 32)|0;
 $4 = (($1) + ($3)|0);
 $ptrToBllBits = $4;
 $i = 1;
 while(1) {
  $5 = $i;
  $6 = ($5>>>0)<(256);
  if (!($6)) {
   break;
  }
  $7 = $ptrToBllBits;
  $8 = $i;
  $9 = (($8>>>0) / 8)&-1;
  $10 = (($7) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $currentBitByte = $11;
  $12 = $i;
  $13 = $12 & 7;
  $14 = (7 - ($13))|0;
  $15 = 1 << $14;
  $16 = $15&255;
  $currentBitMask = $16;
  $17 = $currentBitByte;
  $18 = $17&255;
  $19 = $currentBitMask;
  $20 = $19&255;
  $21 = $18 & $20;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = HEAP32[300808>>2]|0;
   $24 = $currentBllEntryIdx;
   $25 = (($23) + ($24)|0);
   $26 = HEAP32[$25>>2]|0;
   $currentBllOffset = $26;
   $27 = HEAP32[300808>>2]|0;
   $28 = $currentBllOffset;
   $29 = (($27) + ($28)|0);
   $currentBllPtr = $29;
   $30 = $currentBllPtr;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $bllSizeX = $32;
   $33 = $currentBllPtr;
   $34 = (($33) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $bllSizeY = $36;
   $37 = $currentBllPtr;
   $38 = (($37) + 2|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $bllSizeZ = $40;
   $41 = $bllSizeX;
   $42 = $bllSizeY;
   $43 = Math_imul($41, $42)|0;
   $44 = $bllSizeZ;
   $45 = Math_imul($43, $44)|0;
   $bllSize = $45;
   $46 = $currentBllPtr;
   $47 = (($46) + 5|0);
   $bllDataPtr = $47;
   $j = 0;
   while(1) {
    $48 = $j;
    $49 = $bllSize;
    $50 = ($48>>>0)<($49>>>0);
    if (!($50)) {
     break;
    }
    $51 = $bllDataPtr;
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 << 16 >> 16;
    $brickIdx = $53;
    $54 = $brickIdx;
    $55 = ($54|0)!=(0);
    if ($55) {
     $56 = $brickIdx;
     $57 = (($56) + -1)|0;
     $brickIdx = $57;
     $58 = $brickIdx;
     $59 = $firstBrick;
     $60 = ($58>>>0)<=($59>>>0);
     if ($60) {
      $61 = $brickIdx;
      $firstBrick = $61;
     }
     $62 = $brickIdx;
     $63 = $lastBrick;
     $64 = ($62>>>0)>($63>>>0);
     if ($64) {
      $65 = $brickIdx;
      $lastBrick = $65;
     }
     $66 = $brickIdx;
     $67 = (219800 + ($66)|0);
     HEAP8[$67>>0] = 1;
    }
    $68 = $bllDataPtr;
    $69 = (($68) + 4|0);
    $bllDataPtr = $69;
    $70 = $j;
    $71 = (($70) + 1)|0;
    $j = $71;
   }
  }
  $72 = $currentBllEntryIdx;
  $73 = (($72) + 4)|0;
  $currentBllEntryIdx = $73;
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 $76 = $firstBrick;
 $i = $76;
 while(1) {
  $77 = $i;
  $78 = $lastBrick;
  $79 = ($77>>>0)<=($78>>>0);
  if (!($79)) {
   break;
  }
  $80 = $i;
  $81 = (219800 + ($80)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = ($82<<24>>24)!=(0);
  if ($83) {
   $84 = $i;
   $85 = (264800 + ($84<<2)|0);
   $86 = HEAP32[362152>>2]|0;
   $87 = $i;
   $88 = (_hqrGetallocEntry($85,$86,$87)|0);
   $89 = $i;
   $90 = (228800 + ($89<<2)|0);
   HEAP32[$90>>2] = $88;
  }
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 STACKTOP = sp;return 1;
}
function _createGridColumn($gridEntry,$dest) {
 $gridEntry = $gridEntry|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blockByffer = 0, $blockCount = 0, $brickCount = 0, $flag = 0;
 var $gridBuffer = 0, $gridIdx = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gridEntry;
 $1 = $dest;
 $2 = $0;
 $3 = (($2) + 1|0);
 $0 = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $brickCount = $5;
 while(1) {
  $6 = $0;
  $7 = (($6) + 1|0);
  $0 = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $flag = $9;
  $10 = $flag;
  $11 = $10 & 63;
  $12 = (($11) + 1)|0;
  $blockCount = $12;
  $13 = $0;
  $gridBuffer = $13;
  $14 = $1;
  $blockByffer = $14;
  $15 = $flag;
  $16 = $15 & 192;
  $17 = ($16|0)!=(0);
  if ($17) {
   $25 = $flag;
   $26 = $25 & 64;
   $27 = ($26|0)!=(0);
   if ($27) {
    $i = 0;
    while(1) {
     $28 = $i;
     $29 = $blockCount;
     $30 = ($28|0)<($29|0);
     if (!($30)) {
      break;
     }
     $31 = $gridBuffer;
     $32 = (($31) + 2|0);
     $gridBuffer = $32;
     $33 = HEAP16[$31>>1]|0;
     $34 = $blockByffer;
     $35 = (($34) + 2|0);
     $blockByffer = $35;
     HEAP16[$34>>1] = $33;
     $36 = $i;
     $37 = (($36) + 1)|0;
     $i = $37;
    }
   } else {
    $38 = $gridBuffer;
    $39 = (($38) + 2|0);
    $gridBuffer = $39;
    $40 = HEAP16[$38>>1]|0;
    $41 = $40&65535;
    $gridIdx = $41;
    $i = 0;
    while(1) {
     $42 = $i;
     $43 = $blockCount;
     $44 = ($42|0)<($43|0);
     if (!($44)) {
      break;
     }
     $45 = $gridIdx;
     $46 = $45&65535;
     $47 = $blockByffer;
     $48 = (($47) + 2|0);
     $blockByffer = $48;
     HEAP16[$47>>1] = $46;
     $49 = $i;
     $50 = (($49) + 1)|0;
     $i = $50;
    }
   }
  } else {
   $i = 0;
   while(1) {
    $18 = $i;
    $19 = $blockCount;
    $20 = ($18|0)<($19|0);
    if (!($20)) {
     break;
    }
    $21 = $blockByffer;
    $22 = (($21) + 2|0);
    $blockByffer = $22;
    HEAP16[$21>>1] = 0;
    $23 = $i;
    $24 = (($23) + 1)|0;
    $i = $24;
   }
  }
  $51 = $gridBuffer;
  $0 = $51;
  $52 = $blockByffer;
  $1 = $52;
  $53 = $brickCount;
  $54 = (($53) + -1)|0;
  $brickCount = $54;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _createCellingGridColumn($gridEntry,$dest) {
 $gridEntry = $gridEntry|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blockByffer = 0, $blockCount = 0, $brickCount = 0, $flag = 0;
 var $gridBuffer = 0, $gridIdx = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gridEntry;
 $1 = $dest;
 $2 = $0;
 $3 = (($2) + 1|0);
 $0 = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $brickCount = $5;
 while(1) {
  $6 = $0;
  $7 = (($6) + 1|0);
  $0 = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $flag = $9;
  $10 = $flag;
  $11 = $10 & 63;
  $12 = (($11) + 1)|0;
  $blockCount = $12;
  $13 = $0;
  $gridBuffer = $13;
  $14 = $1;
  $blockByffer = $14;
  $15 = $flag;
  $16 = $15 & 192;
  $17 = ($16|0)!=(0);
  if ($17) {
   $25 = $flag;
   $26 = $25 & 64;
   $27 = ($26|0)!=(0);
   if ($27) {
    $i = 0;
    while(1) {
     $28 = $i;
     $29 = $blockCount;
     $30 = ($28|0)<($29|0);
     if (!($30)) {
      break;
     }
     $31 = $gridBuffer;
     $32 = (($31) + 2|0);
     $gridBuffer = $32;
     $33 = HEAP16[$31>>1]|0;
     $34 = $blockByffer;
     $35 = (($34) + 2|0);
     $blockByffer = $35;
     HEAP16[$34>>1] = $33;
     $36 = $i;
     $37 = (($36) + 1)|0;
     $i = $37;
    }
   } else {
    $38 = $gridBuffer;
    $39 = (($38) + 2|0);
    $gridBuffer = $39;
    $40 = HEAP16[$38>>1]|0;
    $41 = $40&65535;
    $gridIdx = $41;
    $i = 0;
    while(1) {
     $42 = $i;
     $43 = $blockCount;
     $44 = ($42|0)<($43|0);
     if (!($44)) {
      break;
     }
     $45 = $gridIdx;
     $46 = $45&65535;
     $47 = $blockByffer;
     $48 = (($47) + 2|0);
     $blockByffer = $48;
     HEAP16[$47>>1] = $46;
     $49 = $i;
     $50 = (($49) + 1)|0;
     $i = $50;
    }
   }
  } else {
   $i = 0;
   while(1) {
    $18 = $i;
    $19 = $blockCount;
    $20 = ($18|0)<($19|0);
    if (!($20)) {
     break;
    }
    $21 = $blockByffer;
    $22 = (($21) + 2|0);
    $blockByffer = $22;
    $23 = $i;
    $24 = (($23) + 1)|0;
    $i = $24;
   }
  }
  $51 = $gridBuffer;
  $0 = $51;
  $52 = $blockByffer;
  $1 = $52;
  $53 = $brickCount;
  $54 = (($53) + -1)|0;
  $brickCount = $54;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _createGridMap() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blockOffset = 0, $currOffset = 0, $gridIdx = 0, $gridOffset = 0, $x = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $currOffset = 0;
 $z = 0;
 while(1) {
  $0 = $z;
  $1 = ($0|0)<(64);
  if (!($1)) {
   break;
  }
  $2 = $currOffset;
  $blockOffset = $2;
  $3 = $z;
  $4 = $3 << 6;
  $gridIdx = $4;
  $x = 0;
  while(1) {
   $5 = $x;
   $6 = ($5|0)<(64);
   if (!($6)) {
    break;
   }
   $7 = HEAP32[300800>>2]|0;
   $8 = $x;
   $9 = $gridIdx;
   $10 = (($8) + ($9))|0;
   $11 = $10<<1;
   $12 = (($7) + ($11)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13&65535;
   $gridOffset = $14;
   $15 = HEAP32[300800>>2]|0;
   $16 = $gridOffset;
   $17 = (($15) + ($16)|0);
   $18 = HEAP32[39448>>2]|0;
   $19 = $blockOffset;
   $20 = (($18) + ($19)|0);
   _createGridColumn($17,$20);
   $21 = $blockOffset;
   $22 = (($21) + 50)|0;
   $blockOffset = $22;
   $23 = $x;
   $24 = (($23) + 1)|0;
   $x = $24;
  }
  $25 = $currOffset;
  $26 = (($25) + 3200)|0;
  $currOffset = $26;
  $27 = $z;
  $28 = (($27) + 1)|0;
  $z = $28;
 }
 STACKTOP = sp;return;
}
function _createCellingGridMap($gridPtr) {
 $gridPtr = $gridPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blockOffset = 0, $currGridOffset = 0, $currOffset = 0, $gridOffset = 0, $tempGridPtr = 0, $x = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gridPtr;
 $currGridOffset = 0;
 $currOffset = 0;
 $z = 0;
 while(1) {
  $1 = $z;
  $2 = ($1|0)<(64);
  if (!($2)) {
   break;
  }
  $3 = $currOffset;
  $blockOffset = $3;
  $4 = $0;
  $5 = $currGridOffset;
  $6 = (($4) + ($5)|0);
  $tempGridPtr = $6;
  $x = 0;
  while(1) {
   $7 = $x;
   $8 = ($7|0)<(64);
   if (!($8)) {
    break;
   }
   $9 = $tempGridPtr;
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $gridOffset = $11;
   $12 = $tempGridPtr;
   $13 = (($12) + 2|0);
   $tempGridPtr = $13;
   $14 = $0;
   $15 = $gridOffset;
   $16 = (($14) + ($15)|0);
   $17 = HEAP32[39448>>2]|0;
   $18 = $blockOffset;
   $19 = (($17) + ($18)|0);
   _createCellingGridColumn($16,$19);
   $20 = $blockOffset;
   $21 = (($20) + 50)|0;
   $blockOffset = $21;
   $22 = $x;
   $23 = (($22) + 1)|0;
   $x = $23;
  }
  $24 = $currGridOffset;
  $25 = (($24) + 128)|0;
  $currGridOffset = $25;
  $26 = $currOffset;
  $27 = (($26) + 3200)|0;
  $currOffset = $27;
  $28 = $z;
  $29 = (($28) + 1)|0;
  $z = $29;
 }
 STACKTOP = sp;return;
}
function _initGrid($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gridSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = HEAP32[362104>>2]|0;
 $2 = $0;
 $3 = (_hqrGetallocEntry(300800,$1,$2)|0);
 $gridSize = $3;
 $4 = HEAP32[362128>>2]|0;
 $5 = $0;
 (_hqrGetallocEntry(300808,$4,$5)|0);
 $6 = $gridSize;
 (_loadGridBricks($6)|0);
 _createGridMask();
 $7 = HEAP32[300808>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 >>> 2;
 HEAP32[300816>>2] = $9;
 _createGridMap();
 STACKTOP = sp;return 1;
}
function _initCellingGrid($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $gridPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gridPtr = sp;
 $0 = $index;
 $1 = HEAP32[362104>>2]|0;
 $2 = $0;
 $3 = (($2) + 120)|0;
 (_hqrGetallocEntry($gridPtr,$1,$3)|0);
 $4 = HEAP32[$gridPtr>>2]|0;
 _createCellingGridMap($4);
 $5 = HEAP32[$gridPtr>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  HEAP16[47424>>1] = 1;
  STACKTOP = sp;return 0;
 }
 $7 = HEAP32[$gridPtr>>2]|0;
 _free($7);
 HEAP16[47424>>1] = 1;
 STACKTOP = sp;return 0;
}
function _drawBrick($index,$posX,$posY) {
 $index = $index|0;
 $posX = $posX|0;
 $posY = $posY|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $posX;
 $2 = $posY;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $0;
 $7 = (264800 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 _drawBrickSprite($3,$4,$5,$8,0);
 STACKTOP = sp;return;
}
function _drawBrickSprite($index,$posX,$posY,$ptr,$isSprite) {
 $index = $index|0;
 $posX = $posX|0;
 $posY = $posY|0;
 $ptr = $ptr|0;
 $isSprite = $isSprite|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bottom = 0, $c1 = 0, $c2 = 0, $i = 0, $iteration = 0, $left = 0, $offset = 0, $outPtr = 0, $right = 0, $temp = 0, $top = 0;
 var $vc3 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $posX;
 $2 = $posY;
 $3 = $ptr;
 $4 = $isSprite;
 $5 = $4;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = $3;
  $8 = $3;
  $9 = $0;
  $10 = $9<<2;
  $11 = (($8) + ($10)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($7) + ($12)|0);
  $3 = $13;
 }
 $14 = $1;
 $15 = $3;
 $16 = (($15) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (($14) + ($18))|0;
 $left = $19;
 $20 = $2;
 $21 = $3;
 $22 = (($21) + 3|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($20) + ($24))|0;
 $top = $25;
 $26 = $3;
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $left;
 $30 = (($28) + ($29))|0;
 $31 = (($30) - 1)|0;
 $right = $31;
 $32 = $3;
 $33 = (($32) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $top;
 $37 = (($35) + ($36))|0;
 $38 = (($37) - 1)|0;
 $bottom = $38;
 $39 = $3;
 $40 = (($39) + 4|0);
 $3 = $40;
 $41 = $left;
 $x = $41;
 $42 = $top;
 $y = $42;
 $43 = $right;
 $44 = (($43) + 1)|0;
 $right = $44;
 $45 = $bottom;
 $46 = (($45) + 1)|0;
 $bottom = $46;
 $47 = HEAP32[25952>>2]|0;
 $48 = $top;
 $49 = (25968 + ($48<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($47) + ($50)|0);
 $52 = $left;
 $53 = (($51) + ($52)|0);
 $outPtr = $53;
 $54 = $right;
 $55 = $left;
 $56 = (($54) - ($55))|0;
 $57 = (($56) - 640)|0;
 $58 = (0 - ($57))|0;
 $offset = $58;
 $c1 = 0;
 while(1) {
  $59 = $c1;
  $60 = $bottom;
  $61 = $top;
  $62 = (($60) - ($61))|0;
  $63 = ($59|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = $3;
  $65 = (($64) + 1|0);
  $3 = $65;
  $66 = HEAP8[$64>>0]|0;
  $67 = $66&255;
  $vc3 = $67;
  $c2 = 0;
  while(1) {
   $68 = $c2;
   $69 = $vc3;
   $70 = ($68|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = $3;
   $72 = (($71) + 1|0);
   $3 = $72;
   $73 = HEAP8[$71>>0]|0;
   $74 = $73&255;
   $temp = $74;
   $75 = $temp;
   $76 = $75 & 63;
   $iteration = $76;
   $77 = $temp;
   $78 = $77 & 192;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $iteration;
    $81 = (($80) + 1)|0;
    $iteration = $81;
    $82 = $temp;
    $83 = $82 & 64;
    $84 = ($83|0)!=(0);
    if ($84) {
     $i = 0;
     while(1) {
      $119 = $i;
      $120 = $iteration;
      $121 = ($119|0)<($120|0);
      if (!($121)) {
       break;
      }
      $122 = $x;
      $123 = HEAP32[47664>>2]|0;
      $124 = ($122|0)>=($123|0);
      if ($124) {
       $125 = $x;
       $126 = HEAP32[47680>>2]|0;
       $127 = ($125|0)<($126|0);
       if ($127) {
        $128 = $y;
        $129 = HEAP32[47648>>2]|0;
        $130 = ($128|0)>=($129|0);
        if ($130) {
         $131 = $y;
         $132 = HEAP32[47696>>2]|0;
         $133 = ($131|0)<($132|0);
         if ($133) {
          $134 = $3;
          $135 = HEAP8[$134>>0]|0;
          $136 = $y;
          $137 = ($136*640)|0;
          $138 = $137;
          $139 = $x;
          $140 = (($138) + ($139))|0;
          $141 = HEAP32[25952>>2]|0;
          $142 = (($141) + ($140)|0);
          HEAP8[$142>>0] = $135;
         }
        }
       }
      }
      $143 = $x;
      $144 = (($143) + 1)|0;
      $x = $144;
      $145 = $3;
      $146 = (($145) + 1|0);
      $3 = $146;
      $147 = $outPtr;
      $148 = (($147) + 1|0);
      $outPtr = $148;
      $149 = $i;
      $150 = (($149) + 1)|0;
      $i = $150;
     }
    } else {
     $85 = $3;
     $86 = (($85) + 1|0);
     $3 = $86;
     $87 = HEAP8[$85>>0]|0;
     $88 = $87&255;
     $temp = $88;
     $i = 0;
     while(1) {
      $89 = $i;
      $90 = $iteration;
      $91 = ($89|0)<($90|0);
      if (!($91)) {
       break;
      }
      $92 = $x;
      $93 = HEAP32[47664>>2]|0;
      $94 = ($92|0)>=($93|0);
      if ($94) {
       $95 = $x;
       $96 = HEAP32[47680>>2]|0;
       $97 = ($95|0)<($96|0);
       if ($97) {
        $98 = $y;
        $99 = HEAP32[47648>>2]|0;
        $100 = ($98|0)>=($99|0);
        if ($100) {
         $101 = $y;
         $102 = HEAP32[47696>>2]|0;
         $103 = ($101|0)<($102|0);
         if ($103) {
          $104 = $temp;
          $105 = $104&255;
          $106 = $y;
          $107 = ($106*640)|0;
          $108 = $107;
          $109 = $x;
          $110 = (($108) + ($109))|0;
          $111 = HEAP32[25952>>2]|0;
          $112 = (($111) + ($110)|0);
          HEAP8[$112>>0] = $105;
         }
        }
       }
      }
      $113 = $x;
      $114 = (($113) + 1)|0;
      $x = $114;
      $115 = $outPtr;
      $116 = (($115) + 1|0);
      $outPtr = $116;
      $117 = $i;
      $118 = (($117) + 1)|0;
      $i = $118;
     }
    }
   } else {
    $151 = $iteration;
    $152 = (($151) + 1)|0;
    $153 = $outPtr;
    $154 = (($153) + ($152)|0);
    $outPtr = $154;
    $155 = $iteration;
    $156 = (($155) + 1)|0;
    $157 = $x;
    $158 = (($157) + ($156))|0;
    $x = $158;
   }
   $159 = $c2;
   $160 = (($159) + 1)|0;
   $c2 = $160;
  }
  $161 = $offset;
  $162 = $outPtr;
  $163 = (($162) + ($161)|0);
  $outPtr = $163;
  $164 = $left;
  $x = $164;
  $165 = $y;
  $166 = (($165) + 1)|0;
  $y = $166;
  $167 = $c1;
  $168 = (($167) + 1)|0;
  $c1 = $168;
 }
 STACKTOP = sp;return;
}
function _drawSprite($index,$posX,$posY,$ptr) {
 $index = $index|0;
 $posX = $posX|0;
 $posY = $posY|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $posX;
 $2 = $posY;
 $3 = $ptr;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _drawBrickSprite($4,$5,$6,$7,1);
 STACKTOP = sp;return;
}
function _getBlockLibrary($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = HEAP32[300808>>2]|0;
 $2 = $0;
 $3 = $2<<2;
 $4 = (($1) + ($3)|0);
 $5 = HEAP32[$4>>2]|0;
 $offset = $5;
 $6 = HEAP32[300808>>2]|0;
 $7 = $offset;
 $8 = (($6) + ($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _getBrickPos($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $z;
 $3 = $0;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = ($5*24)|0;
 $7 = (($6) + 288)|0;
 HEAP32[300824>>2] = $7;
 $8 = $0;
 $9 = $2;
 $10 = (($8) + ($9))|0;
 $11 = ($10*12)|0;
 $12 = $1;
 $13 = ($12*15)|0;
 $14 = (($11) - ($13))|0;
 $15 = (($14) + 215)|0;
 HEAP32[300832>>2] = $15;
 STACKTOP = sp;return;
}
function _drawColumnGrid($blockIdx,$brickBlockIdx,$x,$y,$z) {
 $blockIdx = $blockIdx|0;
 $brickBlockIdx = $brickBlockIdx|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $blockPtr = 0, $brickBuffIdx = 0, $brickIdx = 0, $brickShape = 0, $brickSound = 0, $currBrickEntry = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $blockIdx;
 $1 = $brickBlockIdx;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $0;
 $6 = (_getBlockLibrary($5)|0);
 $7 = (($6) + 3|0);
 $8 = $1;
 $9 = $8<<2;
 $10 = (($7) + ($9)|0);
 $blockPtr = $10;
 $11 = $blockPtr;
 $12 = HEAP8[$11>>0]|0;
 $brickShape = $12;
 $13 = $blockPtr;
 $14 = (($13) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $brickSound = $15;
 $16 = $blockPtr;
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $brickIdx = $18;
 $19 = $brickIdx;
 $20 = ($19<<16>>16)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = HEAP32[39400>>2]|0;
 $23 = (($21) - ($22))|0;
 $24 = $3;
 $25 = HEAP32[39408>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $4;
 $28 = HEAP32[39416>>2]|0;
 $29 = (($27) - ($28))|0;
 _getBrickPos($23,$26,$29);
 $30 = HEAP32[300824>>2]|0;
 $31 = ($30|0)<(-24);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[300824>>2]|0;
 $33 = ($32|0)>=(640);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = HEAP32[300832>>2]|0;
 $35 = ($34|0)<(-38);
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = HEAP32[300832>>2]|0;
 $37 = ($36|0)>=(480);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = $brickIdx;
 $39 = $38&65535;
 $40 = (($39) - 1)|0;
 $41 = HEAP32[300824>>2]|0;
 $42 = HEAP32[300832>>2]|0;
 _drawBrick($40,$41,$42);
 $43 = HEAP32[300824>>2]|0;
 $44 = (($43) + 24)|0;
 $45 = (($44|0) / 24)&-1;
 $brickBuffIdx = $45;
 $46 = $brickBuffIdx;
 $47 = (160944 + ($46<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 $50 = ($49|0)>=(150);
 if ($50) {
  (_printf((300840|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 } else {
  $51 = $brickBuffIdx;
  $52 = (160944 + ($51<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = $brickBuffIdx;
  $56 = (161000 + (($55*2100)|0)|0);
  $57 = (($56) + (($54*14)|0)|0);
  $currBrickEntry = $57;
  $58 = $2;
  $59 = $58&65535;
  $60 = $currBrickEntry;
  HEAP16[$60>>1] = $59;
  $61 = $3;
  $62 = $61&65535;
  $63 = $currBrickEntry;
  $64 = (($63) + 2|0);
  HEAP16[$64>>1] = $62;
  $65 = $4;
  $66 = $65&65535;
  $67 = $currBrickEntry;
  $68 = (($67) + 4|0);
  HEAP16[$68>>1] = $66;
  $69 = HEAP32[300824>>2]|0;
  $70 = $69&65535;
  $71 = $currBrickEntry;
  $72 = (($71) + 6|0);
  HEAP16[$72>>1] = $70;
  $73 = HEAP32[300832>>2]|0;
  $74 = $73&65535;
  $75 = $currBrickEntry;
  $76 = (($75) + 8|0);
  HEAP16[$76>>1] = $74;
  $77 = $brickIdx;
  $78 = $77&65535;
  $79 = (($78) - 1)|0;
  $80 = $79&65535;
  $81 = $currBrickEntry;
  $82 = (($81) + 10|0);
  HEAP16[$82>>1] = $80;
  $83 = $brickShape;
  $84 = $currBrickEntry;
  $85 = (($84) + 12|0);
  HEAP8[$85>>0] = $83;
  $86 = $brickSound;
  $87 = $currBrickEntry;
  $88 = (($87) + 13|0);
  HEAP8[$88>>0] = $86;
  $89 = $brickBuffIdx;
  $90 = (160944 + ($89<<1)|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = (($91) + 1)<<16>>16;
  HEAP16[$90>>1] = $92;
  STACKTOP = sp;return;
 }
}
function _redrawGrid() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $blockIdx = 0, $i = 0, $map = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[39448>>2]|0;
 $map = $0;
 $1 = HEAP32[39400>>2]|0;
 $2 = $1 << 9;
 HEAP32[39424>>2] = $2;
 $3 = HEAP32[39408>>2]|0;
 $4 = $3 << 8;
 HEAP32[39432>>2] = $4;
 $5 = HEAP32[39416>>2]|0;
 $6 = $5 << 9;
 HEAP32[39440>>2] = $6;
 $7 = HEAP32[39424>>2]|0;
 $8 = (0 - ($7))|0;
 $9 = HEAP32[39432>>2]|0;
 $10 = (0 - ($9))|0;
 $11 = HEAP32[39440>>2]|0;
 $12 = (0 - ($11))|0;
 (_projectPositionOnScreen($8,$10,$12)|0);
 $13 = HEAP16[38904>>1]|0;
 HEAP16[38888>>1] = $13;
 $14 = HEAP16[38912>>1]|0;
 HEAP16[38896>>1] = $14;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(28);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = (160944 + ($17<<1)|0);
  HEAP16[$18>>1] = 0;
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 $21 = HEAP16[37904>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = ($22|0)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $z = 0;
 while(1) {
  $24 = $z;
  $25 = ($24|0)<(64);
  if (!($25)) {
   break;
  }
  $x = 0;
  while(1) {
   $26 = $x;
   $27 = ($26|0)<(64);
   if (!($27)) {
    break;
   }
   $y = 0;
   while(1) {
    $28 = $y;
    $29 = ($28|0)<(25);
    if (!($29)) {
     break;
    }
    $30 = $y;
    $31 = $x;
    $32 = $z;
    $33 = $map;
    $34 = (($33) + (($32*3200)|0)|0);
    $35 = (($34) + (($31*50)|0)|0);
    $36 = (($35) + ($30<<1)|0);
    $37 = HEAP8[$36>>0]|0;
    $blockIdx = $37;
    $38 = $blockIdx;
    $39 = ($38<<24>>24)!=(0);
    if ($39) {
     $40 = $blockIdx;
     $41 = $40&255;
     $42 = (($41) - 1)|0;
     $43 = $y;
     $44 = $x;
     $45 = $z;
     $46 = $map;
     $47 = (($46) + (($45*3200)|0)|0);
     $48 = (($47) + (($44*50)|0)|0);
     $49 = (($48) + ($43<<1)|0);
     $50 = (($49) + 1|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = $x;
     $54 = $y;
     $55 = $z;
     _drawColumnGrid($42,$52,$53,$54,$55);
    }
    $56 = $y;
    $57 = (($56) + 1)|0;
    $y = $57;
   }
   $58 = $x;
   $59 = (($58) + 1)|0;
   $x = $59;
  }
  $60 = $z;
  $61 = (($60) + 1)|0;
  $z = $61;
 }
 STACKTOP = sp;return;
}
function _getBrickShape($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $blockBufferPtr = 0, $blockIdx = 0, $blockPtr = 0, $tmpBrickIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = HEAP32[39448>>2]|0;
 $blockBufferPtr = $4;
 $5 = $1;
 $6 = (($5) + 256)|0;
 $7 = $6 >> 9;
 HEAP32[47368>>2] = $7;
 $8 = $2;
 $9 = $8 >> 8;
 HEAP32[47328>>2] = $9;
 $10 = $3;
 $11 = (($10) + 256)|0;
 $12 = $11 >> 9;
 HEAP32[47376>>2] = $12;
 $13 = HEAP32[47368>>2]|0;
 $14 = ($13|0)<(0);
 if (!($14)) {
  $15 = HEAP32[47368>>2]|0;
  $16 = ($15|0)>=(64);
  if (!($16)) {
   $17 = HEAP32[47328>>2]|0;
   $18 = ($17|0)<=(-1);
   if ($18) {
    $0 = 1;
    $71 = $0;
    STACKTOP = sp;return ($71|0);
   }
   $19 = HEAP32[47328>>2]|0;
   $20 = ($19|0)<(0);
   if (!($20)) {
    $21 = HEAP32[47328>>2]|0;
    $22 = ($21|0)>(24);
    if (!($22)) {
     $23 = HEAP32[47376>>2]|0;
     $24 = ($23|0)<(0);
     if (!($24)) {
      $25 = HEAP32[47376>>2]|0;
      $26 = ($25|0)>=(64);
      if (!($26)) {
       $27 = HEAP32[47368>>2]|0;
       $28 = ($27*50)|0;
       $29 = $blockBufferPtr;
       $30 = (($29) + ($28)|0);
       $blockBufferPtr = $30;
       $31 = HEAP32[47328>>2]|0;
       $32 = $31<<1;
       $33 = $blockBufferPtr;
       $34 = (($33) + ($32)|0);
       $blockBufferPtr = $34;
       $35 = HEAP32[47376>>2]|0;
       $36 = $35 << 7;
       $37 = ($36*25)|0;
       $38 = $blockBufferPtr;
       $39 = (($38) + ($37)|0);
       $blockBufferPtr = $39;
       $40 = $blockBufferPtr;
       $41 = HEAP8[$40>>0]|0;
       $blockIdx = $41;
       $42 = $blockIdx;
       $43 = ($42<<24>>24)!=(0);
       if ($43) {
        $44 = HEAP32[300808>>2]|0;
        $blockPtr = $44;
        $45 = $blockPtr;
        $46 = $blockIdx;
        $47 = $46&255;
        $48 = $47<<2;
        $49 = (($45) + ($48)|0);
        $50 = (($49) + -4|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $blockPtr;
        $53 = (($52) + ($51)|0);
        $blockPtr = $53;
        $54 = $blockPtr;
        $55 = (($54) + 3|0);
        $blockPtr = $55;
        $56 = $blockBufferPtr;
        $57 = (($56) + 1|0);
        $58 = HEAP8[$57>>0]|0;
        $tmpBrickIdx = $58;
        $59 = $blockPtr;
        $60 = $tmpBrickIdx;
        $61 = $60&255;
        $62 = $61<<2;
        $63 = (($59) + ($62)|0);
        $blockPtr = $63;
        $64 = $blockPtr;
        $65 = HEAP8[$64>>0]|0;
        $66 = $65&255;
        $0 = $66;
        $71 = $0;
        STACKTOP = sp;return ($71|0);
       } else {
        $67 = $blockBufferPtr;
        $68 = (($67) + 1|0);
        $69 = HEAP8[$68>>0]|0;
        $70 = $69&255;
        $0 = $70;
        $71 = $0;
        STACKTOP = sp;return ($71|0);
       }
      }
     }
    }
   }
   $0 = 0;
   $71 = $0;
   STACKTOP = sp;return ($71|0);
  }
 }
 $0 = 0;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function _getBrickShapeFull($x,$y,$z,$y2) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $y2 = $y2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blockBufferPtr = 0, $blockIdx = 0, $blockPtr = 0, $brickShape = 0, $currY = 0;
 var $i = 0, $newY = 0, $tmpBrickIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $y2;
 $5 = HEAP32[39448>>2]|0;
 $blockBufferPtr = $5;
 $6 = $1;
 $7 = (($6) + 256)|0;
 $8 = $7 >> 9;
 HEAP32[47368>>2] = $8;
 $9 = $2;
 $10 = $9 >> 8;
 HEAP32[47328>>2] = $10;
 $11 = $3;
 $12 = (($11) + 256)|0;
 $13 = $12 >> 9;
 HEAP32[47376>>2] = $13;
 $14 = HEAP32[47368>>2]|0;
 $15 = ($14|0)<(0);
 if (!($15)) {
  $16 = HEAP32[47368>>2]|0;
  $17 = ($16|0)>=(64);
  if (!($17)) {
   $18 = HEAP32[47328>>2]|0;
   $19 = ($18|0)<=(-1);
   if ($19) {
    $0 = 1;
    $114 = $0;
    STACKTOP = sp;return ($114|0);
   }
   $20 = HEAP32[47328>>2]|0;
   $21 = ($20|0)<(0);
   if (!($21)) {
    $22 = HEAP32[47328>>2]|0;
    $23 = ($22|0)>(24);
    if (!($23)) {
     $24 = HEAP32[47376>>2]|0;
     $25 = ($24|0)<(0);
     if (!($25)) {
      $26 = HEAP32[47376>>2]|0;
      $27 = ($26|0)>=(64);
      if (!($27)) {
       $28 = HEAP32[47368>>2]|0;
       $29 = ($28*50)|0;
       $30 = $blockBufferPtr;
       $31 = (($30) + ($29)|0);
       $blockBufferPtr = $31;
       $32 = HEAP32[47328>>2]|0;
       $33 = $32<<1;
       $34 = $blockBufferPtr;
       $35 = (($34) + ($33)|0);
       $blockBufferPtr = $35;
       $36 = HEAP32[47376>>2]|0;
       $37 = $36 << 7;
       $38 = ($37*25)|0;
       $39 = $blockBufferPtr;
       $40 = (($39) + ($38)|0);
       $blockBufferPtr = $40;
       $41 = $blockBufferPtr;
       $42 = HEAP8[$41>>0]|0;
       $blockIdx = $42;
       $43 = $blockIdx;
       $44 = ($43<<24>>24)!=(0);
       if ($44) {
        $45 = HEAP32[300808>>2]|0;
        $blockPtr = $45;
        $46 = $blockPtr;
        $47 = $blockIdx;
        $48 = $47&255;
        $49 = $48<<2;
        $50 = (($46) + ($49)|0);
        $51 = (($50) + -4|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = $blockPtr;
        $54 = (($53) + ($52)|0);
        $blockPtr = $54;
        $55 = $blockPtr;
        $56 = (($55) + 3|0);
        $blockPtr = $56;
        $57 = $blockBufferPtr;
        $58 = (($57) + 1|0);
        $59 = HEAP8[$58>>0]|0;
        $tmpBrickIdx = $59;
        $60 = $blockPtr;
        $61 = $tmpBrickIdx;
        $62 = $61&255;
        $63 = $62<<2;
        $64 = (($60) + ($63)|0);
        $blockPtr = $64;
        $65 = $blockPtr;
        $66 = HEAP8[$65>>0]|0;
        $brickShape = $66;
        $67 = $4;
        $68 = (($67) + 255)|0;
        $69 = $68 >> 8;
        $newY = $69;
        $70 = HEAP32[47328>>2]|0;
        $currY = $70;
        $i = 0;
        while(1) {
         $71 = $i;
         $72 = $newY;
         $73 = ($71|0)<($72|0);
         if (!($73)) {
          label = 20;
          break;
         }
         $74 = $currY;
         $75 = ($74|0)>(24);
         if ($75) {
          label = 15;
          break;
         }
         $78 = $blockBufferPtr;
         $79 = (($78) + 2|0);
         $blockBufferPtr = $79;
         $80 = $currY;
         $81 = (($80) + 1)|0;
         $currY = $81;
         $82 = $blockBufferPtr;
         $83 = HEAP16[$82>>1]|0;
         $84 = $83 << 16 >> 16;
         $85 = ($84|0)!=(0);
         if ($85) {
          label = 17;
          break;
         }
         $86 = $i;
         $87 = (($86) + 1)|0;
         $i = $87;
        }
        if ((label|0) == 15) {
         $76 = $brickShape;
         $77 = $76&255;
         $0 = $77;
         $114 = $0;
         STACKTOP = sp;return ($114|0);
        }
        else if ((label|0) == 17) {
         $0 = 1;
         $114 = $0;
         STACKTOP = sp;return ($114|0);
        }
        else if ((label|0) == 20) {
         $88 = $brickShape;
         $89 = $88&255;
         $0 = $89;
         $114 = $0;
         STACKTOP = sp;return ($114|0);
        }
       }
       $90 = $blockBufferPtr;
       $91 = (($90) + 1|0);
       $92 = HEAP8[$91>>0]|0;
       $brickShape = $92;
       $93 = $4;
       $94 = (($93) + 255)|0;
       $95 = $94 >> 8;
       $newY = $95;
       $96 = HEAP32[47328>>2]|0;
       $currY = $96;
       $i = 0;
       while(1) {
        $97 = $i;
        $98 = $newY;
        $99 = ($97|0)<($98|0);
        if (!($99)) {
         label = 29;
         break;
        }
        $100 = $currY;
        $101 = ($100|0)>(24);
        if ($101) {
         label = 24;
         break;
        }
        $104 = $blockBufferPtr;
        $105 = (($104) + 2|0);
        $blockBufferPtr = $105;
        $106 = $currY;
        $107 = (($106) + 1)|0;
        $currY = $107;
        $108 = $blockBufferPtr;
        $109 = HEAP16[$108>>1]|0;
        $110 = $109 << 16 >> 16;
        $111 = ($110|0)!=(0);
        if ($111) {
         label = 26;
         break;
        }
        $112 = $i;
        $113 = (($112) + 1)|0;
        $i = $113;
       }
       if ((label|0) == 24) {
        $102 = $brickShape;
        $103 = $102&255;
        $0 = $103;
        $114 = $0;
        STACKTOP = sp;return ($114|0);
       }
       else if ((label|0) == 26) {
        $0 = 1;
        $114 = $0;
        STACKTOP = sp;return ($114|0);
       }
       else if ((label|0) == 29) {
        $0 = 0;
        $114 = $0;
        STACKTOP = sp;return ($114|0);
       }
      }
     }
    }
   }
   $0 = 0;
   $114 = $0;
   STACKTOP = sp;return ($114|0);
  }
 }
 $0 = 0;
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function _getBrickSoundType($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $blockBufferPtr = 0, $blockIdx = 0, $blockPtr = 0, $tmpBrickIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = HEAP32[39448>>2]|0;
 $blockBufferPtr = $4;
 $5 = $1;
 $6 = (($5) + 256)|0;
 $7 = $6 >> 9;
 HEAP32[47368>>2] = $7;
 $8 = $2;
 $9 = $8 >> 8;
 HEAP32[47328>>2] = $9;
 $10 = $3;
 $11 = (($10) + 256)|0;
 $12 = $11 >> 9;
 HEAP32[47376>>2] = $12;
 $13 = HEAP32[47368>>2]|0;
 $14 = ($13|0)<(0);
 if (!($14)) {
  $15 = HEAP32[47368>>2]|0;
  $16 = ($15|0)>=(64);
  if (!($16)) {
   $17 = HEAP32[47328>>2]|0;
   $18 = ($17|0)<=(-1);
   if ($18) {
    $0 = 1;
    $69 = $0;
    STACKTOP = sp;return ($69|0);
   }
   $19 = HEAP32[47328>>2]|0;
   $20 = ($19|0)<(0);
   if (!($20)) {
    $21 = HEAP32[47328>>2]|0;
    $22 = ($21|0)>(24);
    if (!($22)) {
     $23 = HEAP32[47376>>2]|0;
     $24 = ($23|0)<(0);
     if (!($24)) {
      $25 = HEAP32[47376>>2]|0;
      $26 = ($25|0)>=(64);
      if (!($26)) {
       $27 = HEAP32[47368>>2]|0;
       $28 = ($27*50)|0;
       $29 = $blockBufferPtr;
       $30 = (($29) + ($28)|0);
       $blockBufferPtr = $30;
       $31 = HEAP32[47328>>2]|0;
       $32 = $31<<1;
       $33 = $blockBufferPtr;
       $34 = (($33) + ($32)|0);
       $blockBufferPtr = $34;
       $35 = HEAP32[47376>>2]|0;
       $36 = $35 << 7;
       $37 = ($36*25)|0;
       $38 = $blockBufferPtr;
       $39 = (($38) + ($37)|0);
       $blockBufferPtr = $39;
       $40 = $blockBufferPtr;
       $41 = HEAP8[$40>>0]|0;
       $blockIdx = $41;
       $42 = $blockIdx;
       $43 = ($42<<24>>24)!=(0);
       if ($43) {
        $44 = HEAP32[300808>>2]|0;
        $blockPtr = $44;
        $45 = $blockPtr;
        $46 = $blockIdx;
        $47 = $46&255;
        $48 = $47<<2;
        $49 = (($45) + ($48)|0);
        $50 = (($49) + -4|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $blockPtr;
        $53 = (($52) + ($51)|0);
        $blockPtr = $53;
        $54 = $blockPtr;
        $55 = (($54) + 3|0);
        $blockPtr = $55;
        $56 = $blockBufferPtr;
        $57 = (($56) + 1|0);
        $58 = HEAP8[$57>>0]|0;
        $tmpBrickIdx = $58;
        $59 = $blockPtr;
        $60 = $tmpBrickIdx;
        $61 = $60&255;
        $62 = $61<<2;
        $63 = (($59) + ($62)|0);
        $blockPtr = $63;
        $64 = $blockPtr;
        $65 = (($64) + 1|0);
        $blockPtr = $65;
        $66 = $blockPtr;
        $67 = HEAP16[$66>>1]|0;
        $68 = $67 << 16 >> 16;
        $0 = $68;
        $69 = $0;
        STACKTOP = sp;return ($69|0);
       } else {
        $0 = 240;
        $69 = $0;
        STACKTOP = sp;return ($69|0);
       }
      }
     }
    }
   }
   $0 = 0;
   $69 = $0;
   STACKTOP = sp;return ($69|0);
  }
 }
 $0 = 0;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _setHolomapPosition($location) {
 $location = $location|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $location;
 $1 = $0;
 $2 = (38376 + ($1)|0);
 HEAP8[$2>>0] = -127;
 STACKTOP = sp;return;
}
function _clearHolomapPosition($location) {
 $location = $location|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $location;
 $1 = $0;
 $2 = (38376 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 126;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = $0;
 $8 = (38376 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 64;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 STACKTOP = sp;return;
}
function _hqrDecompressEntry($dst,$src,$decompsize,$mode) {
 $dst = $dst|0;
 $src = $src|0;
 $decompsize = $decompsize|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $d = 0, $i = 0, $lenght = 0;
 var $offset = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $src;
 $2 = $decompsize;
 $3 = $mode;
 L1: while(1) {
  $4 = $1;
  $5 = (($4) + 1|0);
  $1 = $5;
  $6 = HEAP8[$4>>0]|0;
  $b = $6;
  $d = 0;
  while(1) {
   $7 = $d;
   $8 = ($7|0)<(8);
   if (!($8)) {
    break;
   }
   $9 = $b;
   $10 = $9&255;
   $11 = $d;
   $12 = 1 << $11;
   $13 = $10 & $12;
   $14 = ($13|0)!=(0);
   if ($14) {
    $lenght = 1;
    $42 = $1;
    $43 = (($42) + 1|0);
    $1 = $43;
    $44 = HEAP8[$42>>0]|0;
    $45 = $0;
    $46 = (($45) + 1|0);
    $0 = $46;
    HEAP8[$45>>0] = $44;
   } else {
    $15 = $1;
    $16 = HEAP16[$15>>1]|0;
    $offset = $16;
    $17 = $1;
    $18 = (($17) + 2|0);
    $1 = $18;
    $19 = $offset;
    $20 = $19&65535;
    $21 = $20 & 15;
    $22 = $3;
    $23 = (($22) + 1)|0;
    $24 = (($21) + ($23))|0;
    $lenght = $24;
    $25 = $0;
    $26 = $offset;
    $27 = $26&65535;
    $28 = $27 >> 4;
    $29 = (0 - ($28))|0;
    $30 = (($25) + ($29)|0);
    $31 = (($30) + -1|0);
    $ptr = $31;
    $i = 0;
    while(1) {
     $32 = $i;
     $33 = $lenght;
     $34 = ($32|0)<($33|0);
     if (!($34)) {
      break;
     }
     $35 = $ptr;
     $36 = (($35) + 1|0);
     $ptr = $36;
     $37 = HEAP8[$35>>0]|0;
     $38 = $0;
     $39 = (($38) + 1|0);
     $0 = $39;
     HEAP8[$38>>0] = $37;
     $40 = $i;
     $41 = (($40) + 1)|0;
     $i = $41;
    }
   }
   $47 = $lenght;
   $48 = $2;
   $49 = (($48) - ($47))|0;
   $2 = $49;
   $50 = $2;
   $51 = ($50|0)<=(0);
   if ($51) {
    break L1;
   }
   $52 = $d;
   $53 = (($52) + 1)|0;
   $d = $53;
  }
  $54 = $2;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _hqrGetEntry($ptr,$filename,$index) {
 $ptr = $ptr|0;
 $filename = $filename|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compDataPtr = 0, $compSize = 0, $headerSize = 0, $mode = 0, $offsetToData = 0, $realSize = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $headerSize = sp + 32|0;
 $offsetToData = sp + 24|0;
 $realSize = sp + 20|0;
 $compSize = sp + 36|0;
 $mode = sp + 56|0;
 $1 = $ptr;
 $2 = $filename;
 $3 = $index;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $6 = $2;
 $7 = (_fropen2(300880,$6,307040)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $2;
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf((307048|0),($vararg_buffer|0))|0);
 }
 _frread(300880,$headerSize,4);
 $10 = $3;
 $11 = HEAP32[$headerSize>>2]|0;
 $12 = (($11>>>0) / 4)&-1;
 $13 = ($10>>>0)>=($12>>>0);
 if ($13) {
  (_printf((307080|0),($vararg_buffer1|0))|0);
  _frclose(300880);
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $14 = $3;
 $15 = $14<<2;
 _frseek(300880,$15);
 _frread(300880,$offsetToData,4);
 $16 = HEAP32[$offsetToData>>2]|0;
 _frseek(300880,$16);
 _frread(300880,$realSize,4);
 _frread(300880,$compSize,4);
 _frread(300880,$mode,2);
 $17 = $1;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $19 = HEAP32[$realSize>>2]|0;
  $20 = (_malloc($19)|0);
  $1 = $20;
 }
 $21 = $1;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  (_printf((307120|0),($vararg_buffer3|0))|0);
  _frclose(300880);
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $23 = HEAP16[$mode>>1]|0;
 $24 = $23&65535;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $1;
  $27 = HEAP32[$realSize>>2]|0;
  _frread(300880,$26,$27);
 } else {
  $28 = HEAP16[$mode>>1]|0;
  $29 = $28&65535;
  $30 = ($29|0)==(1);
  if ($30) {
   label = 15;
  } else {
   $31 = HEAP16[$mode>>1]|0;
   $32 = $31&65535;
   $33 = ($32|0)==(2);
   if ($33) {
    label = 15;
   }
  }
  if ((label|0) == 15) {
   $compDataPtr = 0;
   $34 = HEAP32[$compSize>>2]|0;
   $35 = (_malloc($34)|0);
   $compDataPtr = $35;
   $36 = $compDataPtr;
   $37 = HEAP32[$compSize>>2]|0;
   _frread(300880,$36,$37);
   $38 = $1;
   $39 = $compDataPtr;
   $40 = HEAP32[$realSize>>2]|0;
   $41 = HEAP16[$mode>>1]|0;
   $42 = $41&65535;
   _hqrDecompressEntry($38,$39,$40,$42);
   $43 = $compDataPtr;
   _free($43);
  }
 }
 _frclose(300880);
 $44 = HEAP32[$realSize>>2]|0;
 $0 = $44;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _hqrEntrySize($filename,$index) {
 $filename = $filename|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $headerSize = 0, $offsetToData = 0;
 var $realSize = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $headerSize = sp + 20|0;
 $offsetToData = sp + 24|0;
 $realSize = sp + 28|0;
 $1 = $filename;
 $2 = $index;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $5 = $1;
 $6 = (_fropen2(300880,$5,307040)|0);
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = $1;
  HEAP32[$vararg_buffer>>2] = $8;
  (_printf((307048|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 _frread(300880,$headerSize,4);
 $9 = $2;
 $10 = HEAP32[$headerSize>>2]|0;
 $11 = (($10>>>0) / 4)&-1;
 $12 = ($9>>>0)>=($11>>>0);
 if ($12) {
  (_printf((307080|0),($vararg_buffer1|0))|0);
  _frclose(300880);
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $13 = $2;
  $14 = $13<<2;
  _frseek(300880,$14);
  _frread(300880,$offsetToData,4);
  $15 = HEAP32[$offsetToData>>2]|0;
  _frseek(300880,$15);
  _frread(300880,$realSize,4);
  _frclose(300880);
  $16 = HEAP32[$realSize>>2]|0;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _hqrNumEntries($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $headerSize = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $headerSize = sp + 8|0;
 $1 = $filename;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 $4 = $1;
 $5 = (_fropen2(300880,$4,307040)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $7 = $1;
  HEAP32[$vararg_buffer>>2] = $7;
  (_printf((307048|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 _frread(300880,$headerSize,4);
 $8 = HEAP32[$headerSize>>2]|0;
 $9 = (($8>>>0) / 4)&-1;
 $0 = $9;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _hqrGetallocEntry($ptr,$filename,$index) {
 $ptr = $ptr|0;
 $filename = $filename|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $ptr;
 $2 = $filename;
 $3 = $index;
 $4 = $2;
 $5 = $3;
 $6 = (_hqrEntrySize($4,$5)|0);
 $size = $6;
 $7 = $size;
 $8 = $7;
 $9 = (_malloc($8)|0);
 $10 = $1;
 HEAP32[$10>>2] = $9;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = $3;
  (_hqrGetEntry($15,$16,$17)|0);
  $18 = $size;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  (_printf((307168|0),($vararg_buffer|0))|0);
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _hqrGetVoxEntry($ptr,$filename,$index,$hiddenIndex) {
 $ptr = $ptr|0;
 $filename = $filename|0;
 $index = $index|0;
 $hiddenIndex = $hiddenIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $compDataPtr = 0, $compSize = 0, $headerSize = 0, $i = 0, $mode = 0, $offsetToData = 0, $realSize = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $headerSize = sp + 20|0;
 $offsetToData = sp + 28|0;
 $realSize = sp + 24|0;
 $compSize = sp + 40|0;
 $mode = sp + 64|0;
 $1 = $ptr;
 $2 = $filename;
 $3 = $index;
 $4 = $hiddenIndex;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $7 = $2;
 $8 = (_fropen2(300880,$7,307040)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = $2;
  HEAP32[$vararg_buffer>>2] = $10;
  (_printf((307048|0),($vararg_buffer|0))|0);
 }
 _frread(300880,$headerSize,4);
 $11 = $3;
 $12 = HEAP32[$headerSize>>2]|0;
 $13 = (($12>>>0) / 4)&-1;
 $14 = ($11>>>0)>=($13>>>0);
 if ($14) {
  (_printf((307080|0),($vararg_buffer1|0))|0);
  _frclose(300880);
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $15 = $3;
 $16 = $15<<2;
 _frseek(300880,$16);
 _frread(300880,$offsetToData,4);
 $17 = HEAP32[$offsetToData>>2]|0;
 _frseek(300880,$17);
 _frread(300880,$realSize,4);
 _frread(300880,$compSize,4);
 _frread(300880,$mode,2);
 $18 = $4;
 $19 = ($18|0)>(0);
 if ($19) {
  $i = 0;
  $i = 0;
  while(1) {
   $20 = $i;
   $21 = $4;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = HEAP32[$offsetToData>>2]|0;
   $24 = HEAP32[$compSize>>2]|0;
   $25 = (($23) + ($24))|0;
   $26 = (($25) + 10)|0;
   _frseek(300880,$26);
   $27 = HEAP32[$offsetToData>>2]|0;
   $28 = HEAP32[$compSize>>2]|0;
   $29 = (($27) + ($28))|0;
   $30 = (($29) + 10)|0;
   HEAP32[$offsetToData>>2] = $30;
   _frread(300880,$realSize,4);
   _frread(300880,$compSize,4);
   _frread(300880,$mode,2);
   $31 = $i;
   $32 = (($31) + 1)|0;
   $i = $32;
  }
 }
 $33 = $1;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = HEAP32[$realSize>>2]|0;
  $36 = (_malloc($35)|0);
  $1 = $36;
 }
 $37 = $1;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  (_printf((307120|0),($vararg_buffer3|0))|0);
  _frclose(300880);
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $39 = HEAP16[$mode>>1]|0;
 $40 = $39&65535;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = $1;
  $43 = HEAP32[$realSize>>2]|0;
  _frread(300880,$42,$43);
 } else {
  $44 = HEAP16[$mode>>1]|0;
  $45 = $44&65535;
  $46 = ($45|0)==(1);
  if ($46) {
   label = 21;
  } else {
   $47 = HEAP16[$mode>>1]|0;
   $48 = $47&65535;
   $49 = ($48|0)==(2);
   if ($49) {
    label = 21;
   }
  }
  if ((label|0) == 21) {
   $compDataPtr = 0;
   $50 = HEAP32[$compSize>>2]|0;
   $51 = (_malloc($50)|0);
   $compDataPtr = $51;
   $52 = $compDataPtr;
   $53 = HEAP32[$compSize>>2]|0;
   _frread(300880,$52,$53);
   $54 = $1;
   $55 = $compDataPtr;
   $56 = HEAP32[$realSize>>2]|0;
   $57 = HEAP16[$mode>>1]|0;
   $58 = $57&65535;
   _hqrDecompressEntry($54,$55,$56,$58);
   $59 = $compDataPtr;
   _free($59);
  }
 }
 _frclose(300880);
 $60 = HEAP32[$realSize>>2]|0;
 $0 = $60;
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function _hqrVoxEntrySize($filename,$index,$hiddenIndex) {
 $filename = $filename|0;
 $index = $index|0;
 $hiddenIndex = $hiddenIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compSize = 0, $headerSize = 0, $i = 0, $offsetToData = 0, $realSize = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $headerSize = sp + 24|0;
 $offsetToData = sp + 16|0;
 $realSize = sp + 12|0;
 $compSize = sp + 28|0;
 $1 = $filename;
 $2 = $index;
 $3 = $hiddenIndex;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $6 = $1;
 $7 = (_fropen2(300880,$6,307040)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf((307048|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 _frread(300880,$headerSize,4);
 $10 = $2;
 $11 = HEAP32[$headerSize>>2]|0;
 $12 = (($11>>>0) / 4)&-1;
 $13 = ($10>>>0)>=($12>>>0);
 if ($13) {
  (_printf((307080|0),($vararg_buffer1|0))|0);
  _frclose(300880);
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $14 = $2;
 $15 = $14<<2;
 _frseek(300880,$15);
 _frread(300880,$offsetToData,4);
 $16 = HEAP32[$offsetToData>>2]|0;
 _frseek(300880,$16);
 _frread(300880,$realSize,4);
 _frread(300880,$compSize,4);
 $17 = $3;
 $18 = ($17|0)>(0);
 if ($18) {
  $i = 0;
  $i = 0;
  while(1) {
   $19 = $i;
   $20 = $3;
   $21 = ($19|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = HEAP32[$offsetToData>>2]|0;
   $23 = HEAP32[$compSize>>2]|0;
   $24 = (($22) + ($23))|0;
   $25 = (($24) + 10)|0;
   _frseek(300880,$25);
   $26 = HEAP32[$offsetToData>>2]|0;
   $27 = HEAP32[$compSize>>2]|0;
   $28 = (($26) + ($27))|0;
   $29 = (($28) + 10)|0;
   HEAP32[$offsetToData>>2] = $29;
   _frread(300880,$realSize,4);
   _frread(300880,$compSize,4);
   $30 = $i;
   $31 = (($30) + 1)|0;
   $i = $31;
  }
 }
 _frclose(300880);
 $32 = HEAP32[$realSize>>2]|0;
 $0 = $32;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _hqrGetallocVoxEntry($ptr,$filename,$index,$hiddenIndex) {
 $ptr = $ptr|0;
 $filename = $filename|0;
 $index = $index|0;
 $hiddenIndex = $hiddenIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $ptr;
 $2 = $filename;
 $3 = $index;
 $4 = $hiddenIndex;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = (_hqrVoxEntrySize($5,$6,$7)|0);
 $size = $8;
 $9 = $size;
 $10 = $9;
 $11 = (_malloc($10)|0);
 $12 = $1;
 HEAP32[$12>>2] = $11;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = $3;
  $20 = $4;
  (_hqrGetVoxEntry($17,$18,$19,$20)|0);
  $21 = $size;
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  (_printf((307168|0),($vararg_buffer|0))|0);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _checkClipping($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $code = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $code = 0;
 $2 = $0;
 $3 = HEAP32[47664>>2]|0;
 $4 = ($2|0)<($3|0);
 if ($4) {
  $5 = $code;
  $6 = $5 | 1;
  $code = $6;
 } else {
  $7 = $0;
  $8 = HEAP32[47680>>2]|0;
  $9 = ($7|0)>($8|0);
  if ($9) {
   $10 = $code;
   $11 = $10 | 2;
   $code = $11;
  }
 }
 $12 = $1;
 $13 = HEAP32[47648>>2]|0;
 $14 = ($12|0)<($13|0);
 if ($14) {
  $15 = $code;
  $16 = $15 | 4;
  $code = $16;
  $22 = $code;
  STACKTOP = sp;return ($22|0);
 }
 $17 = $1;
 $18 = HEAP32[47696>>2]|0;
 $19 = ($17|0)>($18|0);
 if ($19) {
  $20 = $code;
  $21 = $20 | 8;
  $code = $21;
 }
 $22 = $code;
 STACKTOP = sp;return ($22|0);
}
function _drawLine($startWidth,$startHeight,$endWidth,$endHeight,$lineColor) {
 $startWidth = $startWidth|0;
 $startHeight = $startHeight|0;
 $endWidth = $endWidth|0;
 $endHeight = $endHeight|0;
 $lineColor = $lineColor|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $color = 0, $currentLineColor = 0, $flag2 = 0, $out = 0, $outcode0 = 0, $outcode1 = 0, $outcodeOut = 0, $temp = 0, $var2 = 0, $x = 0, $xchg = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $startWidth;
 $1 = $startHeight;
 $2 = $endWidth;
 $3 = $endHeight;
 $4 = $lineColor;
 $5 = $4;
 $currentLineColor = $5;
 $6 = $0;
 $7 = $2;
 $8 = ($6|0)>($7|0);
 if ($8) {
  $9 = $2;
  $temp = $9;
  $10 = $0;
  $2 = $10;
  $11 = $temp;
  $0 = $11;
  $12 = $3;
  $temp = $12;
  $13 = $1;
  $3 = $13;
  $14 = $temp;
  $1 = $14;
 }
 $15 = $0;
 $16 = $1;
 $17 = (_checkClipping($15,$16)|0);
 $outcode0 = $17;
 $18 = $2;
 $19 = $3;
 $20 = (_checkClipping($18,$19)|0);
 $outcode1 = $20;
 while(1) {
  $21 = $outcode0;
  $22 = $outcode1;
  $23 = $21 | $22;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   break;
  }
  $25 = $outcode0;
  $26 = $outcode1;
  $27 = $25 & $26;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $outcode0;
   $30 = ($29|0)!=(0);
   if ($30) {
    label = 7;
    break;
   }
  }
  $31 = $outcode0;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $outcode0;
   $35 = $33;
  } else {
   $34 = $outcode1;
   $35 = $34;
  }
  $outcodeOut = $35;
  $36 = $outcodeOut;
  $37 = $36 & 4;
  $38 = ($37|0)!=(0);
  if ($38) {
   $39 = $0;
   $40 = $2;
   $41 = $0;
   $42 = (($40) - ($41))|0;
   $43 = (+($42|0));
   $44 = HEAP32[47648>>2]|0;
   $45 = $1;
   $46 = (($44) - ($45))|0;
   $47 = (+($46|0));
   $48 = $43 * $47;
   $49 = $3;
   $50 = $1;
   $51 = (($49) - ($50))|0;
   $52 = (+($51|0));
   $53 = $48 / $52;
   $54 = (~~(($53)));
   $55 = (($39) + ($54))|0;
   $x = $55;
   $56 = HEAP32[47648>>2]|0;
   $y = $56;
  } else {
   $57 = $outcodeOut;
   $58 = $57 & 8;
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = $0;
    $61 = $2;
    $62 = $0;
    $63 = (($61) - ($62))|0;
    $64 = (+($63|0));
    $65 = HEAP32[47696>>2]|0;
    $66 = $1;
    $67 = (($65) - ($66))|0;
    $68 = (+($67|0));
    $69 = $64 * $68;
    $70 = $3;
    $71 = $1;
    $72 = (($70) - ($71))|0;
    $73 = (+($72|0));
    $74 = $69 / $73;
    $75 = (~~(($74)));
    $76 = (($60) + ($75))|0;
    $x = $76;
    $77 = HEAP32[47696>>2]|0;
    $y = $77;
   } else {
    $78 = $outcodeOut;
    $79 = $78 & 2;
    $80 = ($79|0)!=(0);
    if ($80) {
     $81 = $1;
     $82 = $3;
     $83 = $1;
     $84 = (($82) - ($83))|0;
     $85 = (+($84|0));
     $86 = HEAP32[47680>>2]|0;
     $87 = $0;
     $88 = (($86) - ($87))|0;
     $89 = (+($88|0));
     $90 = $85 * $89;
     $91 = $2;
     $92 = $0;
     $93 = (($91) - ($92))|0;
     $94 = (+($93|0));
     $95 = $90 / $94;
     $96 = (~~(($95)));
     $97 = (($81) + ($96))|0;
     $y = $97;
     $98 = HEAP32[47680>>2]|0;
     $x = $98;
    } else {
     $99 = $outcodeOut;
     $100 = $99 & 1;
     $101 = ($100|0)!=(0);
     if ($101) {
      $102 = $1;
      $103 = $3;
      $104 = $1;
      $105 = (($103) - ($104))|0;
      $106 = (+($105|0));
      $107 = HEAP32[47664>>2]|0;
      $108 = $0;
      $109 = (($107) - ($108))|0;
      $110 = (+($109|0));
      $111 = $106 * $110;
      $112 = $2;
      $113 = $0;
      $114 = (($112) - ($113))|0;
      $115 = (+($114|0));
      $116 = $111 / $115;
      $117 = (~~(($116)));
      $118 = (($102) + ($117))|0;
      $y = $118;
      $119 = HEAP32[47664>>2]|0;
      $x = $119;
     }
    }
   }
  }
  $120 = $outcodeOut;
  $121 = $outcode0;
  $122 = ($120|0)==($121|0);
  if ($122) {
   $123 = $x;
   $0 = $123;
   $124 = $y;
   $1 = $124;
   $125 = $0;
   $126 = $1;
   $127 = (_checkClipping($125,$126)|0);
   $outcode0 = $127;
  } else {
   $128 = $x;
   $2 = $128;
   $129 = $y;
   $3 = $129;
   $130 = $2;
   $131 = $3;
   $132 = (_checkClipping($130,$131)|0);
   $outcode1 = $132;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $flag2 = 640;
 $133 = $0;
 $134 = $2;
 $135 = (($134) - ($133))|0;
 $2 = $135;
 $136 = $1;
 $137 = $3;
 $138 = (($137) - ($136))|0;
 $3 = $138;
 $139 = $3;
 $140 = ($139|0)<(0);
 if ($140) {
  $141 = $flag2;
  $142 = (0 - ($141))|0;
  $flag2 = $142;
  $143 = $3;
  $144 = (0 - ($143))|0;
  $3 = $144;
 }
 $145 = HEAP32[25952>>2]|0;
 $146 = $1;
 $147 = (25968 + ($146<<2)|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($145) + ($148)|0);
 $150 = $0;
 $151 = (($149) + ($150)|0);
 $out = $151;
 $152 = $currentLineColor;
 $153 = $152&65535;
 $color = $153;
 $154 = $2;
 $155 = $3;
 $156 = ($154|0)<($155|0);
 if (!($156)) {
  $195 = $2;
  $196 = $195&65535;
  $var2 = $196;
  $197 = $var2;
  $198 = $197 << 16 >> 16;
  $199 = $198 << 1;
  $200 = $199&65535;
  $var2 = $200;
  $201 = $2;
  $1 = $201;
  $202 = $3;
  $203 = $202 << 1;
  $3 = $203;
  $204 = $2;
  $205 = (($204) + 1)|0;
  $2 = $205;
  while(1) {
   $206 = $color;
   $207 = $206&255;
   $208 = $out;
   HEAP8[$208>>0] = $207;
   $209 = $out;
   $210 = (($209) + 1|0);
   $out = $210;
   $211 = $3;
   $212 = $1;
   $213 = (($212) - ($211))|0;
   $1 = $213;
   $214 = $1;
   $215 = ($214|0)<(0);
   if ($215) {
    $216 = $var2;
    $217 = $216 << 16 >> 16;
    $218 = $1;
    $219 = (($218) + ($217))|0;
    $1 = $219;
    $220 = $flag2;
    $221 = $out;
    $222 = (($221) + ($220)|0);
    $out = $222;
   }
   $223 = $2;
   $224 = (($223) + -1)|0;
   $2 = $224;
   $225 = ($224|0)!=(0);
   if (!($225)) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $157 = $2;
 $158 = $157&65535;
 $xchg = $158;
 $159 = $3;
 $2 = $159;
 $160 = $xchg;
 $161 = $160 << 16 >> 16;
 $3 = $161;
 $162 = $2;
 $163 = $162&65535;
 $var2 = $163;
 $164 = $var2;
 $165 = $164 << 16 >> 16;
 $166 = $165 << 1;
 $167 = $166&65535;
 $var2 = $167;
 $168 = $2;
 $1 = $168;
 $169 = $3;
 $170 = $169 << 1;
 $3 = $170;
 $171 = $2;
 $172 = (($171) + 1)|0;
 $2 = $172;
 while(1) {
  $173 = $color;
  $174 = $173&255;
  $175 = $out;
  HEAP8[$175>>0] = $174;
  $176 = $3;
  $177 = $1;
  $178 = (($177) - ($176))|0;
  $1 = $178;
  $179 = $1;
  $180 = ($179|0)>(0);
  if ($180) {
   $181 = $flag2;
   $182 = $out;
   $183 = (($182) + ($181)|0);
   $out = $183;
  } else {
   $184 = $var2;
   $185 = $184 << 16 >> 16;
   $186 = $1;
   $187 = (($186) + ($185))|0;
   $1 = $187;
   $188 = $flag2;
   $189 = (($188) + 1)|0;
   $190 = $out;
   $191 = (($190) + ($189)|0);
   $out = $191;
  }
  $192 = $2;
  $193 = (($192) + -1)|0;
  $2 = $193;
  $194 = ($193|0)!=(0);
  if (!($194)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _blitBox($left,$top,$right,$bottom,$source,$leftDest,$topDest,$dest) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 $source = $source|0;
 $leftDest = $leftDest|0;
 $topDest = $topDest|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $height = 0;
 var $i = 0, $insideLine = 0, $j = 0, $s = 0, $temp3 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $source;
 $5 = $leftDest;
 $6 = $topDest;
 $7 = $dest;
 $8 = $1;
 $9 = (25968 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = (($11) + ($10)|0);
 $13 = $0;
 $14 = (($12) + ($13)|0);
 $s = $14;
 $15 = $6;
 $16 = (25968 + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $7;
 $19 = (($18) + ($17)|0);
 $20 = $5;
 $21 = (($19) + ($20)|0);
 $d = $21;
 $22 = $2;
 $23 = $0;
 $24 = (($22) - ($23))|0;
 $25 = (($24) + 1)|0;
 $width = $25;
 $26 = $3;
 $27 = $1;
 $28 = (($26) - ($27))|0;
 $29 = (($28) + 1)|0;
 $height = $29;
 $30 = $width;
 $31 = (640 - ($30))|0;
 $insideLine = $31;
 $32 = $0;
 $temp3 = $32;
 $33 = $0;
 $34 = $33 >> 2;
 $0 = $34;
 $35 = $temp3;
 $36 = $35 & 3;
 $temp3 = $36;
 $j = 0;
 while(1) {
  $37 = $j;
  $38 = $height;
  $39 = ($37|0)<($38|0);
  if (!($39)) {
   break;
  }
  $i = 0;
  while(1) {
   $40 = $i;
   $41 = $width;
   $42 = ($40|0)<($41|0);
   if (!($42)) {
    break;
   }
   $43 = $s;
   $44 = (($43) + 1|0);
   $s = $44;
   $45 = HEAP8[$43>>0]|0;
   $46 = $d;
   $47 = (($46) + 1|0);
   $d = $47;
   HEAP8[$46>>0] = $45;
   $48 = $i;
   $49 = (($48) + 1)|0;
   $i = $49;
  }
  $50 = $insideLine;
  $51 = $d;
  $52 = (($51) + ($50)|0);
  $d = $52;
  $53 = $insideLine;
  $54 = $s;
  $55 = (($54) + ($53)|0);
  $s = $55;
  $56 = $j;
  $57 = (($56) + 1)|0;
  $j = $57;
 }
 STACKTOP = sp;return;
}
function _drawTransparentBox($left,$top,$right,$bottom,$colorAdj) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 $colorAdj = $colorAdj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $color = 0, $color2 = 0, $height = 0, $height2 = 0, $localMode = 0, $pos = 0, $temp = 0, $var1 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $colorAdj;
 $5 = $0;
 $6 = ($5|0)>(639);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = ($7|0)<(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ($9|0)>(479);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = ($11|0)<(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ($13|0)<(0);
 if ($14) {
  $0 = 0;
 }
 $15 = $2;
 $16 = ($15|0)>(639);
 if ($16) {
  $2 = 639;
 }
 $17 = $1;
 $18 = ($17|0)<(0);
 if ($18) {
  $1 = 0;
 }
 $19 = $3;
 $20 = ($19|0)>(479);
 if ($20) {
  $3 = 479;
 }
 $21 = $1;
 $22 = (25968 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[25952>>2]|0;
 $25 = (($24) + ($23)|0);
 $26 = $0;
 $27 = (($25) + ($26)|0);
 $pos = $27;
 $28 = $3;
 $29 = $1;
 $30 = (($28) - ($29))|0;
 $height = $30;
 $height2 = $30;
 $31 = $height2;
 $32 = (($31) + 1)|0;
 $height2 = $32;
 $33 = $2;
 $34 = $0;
 $35 = (($33) - ($34))|0;
 $36 = (($35) + 1)|0;
 $width = $36;
 $37 = $width;
 $38 = (640 - ($37))|0;
 $temp = $38;
 $39 = $4;
 $localMode = $39;
 while(1) {
  $40 = $width;
  $var1 = $40;
  while(1) {
   $41 = $pos;
   $42 = HEAP8[$41>>0]|0;
   $color = $42;
   $color2 = $42;
   $43 = $color2;
   $44 = $43 << 24 >> 24;
   $45 = $44 & 240;
   $46 = $45&255;
   $color2 = $46;
   $47 = $color;
   $48 = $47 << 24 >> 24;
   $49 = $48 & 15;
   $50 = $49&255;
   $color = $50;
   $51 = $localMode;
   $52 = $color;
   $53 = $52 << 24 >> 24;
   $54 = (($53) - ($51))|0;
   $55 = $54&255;
   $color = $55;
   $56 = $color;
   $57 = $56 << 24 >> 24;
   $58 = ($57|0)<(0);
   if ($58) {
    $59 = $color2;
    $color = $59;
   } else {
    $60 = $color2;
    $61 = $60 << 24 >> 24;
    $62 = $color;
    $63 = $62 << 24 >> 24;
    $64 = (($63) + ($61))|0;
    $65 = $64&255;
    $color = $65;
   }
   $66 = $color;
   $67 = $pos;
   $68 = (($67) + 1|0);
   $pos = $68;
   HEAP8[$67>>0] = $66;
   $69 = $var1;
   $70 = (($69) + -1)|0;
   $var1 = $70;
   $71 = $var1;
   $72 = ($71|0)>(0);
   if (!($72)) {
    break;
   }
  }
  $73 = $temp;
  $74 = $pos;
  $75 = (($74) + ($73)|0);
  $pos = $75;
  $76 = $height2;
  $77 = (($76) + -1)|0;
  $height2 = $77;
  $78 = $height2;
  $79 = ($78|0)>(0);
  if (!($79)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _drawSplittedBox($left,$top,$right,$bottom,$e) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $offset = 0, $ptr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $e;
 $5 = $0;
 $6 = ($5|0)>(639);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = ($7|0)<(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ($9|0)>(479);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = ($11|0)<(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = $0;
 $15 = (($13) - ($14))|0;
 $16 = (($15) - 640)|0;
 $17 = (0 - ($16))|0;
 $offset = $17;
 $18 = HEAP32[25952>>2]|0;
 $19 = $1;
 $20 = (25968 + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21)|0);
 $23 = $0;
 $24 = (($22) + ($23)|0);
 $ptr = $24;
 $25 = $1;
 $x = $25;
 while(1) {
  $26 = $x;
  $27 = $3;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $0;
  $y = $29;
  while(1) {
   $30 = $y;
   $31 = $2;
   $32 = ($30|0)<($31|0);
   if (!($32)) {
    break;
   }
   $33 = $4;
   $34 = $ptr;
   $35 = (($34) + 1|0);
   $ptr = $35;
   HEAP8[$34>>0] = $33;
   $36 = $y;
   $37 = (($36) + 1)|0;
   $y = $37;
  }
  $38 = $offset;
  $39 = $ptr;
  $40 = (($39) + ($38)|0);
  $ptr = $40;
  $41 = $x;
  $42 = (($41) + 1)|0;
  $x = $42;
 }
 STACKTOP = sp;return;
}
function _setClip($left,$top,$right,$bottom) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $0;
 $5 = ($4|0)<(0);
 if ($5) {
  $0 = 0;
 }
 $6 = $0;
 HEAP32[47664>>2] = $6;
 $7 = $1;
 $8 = ($7|0)<(0);
 if ($8) {
  $1 = 0;
 }
 $9 = $1;
 HEAP32[47648>>2] = $9;
 $10 = $2;
 $11 = ($10|0)>=(640);
 if ($11) {
  $2 = 639;
 }
 $12 = $2;
 HEAP32[47680>>2] = $12;
 $13 = $3;
 $14 = ($13|0)>=(480);
 if (!($14)) {
  $15 = $3;
  HEAP32[47696>>2] = $15;
  STACKTOP = sp;return;
 }
 $3 = 479;
 $15 = $3;
 HEAP32[47696>>2] = $15;
 STACKTOP = sp;return;
}
function _saveClip() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[47664>>2]|0;
 HEAP32[47672>>2] = $0;
 $1 = HEAP32[47648>>2]|0;
 HEAP32[47656>>2] = $1;
 $2 = HEAP32[47680>>2]|0;
 HEAP32[47688>>2] = $2;
 $3 = HEAP32[47696>>2]|0;
 HEAP32[47704>>2] = $3;
 STACKTOP = sp;return;
}
function _loadClip() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[47672>>2]|0;
 HEAP32[47664>>2] = $0;
 $1 = HEAP32[47656>>2]|0;
 HEAP32[47648>>2] = $1;
 $2 = HEAP32[47688>>2]|0;
 HEAP32[47680>>2] = $2;
 $3 = HEAP32[47704>>2]|0;
 HEAP32[47696>>2] = $3;
 STACKTOP = sp;return;
}
function _resetClip() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[47664>>2] = 0;
 HEAP32[47648>>2] = 0;
 HEAP32[47680>>2] = 639;
 HEAP32[47696>>2] = 479;
 STACKTOP = sp;return;
}
function _freezeTime() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[307312>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $2 = HEAP32[25920>>2]|0;
  HEAP32[307320>>2] = $2;
 }
 $3 = HEAP32[307312>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[307312>>2] = $4;
 STACKTOP = sp;return;
}
function _unfreezeTime() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[307312>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[307312>>2] = $1;
 $2 = HEAP32[307312>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[307320>>2]|0;
 HEAP32[25920>>2] = $4;
 STACKTOP = sp;return;
}
function _processActorSamplePosition($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor = 0, $channelIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $0;
 $4 = (_getActorChannel($3)|0);
 $channelIdx = $4;
 $5 = $channelIdx;
 $6 = $actor;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $actor;
 $10 = (($9) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $actor;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 _setSamplePosition($5,$8,$11,$14);
 STACKTOP = sp;return;
}
function _runGameEngine() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $actor = 0, $actor1 = 0, $brickSound = 0, $pinguin = 0, $rnd = 0, $tmpFlagDisplayText = 0, $tmpLangCD = 0, $tmpLanguageCDIdx = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _readKeys();
 $1 = HEAP32[34040>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  _changeScene();
 }
 $3 = HEAP32[33984>>2]|0;
 HEAP32[33992>>2] = $3;
 $4 = HEAP16[122416>>1]|0;
 HEAP16[122424>>1] = $4;
 $5 = HEAP16[122408>>1]|0;
 $6 = $5 << 16 >> 16;
 HEAP32[33984>>2] = $6;
 $7 = HEAP16[120304>>1]|0;
 $8 = $7 << 16 >> 16;
 HEAP32[34000>>2] = $8;
 $9 = HEAP32[122472>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = HEAP16[120304>>1]|0;
   $12 = $11 << 16 >> 16;
   $13 = ($12|0)!=(0);
   if ($13) {
    $0 = 0;
    $607 = $0;
    STACKTOP = sp;return ($607|0);
   }
   $14 = HEAP16[122416>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = ($15|0)!=(0);
   if ($16) {
    $0 = 0;
    $607 = $0;
    STACKTOP = sp;return ($607|0);
   }
   $17 = HEAP16[122408>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = ($18|0)!=(0);
   if (!($19)) {
    break;
   }
   $0 = 0;
   $607 = $0;
   STACKTOP = sp;return ($607|0);
  } else {
   $20 = HEAP16[120304>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = ($21|0)==(1);
   do {
    if ($22) {
     $23 = HEAP32[8>>2]|0;
     $24 = (($23) + 104|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)>(0);
     if ($26) {
      $27 = HEAP32[8>>2]|0;
      $28 = (($27) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)!=(-1);
      if ($30) {
       $31 = HEAP32[8>>2]|0;
       $32 = HEAP16[$31>>1]|0;
       $33 = ($32&65535) >>> 9;
       $34 = $33 & 1;
       $35 = ($34<<16>>16)!=(0);
       if (!($35)) {
        _freezeTime();
        $36 = (_giveupMenu()|0);
        $37 = ($36|0)!=(0);
        if ($37) {
         _unfreezeTime();
         _redrawEngineActions(1);
         _freezeTime();
         _saveGame();
         HEAP32[25912>>2] = 0;
         HEAP32[((308424 + 124|0))>>2] = 0;
         _unfreezeTime();
         $0 = 0;
         $607 = $0;
         STACKTOP = sp;return ($607|0);
        } else {
         _unfreezeTime();
         _redrawEngineActions(1);
         break;
        }
       }
      }
     }
    }
   } while(0);
   $38 = HEAP32[34000>>2]|0;
   $39 = ($38|0)==(64);
   if ($39) {
    $40 = HEAP32[((308424 + 24|0))>>2]|0;
    $tmpLangCD = $40;
    _freezeTime();
    _pauseSamples();
    HEAP8[((309616 + 10|0))>>0]=15&255;HEAP8[((309616 + 10|0))+1>>0]=15>>8;
    HEAP32[((308424 + 24|0))>>2] = 0;
    _initTextBank(0);
    (_optionsMenu()|0);
    $41 = $tmpLangCD;
    HEAP32[((308424 + 24|0))>>2] = $41;
    $42 = HEAP32[122480>>2]|0;
    $43 = (($42) + 3)|0;
    _initTextBank($43);
    _resumeSamples();
    _unfreezeTime();
    _redrawEngineActions(1);
   }
   HEAP32[34008>>2] = -1;
   $44 = HEAP32[34000>>2]|0;
   $45 = ($44|0)==(54);
   if ($45) {
    $46 = HEAP32[8>>2]|0;
    $47 = (($46) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(-1);
    if ($49) {
     $50 = HEAP32[8>>2]|0;
     $51 = (($50) + 68|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(1);
     if ($53) {
      _freezeTime();
      _processInventoryMenu();
      $54 = HEAP32[34008>>2]|0;
      switch ($54|0) {
      case 27:  {
       $142 = HEAP32[8>>2]|0;
       $143 = (($142) + 104|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)<(50);
       if ($145) {
        $146 = HEAP16[38312>>1]|0;
        $147 = $146 << 16 >> 16;
        $148 = ($147|0)>(0);
        if ($148) {
         $149 = HEAP32[8>>2]|0;
         $150 = (($149) + 104|0);
         HEAP32[$150>>2] = 50;
         $151 = HEAP16[24256>>1]|0;
         $152 = $151 << 16 >> 16;
         $153 = ($152*20)|0;
         $154 = $153&65535;
         HEAP16[38320>>1] = $154;
         $155 = HEAP16[38312>>1]|0;
         $156 = (($155) + -1)<<16>>16;
         HEAP16[38312>>1] = $156;
         _addOverlay(3,27,0,0,0,0,3);
        }
       }
       break;
      }
      case 26:  {
       $138 = HEAP32[((308424 + 24|0))>>2]|0;
       $tmpLanguageCDIdx = $138;
       _unfreezeTime();
       _redrawEngineActions(1);
       _freezeTime();
       HEAP32[((308424 + 24|0))>>2] = 0;
       _initTextBank(2);
       _textClipFull();
       _setFontCrossColor(15);
       _drawTextFullscreen(162);
       _textClipSmall();
       $139 = $tmpLanguageCDIdx;
       HEAP32[((308424 + 24|0))>>2] = $139;
       $140 = HEAP32[122480>>2]|0;
       $141 = (($140) + 3)|0;
       _initTextBank($141);
       break;
      }
      case 14:  {
       $78 = HEAP16[34248>>1]|0;
       $79 = $78 << 16 >> 16;
       $80 = (136 + (($79*232)|0)|0);
       $pinguin = $80;
       $81 = HEAP32[38952>>2]|0;
       $82 = HEAP32[8>>2]|0;
       $83 = (($82) + 36|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (($81) + ($84))|0;
       $86 = $pinguin;
       $87 = (($86) + 36|0);
       HEAP32[$87>>2] = $85;
       $88 = HEAP32[8>>2]|0;
       $89 = (($88) + 40|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = $pinguin;
       $92 = (($91) + 40|0);
       HEAP32[$92>>2] = $90;
       $93 = HEAP32[38968>>2]|0;
       $94 = HEAP32[8>>2]|0;
       $95 = (($94) + 44|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (($93) + ($96))|0;
       $98 = $pinguin;
       $99 = (($98) + 44|0);
       HEAP32[$99>>2] = $97;
       $100 = HEAP32[8>>2]|0;
       $101 = (($100) + 60|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $pinguin;
       $104 = (($103) + 60|0);
       HEAP32[$104>>2] = $102;
       $105 = $pinguin;
       $106 = (($105) + 60|0);
       $107 = HEAP32[$106>>2]|0;
       _rotateActor(0,800,$107);
       $108 = HEAP16[34248>>1]|0;
       $109 = $108 << 16 >> 16;
       $110 = (_checkCollisionWithActors($109)|0);
       $111 = ($110|0)!=(0);
       if (!($111)) {
        $112 = $pinguin;
        $113 = (($112) + 104|0);
        HEAP32[$113>>2] = 50;
        $114 = $pinguin;
        $115 = (($114) + 8|0);
        HEAP32[$115>>2] = -1;
        $116 = HEAP16[34248>>1]|0;
        _initModelActor(0,$116);
        $117 = $pinguin;
        $118 = (($117) + 2|0);
        $119 = HEAP16[$118>>1]|0;
        $120 = $119 & -33;
        HEAP16[$118>>1] = $120;
        $121 = $pinguin;
        $122 = (($121) + 20|0);
        HEAP32[$122>>2] = 0;
        $123 = $pinguin;
        $124 = (($123) + 60|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = $pinguin;
        $127 = (($126) + 60|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = $pinguin;
        $130 = (($129) + 64|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = $pinguin;
        $133 = (($132) + 212|0);
        _moveActor($125,$128,$131,$133);
        HEAP8[((38000 + 14|0))>>0] = 0;
        $134 = HEAP32[25920>>2]|0;
        $135 = (($134) + 1500)|0;
        $136 = $pinguin;
        $137 = (($136) + 72|0);
        HEAP32[$137>>2] = $135;
       }
       break;
      }
      case 0:  {
       (_printf((307328|0),($vararg_buffer|0))|0);
       break;
      }
      case 5:  {
       _fadeToBlack(120312);
       _loadImage(15,1);
       _initTextBank(2);
       HEAP32[123888>>2] = 0;
       _textClipFull();
       _setFontCrossColor(15);
       $65 = HEAP32[((308424 + 32|0))>>2]|0;
       $tmpFlagDisplayText = $65;
       HEAP32[((308424 + 32|0))>>2] = 1;
       _drawTextFullscreen(161);
       $66 = $tmpFlagDisplayText;
       HEAP32[((308424 + 32|0))>>2] = $66;
       _textClipSmall();
       HEAP32[123888>>2] = 1;
       $67 = HEAP32[122480>>2]|0;
       $68 = (($67) + 3)|0;
       _initTextBank($68);
       _fadeToBlack(118808);
       _clearScreen();
       _flip();
       _setPalette(120312);
       HEAP16[121352>>1] = 1;
       break;
      }
      case 1:  {
       $55 = HEAP16[38336>>1]|0;
       $56 = $55 << 16 >> 16;
       $57 = ($56|0)==(1);
       if ($57) {
        _initModelActor(0,0);
       }
       HEAP16[38336>>1] = 0;
       break;
      }
      case 12:  {
       $69 = HEAP8[((38000 + 6|0))>>0]|0;
       $70 = ($69<<24>>24)!=(0);
       if ($70) {
        $71 = HEAP32[8>>2]|0;
        $72 = (($71) + 8|0);
        HEAP32[$72>>2] = 0;
       } else {
        $73 = HEAP32[8>>2]|0;
        $74 = (($73) + 8|0);
        HEAP32[$74>>2] = 1;
       }
       $75 = HEAP16[128>>1]|0;
       $76 = $75 << 16 >> 16;
       $77 = ($76|0)==(4);
       if ($77) {
        _setBehaviour(0);
       } else {
        _setBehaviour(4);
       }
       break;
      }
      case 2:  {
       $58 = HEAP32[8>>2]|0;
       $59 = (($58) + 8|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)!=(2);
       if ($61) {
        $62 = HEAP16[128>>1]|0;
        $63 = $62 << 16 >> 16;
        $64 = ($63|0)==(4);
        if ($64) {
         _setBehaviour(0);
        }
        _initModelActor(2,0);
        (_initAnim(24,1,0,0)|0);
        HEAP16[38336>>1] = 1;
       }
       break;
      }
      default: {
      }
      }
      _unfreezeTime();
      _redrawEngineActions(1);
     }
    }
   }
   $157 = HEAP32[34000>>2]|0;
   $158 = ($157|0)==(29);
   if ($158) {
    label = 57;
   } else {
    $159 = HEAP32[34000>>2]|0;
    $160 = ($159|0)==(59);
    if ($160) {
     label = 57;
    } else {
     $161 = HEAP32[34000>>2]|0;
     $162 = ($161|0)==(60);
     if ($162) {
      label = 57;
     } else {
      $163 = HEAP32[34000>>2]|0;
      $164 = ($163|0)==(61);
      if ($164) {
       label = 57;
      } else {
       $165 = HEAP32[34000>>2]|0;
       $166 = ($165|0)==(62);
       if ($166) {
        label = 57;
       }
      }
     }
    }
   }
   if ((label|0) == 57) {
    $167 = HEAP32[8>>2]|0;
    $168 = (($167) + 4|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($169|0)!=(-1);
    if ($170) {
     $171 = HEAP32[8>>2]|0;
     $172 = (($171) + 68|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($173|0)==(1);
     if ($174) {
      $175 = HEAP32[34000>>2]|0;
      $176 = ($175|0)!=(29);
      if ($176) {
       $177 = HEAP32[34000>>2]|0;
       $178 = (($177) - 59)|0;
       $179 = $178&65535;
       HEAP16[128>>1] = $179;
      }
      _freezeTime();
      _processBehaviourMenu();
      _unfreezeTime();
      _redrawEngineActions(1);
     }
    }
   }
   $180 = HEAP32[34000>>2]|0;
   $181 = ($180|0)==(36);
   if ($181) {
    $182 = HEAP8[((38000 + 12|0))>>0]|0;
    $183 = $182&255;
    $184 = ($183|0)==(1);
    if ($184) {
     $185 = HEAP8[((38000 + 6|0))>>0]|0;
     $186 = ($185<<24>>24)!=(0);
     if ($186) {
      $187 = HEAP32[8>>2]|0;
      $188 = (($187) + 8|0);
      HEAP32[$188>>2] = 0;
     } else {
      $189 = HEAP32[8>>2]|0;
      $190 = (($189) + 8|0);
      HEAP32[$190>>2] = 1;
     }
     $191 = HEAP16[128>>1]|0;
     $192 = $191 << 16 >> 16;
     $193 = ($192|0)==(4);
     if ($193) {
      _setBehaviour(0);
     } else {
      _setBehaviour(4);
     }
    }
   }
   $194 = HEAP32[33984>>2]|0;
   $195 = $194 & 2;
   $196 = ($195|0)!=(0);
   if ($196) {
    $197 = HEAP16[34024>>1]|0;
    $198 = ($197<<16>>16)!=(0);
    if (!($198)) {
     $199 = HEAP16[34256>>1]|0;
     $200 = $199 << 16 >> 16;
     $201 = (136 + (($200*232)|0)|0);
     $202 = (($201) + 36|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $203 >> 9;
     HEAP32[39400>>2] = $204;
     $205 = HEAP16[34256>>1]|0;
     $206 = $205 << 16 >> 16;
     $207 = (136 + (($206*232)|0)|0);
     $208 = (($207) + 40|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = $209 >> 8;
     HEAP32[39408>>2] = $210;
     $211 = HEAP16[34256>>1]|0;
     $212 = $211 << 16 >> 16;
     $213 = (136 + (($212*232)|0)|0);
     $214 = (($213) + 44|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = $215 >> 9;
     HEAP32[39416>>2] = $216;
     HEAP16[47424>>1] = 1;
    }
   }
   $217 = HEAP32[34000>>2]|0;
   $218 = ($217|0)==(25);
   if ($218) {
    _freezeTime();
    _setFontColor(15);
    _drawText(5,446,307376);
    _copyBlockPhys(5,446,100,479);
    while(1) {
     _readKeys();
     _SDL_Delay(10);
     $219 = HEAP16[120304>>1]|0;
     $220 = $219 << 16 >> 16;
     $221 = ($220|0)!=(25);
     if ($221) {
      $222 = HEAP16[122416>>1]|0;
      $223 = ($222<<16>>16)!=(0);
      $224 = $223 ^ 1;
      $608 = $224;
     } else {
      $608 = 0;
     }
     if (!($608)) {
      break;
     }
    }
    _unfreezeTime();
    _redrawEngineActions(1);
   }
  }
 } while(0);
 $225 = (_getRealValue(33968)|0);
 HEAP32[34016>>2] = $225;
 $226 = HEAP32[34016>>2]|0;
 $227 = ($226|0)!=(0);
 if (!($227)) {
  HEAP32[34016>>2] = 1;
 }
 _setActorAngle(0,-256,5,33968);
 HEAP16[34024>>1] = 0;
 _processEnvironmentSound();
 $a = 0;
 while(1) {
  $228 = $a;
  $229 = HEAP32[24248>>2]|0;
  $230 = ($228|0)<($229|0);
  if (!($230)) {
   break;
  }
  $231 = $a;
  $232 = (136 + (($231*232)|0)|0);
  $233 = (($232) + 52|0);
  HEAP32[$233>>2] = -1;
  $234 = $a;
  $235 = (($234) + 1)|0;
  $a = $235;
 }
 _processExtras();
 $a = 0;
 while(1) {
  $236 = $a;
  $237 = HEAP32[24248>>2]|0;
  $238 = ($236|0)<($237|0);
  if (!($238)) {
   label = 144;
   break;
  }
  $239 = $a;
  $240 = (136 + (($239*232)|0)|0);
  $actor = $240;
  $241 = $actor;
  $242 = (($241) + 2|0);
  $243 = HEAP16[$242>>1]|0;
  $244 = ($243&65535) >>> 5;
  $245 = $244 & 1;
  $246 = ($245<<16>>16)!=(0);
  if (!($246)) {
   $247 = $actor;
   $248 = (($247) + 104|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ($249|0)==(0);
   if ($250) {
    $251 = $a;
    $252 = ($251|0)==(0);
    if ($252) {
     (_initAnim(10,4,0,0)|0);
     $253 = $actor;
     $254 = (($253) + 68|0);
     HEAP32[$254>>2] = 0;
    } else {
     $255 = (_rand()|0);
     $256 = (($255|0) % 2000)&-1;
     $257 = (($256) + 3096)|0;
     $258 = $actor;
     $259 = (($258) + 36|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = $actor;
     $262 = (($261) + 40|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = $actor;
     $265 = (($264) + 44|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = $a;
     _playSample(37,$257,1,$260,$263,$266,$267);
     $268 = $a;
     $269 = HEAP16[34248>>1]|0;
     $270 = $269 << 16 >> 16;
     $271 = ($268|0)==($270|0);
     if ($271) {
      $272 = $actor;
      $273 = (($272) + 36|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = $actor;
      $276 = (($275) + 40|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = $actor;
      $279 = (($278) + 44|0);
      $280 = HEAP32[$279>>2]|0;
      (_addExtraExplode($274,$277,$280)|0);
     }
    }
    $281 = $actor;
    $282 = (($281) + 56|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = $283 & 496;
    $285 = ($284|0)!=(0);
    if ($285) {
     $286 = $actor;
     $287 = (($286) + 56|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $288 & 1;
     $290 = ($289|0)!=(0);
     if (!($290)) {
      $291 = $a;
      _processActorExtraBonus($291);
     }
    }
   }
   $292 = $a;
   _processActorMovements($292);
   $293 = $actor;
   $294 = (($293) + 36|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $actor;
   $297 = (($296) + 108|0);
   HEAP32[$297>>2] = $295;
   $298 = $actor;
   $299 = (($298) + 40|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $actor;
   $302 = (($301) + 112|0);
   HEAP32[$302>>2] = $300;
   $303 = $actor;
   $304 = (($303) + 44|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = $actor;
   $307 = (($306) + 116|0);
   HEAP32[$307>>2] = $305;
   $308 = $actor;
   $309 = (($308) + 120|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = ($310|0)!=(-1);
   if ($311) {
    $312 = $a;
    _processMoveScript($312);
   }
   $313 = $a;
   _processActorAnimations($313);
   $314 = $actor;
   $315 = HEAP16[$314>>1]|0;
   $316 = ($315&65535) >>> 2;
   $317 = $316 & 1;
   $318 = ($317<<16>>16)!=(0);
   if ($318) {
    $319 = $a;
    _processActorZones($319);
   }
   $320 = $actor;
   $321 = (($320) + 128|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = ($322|0)!=(-1);
   if ($323) {
    $324 = $a;
    _processLifeScript($324);
   }
   $325 = $a;
   _processActorSamplePosition($325);
   $326 = HEAP32[25912>>2]|0;
   $327 = ($326|0)!=(-1);
   if ($327) {
    label = 108;
    break;
   }
   $329 = $actor;
   $330 = HEAP16[$329>>1]|0;
   $331 = ($330&65535) >>> 6;
   $332 = $331 & 1;
   $333 = ($332<<16>>16)!=(0);
   if ($333) {
    $334 = $actor;
    $335 = (($334) + 36|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $actor;
    $338 = (($337) + 40|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = (($339) - 1)|0;
    $341 = $actor;
    $342 = (($341) + 44|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = (_getBrickSoundType($336,$340,$343)|0);
    $brickSound = $344;
    $345 = $brickSound;
    $346 = $actor;
    $347 = (($346) + 196|0);
    HEAP32[$347>>2] = $345;
    $348 = $brickSound;
    $349 = $348 & 240;
    $350 = ($349|0)==(240);
    if ($350) {
     $351 = $brickSound;
     $352 = $351 & 15;
     $353 = ($352|0)==(1);
     if ($353) {
      $354 = $a;
      $355 = ($354|0)!=(0);
      if ($355) {
       $356 = (_rand()|0);
       $357 = (($356|0) % 2000)&-1;
       $358 = (($357) + 3096)|0;
       $rnd = $358;
       $359 = $rnd;
       $360 = $actor;
       $361 = (($360) + 36|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = $actor;
       $364 = (($363) + 40|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = $actor;
       $367 = (($366) + 44|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = $a;
       _playSample(37,$359,1,$362,$365,$368,$369);
       $370 = $actor;
       $371 = (($370) + 56|0);
       $372 = HEAP32[$371>>2]|0;
       $373 = $372 & 496;
       $374 = ($373|0)!=(0);
       if ($374) {
        $375 = $actor;
        $376 = (($375) + 56|0);
        $377 = HEAP32[$376>>2]|0;
        $378 = $377 & 1;
        $379 = ($378|0)!=(0);
        if (!($379)) {
         $380 = $a;
         _processActorExtraBonus($380);
        }
        $381 = $actor;
        $382 = (($381) + 104|0);
        HEAP32[$382>>2] = 0;
       }
      } else {
       $383 = HEAP16[128>>1]|0;
       $384 = $383 << 16 >> 16;
       $385 = ($384|0)!=(4);
       if ($385) {
        label = 120;
       } else {
        $386 = $brickSound;
        $387 = $386 & 15;
        $388 = $actor;
        $389 = (($388) + 12|0);
        $390 = HEAP32[$389>>2]|0;
        $391 = ($387|0)!=($390|0);
        if ($391) {
         label = 120;
        }
       }
       if ((label|0) == 120) {
        label = 0;
        $392 = HEAP16[32>>1]|0;
        $393 = ($392<<16>>16)!=(0);
        if (!($393)) {
         (_initAnim(21,4,0,0)|0);
         $394 = $actor;
         $395 = (($394) + 36|0);
         $396 = HEAP32[$395>>2]|0;
         $397 = HEAP32[39424>>2]|0;
         $398 = (($396) - ($397))|0;
         $399 = $actor;
         $400 = (($399) + 40|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = HEAP32[39432>>2]|0;
         $403 = (($401) - ($402))|0;
         $404 = $actor;
         $405 = (($404) + 44|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = HEAP32[39440>>2]|0;
         $408 = (($406) - ($407))|0;
         (_projectPositionOnScreen($398,$403,$408)|0);
         $409 = HEAP16[38912>>1]|0;
         HEAP16[32>>1] = $409;
        }
        $410 = $actor;
        $411 = (($410) + 36|0);
        $412 = HEAP32[$411>>2]|0;
        $413 = HEAP32[39424>>2]|0;
        $414 = (($412) - ($413))|0;
        $415 = $actor;
        $416 = (($415) + 40|0);
        $417 = HEAP32[$416>>2]|0;
        $418 = HEAP32[39432>>2]|0;
        $419 = (($417) - ($418))|0;
        $420 = $actor;
        $421 = (($420) + 44|0);
        $422 = HEAP32[$421>>2]|0;
        $423 = HEAP32[39440>>2]|0;
        $424 = (($422) - ($423))|0;
        (_projectPositionOnScreen($414,$419,$424)|0);
        $425 = $actor;
        $426 = (($425) + 68|0);
        HEAP32[$426>>2] = 0;
        $427 = $actor;
        $428 = (($427) + 104|0);
        HEAP32[$428>>2] = -1;
        $429 = HEAP16[38912>>1]|0;
        HEAP16[32>>1] = $429;
        $430 = $actor;
        $431 = HEAP16[$430>>1]|0;
        $432 = ($431&65535) >>> 6;
        $433 = $432 & 1;
        $434 = $433&65535;
        $435 = $434 | 16;
        $436 = $435&65535;
        $437 = HEAP16[$430>>1]|0;
        $438 = $436 & 1;
        $439 = ($438 << 6)&65535;
        $440 = $437 & -65;
        $441 = $440 | $439;
        HEAP16[$430>>1] = $441;
       }
      }
     }
    }
   }
   $442 = $actor;
   $443 = (($442) + 104|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = ($444|0)<=(0);
   if ($445) {
    $446 = $a;
    $447 = ($446|0)!=(0);
    if ($447) {
     $505 = $a;
     _processActorCarrier($505);
     $506 = $actor;
     $507 = (($506) + 2|0);
     $508 = HEAP16[$507>>1]|0;
     $509 = $508 & -33;
     $510 = $509 | 32;
     HEAP16[$507>>1] = $510;
     $511 = $actor;
     $512 = (($511) + 4|0);
     HEAP32[$512>>2] = -1;
     $513 = $actor;
     $514 = (($513) + 160|0);
     HEAP32[$514>>2] = -1;
    } else {
     $448 = $actor;
     $449 = (($448) + 2|0);
     $450 = HEAP16[$449>>1]|0;
     $451 = ($450&65535) >>> 2;
     $452 = $451 & 1;
     $453 = ($452<<16>>16)!=(0);
     if ($453) {
      $454 = HEAP16[38312>>1]|0;
      $455 = $454 << 16 >> 16;
      $456 = ($455|0)>(0);
      if (!($456)) {
       label = 132;
       break;
      }
      $457 = HEAP16[34184>>1]|0;
      $458 = $457 << 16 >> 16;
      $459 = HEAP32[8>>2]|0;
      $460 = (($459) + 36|0);
      HEAP32[$460>>2] = $458;
      $461 = HEAP16[34192>>1]|0;
      $462 = $461 << 16 >> 16;
      $463 = HEAP32[8>>2]|0;
      $464 = (($463) + 40|0);
      HEAP32[$464>>2] = $462;
      $465 = HEAP16[34200>>1]|0;
      $466 = $465 << 16 >> 16;
      $467 = HEAP32[8>>2]|0;
      $468 = (($467) + 44|0);
      HEAP32[$468>>2] = $466;
      $469 = HEAP32[34048>>2]|0;
      HEAP32[34040>>2] = $469;
      $470 = HEAP16[24256>>1]|0;
      $471 = $470 << 16 >> 16;
      $472 = ($471*20)|0;
      $473 = $472&65535;
      HEAP16[38320>>1] = $473;
      $474 = HEAP32[8>>2]|0;
      $475 = (($474) + 36|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = $476 >> 9;
      HEAP32[39400>>2] = $477;
      $478 = HEAP32[8>>2]|0;
      $479 = (($478) + 40|0);
      $480 = HEAP32[$479>>2]|0;
      $481 = $480 >> 8;
      HEAP32[39408>>2] = $481;
      $482 = HEAP32[8>>2]|0;
      $483 = (($482) + 44|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = $484 >> 9;
      HEAP32[39416>>2] = $485;
      HEAP16[34240>>1] = 3;
      $486 = HEAP32[8>>2]|0;
      $487 = (($486) + 104|0);
      HEAP32[$487>>2] = 50;
      HEAP16[47424>>1] = 1;
      HEAP16[121352>>1] = 1;
      $488 = HEAP16[38312>>1]|0;
      $489 = (($488) + -1)<<16>>16;
      HEAP16[38312>>1] = $489;
      HEAP16[32>>1] = 0;
     }
    }
   }
   $515 = HEAP32[34040>>2]|0;
   $516 = ($515|0)!=(-1);
   if ($516) {
    label = 140;
    break;
   }
  }
  $517 = $a;
  $518 = (($517) + 1)|0;
  $a = $518;
 }
 if ((label|0) == 108) {
  $328 = HEAP32[25912>>2]|0;
  $0 = $328;
  $607 = $0;
  STACKTOP = sp;return ($607|0);
 }
 else if ((label|0) == 132) {
  HEAP16[38304>>1] = 2;
  HEAP16[38312>>1] = 1;
  $490 = HEAP16[24256>>1]|0;
  $491 = $490 << 16 >> 16;
  $492 = ($491*20)|0;
  $493 = $492&65535;
  HEAP16[38320>>1] = $493;
  $494 = HEAP16[24>>1]|0;
  HEAP16[128>>1] = $494;
  $495 = HEAP16[16>>1]|0;
  $496 = $495 << 16 >> 16;
  $497 = $actor;
  $498 = (($497) + 60|0);
  HEAP32[$498>>2] = $496;
  $499 = $actor;
  $500 = (($499) + 104|0);
  HEAP32[$500>>2] = 50;
  $501 = HEAP32[34056>>2]|0;
  $502 = HEAP32[34048>>2]|0;
  $503 = ($501|0)!=($502|0);
  if ($503) {
   HEAP16[34184>>1] = -1;
   HEAP16[34192>>1] = -1;
   HEAP16[34200>>1] = -1;
   $504 = HEAP32[34056>>2]|0;
   HEAP32[34048>>2] = $504;
  }
  _saveGame();
  _processGameoverAnimation();
  HEAP32[25912>>2] = 0;
  $0 = 0;
  $607 = $0;
  STACKTOP = sp;return ($607|0);
 }
 else if ((label|0) == 140) {
  $0 = 0;
  $607 = $0;
  STACKTOP = sp;return ($607|0);
 }
 else if ((label|0) == 144) {
  $519 = HEAP16[34024>>1]|0;
  $520 = ($519<<16>>16)!=(0);
  if (!($520)) {
   $521 = HEAP32[47416>>2]|0;
   $522 = ($521|0)!=(0);
   if (!($522)) {
    $523 = HEAP16[34256>>1]|0;
    $524 = $523 << 16 >> 16;
    $525 = (136 + (($524*232)|0)|0);
    $actor1 = $525;
    $526 = $actor1;
    $527 = (($526) + 36|0);
    $528 = HEAP32[$527>>2]|0;
    $529 = HEAP32[39400>>2]|0;
    $530 = $529 << 9;
    $531 = (($528) - ($530))|0;
    $532 = $actor1;
    $533 = (($532) + 40|0);
    $534 = HEAP32[$533>>2]|0;
    $535 = HEAP32[39408>>2]|0;
    $536 = $535 << 8;
    $537 = (($534) - ($536))|0;
    $538 = $actor1;
    $539 = (($538) + 44|0);
    $540 = HEAP32[$539>>2]|0;
    $541 = HEAP32[39416>>2]|0;
    $542 = $541 << 9;
    $543 = (($540) - ($542))|0;
    (_projectPositionOnScreen($531,$537,$543)|0);
    $544 = HEAP16[38904>>1]|0;
    $545 = $544 << 16 >> 16;
    $546 = ($545|0)<(80);
    if ($546) {
     label = 150;
    } else {
     $547 = HEAP16[38904>>1]|0;
     $548 = $547 << 16 >> 16;
     $549 = ($548|0)>(539);
     if ($549) {
      label = 150;
     } else {
      $550 = HEAP16[38912>>1]|0;
      $551 = $550 << 16 >> 16;
      $552 = ($551|0)<(80);
      if ($552) {
       label = 150;
      } else {
       $553 = HEAP16[38912>>1]|0;
       $554 = $553 << 16 >> 16;
       $555 = ($554|0)>(429);
       if ($555) {
        label = 150;
       }
      }
     }
    }
    if ((label|0) == 150) {
     $556 = $actor1;
     $557 = (($556) + 36|0);
     $558 = HEAP32[$557>>2]|0;
     $559 = (($558) + 256)|0;
     $560 = $559 >> 9;
     $561 = $actor1;
     $562 = (($561) + 36|0);
     $563 = HEAP32[$562>>2]|0;
     $564 = (($563) + 256)|0;
     $565 = $564 >> 9;
     $566 = HEAP32[39400>>2]|0;
     $567 = (($565) - ($566))|0;
     $568 = (($567|0) / 2)&-1;
     $569 = (($560) + ($568))|0;
     HEAP32[39400>>2] = $569;
     $570 = $actor1;
     $571 = (($570) + 40|0);
     $572 = HEAP32[$571>>2]|0;
     $573 = $572 >> 8;
     HEAP32[39408>>2] = $573;
     $574 = $actor1;
     $575 = (($574) + 44|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = (($576) + 256)|0;
     $578 = $577 >> 9;
     $579 = $actor1;
     $580 = (($579) + 44|0);
     $581 = HEAP32[$580>>2]|0;
     $582 = (($581) + 256)|0;
     $583 = $582 >> 9;
     $584 = HEAP32[39416>>2]|0;
     $585 = (($583) - ($584))|0;
     $586 = (($585|0) / 2)&-1;
     $587 = (($578) + ($586))|0;
     HEAP32[39416>>2] = $587;
     $588 = HEAP32[39400>>2]|0;
     $589 = ($588|0)>=(64);
     if ($589) {
      HEAP32[39400>>2] = 63;
     }
     $590 = HEAP32[39416>>2]|0;
     $591 = ($590|0)>=(64);
     if ($591) {
      HEAP32[39416>>2] = 63;
     }
     HEAP16[47424>>1] = 1;
    }
   }
  }
  $592 = HEAP16[47424>>1]|0;
  $593 = $592 << 16 >> 16;
  _redrawEngineActions($593);
  $594 = HEAP16[32>>1]|0;
  $595 = $594 << 16 >> 16;
  $596 = ($595|0)!=(0);
  if ($596) {
   $597 = HEAP16[47424>>1]|0;
   $598 = $597 << 16 >> 16;
   $599 = ($598|0)==(1);
   if ($599) {
    $600 = HEAP32[8>>2]|0;
    $601 = HEAP16[$600>>1]|0;
    $602 = $601 & -513;
    $603 = $602 | 512;
    HEAP16[$600>>1] = $603;
    _redrawEngineActions(1);
    $604 = HEAP32[8>>2]|0;
    $605 = HEAP16[$604>>1]|0;
    $606 = $605 & -513;
    HEAP16[$604>>1] = $606;
   }
  }
  HEAP32[34040>>2] = -1;
  HEAP16[47424>>1] = 0;
  $0 = 0;
  $607 = $0;
  STACKTOP = sp;return ($607|0);
 }
 return (0)|0;
}
function _gameEngineLoop() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP16[47424>>1] = 1;
 HEAP16[121352>>1] = 1;
 _setActorAngle(0,-256,5,33968);
 L1: while(1) {
  $1 = HEAP32[25912>>2]|0;
  $2 = ($1|0)==(-1);
  if (!($2)) {
   label = 9;
   break;
  }
  $3 = (_SDL_GetTicks()|0);
  $start = $3;
  while(1) {
   $4 = (_SDL_GetTicks()|0);
   $5 = $start;
   $6 = HEAP32[((308424 + 96|0))>>2]|0;
   $7 = (($5) + ($6))|0;
   $8 = ($4>>>0)<($7>>>0);
   if (!($8)) {
    break;
   }
   $9 = (_runGameEngine()|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    label = 6;
    break L1;
   }
   _SDL_Delay(1);
  }
  $11 = HEAP32[25920>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[25920>>2] = $12;
 }
 if ((label|0) == 6) {
  $0 = 1;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _allocVideoMemory() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_malloc(307200)|0);
 HEAP32[25944>>2] = $0;
 $1 = (_malloc(307200)|0);
 HEAP32[25960>>2] = $1;
 HEAP32[25952>>2] = $1;
 $2 = HEAP32[25952>>2]|0;
 _initScreenBuffer($2,640,480);
 $j = 0;
 $k = 0;
 $i = 480;
 while(1) {
  $3 = $i;
  $4 = ($3|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $k;
  $6 = $j;
  $7 = (25968 + ($6<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = $j;
  $9 = (($8) + 1)|0;
  $j = $9;
  $10 = $k;
  $11 = (($10) + 640)|0;
  $k = $11;
  $12 = $i;
  $13 = (($12) + -1)|0;
  $i = $13;
 }
 STACKTOP = sp;return;
}
function _getConfigTypeIndex($lineBuffer) {
 $lineBuffer = $lineBuffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buffer = 0, $i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $lineBuffer;
 $2 = $1;
 (_strcpy(($buffer|0),($2|0))|0);
 $3 = (_strchr($buffer,32)|0);
 $ptr = $3;
 $4 = $ptr;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $ptr;
  HEAP8[$6>>0] = 0;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7>>>0)<(40);
  if (!($8)) {
   label = 11;
   break;
  }
  $9 = $i;
  $10 = (307416 + (($9*22)|0)|0);
  $11 = (_strlen(($10|0))|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $i;
   $14 = (307416 + (($13*22)|0)|0);
   $15 = (_strcmp($14,$buffer)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    label = 7;
    break;
   }
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 7) {
  $17 = $i;
  $0 = $17;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _getLanguageTypeIndex($language) {
 $language = $language|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buffer = 0, $i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 16|0;
 $1 = $language;
 $2 = $1;
 (_strcpy(($buffer|0),($2|0))|0);
 $3 = (_strchr($buffer,32)|0);
 $ptr = $3;
 $4 = $ptr;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $ptr;
  HEAP8[$6>>0] = 0;
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7>>>0)<(6);
  if (!($8)) {
   label = 11;
   break;
  }
  $9 = $i;
  $10 = (308296 + (($9*10)|0)|0);
  $11 = (_strlen(($10|0))|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $i;
   $14 = (308296 + (($13*10)|0)|0);
   $15 = (_strcmp($14,$buffer)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    label = 7;
    break;
   }
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 7) {
  $17 = $i;
  $0 = $17;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _initConfigurations() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $cfgtype = 0, $fd = 0, $fd_test = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer76 = sp + 24|0;
 $vararg_buffer73 = sp + 208|0;
 $vararg_buffer70 = sp + 200|0;
 $vararg_buffer67 = sp + 192|0;
 $vararg_buffer64 = sp + 184|0;
 $vararg_buffer61 = sp + 176|0;
 $vararg_buffer58 = sp + 168|0;
 $vararg_buffer55 = sp + 160|0;
 $vararg_buffer52 = sp + 152|0;
 $vararg_buffer49 = sp + 144|0;
 $vararg_buffer46 = sp + 136|0;
 $vararg_buffer43 = sp + 128|0;
 $vararg_buffer40 = sp + 16|0;
 $vararg_buffer37 = sp + 8|0;
 $vararg_buffer34 = sp;
 $vararg_buffer31 = sp + 48|0;
 $vararg_buffer28 = sp + 120|0;
 $vararg_buffer25 = sp + 32|0;
 $vararg_buffer22 = sp + 40|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer13 = sp + 72|0;
 $vararg_buffer10 = sp + 80|0;
 $vararg_buffer7 = sp + 88|0;
 $vararg_buffer4 = sp + 96|0;
 $vararg_buffer1 = sp + 104|0;
 $vararg_buffer = sp + 112|0;
 $buffer = sp + 240|0;
 $tmp = sp + 224|0;
 $cfgtype = -1;
 $0 = HEAP32[307408>>2]|0;
 $1 = (_fcaseopen($0,308360)|0);
 $fd = $1;
 $2 = $fd;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $4 = HEAP32[307408>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_printf((308368|0),($vararg_buffer|0))|0);
 }
 while(1) {
  $5 = $fd;
  $6 = (_fgets(($buffer|0),256,($5|0))|0);
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = (_strchr($buffer,3338)|0);
  HEAP8[$8>>0] = 0;
  $9 = (_getConfigTypeIndex($buffer)|0);
  $cfgtype = $9;
  $10 = $cfgtype;
  $11 = ($10|0)!=(-1);
  if ($11) {
   $12 = $cfgtype;
   do {
    switch ($12|0) {
    case 2:  {
     HEAP32[$vararg_buffer7>>2] = ((308424 + 28|0));
     (_sscanf($buffer,308576,$vararg_buffer7)|0);
     $16 = (_strcmp(((308424 + 28|0)),308600)|0);
     $17 = ($16|0)!=(0);
     if ($17) {
      HEAP32[((308424 + 32|0))>>2] = 0;
     } else {
      HEAP32[((308424 + 32|0))>>2] = 1;
     }
     break;
    }
    case 8:  {
     HEAP32[$vararg_buffer13>>2] = $tmp;
     (_sscanf($buffer,308632,$vararg_buffer13)|0);
     $18 = (_strcmp($tmp,308648)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $20 = HEAP32[362056>>2]|0;
      $21 = (_fcaseopen($20,308360)|0);
      $fd_test = $21;
      $22 = $fd_test;
      $23 = ($22|0)!=(0|0);
      if ($23) {
       $24 = $fd_test;
       (_fclose(($24|0))|0);
       HEAP8[((308424 + 44|0))>>0] = 1;
      } else {
       HEAP8[((308424 + 44|0))>>0] = 0;
      }
     } else {
      $25 = (_strcmp($tmp,308656)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       HEAP8[((308424 + 44|0))>>0] = 1;
      } else {
       HEAP8[((308424 + 44|0))>>0] = 0;
      }
     }
     break;
    }
    case 0:  {
     HEAP32[$vararg_buffer1>>2] = 308424;
     (_sscanf($buffer,308408,$vararg_buffer1)|0);
     $13 = (_getLanguageTypeIndex(308424)|0);
     HEAP32[((308424 + 20|0))>>2] = $13;
     break;
    }
    case 3:  {
     HEAP32[$vararg_buffer10>>2] = ((308424 + 36|0));
     (_sscanf($buffer,308608,$vararg_buffer10)|0);
     break;
    }
    case 1:  {
     HEAP32[$vararg_buffer4>>2] = ((308424 + 10|0));
     (_sscanf($buffer,308560,$vararg_buffer4)|0);
     $14 = (_getLanguageTypeIndex(308424)|0);
     $15 = (($14) + 1)|0;
     HEAP32[((308424 + 24|0))>>2] = $15;
     break;
    }
    case 28:  {
     HEAP32[$vararg_buffer43>>2] = ((308424 + 84|0));
     (_sscanf($buffer,308816,$vararg_buffer43)|0);
     break;
    }
    case 29:  {
     HEAP32[$vararg_buffer46>>2] = ((308424 + 88|0));
     (_sscanf($buffer,308832,$vararg_buffer46)|0);
     break;
    }
    case 27:  {
     HEAP32[$vararg_buffer40>>2] = ((308424 + 80|0));
     (_sscanf($buffer,308800,$vararg_buffer40)|0);
     break;
    }
    case 30:  {
     HEAP32[$vararg_buffer49>>2] = ((308424 + 92|0));
     (_sscanf($buffer,308848,$vararg_buffer49)|0);
     break;
    }
    case 20:  {
     HEAP32[$vararg_buffer19>>2] = ((308424 + 52|0));
     (_sscanf($buffer,308680,$vararg_buffer19)|0);
     break;
    }
    case 19:  {
     HEAP32[$vararg_buffer16>>2] = ((308424 + 48|0));
     (_sscanf($buffer,308664,$vararg_buffer16)|0);
     $27 = HEAP32[((308424 + 48|0))>>2]|0;
     HEAP32[((308424 + 52|0))>>2] = $27;
     break;
    }
    case 31:  {
     HEAP32[$vararg_buffer52>>2] = ((308424 + 96|0));
     (_sscanf($buffer,308864,$vararg_buffer52)|0);
     break;
    }
    case 33:  {
     HEAP32[$vararg_buffer58>>2] = ((308424 + 104|0));
     (_sscanf($buffer,308888,$vararg_buffer58)|0);
     break;
    }
    case 32:  {
     HEAP32[$vararg_buffer55>>2] = ((308424 + 100|0));
     (_sscanf($buffer,308872,$vararg_buffer55)|0);
     break;
    }
    case 34:  {
     HEAP32[$vararg_buffer61>>2] = ((308424 + 112|0));
     (_sscanf($buffer,308912,$vararg_buffer61)|0);
     break;
    }
    case 35:  {
     HEAP32[$vararg_buffer64>>2] = ((308424 + 108|0));
     (_sscanf($buffer,308928,$vararg_buffer64)|0);
     break;
    }
    case 39:  {
     HEAP32[$vararg_buffer76>>2] = ((308424 + 132|0));
     (_sscanf($buffer,309000,$vararg_buffer76)|0);
     break;
    }
    case 38:  {
     HEAP32[$vararg_buffer73>>2] = ((308424 + 128|0));
     (_sscanf($buffer,308976,$vararg_buffer73)|0);
     break;
    }
    case 37:  {
     HEAP32[$vararg_buffer70>>2] = ((308424 + 120|0));
     (_sscanf($buffer,308960,$vararg_buffer70)|0);
     break;
    }
    case 36:  {
     HEAP32[$vararg_buffer67>>2] = ((308424 + 116|0));
     (_sscanf($buffer,308944,$vararg_buffer67)|0);
     break;
    }
    case 21:  {
     HEAP32[$vararg_buffer22>>2] = ((308424 + 56|0));
     (_sscanf($buffer,308696,$vararg_buffer22)|0);
     break;
    }
    case 24:  {
     HEAP32[$vararg_buffer31>>2] = ((308424 + 68|0));
     (_sscanf($buffer,308744,$vararg_buffer31)|0);
     break;
    }
    case 25:  {
     HEAP32[$vararg_buffer34>>2] = ((308424 + 72|0));
     (_sscanf($buffer,308768,$vararg_buffer34)|0);
     break;
    }
    case 23:  {
     HEAP32[$vararg_buffer28>>2] = ((308424 + 64|0));
     (_sscanf($buffer,308728,$vararg_buffer28)|0);
     break;
    }
    case 26:  {
     HEAP32[$vararg_buffer37>>2] = ((308424 + 76|0));
     (_sscanf($buffer,308784,$vararg_buffer37)|0);
     break;
    }
    case 22:  {
     HEAP32[$vararg_buffer25>>2] = ((308424 + 60|0));
     (_sscanf($buffer,308712,$vararg_buffer25)|0);
     break;
    }
    default: {
    }
    }
   } while(0);
  }
 }
 $28 = HEAP32[((308424 + 96|0))>>2]|0;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $fd;
  (_fclose(($30|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[((308424 + 96|0))>>2] = 19;
 $30 = $fd;
 (_fclose(($30|0))|0);
 STACKTOP = sp;return;
}
function _initEngine() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 _initConfigurations();
 $0 = HEAP32[307392>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 (_printf((309024|0),($vararg_buffer|0))|0);
 (_printf((309048|0),($vararg_buffer1|0))|0);
 (_printf((309128|0),($vararg_buffer3|0))|0);
 (_printf((309240|0),($vararg_buffer5|0))|0);
 $1 = HEAP32[((308424 + 100|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  HEAP32[$vararg_buffer7>>2] = 309376;
  $vararg_ptr10 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr10>>2] = 309392;
  (_printf((309352|0),($vararg_buffer7|0))|0);
 }
 (_sdlInitialize()|0);
 $3 = (_SDL_GetTicks()|0);
 _srand($3);
 _allocVideoMemory();
 _clearScreen();
 _toggleFullscreen();
 (_initCdrom()|0);
 _adelineLogo();
 $4 = HEAP32[((308424 + 72|0))>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _loadImageDelay(49,3);
  _loadImageDelay(52,2);
  _playFlaMovie(309408);
  _loadMenuImage(1);
  _mainMenu();
  STACKTOP = sp;return;
 }
 $6 = HEAP32[((308424 + 72|0))>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  _loadImageDelay(12,3);
  _loadImageDelay(52,2);
 } else {
  $8 = HEAP32[((308424 + 72|0))>>2]|0;
  $9 = ($8|0)==(2);
  if ($9) {
   _loadImageDelay(12,2);
  }
 }
 _playFlaMovie(309408);
 _loadMenuImage(1);
 _mainMenu();
 STACKTOP = sp;return;
}
function _initMCGA() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[47464>>1] = 1;
 STACKTOP = sp;return;
}
function _initSVGA() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[47464>>1] = 0;
 STACKTOP = sp;return;
}
function _initAll() {
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(204800)|0);
 HEAP32[39448>>2] = $0;
 $1 = (_malloc(5000)|0);
 HEAP32[44344>>2] = $1;
 HEAP32[44336>>2] = $1;
 dest=44424+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=4294967295|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset((122616|0),0,510)|0;
 HEAP32[47496>>2] = 91;
 HEAP32[47488>>2] = -1;
 HEAP32[124376>>2] = 1;
 HEAP32[122480>>2] = -1;
 HEAP32[124384>>2] = -1;
 HEAP32[124392>>2] = -1;
 HEAP16[25896>>1] = 1;
 HEAP32[8>>2] = 136;
 HEAP32[47432>>2] = 0;
 HEAP32[47448>>2] = 0;
 HEAP32[47440>>2] = 639;
 HEAP32[47456>>2] = 479;
 _resetClip();
 HEAP16[25936>>1] = 0;
 HEAP16[25928>>1] = 0;
 _initResources();
 _initSVGA();
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 _initAll();
 _initEngine();
 _sdlClose();
 HEAP32[$vararg_buffer>>2] = 309376;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 309392;
 (_printf((309416|0),($vararg_buffer|0))|0);
 $3 = HEAP32[307392>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $3;
 (_printf((309456|0),($vararg_buffer2|0))|0);
 $4 = HEAP32[((308424 + 100|0))>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 (_printf((309480|0),($vararg_buffer5|0))|0);
 (_getchar()|0);
 STACKTOP = sp;return 0;
}
function _ITOA($number) {
 $number = $number|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numDigits = 0, $text = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $number;
 $numDigits = 1;
 $1 = $0;
 $2 = ($1|0)>=(10);
 if ($2) {
  $3 = $0;
  $4 = ($3|0)<=(99);
  if ($4) {
   $numDigits = 2;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $5 = $0;
  $6 = ($5|0)>=(100);
  if ($6) {
   $7 = $0;
   $8 = ($7|0)<=(999);
   if ($8) {
    $numDigits = 3;
   }
  }
 }
 $9 = $numDigits;
 $10 = (($9) + 1)|0;
 $11 = $10;
 $12 = (_malloc($11)|0);
 $text = $12;
 $13 = $text;
 $14 = $0;
 HEAP32[$vararg_buffer>>2] = $14;
 (_sprintf($13,309520,$vararg_buffer)|0);
 $15 = $text;
 STACKTOP = sp;return ($15|0);
}
function _plasmaEffectRenderFrame() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $dest = 0, $i = 0;
 var $j = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = 1;
 while(1) {
  $0 = $j;
  $1 = ($0|0)<(49);
  if (!($1)) {
   break;
  }
  $i = 1;
  while(1) {
   $2 = $i;
   $3 = ($2|0)<(319);
   if (!($3)) {
    break;
   }
   $4 = $i;
   $5 = (($4) - 1)|0;
   $6 = $j;
   $7 = (($6) - 1)|0;
   $8 = ($7*320)|0;
   $9 = (($5) + ($8))|0;
   $10 = HEAP32[309736>>2]|0;
   $11 = (($10) + ($9)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $c = $13;
   $14 = $i;
   $15 = (($14) + 0)|0;
   $16 = $j;
   $17 = (($16) - 1)|0;
   $18 = ($17*320)|0;
   $19 = (($15) + ($18))|0;
   $20 = HEAP32[309736>>2]|0;
   $21 = (($20) + ($19)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $c;
   $25 = $24 << 16 >> 16;
   $26 = (($25) + ($23))|0;
   $27 = $26&65535;
   $c = $27;
   $28 = $i;
   $29 = (($28) + 1)|0;
   $30 = $j;
   $31 = (($30) - 1)|0;
   $32 = ($31*320)|0;
   $33 = (($29) + ($32))|0;
   $34 = HEAP32[309736>>2]|0;
   $35 = (($34) + ($33)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $c;
   $39 = $38 << 16 >> 16;
   $40 = (($39) + ($37))|0;
   $41 = $40&65535;
   $c = $41;
   $42 = $i;
   $43 = (($42) - 1)|0;
   $44 = $j;
   $45 = (($44) + 0)|0;
   $46 = ($45*320)|0;
   $47 = (($43) + ($46))|0;
   $48 = HEAP32[309736>>2]|0;
   $49 = (($48) + ($47)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $c;
   $53 = $52 << 16 >> 16;
   $54 = (($53) + ($51))|0;
   $55 = $54&65535;
   $c = $55;
   $56 = $i;
   $57 = (($56) + 1)|0;
   $58 = $j;
   $59 = (($58) + 0)|0;
   $60 = ($59*320)|0;
   $61 = (($57) + ($60))|0;
   $62 = HEAP32[309736>>2]|0;
   $63 = (($62) + ($61)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $c;
   $67 = $66 << 16 >> 16;
   $68 = (($67) + ($65))|0;
   $69 = $68&65535;
   $c = $69;
   $70 = $i;
   $71 = (($70) - 1)|0;
   $72 = $j;
   $73 = (($72) + 1)|0;
   $74 = ($73*320)|0;
   $75 = (($71) + ($74))|0;
   $76 = HEAP32[309736>>2]|0;
   $77 = (($76) + ($75)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $c;
   $81 = $80 << 16 >> 16;
   $82 = (($81) + ($79))|0;
   $83 = $82&65535;
   $c = $83;
   $84 = $i;
   $85 = (($84) + 0)|0;
   $86 = $j;
   $87 = (($86) + 1)|0;
   $88 = ($87*320)|0;
   $89 = (($85) + ($88))|0;
   $90 = HEAP32[309736>>2]|0;
   $91 = (($90) + ($89)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $c;
   $95 = $94 << 16 >> 16;
   $96 = (($95) + ($93))|0;
   $97 = $96&65535;
   $c = $97;
   $98 = $i;
   $99 = (($98) + 1)|0;
   $100 = $j;
   $101 = (($100) + 1)|0;
   $102 = ($101*320)|0;
   $103 = (($99) + ($102))|0;
   $104 = HEAP32[309736>>2]|0;
   $105 = (($104) + ($103)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $c;
   $109 = $108 << 16 >> 16;
   $110 = (($109) + ($107))|0;
   $111 = $110&65535;
   $c = $111;
   $112 = $c;
   $113 = $112 << 16 >> 16;
   $114 = $113 >> 3;
   $115 = $c;
   $116 = $115 << 16 >> 16;
   $117 = $116 & 3;
   $118 = $117 << 13;
   $119 = $114 | $118;
   $120 = $119&65535;
   $c = $120;
   $121 = $c;
   $122 = $121 << 16 >> 16;
   $123 = $122 & 25856;
   $124 = ($123|0)!=(0);
   do {
    if (!($124)) {
     $125 = $j;
     $126 = ($125|0)>=(46);
     if (!($126)) {
      $127 = $c;
      $128 = $127 << 16 >> 16;
      $129 = ($128|0)>(0);
      if (!($129)) {
       break;
      }
     }
     $130 = $c;
     $131 = (($130) + -1)<<16>>16;
     $c = $131;
    }
   } while(0);
   $132 = $c;
   $133 = $132&255;
   $134 = $i;
   $135 = $j;
   $136 = (50 + ($135))|0;
   $137 = ($136*320)|0;
   $138 = (($134) + ($137))|0;
   $139 = HEAP32[309736>>2]|0;
   $140 = (($139) + ($138)|0);
   HEAP8[$140>>0] = $133;
   $141 = $i;
   $142 = (($141) + 1)|0;
   $i = $142;
  }
  $143 = $j;
  $144 = (($143) + 1)|0;
  $j = $144;
 }
 $145 = HEAP32[309736>>2]|0;
 $dest = $145;
 $146 = HEAP32[309736>>2]|0;
 $147 = (($146) + 16320|0);
 $src = $147;
 $i = 0;
 while(1) {
  $148 = $i;
  $149 = ($148|0)<(16000);
  if (!($149)) {
   break;
  }
  $150 = $src;
  $151 = (($150) + 1|0);
  $src = $151;
  $152 = HEAP8[$150>>0]|0;
  $153 = $dest;
  $154 = (($153) + 1|0);
  $dest = $154;
  HEAP8[$153>>0] = $152;
  $155 = $i;
  $156 = (($155) + 1)|0;
  $i = $156;
 }
 STACKTOP = sp;return;
}
function _processPlasmaEffect($top,$color) {
 $top = $top|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $in = 0, $j = 0, $max_value = 0, $out = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $top;
 $1 = $color;
 $2 = $1;
 $3 = (($2) + 15)|0;
 $4 = $3&255;
 $max_value = $4;
 _plasmaEffectRenderFrame();
 $5 = HEAP32[309736>>2]|0;
 $6 = (($5) + 1600|0);
 $in = $6;
 $7 = HEAP32[25952>>2]|0;
 $8 = $0;
 $9 = (25968 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $out = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(25);
  if (!($13)) {
   break;
  }
  $j = 0;
  while(1) {
   $14 = $j;
   $15 = HEAP16[309536>>1]|0;
   $16 = $15&65535;
   $17 = ($14|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $i;
   $19 = HEAP16[309536>>1]|0;
   $20 = $19&65535;
   $21 = Math_imul($18, $20)|0;
   $22 = $j;
   $23 = (($21) + ($22))|0;
   $24 = $in;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = (($27|0) / 2)&-1;
   $29 = $1;
   $30 = (($28) + ($29))|0;
   $31 = $30&255;
   $c = $31;
   $32 = $c;
   $33 = $32&255;
   $34 = $max_value;
   $35 = $34&255;
   $36 = ($33|0)>($35|0);
   if ($36) {
    $37 = $max_value;
    $c = $37;
   }
   $38 = $i;
   $39 = ($38*640)|0;
   $40 = $j;
   $41 = (($39) + ($40))|0;
   $42 = $41<<1;
   $target = $42;
   $43 = $c;
   $44 = $target;
   $45 = $out;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = $43;
   $47 = $c;
   $48 = $target;
   $49 = (($48) + 1)|0;
   $50 = $out;
   $51 = (($50) + ($49)|0);
   HEAP8[$51>>0] = $47;
   $52 = $c;
   $53 = $target;
   $54 = (($53) + 640)|0;
   $55 = $out;
   $56 = (($55) + ($54)|0);
   HEAP8[$56>>0] = $52;
   $57 = $c;
   $58 = $target;
   $59 = (($58) + 640)|0;
   $60 = (($59) + 1)|0;
   $61 = $out;
   $62 = (($61) + ($60)|0);
   HEAP8[$62>>0] = $57;
   $63 = $j;
   $64 = (($63) + 1)|0;
   $j = $64;
  }
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 STACKTOP = sp;return;
}
function _drawBox($left,$top,$right,$bottom) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $1;
 _drawLine($4,$5,$6,$7,79);
 $8 = $0;
 $9 = $1;
 $10 = $0;
 $11 = $3;
 _drawLine($8,$9,$10,$11,79);
 $12 = $2;
 $13 = $1;
 $14 = (($13) + 1)|0;
 $1 = $14;
 $15 = $2;
 $16 = $3;
 _drawLine($12,$14,$15,$16,73);
 $17 = $0;
 $18 = (($17) + 1)|0;
 $0 = $18;
 $19 = $3;
 $20 = $2;
 $21 = $3;
 _drawLine($18,$19,$20,$21,73);
 STACKTOP = sp;return;
}
function _drawButtonGfx($width,$topheight,$id,$value,$mode) {
 $width = $width|0;
 $topheight = $topheight|0;
 $id = $id|0;
 $value = $value|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bottom = 0, $bottom2 = 0, $dialText = 0, $left = 0, $newWidth = 0, $right = 0, $textSize = 0, $top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dialText = sp + 48|0;
 $0 = $width;
 $1 = $topheight;
 $2 = $id;
 $3 = $value;
 $4 = $mode;
 _memset(($dialText|0),0,256)|0;
 $5 = $0;
 $6 = HEAP16[309544>>1]|0;
 $7 = $6&65535;
 $8 = (($7|0) / 2)&-1;
 $9 = (($5) - ($8))|0;
 $left = $9;
 $10 = $0;
 $11 = HEAP16[309544>>1]|0;
 $12 = $11&65535;
 $13 = (($12|0) / 2)&-1;
 $14 = (($10) + ($13))|0;
 $right = $14;
 $15 = $1;
 $16 = (($15) - 25)|0;
 $top = $16;
 $17 = $1;
 $18 = (($17) + 25)|0;
 $bottom2 = $18;
 $bottom = $18;
 $19 = $4;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $94 = $left;
  $95 = $top;
  $96 = $right;
  $97 = $bottom;
  $98 = HEAP32[25944>>2]|0;
  $99 = $left;
  $100 = $top;
  $101 = HEAP32[25952>>2]|0;
  _blitBox($94,$95,$96,$97,$98,$99,$100,$101);
  $102 = $left;
  $103 = $top;
  $104 = $right;
  $105 = $bottom2;
  _drawTransparentBox($102,$103,$104,$105,4);
  $106 = $left;
  $107 = $top;
  $108 = $right;
  $109 = $bottom;
  _drawBox($106,$107,$108,$109);
  _setFontColor(15);
  _setFontParameters(2,8);
  $110 = $3;
  _getMenuText($110,$dialText);
  $111 = (_getTextSize($dialText)|0);
  $textSize = $111;
  $112 = $0;
  $113 = $textSize;
  $114 = (($113|0) / 2)&-1;
  $115 = (($112) - ($114))|0;
  $116 = $1;
  $117 = (($116) - 18)|0;
  _drawText($115,$117,$dialText);
  $118 = $left;
  $119 = $top;
  $120 = $right;
  $121 = $bottom;
  _copyBlockPhys($118,$119,$120,$121);
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = ($21|0)<=(5);
 if ($22) {
  $23 = $2;
  $24 = ($23|0)>=(1);
  if ($24) {
   $newWidth = 0;
   $25 = $2;
   switch ($25|0) {
   case 2:  {
    $34 = HEAP32[((308424 + 48|0))>>2]|0;
    $35 = ($34|0)>(255);
    if ($35) {
     HEAP32[((308424 + 48|0))>>2] = 255;
    }
    $36 = HEAP32[((308424 + 48|0))>>2]|0;
    $37 = ($36|0)<(0);
    if ($37) {
     HEAP32[((308424 + 48|0))>>2] = 0;
    }
    $38 = $left;
    $39 = $right;
    $40 = HEAP32[((308424 + 48|0))>>2]|0;
    $41 = (_crossDot($38,$39,255,$40)|0);
    $newWidth = $41;
    break;
   }
   case 3:  {
    $42 = HEAP32[((308424 + 60|0))>>2]|0;
    $43 = ($42|0)>(255);
    if ($43) {
     HEAP32[((308424 + 60|0))>>2] = 255;
    }
    $44 = HEAP32[((308424 + 60|0))>>2]|0;
    $45 = ($44|0)<(0);
    if ($45) {
     HEAP32[((308424 + 60|0))>>2] = 0;
    }
    $46 = $left;
    $47 = $right;
    $48 = HEAP32[((308424 + 60|0))>>2]|0;
    $49 = (_crossDot($46,$47,255,$48)|0);
    $newWidth = $49;
    break;
   }
   case 1:  {
    $26 = HEAP32[((308424 + 56|0))>>2]|0;
    $27 = ($26|0)>(255);
    if ($27) {
     HEAP32[((308424 + 56|0))>>2] = 255;
    }
    $28 = HEAP32[((308424 + 56|0))>>2]|0;
    $29 = ($28|0)<(0);
    if ($29) {
     HEAP32[((308424 + 56|0))>>2] = 0;
    }
    $30 = $left;
    $31 = $right;
    $32 = HEAP32[((308424 + 56|0))>>2]|0;
    $33 = (_crossDot($30,$31,255,$32)|0);
    $newWidth = $33;
    break;
   }
   case 4:  {
    $50 = HEAP32[((308424 + 64|0))>>2]|0;
    $51 = ($50|0)>(255);
    if ($51) {
     HEAP32[((308424 + 64|0))>>2] = 255;
    }
    $52 = HEAP32[((308424 + 64|0))>>2]|0;
    $53 = ($52|0)<(0);
    if ($53) {
     HEAP32[((308424 + 64|0))>>2] = 0;
    }
    $54 = $left;
    $55 = $right;
    $56 = HEAP32[((308424 + 64|0))>>2]|0;
    $57 = (_crossDot($54,$55,255,$56)|0);
    $newWidth = $57;
    break;
   }
   case 5:  {
    $58 = HEAP32[((308424 + 68|0))>>2]|0;
    $59 = ($58|0)>(255);
    if ($59) {
     HEAP32[((308424 + 68|0))>>2] = 255;
    }
    $60 = HEAP32[((308424 + 68|0))>>2]|0;
    $61 = ($60|0)<(0);
    if ($61) {
     HEAP32[((308424 + 68|0))>>2] = 0;
    }
    $62 = $left;
    $63 = $right;
    $64 = HEAP32[((308424 + 68|0))>>2]|0;
    $65 = (_crossDot($62,$63,255,$64)|0);
    $newWidth = $65;
    break;
   }
   default: {
   }
   }
   $66 = $top;
   _processPlasmaEffect($66,80);
   $67 = (_rand()|0);
   $68 = (($67|0) % 5)&-1;
   $69 = ($68|0)!=(0);
   if (!($69)) {
    $70 = (_rand()|0);
    $71 = (($70|0) % 140)&-1;
    $72 = ($71*10)|0;
    $73 = (($72) + 1900)|0;
    $74 = HEAP32[309736>>2]|0;
    $75 = (($74) + ($73)|0);
    HEAP8[$75>>0] = -1;
   }
   $76 = $newWidth;
   $77 = $top;
   $78 = $right;
   $79 = $bottom;
   _drawSplittedBox($76,$77,$78,$79,68);
  } else {
   label = 33;
  }
 } else {
  label = 33;
 }
 if ((label|0) == 33) {
  $80 = $top;
  _processPlasmaEffect($80,64);
  $81 = (_rand()|0);
  $82 = (($81|0) % 5)&-1;
  $83 = ($82|0)!=(0);
  if (!($83)) {
   $84 = (_rand()|0);
   $85 = (($84|0) % 320)&-1;
   $86 = ($85*10)|0;
   $87 = (($86) + 6400)|0;
   $88 = HEAP32[309736>>2]|0;
   $89 = (($88) + ($87)|0);
   HEAP8[$89>>0] = -1;
  }
 }
 $90 = $2;
 $91 = ($90|0)<=(5);
 if ($91) {
  $92 = $2;
  $93 = ($92|0)>=(1);
  if ($93) {
  }
 }
 $106 = $left;
 $107 = $top;
 $108 = $right;
 $109 = $bottom;
 _drawBox($106,$107,$108,$109);
 _setFontColor(15);
 _setFontParameters(2,8);
 $110 = $3;
 _getMenuText($110,$dialText);
 $111 = (_getTextSize($dialText)|0);
 $textSize = $111;
 $112 = $0;
 $113 = $textSize;
 $114 = (($113|0) / 2)&-1;
 $115 = (($112) - ($114))|0;
 $116 = $1;
 $117 = (($116) - 18)|0;
 _drawText($115,$117,$dialText);
 $118 = $left;
 $119 = $top;
 $120 = $right;
 $121 = $bottom;
 _copyBlockPhys($118,$119,$120,$121);
 STACKTOP = sp;return;
}
function _drawButton($menuSettings,$mode) {
 $menuSettings = $menuSettings|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $buttonNumber = 0;
 var $currentButton = 0, $localData = 0, $maxButton = 0, $menuItemId = 0, $menuItemValue = 0, $topHeight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $menuSettings;
 $1 = $mode;
 $2 = $0;
 $localData = $2;
 $3 = $localData;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $buttonNumber = $5;
 $6 = $localData;
 $7 = (($6) + 2|0);
 $localData = $7;
 $8 = $localData;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $maxButton = $10;
 $11 = $localData;
 $12 = (($11) + 2|0);
 $localData = $12;
 $13 = $localData;
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $topHeight = $15;
 $16 = $localData;
 $17 = (($16) + 4|0);
 $localData = $17;
 $18 = $topHeight;
 $19 = ($18|0)==(0);
 if ($19) {
  $topHeight = 35;
 } else {
  $20 = $topHeight;
  $21 = $maxButton;
  $22 = (($21) - 1)|0;
  $23 = ($22*6)|0;
  $24 = $maxButton;
  $25 = ($24*50)|0;
  $26 = (($23) + ($25))|0;
  $27 = (($26|0) / 2)&-1;
  $28 = (($20) - ($27))|0;
  $topHeight = $28;
 }
 $29 = $maxButton;
 $30 = ($29|0)<=(0);
 if ($30) {
  STACKTOP = sp;return;
 }
 $currentButton = 0;
 while(1) {
  $31 = $localData;
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&255;
  $menuItemId = $33;
  $34 = $localData;
  $35 = (($34) + 2|0);
  $localData = $35;
  $36 = $localData;
  $37 = HEAP16[$36>>1]|0;
  $menuItemValue = $37;
  $38 = $localData;
  $39 = (($38) + 2|0);
  $localData = $39;
  $40 = $1;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $currentButton;
   $43 = $42 << 24 >> 24;
   $44 = $buttonNumber;
   $45 = ($43|0)==($44|0);
   if ($45) {
    $46 = HEAP16[309536>>1]|0;
    $47 = $46&65535;
    $48 = $topHeight;
    $49 = $menuItemId;
    $50 = $49&255;
    $51 = $menuItemValue;
    $52 = $51&65535;
    _drawButtonGfx($47,$48,$50,$52,1);
   }
  } else {
   $53 = $currentButton;
   $54 = $53 << 24 >> 24;
   $55 = $buttonNumber;
   $56 = ($54|0)==($55|0);
   if ($56) {
    $57 = HEAP16[309536>>1]|0;
    $58 = $57&65535;
    $59 = $topHeight;
    $60 = $menuItemId;
    $61 = $60&255;
    $62 = $menuItemValue;
    $63 = $62&65535;
    _drawButtonGfx($58,$59,$61,$63,1);
   } else {
    $64 = HEAP16[309536>>1]|0;
    $65 = $64&65535;
    $66 = $topHeight;
    $67 = $menuItemId;
    $68 = $67&255;
    $69 = $menuItemValue;
    $70 = $69&65535;
    _drawButtonGfx($65,$66,$68,$70,0);
   }
  }
  $71 = $currentButton;
  $72 = (($71) + 1)<<24>>24;
  $currentButton = $72;
  $73 = $topHeight;
  $74 = (($73) + 56)|0;
  $topHeight = $74;
  _sdldelay(1);
  $75 = $currentButton;
  $76 = $75 << 24 >> 24;
  $77 = $maxButton;
  $78 = ($76|0)<($77|0);
  if (!($78)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _processMenu($menuSettings) {
 $menuSettings = $menuSettings|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buttonNeedRedraw = 0, $buttonReleased = 0, $currentButton = 0, $id = 0, $localData = 0, $localTime = 0, $maxButton = 0, $musicChanged = 0, $numEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $menuSettings;
 $2 = $1;
 $localData = $2;
 $buttonReleased = 1;
 $musicChanged = 0;
 $buttonNeedRedraw = 1;
 $3 = $localData;
 $4 = (($3) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $numEntry = $6;
 $currentButton = 0;
 $7 = HEAP32[25920>>2]|0;
 $localTime = $7;
 $8 = $numEntry;
 $9 = (($8) - 1)|0;
 $maxButton = $9;
 _readKeys();
 while(1) {
  $10 = $localData;
  $11 = ($10|0)==(309552|0);
  if ($11) {
   $12 = HEAP32[25920>>2]|0;
   $13 = $localTime;
   $14 = (($12) - ($13))|0;
   $15 = ($14|0)<=(11650);
   if (!($15)) {
    label = 9;
    break;
   }
   $16 = HEAP16[120304>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = ($17|0)==(46);
   if ($18) {
    $19 = HEAP16[122408>>1]|0;
    $20 = $19 << 16 >> 16;
    $21 = ($20|0)!=(32);
    if ($21) {
     label = 6;
     break;
    }
   }
  }
  $22 = HEAP16[122416>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = ($23|0)==(0);
  if ($24) {
   $buttonReleased = 1;
  }
  $25 = $buttonReleased;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = HEAP16[122416>>1]|0;
   HEAP16[122424>>1] = $27;
   $28 = HEAP16[122424>>1]|0;
   $29 = $28&255;
   $30 = $29&255;
   $31 = $30 & 2;
   $32 = ($31|0)!=(0);
   if ($32) {
    $33 = $currentButton;
    $34 = (($33) + 1)<<16>>16;
    $currentButton = $34;
    $35 = $currentButton;
    $36 = $35 << 16 >> 16;
    $37 = $numEntry;
    $38 = ($36|0)==($37|0);
    if ($38) {
     $currentButton = 0;
    }
    $buttonNeedRedraw = 1;
    $buttonReleased = 0;
   }
   $39 = HEAP16[122424>>1]|0;
   $40 = $39&255;
   $41 = $40&255;
   $42 = $41 & 1;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $currentButton;
    $45 = (($44) + -1)<<16>>16;
    $currentButton = $45;
    $46 = $currentButton;
    $47 = $46 << 16 >> 16;
    $48 = ($47|0)<(0);
    if ($48) {
     $49 = $maxButton;
     $50 = $49&65535;
     $currentButton = $50;
    }
    $buttonNeedRedraw = 1;
    $buttonReleased = 0;
   }
   $51 = $localData;
   $52 = (($51) + 16|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53 << 16 >> 16;
   $55 = ($54|0)<=(5);
   if ($55) {
    $56 = $localData;
    $57 = $currentButton;
    $58 = $57 << 16 >> 16;
    $59 = $58<<1;
    $60 = (($56) + ($59<<1)|0);
    $61 = (($60) + 8|0);
    $62 = HEAP16[$61>>1]|0;
    $id = $62;
    $63 = $id;
    $64 = $63 << 16 >> 16;
    switch ($64|0) {
    case 3:  {
     $95 = HEAP16[122424>>1]|0;
     $96 = $95&255;
     $97 = $96&255;
     $98 = $97 & 4;
     $99 = ($98|0)!=(0);
     if ($99) {
      $100 = HEAP32[((308424 + 60|0))>>2]|0;
      $101 = (($100) - 4)|0;
      HEAP32[((308424 + 60|0))>>2] = $101;
     }
     $102 = HEAP16[122424>>1]|0;
     $103 = $102&255;
     $104 = $103&255;
     $105 = $104 & 8;
     $106 = ($105|0)!=(0);
     if ($106) {
      $107 = HEAP32[((308424 + 60|0))>>2]|0;
      $108 = (($107) + 4)|0;
      HEAP32[((308424 + 60|0))>>2] = $108;
     }
     break;
    }
    case 1:  {
     $65 = HEAP16[122424>>1]|0;
     $66 = $65&255;
     $67 = $66&255;
     $68 = $67 & 4;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = HEAP32[((308424 + 56|0))>>2]|0;
      $71 = (($70) - 4)|0;
      HEAP32[((308424 + 56|0))>>2] = $71;
     }
     $72 = HEAP16[122424>>1]|0;
     $73 = $72&255;
     $74 = $73&255;
     $75 = $74 & 8;
     $76 = ($75|0)!=(0);
     if ($76) {
      $77 = HEAP32[((308424 + 56|0))>>2]|0;
      $78 = (($77) + 4)|0;
      HEAP32[((308424 + 56|0))>>2] = $78;
     }
     $79 = HEAP32[((308424 + 56|0))>>2]|0;
     _musicVolume($79);
     break;
    }
    case 4:  {
     $109 = HEAP16[122424>>1]|0;
     $110 = $109&255;
     $111 = $110&255;
     $112 = $111 & 4;
     $113 = ($112|0)!=(0);
     if ($113) {
      $114 = HEAP32[((308424 + 64|0))>>2]|0;
      $115 = (($114) - 4)|0;
      HEAP32[((308424 + 64|0))>>2] = $115;
     }
     $116 = HEAP16[122424>>1]|0;
     $117 = $116&255;
     $118 = $117&255;
     $119 = $118 & 8;
     $120 = ($119|0)!=(0);
     if ($120) {
      $121 = HEAP32[((308424 + 64|0))>>2]|0;
      $122 = (($121) + 4)|0;
      HEAP32[((308424 + 64|0))>>2] = $122;
     }
     break;
    }
    case 5:  {
     $123 = HEAP16[122424>>1]|0;
     $124 = $123&255;
     $125 = $124&255;
     $126 = $125 & 4;
     $127 = ($126|0)!=(0);
     if ($127) {
      $128 = HEAP32[((308424 + 68|0))>>2]|0;
      $129 = (($128) - 4)|0;
      HEAP32[((308424 + 68|0))>>2] = $129;
     }
     $130 = HEAP16[122424>>1]|0;
     $131 = $130&255;
     $132 = $131&255;
     $133 = $132 & 8;
     $134 = ($133|0)!=(0);
     if ($134) {
      $135 = HEAP32[((308424 + 68|0))>>2]|0;
      $136 = (($135) + 4)|0;
      HEAP32[((308424 + 68|0))>>2] = $136;
     }
     $137 = HEAP32[((308424 + 56|0))>>2]|0;
     _musicVolume($137);
     $138 = HEAP32[((308424 + 48|0))>>2]|0;
     _sampleVolume(-1,$138);
     break;
    }
    case 2:  {
     $80 = HEAP16[122424>>1]|0;
     $81 = $80&255;
     $82 = $81&255;
     $83 = $82 & 4;
     $84 = ($83|0)!=(0);
     if ($84) {
      $85 = HEAP32[((308424 + 48|0))>>2]|0;
      $86 = (($85) - 4)|0;
      HEAP32[((308424 + 48|0))>>2] = $86;
     }
     $87 = HEAP16[122424>>1]|0;
     $88 = $87&255;
     $89 = $88&255;
     $90 = $89 & 8;
     $91 = ($90|0)!=(0);
     if ($91) {
      $92 = HEAP32[((308424 + 48|0))>>2]|0;
      $93 = (($92) + 4)|0;
      HEAP32[((308424 + 48|0))>>2] = $93;
     }
     $94 = HEAP32[((308424 + 48|0))>>2]|0;
     _sampleVolume(-1,$94);
     break;
    }
    default: {
    }
    }
   }
  }
  $139 = $buttonNeedRedraw;
  $140 = ($139|0)==(1);
  if ($140) {
   $141 = $currentButton;
   $142 = $localData;
   HEAP16[$142>>1] = $141;
   $143 = $localData;
   _drawButton($143,0);
   while(1) {
    _readKeys();
    $144 = $localData;
    _drawButton($144,1);
    $145 = HEAP16[122416>>1]|0;
    $146 = $145 << 16 >> 16;
    $147 = ($146|0)==(0);
    if ($147) {
     $148 = HEAP16[122408>>1]|0;
     $149 = $148 << 16 >> 16;
     $150 = ($149|0)==(0);
     if ($150) {
      $151 = HEAP16[120304>>1]|0;
      $152 = $151 << 16 >> 16;
      $153 = ($152|0)==(0);
      $178 = $153;
     } else {
      $178 = 0;
     }
    } else {
     $178 = 0;
    }
    if (!($178)) {
     break;
    }
   }
   $buttonNeedRedraw = 0;
  } else {
   $154 = $musicChanged;
   $155 = ($154|0)!=(0);
   if ($155) {
   }
   $buttonNeedRedraw = 0;
   $156 = $localData;
   _drawButton($156,1);
   _readKeys();
   $157 = HEAP32[25944>>2]|0;
   $158 = HEAP32[25952>>2]|0;
   _copyScreen($157,$158);
  }
  $159 = HEAP16[122408>>1]|0;
  $160 = $159 << 16 >> 16;
  $161 = $160 & 2;
  $162 = ($161|0)!=(0);
  if ($162) {
   $179 = 0;
  } else {
   $163 = HEAP16[122408>>1]|0;
   $164 = $163 << 16 >> 16;
   $165 = $164 & 1;
   $166 = ($165|0)!=(0);
   $167 = $166 ^ 1;
   $179 = $167;
  }
  if (!($179)) {
   label = 67;
   break;
  }
 }
 if ((label|0) == 6) {
  $0 = 9999;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 else if ((label|0) == 9) {
  $0 = 9999;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 else if ((label|0) == 67) {
  $168 = $localData;
  $169 = (($168) + 10|0);
  $170 = $currentButton;
  $171 = $170 << 16 >> 16;
  $172 = $171<<1;
  $173 = (($169) + ($172<<1)|0);
  $174 = HEAP16[$173>>1]|0;
  $currentButton = $174;
  _readKeys();
  $175 = $currentButton;
  $176 = $175 << 16 >> 16;
  $0 = $176;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 return (0)|0;
}
function _advoptionsMenu() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cond = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = 0;
 $0 = HEAP32[25944>>2]|0;
 $1 = HEAP32[25952>>2]|0;
 _copyScreen($0,$1);
 while(1) {
  $2 = (_processMenu(309640)|0);
  $cond = ($2|0)==(26);
  if ($cond) {
   $ret = 1;
  } else {
  }
  $3 = $ret;
  $4 = ($3|0)!=(1);
  if (!($4)) {
   break;
  }
 }
 $5 = HEAP32[25944>>2]|0;
 $6 = HEAP32[25952>>2]|0;
 _copyScreen($5,$6);
 _flip();
 STACKTOP = sp;return 0;
}
function _savemanageMenu() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cond = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = 0;
 $0 = HEAP32[25944>>2]|0;
 $1 = HEAP32[25952>>2]|0;
 _copyScreen($0,$1);
 while(1) {
  $2 = (_processMenu(309672)|0);
  $cond = ($2|0)==(26);
  if ($cond) {
   $ret = 1;
  } else {
  }
  $3 = $ret;
  $4 = ($3|0)!=(1);
  if (!($4)) {
   break;
  }
 }
 $5 = HEAP32[25944>>2]|0;
 $6 = HEAP32[25952>>2]|0;
 _copyScreen($5,$6);
 _flip();
 STACKTOP = sp;return 0;
}
function _volumeMenu() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cond = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = 0;
 $0 = HEAP32[25944>>2]|0;
 $1 = HEAP32[25952>>2]|0;
 _copyScreen($0,$1);
 while(1) {
  $2 = (_processMenu(309696)|0);
  $cond = ($2|0)==(26);
  if ($cond) {
   $ret = 1;
  } else {
  }
  $3 = $ret;
  $4 = ($3|0)!=(1);
  if (!($4)) {
   break;
  }
 }
 $5 = HEAP32[25944>>2]|0;
 $6 = HEAP32[25952>>2]|0;
 _copyScreen($5,$6);
 _flip();
 STACKTOP = sp;return 0;
}
function _optionsMenu() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = 0;
 $0 = HEAP32[25944>>2]|0;
 $1 = HEAP32[25952>>2]|0;
 _copyScreen($0,$1);
 _stopSamples();
 while(1) {
  $2 = (_processMenu(309616)|0);
  switch ($2|0) {
  case 47:  {
   $7 = HEAP32[25944>>2]|0;
   $8 = HEAP32[25952>>2]|0;
   _copyScreen($7,$8);
   _flip();
   (_advoptionsMenu()|0);
   break;
  }
  case 30:  {
   $3 = HEAP32[25944>>2]|0;
   $4 = HEAP32[25952>>2]|0;
   _copyScreen($3,$4);
   _flip();
   (_volumeMenu()|0);
   break;
  }
  case 46:  {
   $5 = HEAP32[25944>>2]|0;
   $6 = HEAP32[25952>>2]|0;
   _copyScreen($5,$6);
   _flip();
   (_savemanageMenu()|0);
   break;
  }
  case 26: case 15:  {
   $ret = 1;
   break;
  }
  default: {
  }
  }
  $9 = $ret;
  $10 = ($9|0)!=(1);
  if (!($10)) {
   break;
  }
 }
 $11 = HEAP32[25944>>2]|0;
 $12 = HEAP32[25952>>2]|0;
 _copyScreen($11,$12);
 _flip();
 STACKTOP = sp;return 0;
}
function _mainMenu() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _stopSamples();
 $0 = HEAP32[25952>>2]|0;
 $1 = HEAP32[25944>>2]|0;
 _copyScreen($0,$1);
 $2 = HEAP32[309528>>2]|0;
 $3 = (_malloc($2)|0);
 HEAP32[309736>>2] = $3;
 $4 = HEAP32[309736>>2]|0;
 $5 = HEAP32[309528>>2]|0;
 _memset(($4|0),0,($5|0))|0;
 $6 = HEAP32[309736>>2]|0;
 $7 = HEAP32[361952>>2]|0;
 (_hqrGetEntry($6,$7,51)|0);
 while(1) {
  $8 = HEAP32[((308424 + 124|0))>>2]|0;
  $9 = ($8|0)!=(0);
  $10 = $9 ^ 1;
  if (!($10)) {
   break;
  }
  _initTextBank(0);
  _playTrackMusic(9);
  _stopSamples();
  $11 = (_processMenu(309552)|0);
  if ((($11|0) == 21)) {
   _continueGameMenu();
  } else if ((($11|0) == 20)) {
   _newGameMenu();
  } else if ((($11|0) == 23)) {
   $12 = HEAP32[25944>>2]|0;
   $13 = HEAP32[25952>>2]|0;
   _copyScreen($12,$13);
   _flip();
   HEAP16[((309616 + 10|0))>>1] = 26;
   (_optionsMenu()|0);
  } else if ((($11|0) == 22)) {
   HEAP32[((308424 + 124|0))>>2] = 1;
  } else if ((($11|0) == 9999)) {
   _loadMenuImage(1);
  }
  $14 = HEAP32[((308424 + 96|0))>>2]|0;
  _fpsCycles($14);
 }
 STACKTOP = sp;return;
}
function _giveupMenu() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $localMenu = 0, $menuId = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[25952>>2]|0;
 $2 = HEAP32[25944>>2]|0;
 _copyScreen($1,$2);
 _pauseSamples();
 $3 = HEAP32[((308424 + 104|0))>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $localMenu = 309576;
 } else {
  $localMenu = 309592;
 }
 while(1) {
  _initTextBank(0);
  $5 = $localMenu;
  $6 = (_processMenu($5)|0);
  $menuId = $6;
  $7 = HEAP32[122480>>2]|0;
  $8 = (($7) + 3)|0;
  _initTextBank($8);
  $9 = HEAP32[((308424 + 96|0))>>2]|0;
  _fpsCycles($9);
  $10 = $menuId;
  $11 = ($10|0)!=(27);
  if ($11) {
   $12 = $menuId;
   $13 = ($12|0)!=(28);
   $17 = $13;
  } else {
   $17 = 0;
  }
  if (!($17)) {
   break;
  }
 }
 $14 = $menuId;
 $15 = ($14|0)==(27);
 if ($15) {
  _stopSamples();
  $0 = 1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  _resumeSamples();
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _drawInfoMenu($left,$top) {
 $left = $left|0;
 $top = $top|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $boxBottom = 0, $boxLeft = 0, $boxRight = 0, $boxTop = 0, $i = 0, $newBoxLeft = 0, $newBoxLeft2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 _resetClip();
 $2 = $0;
 $3 = $2 << 16 >> 16;
 $4 = $1;
 $5 = $4 << 16 >> 16;
 $6 = $0;
 $7 = $6 << 16 >> 16;
 $8 = (($7) + 450)|0;
 $9 = $1;
 $10 = $9 << 16 >> 16;
 $11 = (($10) + 80)|0;
 _drawBox($3,$5,$8,$11);
 $12 = $0;
 $13 = $12 << 16 >> 16;
 $14 = (($13) + 1)|0;
 $15 = $1;
 $16 = $15 << 16 >> 16;
 $17 = (($16) + 1)|0;
 $18 = $0;
 $19 = $18 << 16 >> 16;
 $20 = (($19) + 449)|0;
 $21 = $1;
 $22 = $21 << 16 >> 16;
 $23 = (($22) + 79)|0;
 _drawSplittedBox($14,$17,$20,$23,0);
 $24 = $0;
 $25 = $24 << 16 >> 16;
 $26 = (($25) + 9)|0;
 $newBoxLeft2 = $26;
 $27 = $newBoxLeft2;
 $28 = $1;
 $29 = $28 << 16 >> 16;
 $30 = (($29) + 13)|0;
 $31 = HEAP32[((24264 + 16|0))>>2]|0;
 _drawSprite(0,$27,$30,$31);
 $32 = $0;
 $33 = $32 << 16 >> 16;
 $34 = (($33) + 325)|0;
 $boxRight = $34;
 $35 = $0;
 $36 = $35 << 16 >> 16;
 $37 = (($36) + 25)|0;
 $newBoxLeft = $37;
 $38 = $newBoxLeft;
 $39 = $boxRight;
 $40 = HEAP32[8>>2]|0;
 $41 = (($40) + 104|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_crossDot($38,$39,50,$42)|0);
 $boxLeft = $43;
 $44 = $1;
 $45 = $44 << 16 >> 16;
 $46 = (($45) + 10)|0;
 $boxTop = $46;
 $47 = $1;
 $48 = $47 << 16 >> 16;
 $49 = (($48) + 25)|0;
 $boxBottom = $49;
 $50 = $newBoxLeft;
 $51 = $boxTop;
 $52 = $boxLeft;
 $53 = $boxBottom;
 _drawSplittedBox($50,$51,$52,$53,91);
 $54 = $0;
 $55 = $54 << 16 >> 16;
 $56 = (($55) + 25)|0;
 $57 = $1;
 $58 = $57 << 16 >> 16;
 $59 = (($58) + 10)|0;
 $60 = $0;
 $61 = $60 << 16 >> 16;
 $62 = (($61) + 324)|0;
 $63 = $1;
 $64 = $63 << 16 >> 16;
 $65 = (($64) + 10)|0;
 $66 = (($65) + 14)|0;
 _drawBox($56,$59,$62,$66);
 $67 = HEAP8[((38000 + 70|0))>>0]|0;
 $68 = ($67<<24>>24)!=(0);
 if (!($68)) {
  $69 = HEAP8[((38000 + 4|0))>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = $newBoxLeft2;
   $73 = $1;
   $74 = $73 << 16 >> 16;
   $75 = (($74) + 36)|0;
   $76 = HEAP32[((24264 + 20|0))>>2]|0;
   _drawSprite(0,$72,$75,$76);
   $77 = HEAP16[24256>>1]|0;
   $78 = $77 << 16 >> 16;
   $79 = ($78|0)>(0);
   if ($79) {
    $80 = $newBoxLeft;
    $81 = $1;
    $82 = $81 << 16 >> 16;
    $83 = (($82) + 35)|0;
    $84 = $newBoxLeft;
    $85 = $boxRight;
    $86 = HEAP16[38320>>1]|0;
    $87 = $86 << 16 >> 16;
    $88 = (_crossDot($84,$85,80,$87)|0);
    $89 = $1;
    $90 = $89 << 16 >> 16;
    $91 = (($90) + 50)|0;
    _drawSplittedBox($80,$83,$88,$91,75);
   }
   $92 = $0;
   $93 = $92 << 16 >> 16;
   $94 = (($93) + 25)|0;
   $95 = $1;
   $96 = $95 << 16 >> 16;
   $97 = (($96) + 35)|0;
   $98 = $0;
   $99 = $98 << 16 >> 16;
   $100 = HEAP16[24256>>1]|0;
   $101 = $100 << 16 >> 16;
   $102 = ($101*80)|0;
   $103 = (($99) + ($102))|0;
   $104 = (($103) + 20)|0;
   $105 = $1;
   $106 = $105 << 16 >> 16;
   $107 = (($106) + 35)|0;
   $108 = (($107) + 15)|0;
   _drawBox($94,$97,$104,$108);
  }
 }
 $109 = $0;
 $110 = $109 << 16 >> 16;
 $111 = (($110) + 340)|0;
 $boxLeft = $111;
 $112 = $boxLeft;
 $113 = $1;
 $114 = $113 << 16 >> 16;
 $115 = (($114) + 15)|0;
 $116 = HEAP32[((24264 + 12|0))>>2]|0;
 _drawSprite(0,$112,$115,$116);
 _setFontColor(155);
 $117 = $0;
 $118 = $117 << 16 >> 16;
 $119 = (($118) + 370)|0;
 $120 = $1;
 $121 = $120 << 16 >> 16;
 $122 = (($121) + 5)|0;
 $123 = HEAP16[38296>>1]|0;
 $124 = $123 << 16 >> 16;
 $125 = (_ITOA($124)|0);
 _drawText($119,$122,$125);
 $126 = $boxLeft;
 $127 = $1;
 $128 = $127 << 16 >> 16;
 $129 = (($128) + 55)|0;
 $130 = HEAP32[((24264 + 24|0))>>2]|0;
 _drawSprite(0,$126,$129,$130);
 _setFontColor(155);
 $131 = $0;
 $132 = $131 << 16 >> 16;
 $133 = (($132) + 370)|0;
 $134 = $1;
 $135 = $134 << 16 >> 16;
 $136 = (($135) + 40)|0;
 $137 = HEAP16[38288>>1]|0;
 $138 = $137 << 16 >> 16;
 $139 = (_ITOA($138)|0);
 _drawText($133,$136,$139);
 $140 = HEAP16[38312>>1]|0;
 $141 = $140 << 16 >> 16;
 $142 = HEAP16[38304>>1]|0;
 $143 = $142 << 16 >> 16;
 $144 = ($141|0)>($143|0);
 if ($144) {
  $145 = HEAP16[38304>>1]|0;
  HEAP16[38312>>1] = $145;
 }
 $i = 0;
 while(1) {
  $146 = $i;
  $147 = HEAP16[38304>>1]|0;
  $148 = $147 << 16 >> 16;
  $149 = ($146|0)<($148|0);
  if (!($149)) {
   break;
  }
  $150 = $0;
  $151 = $150 << 16 >> 16;
  $152 = (($151) + 25)|0;
  $153 = $0;
  $154 = $153 << 16 >> 16;
  $155 = (($154) + 325)|0;
  $156 = $i;
  $157 = (_crossDot($152,$155,10,$156)|0);
  $158 = $1;
  $159 = $158 << 16 >> 16;
  $160 = (($159) + 58)|0;
  $161 = HEAP32[((24264 + 164|0))>>2]|0;
  _drawSprite(0,$157,$160,$161);
  $162 = $i;
  $163 = (($162) + 1)|0;
  $i = $163;
 }
 $i = 0;
 while(1) {
  $164 = $i;
  $165 = HEAP16[38312>>1]|0;
  $166 = $165 << 16 >> 16;
  $167 = ($164|0)<($166|0);
  if (!($167)) {
   break;
  }
  $168 = $0;
  $169 = $168 << 16 >> 16;
  $170 = (($169) + 25)|0;
  $171 = $0;
  $172 = $171 << 16 >> 16;
  $173 = (($172) + 325)|0;
  $174 = $i;
  $175 = (_crossDot($170,$173,10,$174)|0);
  $176 = (($175) + 2)|0;
  $177 = $1;
  $178 = $177 << 16 >> 16;
  $179 = (($178) + 60)|0;
  $180 = HEAP32[((24264 + 28|0))>>2]|0;
  _drawSprite(0,$176,$179,$180);
  $181 = $i;
  $182 = (($181) + 1)|0;
  $i = $182;
 }
 $183 = $0;
 $184 = $183 << 16 >> 16;
 $185 = $1;
 $186 = $185 << 16 >> 16;
 $187 = $0;
 $188 = $187 << 16 >> 16;
 $189 = (($188) + 450)|0;
 $190 = $1;
 $191 = $190 << 16 >> 16;
 $192 = (($191) + 135)|0;
 _copyBlockPhys($184,$186,$189,$192);
 STACKTOP = sp;return;
}
function _drawBehaviour($behaviour,$angle,$cantDrawBox) {
 $behaviour = $behaviour|0;
 $angle = $angle|0;
 $cantDrawBox = $cantDrawBox|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $boxBottom = 0, $boxLeft = 0, $boxRight = 0, $boxTop = 0, $currentAnim = 0, $currentAnimState = 0, $dialText = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dialText = sp + 32|0;
 $0 = $behaviour;
 $1 = $angle;
 $2 = $cantDrawBox;
 $3 = $0;
 $4 = $3 << 16 >> 16;
 $5 = ($4*110)|0;
 $6 = (($5) + 110)|0;
 $boxLeft = $6;
 $7 = $boxLeft;
 $8 = (($7) + 99)|0;
 $boxRight = $8;
 $boxTop = 110;
 $boxBottom = 229;
 $9 = $0;
 $10 = $9 << 16 >> 16;
 $11 = (25904 + ($10<<1)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = (39472 + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $currentAnim = $15;
 $16 = $0;
 $17 = $16 << 16 >> 16;
 $18 = (309744 + ($17<<1)|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $currentAnimState = $20;
 $21 = $currentAnimState;
 $22 = $currentAnim;
 $23 = HEAP32[309752>>2]|0;
 $24 = $0;
 $25 = $24 << 16 >> 16;
 $26 = (309760 + ($25<<3)|0);
 $27 = (_setModelAnimation($21,$22,$23,$26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $currentAnimState;
  $30 = (($29) + 1)|0;
  $currentAnimState = $30;
  $31 = $currentAnimState;
  $32 = $currentAnim;
  $33 = (_getNumKeyframes($32)|0);
  $34 = ($31|0)>=($33|0);
  if ($34) {
   $35 = $currentAnim;
   $36 = (_getStartKeyframe($35)|0);
   $currentAnimState = $36;
  }
  $37 = $currentAnimState;
  $38 = $37&65535;
  $39 = $0;
  $40 = $39 << 16 >> 16;
  $41 = (309744 + ($40<<1)|0);
  HEAP16[$41>>1] = $38;
 }
 $42 = $2;
 $43 = $42 << 16 >> 16;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $boxLeft;
  $46 = (($45) - 1)|0;
  $47 = $boxTop;
  $48 = (($47) - 1)|0;
  $49 = $boxRight;
  $50 = (($49) + 1)|0;
  $51 = $boxBottom;
  $52 = (($51) + 1)|0;
  _drawBox($46,$48,$50,$52);
 }
 _saveClip();
 _resetClip();
 $53 = $0;
 $54 = $53 << 16 >> 16;
 $55 = HEAP16[128>>1]|0;
 $56 = $55 << 16 >> 16;
 $57 = ($54|0)!=($56|0);
 if ($57) {
  $58 = $boxLeft;
  $59 = $boxTop;
  $60 = $boxRight;
  $61 = $boxBottom;
  _drawSplittedBox($58,$59,$60,$61,0);
  $77 = $boxLeft;
  $78 = $boxTop;
  $79 = $boxRight;
  $80 = $boxBottom;
  $81 = $1;
  $82 = HEAP32[309752>>2]|0;
  _renderBehaviourModel($77,$78,$79,$80,-600,$81,$82);
  $83 = $boxLeft;
  $84 = $boxTop;
  $85 = $boxRight;
  $86 = $boxBottom;
  _copyBlockPhys($83,$84,$85,$86);
  _copyBlockPhys(110,239,540,279);
  _loadClip();
  STACKTOP = sp;return;
 }
 $62 = $boxLeft;
 $63 = $boxTop;
 $64 = $boxRight;
 $65 = $boxBottom;
 _drawSplittedBox($62,$63,$64,$65,69);
 _drawSplittedBox(110,239,540,279,0);
 _drawBox(110,239,540,279);
 _setFontColor(15);
 $66 = HEAP16[128>>1]|0;
 $67 = $66 << 16 >> 16;
 $68 = ($67|0)==(2);
 if ($68) {
  $69 = HEAP16[25896>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = ($70|0)==(1);
  if ($71) {
   _getMenuText(4,$dialText);
  } else {
   label = 12;
  }
 } else {
  label = 12;
 }
 if ((label|0) == 12) {
  $72 = HEAP16[128>>1]|0;
  $73 = $72 << 16 >> 16;
  _getMenuText($73,$dialText);
 }
 $74 = (_getTextSize($dialText)|0);
 $75 = (650 - ($74))|0;
 $76 = (($75|0) / 2)&-1;
 _drawText($76,240,$dialText);
 $77 = $boxLeft;
 $78 = $boxTop;
 $79 = $boxRight;
 $80 = $boxBottom;
 $81 = $1;
 $82 = HEAP32[309752>>2]|0;
 _renderBehaviourModel($77,$78,$79,$80,-600,$81,$82);
 $83 = $boxLeft;
 $84 = $boxTop;
 $85 = $boxRight;
 $86 = $boxBottom;
 _copyBlockPhys($83,$84,$85,$86);
 _copyBlockPhys(110,239,540,279);
 _loadClip();
 STACKTOP = sp;return;
}
function _drawBehaviourMenu($angle) {
 $angle = $angle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $angle;
 _drawBox(100,100,550,290);
 _drawTransparentBox(101,101,549,289,2);
 $1 = HEAP16[309744>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = HEAP16[25904>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = (39472 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[309752>>2]|0;
 (_setAnimAtKeyframe($2,$6,$7,309760)|0);
 $8 = $0;
 _drawBehaviour(0,$8,0);
 $9 = HEAP16[((309744 + 2|0))>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = HEAP16[((25904 + 2|0))>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = (39472 + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[309752>>2]|0;
 (_setAnimAtKeyframe($10,$14,$15,((309760 + 8|0)))|0);
 $16 = $0;
 _drawBehaviour(1,$16,0);
 $17 = HEAP16[((309744 + 4|0))>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = HEAP16[((25904 + 4|0))>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = (39472 + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[309752>>2]|0;
 (_setAnimAtKeyframe($18,$22,$23,((309760 + 16|0)))|0);
 $24 = $0;
 _drawBehaviour(2,$24,0);
 $25 = HEAP16[((309744 + 6|0))>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = HEAP16[((25904 + 6|0))>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (39472 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[309752>>2]|0;
 (_setAnimAtKeyframe($26,$30,$31,((309760 + 24|0)))|0);
 $32 = $0;
 _drawBehaviour(3,$32,0);
 _drawInfoMenu(100,300);
 _copyBlockPhys(100,100,550,290);
 STACKTOP = sp;return;
}
function _processBehaviourMenu() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmpHeroBehaviour = 0, $tmpLanguageCD = 0, $tmpTextBank = 0, $tmpTime = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[128>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(4);
 if ($2) {
  _stopSamples();
  _setBehaviour(0);
 }
 $3 = HEAP32[8>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (23352 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[309752>>2] = $7;
 $8 = HEAP16[112>>1]|0;
 HEAP16[25904>>1] = $8;
 $9 = HEAP16[48>>1]|0;
 HEAP16[((25904 + 2|0))>>1] = $9;
 $10 = HEAP16[64>>1]|0;
 HEAP16[((25904 + 4|0))>>1] = $10;
 $11 = HEAP16[80>>1]|0;
 HEAP16[((25904 + 6|0))>>1] = $11;
 $12 = HEAP32[8>>2]|0;
 $13 = (($12) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14&65535;
 $16 = HEAP32[8>>2]|0;
 $17 = (($16) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) - 256)|0;
 $20 = $19&65535;
 _setActorAngleSafe($15,$20,50,124656);
 $21 = HEAP32[25952>>2]|0;
 $22 = HEAP32[25944>>2]|0;
 _copyScreen($21,$22);
 $23 = HEAP32[((308424 + 24|0))>>2]|0;
 $tmpLanguageCD = $23;
 HEAP32[((308424 + 24|0))>>2] = 0;
 $24 = HEAP32[122480>>2]|0;
 $tmpTextBank = $24;
 HEAP32[122480>>2] = -1;
 _initTextBank(0);
 $25 = HEAP32[8>>2]|0;
 $26 = (($25) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 _drawBehaviourMenu($27);
 $28 = HEAP16[128>>1]|0;
 $29 = $28 << 16 >> 16;
 $tmpHeroBehaviour = $29;
 $30 = HEAP16[128>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = (309744 + ($31<<1)|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 << 16 >> 16;
 $35 = HEAP16[128>>1]|0;
 $36 = $35 << 16 >> 16;
 $37 = (25904 + ($36<<1)|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 << 16 >> 16;
 $40 = (39472 + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[309752>>2]|0;
 $43 = HEAP16[128>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = (309760 + ($44<<3)|0);
 (_setAnimAtKeyframe($34,$41,$42,$45)|0);
 _readKeys();
 $46 = HEAP32[25920>>2]|0;
 $tmpTime = $46;
 while(1) {
  $47 = HEAP16[122408>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = $48 & 4;
  $50 = ($49|0)!=(0);
  if ($50) {
   $125 = 1;
  } else {
   $51 = HEAP16[120304>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = ($52|0)>=(59);
   if ($53) {
    $54 = HEAP16[120304>>1]|0;
    $55 = $54 << 16 >> 16;
    $56 = ($55|0)<=(62);
    $126 = $56;
   } else {
    $126 = 0;
   }
   $125 = $126;
  }
  if (!($125)) {
   break;
  }
  _readKeys();
  $57 = HEAP16[122416>>1]|0;
  HEAP16[122424>>1] = $57;
  $58 = HEAP16[122424>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = $59 & 8;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = HEAP16[128>>1]|0;
   $63 = (($62) + 1)<<16>>16;
   HEAP16[128>>1] = $63;
  }
  $64 = HEAP16[122424>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = $65 & 4;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = HEAP16[128>>1]|0;
   $69 = (($68) + -1)<<16>>16;
   HEAP16[128>>1] = $69;
  }
  $70 = HEAP16[128>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = ($71|0)<(0);
  if ($72) {
   HEAP16[128>>1] = 3;
  }
  $73 = HEAP16[128>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = ($74|0)>=(4);
  if ($75) {
   HEAP16[128>>1] = 0;
  }
  $76 = $tmpHeroBehaviour;
  $77 = HEAP16[128>>1]|0;
  $78 = $77 << 16 >> 16;
  $79 = ($76|0)!=($78|0);
  if ($79) {
   $80 = $tmpHeroBehaviour;
   $81 = $80&65535;
   $82 = HEAP32[8>>2]|0;
   $83 = (($82) + 60|0);
   $84 = HEAP32[$83>>2]|0;
   _drawBehaviour($81,$84,1);
   $85 = HEAP16[128>>1]|0;
   $86 = $85 << 16 >> 16;
   $tmpHeroBehaviour = $86;
   $87 = HEAP32[8>>2]|0;
   $88 = (($87) + 60|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $89&65535;
   $91 = HEAP32[8>>2]|0;
   $92 = (($91) + 60|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) - 256)|0;
   $95 = $94&65535;
   _setActorAngleSafe($90,$95,50,124656);
   $96 = HEAP16[128>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = (309744 + ($97<<1)|0);
   $99 = HEAP16[$98>>1]|0;
   $100 = $99 << 16 >> 16;
   $101 = HEAP16[128>>1]|0;
   $102 = $101 << 16 >> 16;
   $103 = (25904 + ($102<<1)|0);
   $104 = HEAP16[$103>>1]|0;
   $105 = $104 << 16 >> 16;
   $106 = (39472 + ($105<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = HEAP32[309752>>2]|0;
   $109 = HEAP16[128>>1]|0;
   $110 = $109 << 16 >> 16;
   $111 = (309760 + ($110<<3)|0);
   (_setAnimAtKeyframe($100,$107,$108,$111)|0);
   while(1) {
    $112 = HEAP16[122416>>1]|0;
    $113 = ($112<<16>>16)!=(0);
    if (!($113)) {
     break;
    }
    _readKeys();
    $114 = HEAP16[128>>1]|0;
    _drawBehaviour($114,-1,1);
   }
  }
  $115 = HEAP16[128>>1]|0;
  _drawBehaviour($115,-1,1);
  _fpsCycles(50);
  $116 = HEAP32[25920>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[25920>>2] = $117;
 }
 $118 = $tmpTime;
 HEAP32[25920>>2] = $118;
 $119 = HEAP16[128>>1]|0;
 $120 = $119 << 16 >> 16;
 _setBehaviour($120);
 _initEngineProjections();
 $121 = $tmpTextBank;
 HEAP32[122480>>2] = $121;
 $122 = HEAP32[122480>>2]|0;
 $123 = (($122) + 3)|0;
 _initTextBank($123);
 $124 = $tmpLanguageCD;
 HEAP32[((308424 + 24|0))>>2] = $124;
 STACKTOP = sp;return;
}
function _drawMagicItemsBox($left,$top,$right,$bottom,$color) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $color;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $1;
 $9 = $4;
 _drawLine($5,$6,$7,$8,$9);
 $10 = $0;
 $11 = $1;
 $12 = $0;
 $13 = $3;
 $14 = $4;
 _drawLine($10,$11,$12,$13,$14);
 $15 = $2;
 $16 = $1;
 $17 = (($16) + 1)|0;
 $1 = $17;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 _drawLine($15,$17,$18,$19,$20);
 $21 = $0;
 $22 = (($21) + 1)|0;
 $0 = $22;
 $23 = $3;
 $24 = $2;
 $25 = $3;
 $26 = $4;
 _drawLine($22,$23,$24,$25,$26);
 STACKTOP = sp;return;
}
function _drawItem($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $bottom = 0, $itemX = 0, $itemY = 0, $left = 0, $right = 0, $top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $item;
 $1 = $0;
 $2 = (($1|0) / 4)&-1;
 $3 = ($2*85)|0;
 $4 = (($3) + 64)|0;
 $itemX = $4;
 $5 = $0;
 $6 = $5 & 3;
 $7 = ($6*75)|0;
 $8 = (($7) + 52)|0;
 $itemY = $8;
 $9 = $itemX;
 $10 = (($9) - 37)|0;
 $left = $10;
 $11 = $itemX;
 $12 = (($11) + 37)|0;
 $right = $12;
 $13 = $itemY;
 $14 = (($13) - 32)|0;
 $top = $14;
 $15 = $itemY;
 $16 = (($15) + 32)|0;
 $bottom = $16;
 $17 = $left;
 $18 = $top;
 $19 = $right;
 $20 = $bottom;
 $21 = HEAP32[309792>>2]|0;
 $22 = $0;
 $23 = ($21|0)==($22|0);
 if ($23) {
  $24 = HEAP32[309800>>2]|0;
  $26 = $24;
 } else {
  $26 = 0;
 }
 $25 = $26&255;
 _drawSplittedBox($17,$18,$19,$20,$25);
 $27 = $0;
 $28 = (38000 + ($27)|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = HEAP8[((38000 + 70|0))>>0]|0;
  $33 = ($32<<24>>24)!=(0);
  if (!($33)) {
   $34 = $0;
   $35 = ($34|0)<(28);
   if ($35) {
    $36 = $0;
    $37 = (38656 + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    _prepareIsoModel($38);
    $39 = $0;
    $40 = (122616 + ($39<<1)|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = $41 << 16 >> 16;
    $43 = (($42) + 8)|0;
    $44 = $43&65535;
    HEAP16[$40>>1] = $44;
    $45 = $itemX;
    $46 = $itemY;
    $47 = $0;
    $48 = (38656 + ($47<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $0;
    $51 = (122616 + ($50<<1)|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 << 16 >> 16;
    _renderInventoryItem($45,$46,$49,$53,15000);
    $54 = $0;
    $55 = ($54|0)==(15);
    if ($55) {
     _setFontColor(15);
     $56 = $left;
     $57 = (($56) + 3)|0;
     $58 = $top;
     $59 = (($58) + 32)|0;
     $60 = HEAP16[38328>>1]|0;
     $61 = $60 << 16 >> 16;
     $62 = (_ITOA($61)|0);
     _drawText($57,$59,$62);
    }
   }
  }
 }
 $63 = $left;
 $64 = $top;
 $65 = $right;
 $66 = $bottom;
 _drawBox($63,$64,$65,$66);
 $67 = $left;
 $68 = $top;
 $69 = $right;
 $70 = $bottom;
 _copyBlockPhys($67,$68,$69,$70);
 STACKTOP = sp;return;
}
function _drawInventoryItems() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _drawTransparentBox(17,10,622,320,4);
 _drawBox(17,10,622,320);
 _drawMagicItemsBox(110,18,188,311,75);
 _copyBlockPhys(17,10,622,320);
 $item = 0;
 while(1) {
  $0 = $item;
  $1 = ($0|0)<(28);
  if (!($1)) {
   break;
  }
  $2 = $item;
  _drawItem($2);
  $3 = $item;
  $4 = (($3) + 1)|0;
  $item = $4;
 }
 STACKTOP = sp;return;
}
function _processInventoryMenu() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bx = 0, $di = 0, $prevSelectedItem = 0;
 var $tmpAlphaLight = 0, $tmpBetaLight = 0, $tmpLanguageCD = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $di = 1;
 $0 = HEAP32[34080>>2]|0;
 $tmpAlphaLight = $0;
 $1 = HEAP32[34088>>2]|0;
 $tmpBetaLight = $1;
 $2 = HEAP32[25952>>2]|0;
 $3 = HEAP32[25944>>2]|0;
 _copyScreen($2,$3);
 _setLightVector(896,950,0);
 HEAP32[309800>>2] = 68;
 $4 = HEAP16[38312>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ($5|0)>(0);
 if ($6) {
  HEAP8[((38000 + 27|0))>>0] = 1;
 }
 _drawInventoryItems();
 $7 = HEAP32[((308424 + 24|0))>>2]|0;
 $tmpLanguageCD = $7;
 HEAP32[((308424 + 24|0))>>2] = 0;
 _initTextBank(2);
 $bx = 3;
 _setFontCrossColor(4);
 _initDialogueBox();
 while(1) {
  $8 = HEAP16[120304>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = ($9|0)!=(1);
  if (!($10)) {
   break;
  }
  _readKeys();
  $11 = HEAP32[309792>>2]|0;
  $prevSelectedItem = $11;
  $12 = $di;
  $13 = ($12|0)!=(0);
  if ($13) {
   HEAP32[34000>>2] = 0;
   HEAP16[122424>>1] = 0;
   HEAP32[33984>>2] = 0;
   $25 = HEAP16[122416>>1]|0;
   $26 = ($25<<16>>16)!=(0);
   if (!($26)) {
    $27 = HEAP16[122408>>1]|0;
    $28 = ($27<<16>>16)!=(0);
    if (!($28)) {
     $di = 0;
    }
   }
  } else {
   $14 = HEAP16[122416>>1]|0;
   HEAP16[122424>>1] = $14;
   $15 = HEAP16[122408>>1]|0;
   $16 = $15 << 16 >> 16;
   HEAP32[33984>>2] = $16;
   $17 = HEAP16[120304>>1]|0;
   $18 = $17 << 16 >> 16;
   HEAP32[34000>>2] = $18;
   $19 = HEAP16[122424>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = ($20|0)!=(0);
   if ($21) {
    label = 8;
   } else {
    $22 = HEAP16[122408>>1]|0;
    $23 = $22 << 16 >> 16;
    $24 = ($23|0)!=(0);
    if ($24) {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    label = 0;
    $di = 1;
   }
  }
  $29 = HEAP32[34000>>2]|0;
  $30 = ($29|0)==(1);
  if ($30) {
   label = 16;
   break;
  }
  $31 = HEAP32[33984>>2]|0;
  $32 = $31 & 32;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 16;
   break;
  }
  $34 = HEAP16[122424>>1]|0;
  $35 = $34 << 16 >> 16;
  $36 = $35 & 2;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = HEAP32[309792>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[309792>>2] = $39;
   $40 = HEAP32[309792>>2]|0;
   $41 = ($40|0)>=(28);
   if ($41) {
    HEAP32[309792>>2] = 0;
   }
   $42 = $prevSelectedItem;
   _drawItem($42);
   $bx = 3;
  }
  $43 = HEAP16[122424>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $44 & 1;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = HEAP32[309792>>2]|0;
   $48 = (($47) + -1)|0;
   HEAP32[309792>>2] = $48;
   $49 = HEAP32[309792>>2]|0;
   $50 = ($49|0)<(0);
   if ($50) {
    HEAP32[309792>>2] = 27;
   }
   $51 = $prevSelectedItem;
   _drawItem($51);
   $bx = 3;
  }
  $52 = HEAP16[122424>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = $53 & 4;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = HEAP32[309792>>2]|0;
   $57 = (($56) - 4)|0;
   HEAP32[309792>>2] = $57;
   $58 = HEAP32[309792>>2]|0;
   $59 = ($58|0)<(0);
   if ($59) {
    $60 = HEAP32[309792>>2]|0;
    $61 = (($60) + 28)|0;
    HEAP32[309792>>2] = $61;
   }
   $62 = $prevSelectedItem;
   _drawItem($62);
   $bx = 3;
  }
  $63 = HEAP16[122424>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = $64 & 8;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = HEAP32[309792>>2]|0;
   $68 = (($67) + 4)|0;
   HEAP32[309792>>2] = $68;
   $69 = HEAP32[309792>>2]|0;
   $70 = ($69|0)>=(28);
   if ($70) {
    $71 = HEAP32[309792>>2]|0;
    $72 = (($71) - 28)|0;
    HEAP32[309792>>2] = $72;
   }
   $73 = $prevSelectedItem;
   _drawItem($73);
   $bx = 3;
  }
  $74 = $bx;
  $75 = ($74|0)==(3);
  if ($75) {
   _initInventoryDialogueBox();
   $76 = HEAP32[309792>>2]|0;
   $77 = (38000 + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = ($79|0)==(1);
   if ($80) {
    $81 = HEAP8[((38000 + 70|0))>>0]|0;
    $82 = ($81<<24>>24)!=(0);
    if ($82) {
     label = 38;
    } else {
     $83 = HEAP32[309792>>2]|0;
     $84 = ($83|0)<(28);
     if ($84) {
      $85 = HEAP32[309792>>2]|0;
      $86 = (($85) + 100)|0;
      _initText($86);
     } else {
      label = 38;
     }
    }
   } else {
    label = 38;
   }
   if ((label|0) == 38) {
    label = 0;
    _initText(128);
   }
   $bx = 0;
  }
  $87 = $bx;
  $88 = ($87|0)!=(2);
  if ($88) {
   $89 = (_printText10()|0);
   $bx = $89;
  }
  $90 = $bx;
  $91 = ($90|0)==(0);
  if ($91) {
   label = 44;
  } else {
   $92 = $bx;
   $93 = ($92|0)==(2);
   if ($93) {
    label = 44;
   }
  }
  if ((label|0) == 44) {
   label = 0;
   _sdldelay(15);
  }
  $94 = HEAP32[33984>>2]|0;
  $95 = $94 & 1;
  $96 = ($95|0)!=(0);
  if ($96) {
   $97 = $bx;
   $98 = ($97|0)==(2);
   if ($98) {
    _initInventoryDialogueBox();
    $bx = 0;
   } else {
    $99 = HEAP32[309792>>2]|0;
    $100 = (38000 + ($99)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = ($102|0)==(1);
    do {
     if ($103) {
      $104 = HEAP8[((38000 + 70|0))>>0]|0;
      $105 = ($104<<24>>24)!=(0);
      if (!($105)) {
       $106 = HEAP32[309792>>2]|0;
       $107 = ($106|0)<(28);
       if (!($107)) {
        break;
       }
       _initInventoryDialogueBox();
       $108 = HEAP32[309792>>2]|0;
       $109 = (($108) + 100)|0;
       _initText($109);
      }
     }
    } while(0);
   }
  }
  $110 = HEAP32[309792>>2]|0;
  _drawItem($110);
  $111 = HEAP32[33984>>2]|0;
  $112 = $111 & 2;
  $113 = ($112|0)!=(0);
  if ($113) {
   $114 = HEAP32[309792>>2]|0;
   $115 = (38000 + ($114)|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = ($117|0)==(1);
   if ($118) {
    $119 = HEAP8[((38000 + 70|0))>>0]|0;
    $120 = ($119<<24>>24)!=(0);
    if (!($120)) {
     $121 = HEAP32[309792>>2]|0;
     $122 = ($121|0)<(28);
     if ($122) {
      label = 58;
      break;
     }
    }
   }
  }
 }
 if ((label|0) == 16) {
 }
 else if ((label|0) == 58) {
  $123 = HEAP32[309792>>2]|0;
  HEAP32[34008>>2] = $123;
  HEAP32[309800>>2] = 91;
  $124 = HEAP32[309792>>2]|0;
  _drawItem($124);
 }
 HEAP32[123288>>2] = 0;
 $125 = $tmpAlphaLight;
 HEAP32[34080>>2] = $125;
 $126 = $tmpBetaLight;
 HEAP32[34088>>2] = $126;
 _initEngineProjections();
 $127 = $tmpLanguageCD;
 HEAP32[((308424 + 24|0))>>2] = $127;
 $128 = HEAP32[122480>>2]|0;
 $129 = (($128) + 3)|0;
 _initTextBank($129);
 while(1) {
  $130 = HEAP16[120304>>1]|0;
  $131 = $130 << 16 >> 16;
  $132 = ($131|0)!=(0);
  if ($132) {
   $133 = HEAP16[122408>>1]|0;
   $134 = $133 << 16 >> 16;
   $135 = ($134|0)!=(0);
   $136 = $135;
  } else {
   $136 = 0;
  }
  if (!($136)) {
   break;
  }
  _readKeys();
  _sdldelay(1);
 }
 STACKTOP = sp;return;
}
function _newGame() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmpFlagDisplayText = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _stopMusic();
 $0 = HEAP32[((308424 + 32|0))>>2]|0;
 $tmpFlagDisplayText = $0;
 HEAP32[((308424 + 32|0))>>2] = 1;
 _loadImage(15,1);
 HEAP32[123888>>2] = 0;
 HEAP32[123896>>2] = 1;
 _initTextBank(2);
 _textClipFull();
 _setFontCrossColor(15);
 _drawTextFullscreen(150);
 _readKeys();
 $1 = HEAP16[120304>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ($2|0)!=(1);
 if ($3) {
  _loadImage(17,1);
  _drawTextFullscreen(151);
  _readKeys();
  $4 = HEAP16[120304>>1]|0;
  $5 = $4 << 16 >> 16;
  $6 = ($5|0)!=(1);
  if ($6) {
   _loadImage(19,1);
   _drawTextFullscreen(152);
  }
 }
 HEAP32[123896>>2] = 0;
 _textClipSmall();
 HEAP32[123888>>2] = 1;
 _fadeToBlack(118808);
 _clearScreen();
 _flip();
 _playMidiMusic(1,0);
 _playFlaMovie(309880);
 _clearScreen();
 _flip();
 _setPalette(120312);
 $7 = $tmpFlagDisplayText;
 HEAP32[((308424 + 32|0))>>2] = $7;
 STACKTOP = sp;return;
}
function _showCredits() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $tmpLanguageCDIdx = 0, $tmpShadowMode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[122472>>2] = 1;
 $0 = HEAP32[((308424 + 108|0))>>2]|0;
 $tmpShadowMode = $0;
 $1 = HEAP32[((308424 + 24|0))>>2]|0;
 $tmpLanguageCDIdx = $1;
 HEAP32[((308424 + 108|0))>>2] = 0;
 HEAP32[((308424 + 24|0))>>2] = 0;
 _initEngineVars(1);
 HEAP32[34048>>2] = 119;
 HEAP32[34040>>2] = 119;
 (_gameEngineLoop()|0);
 HEAP32[122472>>2] = 0;
 $2 = $tmpShadowMode;
 HEAP32[((308424 + 108|0))>>2] = $2;
 $3 = $tmpLanguageCDIdx;
 HEAP32[((308424 + 24|0))>>2] = $3;
 _clearScreen();
 _flip();
 _playFlaMovie(309888);
 _clearScreen();
 _flip();
 _setPalette(120312);
 STACKTOP = sp;return;
}
function _drawSelectableCharacter($x,$y,$arg) {
 $x = $x|0;
 $y = $y|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $bottom = 0, $buffer = 0, $centerX = 0, $centerY = 0, $left = 0, $right = 0, $right2 = 0, $top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 40|0;
 $0 = $x;
 $1 = $y;
 $2 = $arg;
 $3 = $1;
 $4 = $0;
 $5 = ($4*14)|0;
 $6 = (($3) + ($5))|0;
 $7 = (309808 + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 HEAP8[$buffer>>0] = $8;
 $9 = $1;
 $10 = ($9*45)|0;
 $11 = (($10) + 25)|0;
 $centerX = $11;
 $12 = $centerX;
 $13 = (($12) - 20)|0;
 $left = $13;
 $14 = $centerX;
 $15 = (($14) + 20)|0;
 $right = $15;
 $16 = $0;
 $17 = ($16*56)|0;
 $18 = (($17) + 200)|0;
 $19 = (($18) - 25)|0;
 $top = $19;
 $20 = (($buffer) + 1|0);
 HEAP8[$20>>0] = 0;
 $21 = $0;
 $22 = ($21*56)|0;
 $23 = (($22) + 200)|0;
 $centerY = $23;
 $24 = $0;
 $25 = ($24*56)|0;
 $26 = (($25) + 200)|0;
 $27 = (($26) + 25)|0;
 $bottom = $27;
 $28 = $2;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $left;
  $31 = $top;
  $32 = $right;
  $33 = $bottom;
  _drawSplittedBox($30,$31,$32,$33,91);
 } else {
  $34 = $left;
  $35 = $top;
  $36 = $right;
  $37 = $bottom;
  $38 = HEAP32[25944>>2]|0;
  $39 = $left;
  $40 = $top;
  $41 = HEAP32[25952>>2]|0;
  _blitBox($34,$35,$36,$37,$38,$39,$40,$41);
  $42 = $right;
  $right2 = $42;
  $43 = $left;
  $44 = $top;
  $45 = $right2;
  $46 = $bottom;
  _drawTransparentBox($43,$44,$45,$46,4);
 }
 $47 = $left;
 $48 = $top;
 $49 = $right;
 $50 = $bottom;
 _drawBox($47,$48,$49,$50);
 $51 = $right;
 $right2 = $51;
 _setFontColor(15);
 $52 = $centerX;
 $53 = (_getTextSize($buffer)|0);
 $54 = (($53|0) / 2)&-1;
 $55 = (($52) - ($54))|0;
 $56 = $centerY;
 $57 = (($56) - 18)|0;
 _drawText($55,$57,$buffer);
 $58 = $left;
 $59 = $top;
 $60 = $right2;
 $61 = $bottom;
 _copyBlockPhys($58,$59,$60,$61);
 STACKTOP = sp;return;
}
function _drawSelectableCharacters() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x = 0;
 while(1) {
  $0 = $x;
  $1 = $0 << 24 >> 24;
  $2 = ($1|0)<(5);
  if (!($2)) {
   break;
  }
  $y = 0;
  while(1) {
   $3 = $y;
   $4 = $3 << 24 >> 24;
   $5 = ($4|0)<(14);
   if (!($5)) {
    break;
   }
   $6 = $x;
   $7 = $6 << 24 >> 24;
   $8 = $y;
   $9 = $8 << 24 >> 24;
   _drawSelectableCharacter($7,$9,0);
   $10 = $y;
   $11 = (($10) + 1)<<24>>24;
   $y = $11;
  }
  $12 = $x;
  $13 = (($12) + 1)<<24>>24;
  $x = $13;
 }
 STACKTOP = sp;return;
}
function _drawPlayerName($centerx,$top,$playerName,$type) {
 $centerx = $centerx|0;
 $top = $top|0;
 $playerName = $playerName|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $centerx;
 $1 = $top;
 $2 = $playerName;
 $3 = $type;
 STACKTOP = sp;return;
}
function _enterPlayerName($textIdx) {
 $textIdx = $textIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 8|0;
 $0 = $textIdx;
 while(1) {
  $1 = HEAP32[25944>>2]|0;
  $2 = HEAP32[25952>>2]|0;
  _copyScreen($1,$2);
  _flip();
  _initTextBank(0);
  $3 = $0;
  _getMenuText($3,$buffer);
  _setFontColor(15);
  $4 = (_getTextSize($buffer)|0);
  $5 = (($4|0) / 2)&-1;
  $6 = (320 - ($5))|0;
  _drawText($6,20,$buffer);
  _copyBlockPhys(0,0,639,99);
  $7 = HEAP8[124928>>0]|0;
  HEAP8[124672>>0] = $7;
  _drawPlayerName(320,100,124672,1);
  _drawSelectableCharacters();
  while(1) {
   _readKeys();
   while(1) {
    _readKeys();
    $8 = HEAP16[120304>>1]|0;
    $9 = ($8<<16>>16)!=(0);
    if (!($9)) {
     break;
    }
   }
   $10 = HEAP16[122408>>1]|0;
   $11 = ($10<<16>>16)!=(0);
   if (!($11)) {
    break;
   }
  }
  HEAP32[124936>>2] = 1;
  while(1) {
   _readKeys();
   $12 = HEAP16[122416>>1]|0;
   $13 = ($12<<16>>16)!=(0);
   if (!($13)) {
    break;
   }
  }
  while(1) {
   $14 = HEAP16[120304>>1]|0;
   $15 = ($14<<16>>16)!=(0);
   $16 = $15 ^ 1;
   if (!($16)) {
    break;
   }
   _readKeys();
   _drawPlayerName(320,100,124672,1);
  }
  $17 = HEAP16[120304>>1]|0;
  $18 = ($17<<16>>16)!=(0);
  if ($18) {
   break;
  }
 }
 HEAP32[124936>>2] = 0;
 $19 = HEAP32[25944>>2]|0;
 $20 = HEAP32[25952>>2]|0;
 _copyScreen($19,$20);
 _flip();
 STACKTOP = sp;return 1;
}
function _newGameMenu() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_enterPlayerName(42)|0);
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _initEngineVars(1);
 _newGame();
 $2 = (_gameEngineLoop()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  _showCredits();
 }
 $4 = HEAP32[25952>>2]|0;
 $5 = HEAP32[25944>>2]|0;
 _copyScreen($4,$5);
 while(1) {
  _readKeys();
  while(1) {
   _readKeys();
   $6 = HEAP16[122408>>1]|0;
   $7 = $6 << 16 >> 16;
   $8 = ($7|0)!=(0);
   if (!($8)) {
    break;
   }
  }
  $9 = HEAP16[120304>>1]|0;
  $10 = $9 << 16 >> 16;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _continueGameMenu() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _initEngineVars(-1);
 $0 = HEAP16[38256>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[34048>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   _newGame();
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  HEAP32[123896>>2] = 0;
  _textClipSmall();
  HEAP32[123888>>2] = 1;
 }
 $5 = (_gameEngineLoop()|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  _showCredits();
 }
 $7 = HEAP32[25952>>2]|0;
 $8 = HEAP32[25944>>2]|0;
 _copyScreen($7,$8);
 while(1) {
  _readKeys();
  while(1) {
   _readKeys();
   $9 = HEAP16[122408>>1]|0;
   $10 = $9 << 16 >> 16;
   $11 = ($10|0)!=(0);
   if (!($11)) {
    break;
   }
  }
  $12 = HEAP16[120304>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _getShadowPosition($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $blockPtr = 0, $brickShape = 0, $ptr = 0, $tempX = 0, $tempY = 0, $tempZ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $0;
 $4 = (($3) + 256)|0;
 $5 = $4 >> 9;
 $tempX = $5;
 $6 = $1;
 $7 = $6 >> 8;
 $tempY = $7;
 $8 = $2;
 $9 = (($8) + 256)|0;
 $10 = $9 >> 9;
 $tempZ = $10;
 $11 = HEAP32[39448>>2]|0;
 $12 = $tempY;
 $13 = $12<<1;
 $14 = (($11) + ($13)|0);
 $15 = $tempX;
 $16 = ($15*25)|0;
 $17 = $16<<1;
 $18 = (($14) + ($17)|0);
 $19 = $tempZ;
 $20 = $19 << 6;
 $21 = ($20*25)|0;
 $22 = $21<<1;
 $23 = (($18) + ($22)|0);
 $ptr = $23;
 while(1) {
  $24 = $tempY;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   break;
  }
  $26 = $ptr;
  $27 = HEAP16[$26>>1]|0;
  $28 = ($27<<16>>16)!=(0);
  if ($28) {
   label = 4;
   break;
  }
  $29 = $tempY;
  $30 = (($29) + -1)|0;
  $tempY = $30;
  $31 = $ptr;
  $32 = (($31) + -2|0);
  $ptr = $32;
 }
 if ((label|0) == 4) {
 }
 HEAP8[25888>>0] = 0;
 $33 = $tempX;
 HEAP32[47368>>2] = $33;
 $34 = $tempY;
 HEAP32[47328>>2] = $34;
 $35 = $tempZ;
 HEAP32[47376>>2] = $35;
 $36 = $0;
 $37 = $36&65535;
 HEAP16[44360>>1] = $37;
 $38 = $tempY;
 $39 = (($38) + 1)|0;
 $40 = $39 << 8;
 $41 = $40&65535;
 HEAP16[44368>>1] = $41;
 $42 = $2;
 $43 = $42&65535;
 HEAP16[44376>>1] = $43;
 $44 = $ptr;
 $45 = HEAP8[$44>>0]|0;
 $46 = ($45<<24>>24)!=(0);
 if (!($46)) {
  $64 = HEAP16[44360>>1]|0;
  $65 = $64 << 16 >> 16;
  HEAP32[25864>>2] = $65;
  $66 = HEAP16[44368>>1]|0;
  $67 = $66 << 16 >> 16;
  HEAP32[25872>>2] = $67;
  $68 = HEAP16[44376>>1]|0;
  $69 = $68 << 16 >> 16;
  HEAP32[25880>>2] = $69;
  STACKTOP = sp;return;
 }
 $47 = $ptr;
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (($49) - 1)|0;
 $51 = (_getBlockLibrary($50)|0);
 $52 = (($51) + 3|0);
 $53 = $ptr;
 $54 = (($53) + 1|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56<<2;
 $58 = (($52) + ($57)|0);
 $blockPtr = $58;
 $59 = $blockPtr;
 $60 = HEAP8[$59>>0]|0;
 $brickShape = $60;
 $61 = $brickShape;
 HEAP8[25888>>0] = $61;
 $62 = HEAP8[25888>>0]|0;
 $63 = $62 << 24 >> 24;
 _reajustActorPosition($63);
 $64 = HEAP16[44360>>1]|0;
 $65 = $64 << 16 >> 16;
 HEAP32[25864>>2] = $65;
 $66 = HEAP16[44368>>1]|0;
 $67 = $66 << 16 >> 16;
 HEAP32[25872>>2] = $67;
 $68 = HEAP16[44376>>1]|0;
 $69 = $68 << 16 >> 16;
 HEAP32[25880>>2] = $69;
 STACKTOP = sp;return;
}
function _setActorAngleSafe($startAngle,$endAngle,$stepAngle,$movePtr) {
 $startAngle = $startAngle|0;
 $endAngle = $endAngle|0;
 $stepAngle = $stepAngle|0;
 $movePtr = $movePtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $startAngle;
 $1 = $endAngle;
 $2 = $stepAngle;
 $3 = $movePtr;
 $4 = $0;
 $5 = $4 << 16 >> 16;
 $6 = $5 & 1023;
 $7 = $6&65535;
 $8 = $3;
 HEAP16[$8>>1] = $7;
 $9 = $1;
 $10 = $9 << 16 >> 16;
 $11 = $10 & 1023;
 $12 = $11&65535;
 $13 = $3;
 $14 = (($13) + 2|0);
 HEAP16[$14>>1] = $12;
 $15 = $2;
 $16 = $15 << 16 >> 16;
 $17 = $16 & 1023;
 $18 = $17&65535;
 $19 = $3;
 $20 = (($19) + 4|0);
 HEAP16[$20>>1] = $18;
 $21 = HEAP32[25920>>2]|0;
 $22 = $3;
 $23 = (($22) + 8|0);
 HEAP32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function _clearRealAngle($actorPtr) {
 $actorPtr = $actorPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorPtr;
 $1 = $0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&65535;
 $5 = $0;
 $6 = (($5) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7&65535;
 $9 = $0;
 $10 = (($9) + 212|0);
 _setActorAngleSafe($4,$8,0,$10);
 STACKTOP = sp;return;
}
function _setActorAngle($startAngle,$endAngle,$stepAngle,$movePtr) {
 $startAngle = $startAngle|0;
 $endAngle = $endAngle|0;
 $stepAngle = $stepAngle|0;
 $movePtr = $movePtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $startAngle;
 $1 = $endAngle;
 $2 = $stepAngle;
 $3 = $movePtr;
 $4 = $0;
 $5 = $3;
 HEAP16[$5>>1] = $4;
 $6 = $1;
 $7 = $3;
 $8 = (($7) + 2|0);
 HEAP16[$8>>1] = $6;
 $9 = $2;
 $10 = $3;
 $11 = (($10) + 4|0);
 HEAP16[$11>>1] = $9;
 $12 = HEAP32[25920>>2]|0;
 $13 = $3;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _getAngleAndSetTargetActorDistance($x1,$z1,$x2,$z2) {
 $x1 = $x1|0;
 $z1 = $z1|0;
 $x2 = $x2|0;
 $z2 = $z2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $destAngle = 0, $difX = 0, $difZ = 0, $finalAngle = 0, $flag = 0, $newX = 0, $newZ = 0, $startAngle = 0, $tmpEx = 0, $tmpX = 0, $tmpZ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x1;
 $2 = $z1;
 $3 = $x2;
 $4 = $z2;
 $5 = $4;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $tmpZ = $7;
 $difZ = $7;
 $8 = $tmpZ;
 $9 = $tmpZ;
 $10 = Math_imul($8, $9)|0;
 $newZ = $10;
 $11 = $3;
 $12 = $1;
 $13 = (($11) - ($12))|0;
 $tmpX = $13;
 $difX = $13;
 $14 = $tmpX;
 $15 = $tmpX;
 $16 = Math_imul($14, $15)|0;
 $newX = $16;
 $17 = $newX;
 $18 = $newZ;
 $19 = ($17|0)<($18|0);
 if ($19) {
  $20 = $difX;
  $tmpEx = $20;
  $21 = $difZ;
  $difX = $21;
  $22 = $tmpEx;
  $difZ = $22;
  $flag = 1;
 } else {
  $flag = 0;
 }
 $23 = $newX;
 $24 = $newZ;
 $25 = (($23) + ($24))|0;
 $26 = (+($25|0));
 $27 = $26;
 $28 = (+Math_sqrt((+$27)));
 $29 = (~~(($28)));
 HEAP32[44416>>2] = $29;
 $30 = HEAP32[44416>>2]|0;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $0 = 0;
  $83 = $0;
  STACKTOP = sp;return ($83|0);
 }
 $32 = $difZ;
 $33 = $32 << 14;
 $34 = HEAP32[44416>>2]|0;
 $35 = (($33|0) / ($34|0))&-1;
 $destAngle = $35;
 $startAngle = 0;
 while(1) {
  $36 = $startAngle;
  $37 = HEAP32[38976>>2]|0;
  $38 = (($37) + ($36<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $destAngle;
  $42 = ($40|0)>($41|0);
  if (!($42)) {
   break;
  }
  $43 = $startAngle;
  $44 = (($43) + 1)|0;
  $startAngle = $44;
 }
 $45 = $startAngle;
 $46 = HEAP32[38976>>2]|0;
 $47 = (($46) + ($45<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 $50 = $destAngle;
 $51 = ($49|0)!=($50|0);
 if ($51) {
  $52 = $startAngle;
  $53 = (($52) - 1)|0;
  $54 = HEAP32[38976>>2]|0;
  $55 = (($54) + ($53<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = $startAngle;
  $59 = HEAP32[38976>>2]|0;
  $60 = (($59) + ($58<<1)|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = (($57) + ($62))|0;
  $64 = (($63|0) / 2)&-1;
  $65 = $destAngle;
  $66 = ($64|0)<=($65|0);
  if ($66) {
   $67 = $startAngle;
   $68 = (($67) + -1)|0;
   $startAngle = $68;
  }
 }
 $69 = $startAngle;
 $70 = (128 + ($69))|0;
 $finalAngle = $70;
 $71 = $difX;
 $72 = ($71|0)<=(0);
 if ($72) {
  $73 = $finalAngle;
  $74 = (0 - ($73))|0;
  $finalAngle = $74;
 }
 $75 = $flag;
 $76 = $75 & 1;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $finalAngle;
  $79 = (0 - ($78))|0;
  $80 = (($79) + 256)|0;
  $finalAngle = $80;
 }
 $81 = $finalAngle;
 $82 = $81 & 1023;
 $0 = $82;
 $83 = $0;
 STACKTOP = sp;return ($83|0);
}
function _getRealAngle($movePtr) {
 $movePtr = $movePtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remainingAngle = 0;
 var $timePassed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $movePtr;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 if (!($5)) {
  $54 = $1;
  $55 = (($54) + 2|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $0 = $57;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $6 = HEAP32[25920>>2]|0;
 $7 = $1;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) - ($9))|0;
 $timePassed = $10;
 $11 = $timePassed;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($11|0)>=($15|0);
 if ($16) {
  $17 = $1;
  $18 = (($17) + 4|0);
  HEAP16[$18>>1] = 0;
  $19 = $1;
  $20 = (($19) + 2|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $0 = $22;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $23 = $1;
 $24 = (($23) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = $1;
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 $30 = (($26) - ($29))|0;
 $remainingAngle = $30;
 $31 = $remainingAngle;
 $32 = ($31|0)<(-512);
 if ($32) {
  $33 = $remainingAngle;
  $34 = (($33) + 1024)|0;
  $remainingAngle = $34;
 } else {
  $35 = $remainingAngle;
  $36 = ($35|0)>(512);
  if ($36) {
   $37 = $remainingAngle;
   $38 = (($37) - 1024)|0;
   $remainingAngle = $38;
  }
 }
 $39 = $timePassed;
 $40 = $remainingAngle;
 $41 = Math_imul($40, $39)|0;
 $remainingAngle = $41;
 $42 = $1;
 $43 = (($42) + 4|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 << 16 >> 16;
 $46 = $remainingAngle;
 $47 = (($46|0) / ($45|0))&-1;
 $remainingAngle = $47;
 $48 = $1;
 $49 = HEAP16[$48>>1]|0;
 $50 = $49 << 16 >> 16;
 $51 = $remainingAngle;
 $52 = (($51) + ($50))|0;
 $remainingAngle = $52;
 $53 = $remainingAngle;
 $0 = $53;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _getRealValue($movePtr) {
 $movePtr = $movePtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tempStep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $movePtr;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 if (!($5)) {
  $6 = $1;
  $7 = (($6) + 2|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $0 = $9;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $10 = HEAP32[25920>>2]|0;
 $11 = $1;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) - ($13))|0;
 $15 = $1;
 $16 = (($15) + 4|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = ($14|0)<($18|0);
 if ($19) {
  $26 = $1;
  $27 = (($26) + 2|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = $1;
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 << 16 >> 16;
  $33 = (($29) - ($32))|0;
  $tempStep = $33;
  $34 = HEAP32[25920>>2]|0;
  $35 = $1;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($34) - ($37))|0;
  $39 = $tempStep;
  $40 = Math_imul($39, $38)|0;
  $tempStep = $40;
  $41 = $1;
  $42 = (($41) + 4|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $tempStep;
  $46 = (($45|0) / ($44|0))&-1;
  $tempStep = $46;
  $47 = $tempStep;
  $48 = $1;
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = (($47) + ($50))|0;
  $0 = $51;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 } else {
  $20 = $1;
  $21 = (($20) + 4|0);
  HEAP16[$21>>1] = 0;
  $22 = $1;
  $23 = (($22) + 2|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $0 = $25;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _rotateActor($X,$Z,$angle) {
 $X = $X|0;
 $Z = $Z|0;
 $angle = $angle|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $radians = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Z;
 $2 = $angle;
 $3 = $2;
 $4 = (+($3|0));
 $5 = 6.2831853000000004 * $4;
 $6 = $5 / 1024.0;
 $radians = $6;
 $7 = $0;
 $8 = (+($7|0));
 $9 = $radians;
 $10 = (+Math_cos((+$9)));
 $11 = $8 * $10;
 $12 = $1;
 $13 = (+($12|0));
 $14 = $radians;
 $15 = (+Math_sin((+$14)));
 $16 = $13 * $15;
 $17 = $11 + $16;
 $18 = (~~(($17)));
 HEAP32[38952>>2] = $18;
 $19 = $0;
 $20 = (0 - ($19))|0;
 $21 = (+($20|0));
 $22 = $radians;
 $23 = (+Math_sin((+$22)));
 $24 = $21 * $23;
 $25 = $1;
 $26 = (+($25|0));
 $27 = $radians;
 $28 = (+Math_cos((+$27)));
 $29 = $26 * $28;
 $30 = $24 + $29;
 $31 = (~~(($30)));
 HEAP32[38968>>2] = $31;
 STACKTOP = sp;return;
}
function _getDistance2D($x1,$z1,$x2,$z2) {
 $x1 = $x1|0;
 $z1 = $z1|0;
 $x2 = $x2|0;
 $z2 = $z2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x1;
 $1 = $z1;
 $2 = $x2;
 $3 = $z2;
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $2;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = Math_imul($6, $9)|0;
 $11 = $3;
 $12 = $1;
 $13 = (($11) - ($12))|0;
 $14 = $3;
 $15 = $1;
 $16 = (($14) - ($15))|0;
 $17 = Math_imul($13, $16)|0;
 $18 = (($10) + ($17))|0;
 $19 = (+($18|0));
 $20 = $19;
 $21 = (+Math_sqrt((+$20)));
 $22 = (~~(($21)));
 STACKTOP = sp;return ($22|0);
}
function _getDistance3D($x1,$y1,$z1,$x2,$y2,$z2) {
 $x1 = $x1|0;
 $y1 = $y1|0;
 $z1 = $z1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 $z2 = $z2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x1;
 $1 = $y1;
 $2 = $z1;
 $3 = $x2;
 $4 = $y2;
 $5 = $z2;
 $6 = $3;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = $3;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = Math_imul($8, $11)|0;
 $13 = $4;
 $14 = $1;
 $15 = (($13) - ($14))|0;
 $16 = $4;
 $17 = $1;
 $18 = (($16) - ($17))|0;
 $19 = Math_imul($15, $18)|0;
 $20 = (($12) + ($19))|0;
 $21 = $5;
 $22 = $2;
 $23 = (($21) - ($22))|0;
 $24 = $5;
 $25 = $2;
 $26 = (($24) - ($25))|0;
 $27 = Math_imul($23, $26)|0;
 $28 = (($20) + ($27))|0;
 $29 = (+($28|0));
 $30 = $29;
 $31 = (+Math_sqrt((+$30)));
 $32 = (~~(($31)));
 STACKTOP = sp;return ($32|0);
}
function _moveActor($angleFrom,$angleTo,$speed,$movePtr) {
 $angleFrom = $angleFrom|0;
 $angleTo = $angleTo|0;
 $speed = $speed|0;
 $movePtr = $movePtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $from = 0, $numOfStep = 0, $numOfStepInt = 0, $to = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $angleFrom;
 $1 = $angleTo;
 $2 = $speed;
 $3 = $movePtr;
 $4 = $0;
 $5 = $4 & 1023;
 $6 = $5&65535;
 $from = $6;
 $7 = $1;
 $8 = $7 & 1023;
 $9 = $8&65535;
 $to = $9;
 $10 = $from;
 $11 = $3;
 HEAP16[$11>>1] = $10;
 $12 = $to;
 $13 = $3;
 $14 = (($13) + 2|0);
 HEAP16[$14>>1] = $12;
 $15 = $from;
 $16 = $15 << 16 >> 16;
 $17 = $to;
 $18 = $17 << 16 >> 16;
 $19 = (($16) - ($18))|0;
 $20 = $19 << 6;
 $21 = $20&65535;
 $numOfStep = $21;
 $22 = $numOfStep;
 $23 = $22 << 16 >> 16;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $numOfStep;
  $26 = $25 << 16 >> 16;
  $27 = (0 - ($26))|0;
  $numOfStepInt = $27;
 } else {
  $28 = $numOfStep;
  $29 = $28 << 16 >> 16;
  $numOfStepInt = $29;
 }
 $30 = $numOfStepInt;
 $31 = $30 >> 6;
 $numOfStepInt = $31;
 $32 = $2;
 $33 = $numOfStepInt;
 $34 = Math_imul($33, $32)|0;
 $numOfStepInt = $34;
 $35 = $numOfStepInt;
 $36 = $35 >> 8;
 $numOfStepInt = $36;
 $37 = $numOfStepInt;
 $38 = $37&65535;
 $39 = $3;
 $40 = (($39) + 4|0);
 HEAP16[$40>>1] = $38;
 $41 = HEAP32[25920>>2]|0;
 $42 = $3;
 $43 = (($42) + 8|0);
 HEAP32[$43>>2] = $41;
 STACKTOP = sp;return;
}
function _processActorMovements($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actor = 0, $aggresiveMode = 0, $newAngle = 0;
 var $tempAngle = 0, $tempAngle1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $actor;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $actor;
 $8 = (($7) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9&65535) >>> 8;
 $11 = $10 & 1;
 $12 = ($11<<16>>16)!=(0);
 if ($12) {
  $tempAngle = 0;
  $13 = $actor;
  $14 = (($13) + 68|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(1);
  if ($16) {
   STACKTOP = sp;return;
  }
  $17 = HEAP16[122424>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = $18 & 4;
  $20 = ($19|0)!=(0);
  if ($20) {
   $tempAngle = 256;
  }
  $21 = HEAP16[122424>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = $22 & 8;
  $24 = ($23|0)!=(0);
  if ($24) {
   $tempAngle = -256;
  }
  $25 = $actor;
  $26 = (($25) + 60|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $actor;
  $29 = (($28) + 60|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $tempAngle;
  $32 = $31 << 16 >> 16;
  $33 = (($30) + ($32))|0;
  $34 = $actor;
  $35 = (($34) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $actor;
  $38 = (($37) + 212|0);
  _moveActor($27,$33,$36,$38);
  $39 = HEAP16[122424>>1]|0;
  $40 = $39 << 16 >> 16;
  HEAP32[122432>>2] = $40;
  STACKTOP = sp;return;
 }
 $41 = $actor;
 $42 = HEAP16[$41>>1]|0;
 $43 = ($42&65535) >>> 10;
 $44 = $43 & 1;
 $45 = ($44<<16>>16)!=(0);
 if (!($45)) {
  $46 = $actor;
  $47 = (($46) + 68|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(1);
  if ($49) {
   $50 = $actor;
   $51 = (($50) + 212|0);
   $52 = (_getRealAngle($51)|0);
   $53 = $actor;
   $54 = (($53) + 60|0);
   HEAP32[$54>>2] = $52;
  }
 }
 $55 = $actor;
 $56 = (($55) + 68|0);
 $57 = HEAP32[$56>>2]|0;
 switch ($57|0) {
 case 6:  {
  $289 = $actor;
  $290 = (($289) + 88|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = (136 + (($291*232)|0)|0);
  $293 = (($292) + 36|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = $actor;
  $296 = (($295) + 36|0);
  HEAP32[$296>>2] = $294;
  $297 = $actor;
  $298 = (($297) + 88|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (136 + (($299*232)|0)|0);
  $301 = (($300) + 44|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = $actor;
  $304 = (($303) + 44|0);
  HEAP32[$304>>2] = $302;
  break;
 }
 case 2:  {
  $247 = $actor;
  $248 = (($247) + 36|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $actor;
  $251 = (($250) + 44|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $actor;
  $254 = (($253) + 88|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = (136 + (($255*232)|0)|0);
  $257 = (($256) + 36|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = $actor;
  $260 = (($259) + 88|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (136 + (($261*232)|0)|0);
  $263 = (($262) + 44|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (_getAngleAndSetTargetActorDistance($249,$252,$258,$264)|0);
  $newAngle = $265;
  $266 = $actor;
  $267 = HEAP16[$266>>1]|0;
  $268 = ($267&65535) >>> 10;
  $269 = $268 & 1;
  $270 = ($269<<16>>16)!=(0);
  if ($270) {
   $271 = $newAngle;
   $272 = $actor;
   $273 = (($272) + 60|0);
   HEAP32[$273>>2] = $271;
  } else {
   $274 = $actor;
   $275 = (($274) + 60|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = $newAngle;
   $278 = $actor;
   $279 = (($278) + 64|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $actor;
   $282 = (($281) + 212|0);
   _moveActor($276,$277,$280,$282);
  }
  break;
 }
 case 7:  {
  $305 = $actor;
  $306 = (($305) + 2|0);
  $307 = HEAP16[$306>>1]|0;
  $308 = ($307&65535) >>> 7;
  $309 = $308 & 1;
  $310 = ($309<<16>>16)!=(0);
  if (!($310)) {
   $311 = $actor;
   $312 = (($311) + 20|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $313 & 128;
   $315 = ($314|0)!=(0);
   if ($315) {
    $316 = $actor;
    $317 = (($316) + 60|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (_rand()|0);
    $320 = $319 & 256;
    $321 = $actor;
    $322 = (($321) + 60|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = (($323) - 256)|0;
    $325 = (($320) + ($324))|0;
    $326 = $325 & 1023;
    $327 = $actor;
    $328 = (($327) + 64|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = $actor;
    $331 = (($330) + 212|0);
    _moveActor($318,$326,$329,$331);
    $332 = (_rand()|0);
    $333 = (($332|0) % 300)&-1;
    $334 = HEAP32[25920>>2]|0;
    $335 = (($333) + ($334))|0;
    $336 = (($335) + 300)|0;
    $337 = $actor;
    $338 = (($337) + 72|0);
    HEAP32[$338>>2] = $336;
    $339 = $0;
    (_initAnim(0,0,-1,$339)|0);
   }
   $340 = $actor;
   $341 = (($340) + 212|0);
   $342 = (($341) + 4|0);
   $343 = HEAP16[$342>>1]|0;
   $344 = ($343<<16>>16)!=(0);
   if (!($344)) {
    $345 = $0;
    (_initAnim(1,0,-1,$345)|0);
    $346 = HEAP32[25920>>2]|0;
    $347 = $actor;
    $348 = (($347) + 72|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = ($346|0)>($349|0);
    if ($350) {
     $351 = $actor;
     $352 = (($351) + 60|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = (_rand()|0);
     $355 = $354 & 256;
     $356 = $actor;
     $357 = (($356) + 60|0);
     $358 = HEAP32[$357>>2]|0;
     $359 = (($358) - 256)|0;
     $360 = (($355) + ($359))|0;
     $361 = $360 & 1023;
     $362 = $actor;
     $363 = (($362) + 64|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = $actor;
     $366 = (($365) + 212|0);
     _moveActor($353,$361,$364,$366);
     $367 = (_rand()|0);
     $368 = (($367|0) % 300)&-1;
     $369 = HEAP32[25920>>2]|0;
     $370 = (($368) + ($369))|0;
     $371 = (($370) + 300)|0;
     $372 = $actor;
     $373 = (($372) + 72|0);
     HEAP32[$373>>2] = $371;
    }
   }
  }
  break;
 }
 case 3:  {
  $283 = $actor;
  $284 = (($283) + 120|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = ($285|0)==(-1);
  if ($286) {
   $287 = $actor;
   $288 = (($287) + 120|0);
   HEAP32[$288>>2] = 0;
  }
  break;
 }
 case 5: case 4:  {
  break;
 }
 case 0:  {
  break;
 }
 case 1:  {
  $58 = $0;
  $59 = ($58|0)!=(0);
  if (!($59)) {
   HEAP16[44352>>1] = 0;
   $60 = HEAP16[120304>>1]|0;
   $61 = $60 << 16 >> 16;
   $62 = ($61|0)==(17);
   if ($62) {
    HEAP16[44352>>1] = 1;
   }
   $63 = HEAP16[128>>1]|0;
   $64 = $63 << 16 >> 16;
   if ((($64|0) == 3)) {
    $110 = HEAP32[33984>>2]|0;
    $111 = $110 & 1;
    $112 = ($111|0)!=(0);
    if ($112) {
     $113 = $0;
     (_initAnim(16,0,-1,$113)|0);
    }
   } else if ((($64|0) == 2)) {
    $72 = HEAP32[33984>>2]|0;
    $73 = $72 & 1;
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = HEAP16[25896>>1]|0;
     $76 = ($75<<16>>16)!=(0);
     if ($76) {
      HEAP16[24240>>1] = 1;
      $77 = $actor;
      $78 = (($77) + 212|0);
      $79 = (_getRealAngle($78)|0);
      $80 = $actor;
      $81 = (($80) + 60|0);
      HEAP32[$81>>2] = $79;
      $82 = HEAP32[33992>>2]|0;
      $83 = $82 & 1;
      $84 = ($83|0)!=(0);
      if ($84) {
       $85 = $actor;
       $86 = (($85) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($87|0)!=(0);
       if (!($88)) {
        label = 31;
       }
      } else {
       label = 31;
      }
      if ((label|0) == 31) {
       $89 = (_rand()|0);
       $90 = (($89|0) % 3)&-1;
       $aggresiveMode = $90;
       $91 = $aggresiveMode;
       if ((($91|0) == 2)) {
        $94 = $0;
        (_initAnim(19,1,0,$94)|0);
       } else if ((($91|0) == 0)) {
        $92 = $0;
        (_initAnim(17,1,0,$92)|0);
       } else if ((($91|0) == 1)) {
        $93 = $0;
        (_initAnim(18,1,0,$93)|0);
       }
      }
     } else {
      $95 = HEAP16[122424>>1]|0;
      $96 = $95 << 16 >> 16;
      $97 = $96 & 8;
      $98 = ($97|0)!=(0);
      if ($98) {
       $99 = $0;
       (_initAnim(18,1,0,$99)|0);
      }
      $100 = HEAP16[122424>>1]|0;
      $101 = $100 << 16 >> 16;
      $102 = $101 & 4;
      $103 = ($102|0)!=(0);
      if ($103) {
       $104 = $0;
       (_initAnim(19,1,0,$104)|0);
      }
      $105 = HEAP16[122424>>1]|0;
      $106 = $105 << 16 >> 16;
      $107 = $106 & 1;
      $108 = ($107|0)!=(0);
      if ($108) {
       $109 = $0;
       (_initAnim(17,1,0,$109)|0);
      }
     }
    }
   } else if ((($64|0) == 0)) {
    $65 = HEAP32[33984>>2]|0;
    $66 = $65 & 1;
    $67 = ($66|0)!=(0);
    if ($67) {
     HEAP16[44352>>1] = 1;
    }
   } else if ((($64|0) == 1)) {
    $68 = HEAP32[33984>>2]|0;
    $69 = $68 & 1;
    $70 = ($69|0)!=(0);
    if ($70) {
     $71 = $0;
     (_initAnim(14,1,0,$71)|0);
    }
   }
  }
  $114 = HEAP32[33984>>2]|0;
  $115 = $114 & 8;
  $116 = ($115|0)!=(0);
  if ($116) {
   $117 = HEAP8[((38000 + 70|0))>>0]|0;
   $118 = ($117<<24>>24)!=(0);
   if (!($118)) {
    $119 = HEAP16[38336>>1]|0;
    $120 = $119 << 16 >> 16;
    $121 = ($120|0)==(0);
    if ($121) {
     $122 = HEAP8[((38000 + 1|0))>>0]|0;
     $123 = ($122<<24>>24)!=(0);
     if ($123) {
      $124 = HEAP16[38264>>1]|0;
      $125 = $124 << 16 >> 16;
      $126 = ($125|0)==(-1);
      if ($126) {
       $127 = $0;
       (_initAnim(15,1,0,$127)|0);
      }
      HEAP16[24240>>1] = 1;
      $128 = $actor;
      $129 = (($128) + 212|0);
      $130 = (_getRealAngle($129)|0);
      $131 = $actor;
      $132 = (($131) + 60|0);
      HEAP32[$132>>2] = $130;
     }
    } else {
     $133 = HEAP8[((38000 + 2|0))>>0]|0;
     $134 = ($133<<24>>24)!=(0);
     if ($134) {
      $135 = $actor;
      $136 = (($135) + 8|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = ($137|0)!=(2);
      if ($138) {
       $139 = $0;
       $140 = $139&65535;
       _initModelActor(2,$140);
      }
      $141 = $0;
      (_initAnim(23,1,0,$141)|0);
      HEAP16[24240>>1] = 1;
      $142 = $actor;
      $143 = (($142) + 212|0);
      $144 = (_getRealAngle($143)|0);
      $145 = $actor;
      $146 = (($145) + 60|0);
      HEAP32[$146>>2] = $144;
     }
    }
   }
  }
  $147 = HEAP32[33984>>2]|0;
  $148 = ($147|0)!=(0);
  if ($148) {
   $149 = HEAP16[44352>>1]|0;
   $150 = $149 << 16 >> 16;
   $151 = ($150|0)!=(0);
   if ($151) {
    label = 66;
   }
  } else {
   label = 66;
  }
  if ((label|0) == 66) {
   $152 = HEAP16[122424>>1]|0;
   $153 = $152 << 16 >> 16;
   $154 = $153 & 3;
   $155 = ($154|0)!=(0);
   if ($155) {
    HEAP16[24240>>1] = 0;
   }
   $156 = HEAP16[122424>>1]|0;
   $157 = $156 << 16 >> 16;
   $158 = HEAP32[122432>>2]|0;
   $159 = ($157|0)!=($158|0);
   if ($159) {
    label = 70;
   } else {
    $160 = HEAP32[33984>>2]|0;
    $161 = HEAP32[122440>>2]|0;
    $162 = ($160|0)!=($161|0);
    if ($162) {
     label = 70;
    }
   }
   if ((label|0) == 70) {
    $163 = HEAP16[24240>>1]|0;
    $164 = ($163<<16>>16)!=(0);
    if ($164) {
     $165 = $0;
     (_initAnim(0,0,-1,$165)|0);
    }
   }
   HEAP16[24240>>1] = 0;
   $166 = HEAP16[122424>>1]|0;
   $167 = $166 << 16 >> 16;
   $168 = $167 & 1;
   $169 = ($168|0)!=(0);
   if ($169) {
    $170 = HEAP16[34264>>1]|0;
    $171 = ($170<<16>>16)!=(0);
    if (!($171)) {
     $172 = $0;
     (_initAnim(1,0,-1,$172)|0);
    }
    HEAP16[24240>>1] = 1;
   }
   $173 = HEAP16[122424>>1]|0;
   $174 = $173 << 16 >> 16;
   $175 = $174 & 2;
   $176 = ($175|0)!=(0);
   if ($176) {
    $177 = HEAP16[122424>>1]|0;
    $178 = $177 << 16 >> 16;
    $179 = $178 & 1;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     $181 = $0;
     (_initAnim(2,0,-1,$181)|0);
     HEAP16[24240>>1] = 1;
    }
   }
   $182 = HEAP16[122424>>1]|0;
   $183 = $182 << 16 >> 16;
   $184 = $183 & 4;
   $185 = ($184|0)!=(0);
   if ($185) {
    HEAP16[24240>>1] = 1;
    $186 = $actor;
    $187 = (($186) + 12|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188|0)==(0);
    if ($189) {
     $190 = $0;
     (_initAnim(3,0,-1,$190)|0);
    } else {
     $191 = $actor;
     $192 = (($191) + 2|0);
     $193 = HEAP16[$192>>1]|0;
     $194 = ($193&65535) >>> 7;
     $195 = $194 & 1;
     $196 = ($195<<16>>16)!=(0);
     if (!($196)) {
      $197 = $actor;
      $198 = (($197) + 212|0);
      $199 = (_getRealAngle($198)|0);
      $200 = $actor;
      $201 = (($200) + 60|0);
      HEAP32[$201>>2] = $199;
     }
    }
   }
   $202 = HEAP16[122424>>1]|0;
   $203 = $202 << 16 >> 16;
   $204 = $203 & 8;
   $205 = ($204|0)!=(0);
   if ($205) {
    HEAP16[24240>>1] = 1;
    $206 = $actor;
    $207 = (($206) + 12|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)==(0);
    if ($209) {
     $210 = $0;
     (_initAnim(4,0,-1,$210)|0);
    } else {
     $211 = $actor;
     $212 = (($211) + 2|0);
     $213 = HEAP16[$212>>1]|0;
     $214 = ($213&65535) >>> 7;
     $215 = $214 & 1;
     $216 = ($215<<16>>16)!=(0);
     if (!($216)) {
      $217 = $actor;
      $218 = (($217) + 212|0);
      $219 = (_getRealAngle($218)|0);
      $220 = $actor;
      $221 = (($220) + 60|0);
      HEAP32[$221>>2] = $219;
     }
    }
   }
  }
  $tempAngle1 = 0;
  $222 = HEAP16[122424>>1]|0;
  $223 = $222 << 16 >> 16;
  $224 = $223 & 4;
  $225 = ($224|0)!=(0);
  if ($225) {
   $tempAngle1 = 256;
  }
  $226 = HEAP16[122424>>1]|0;
  $227 = $226 << 16 >> 16;
  $228 = $227 & 8;
  $229 = ($228|0)!=(0);
  if ($229) {
   $tempAngle1 = -256;
  }
  $230 = $actor;
  $231 = (($230) + 60|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = $actor;
  $234 = (($233) + 60|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $tempAngle1;
  $237 = $236 << 16 >> 16;
  $238 = (($235) + ($237))|0;
  $239 = $actor;
  $240 = (($239) + 64|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $actor;
  $243 = (($242) + 212|0);
  _moveActor($232,$238,$241,$243);
  $244 = HEAP16[122424>>1]|0;
  $245 = $244 << 16 >> 16;
  HEAP32[122432>>2] = $245;
  $246 = HEAP32[33984>>2]|0;
  HEAP32[122440>>2] = $246;
  break;
 }
 default: {
  $374 = $actor;
  $375 = (($374) + 68|0);
  $376 = HEAP32[$375>>2]|0;
  HEAP32[$vararg_buffer>>2] = $376;
  (_printf((309896|0),($vararg_buffer|0))|0);
 }
 }
 STACKTOP = sp;return;
}
function _musicVolume($volume) {
 $volume = $volume|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $volume;
 $1 = $0;
 $2 = (($1|0) / 2)&-1;
 (_Mix_VolumeMusic(($2|0))|0);
 STACKTOP = sp;return;
}
function _musicFadeIn($loops,$ms) {
 $loops = $loops|0;
 $ms = $ms|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $loops;
 $1 = $ms;
 $2 = HEAP32[309928>>2]|0;
 $3 = $0;
 $4 = $1;
 (_Mix_FadeInMusic(($2|0),($3|0),($4|0))|0);
 $5 = HEAP32[((308424 + 56|0))>>2]|0;
 _musicVolume($5);
 STACKTOP = sp;return;
}
function _musicFadeOut($ms) {
 $ms = $ms|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ms;
 while(1) {
  $1 = $0;
  $2 = (_Mix_FadeOutMusic(($1|0))|0);
  $3 = ($2|0)!=(0);
  if ($3) {
   $7 = 0;
  } else {
   $4 = (_Mix_PlayingMusic()|0);
   $5 = ($4|0)!=(0);
   $7 = $5;
  }
  if (!($7)) {
   break;
  }
  _SDL_Delay(100);
 }
 (_Mix_HaltMusic()|0);
 _Mix_RewindMusic();
 $6 = HEAP32[((308424 + 56|0))>>2]|0;
 _musicVolume($6);
 STACKTOP = sp;return;
}
function _playTrackMusicCd($track) {
 $track = $track|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $track;
 STACKTOP = sp;return;
}
function _stopTrackMusicCd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _playTrackMusic($track) {
 $track = $track|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $track;
 $1 = HEAP32[((308424 + 84|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[122400>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  STACKTOP = sp;return;
 } else {
  $6 = $0;
  HEAP32[122400>>2] = $6;
  _stopMusic();
  $7 = $0;
  _playTrackMusicCd($7);
  STACKTOP = sp;return;
 }
}
function _stopTrackMusic() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((308424 + 84|0))>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  _musicFadeOut(500);
  _stopTrackMusicCd();
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _playMidiMusic($midiIdx,$loop) {
 $midiIdx = $midiIdx|0;
 $loop = $loop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dos_midi_ptr = 0, $filename = 0;
 var $midiSize = 0, $rw = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $dos_midi_ptr = sp + 24|0;
 $filename = sp + 40|0;
 $0 = $midiIdx;
 $1 = $loop;
 $2 = HEAP32[((308424 + 84|0))>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = HEAP32[122400>>2]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 _stopMusic();
 $7 = $0;
 HEAP32[122400>>2] = $7;
 $8 = HEAP8[((308424 + 44|0))>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = HEAP32[362024>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  (_sprintf($filename,309936,$vararg_buffer)|0);
 } else {
  $12 = HEAP32[362056>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $12;
  (_sprintf($filename,309936,$vararg_buffer1)|0);
 }
 $13 = HEAP32[309944>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  _musicFadeOut(250);
  _stopMidiMusic();
 }
 $15 = $0;
 $16 = (_hqrGetallocEntry(309944,$filename,$15)|0);
 $midiSize = $16;
 $17 = HEAP32[((308424 + 84|0))>>2]|0;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = HEAP8[((308424 + 44|0))>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(0);
  if ($21) {
   $22 = HEAP32[309944>>2]|0;
   $23 = $midiSize;
   $24 = (_convert_to_midi($22,$23,$dos_midi_ptr)|0);
   $midiSize = $24;
   $25 = HEAP32[309944>>2]|0;
   _free($25);
   $26 = HEAP32[$dos_midi_ptr>>2]|0;
   HEAP32[309944>>2] = $26;
  }
 }
 $27 = HEAP32[309944>>2]|0;
 $28 = $midiSize;
 $29 = (_SDL_RWFromMem(($27|0),($28|0))|0);
 $rw = $29;
 $30 = $rw;
 $31 = (_Mix_LoadMUS_RW(($30|0))|0);
 HEAP32[309928>>2] = $31;
 _musicFadeIn(1,500);
 $32 = HEAP32[((308424 + 56|0))>>2]|0;
 _musicVolume($32);
 $33 = HEAP32[309928>>2]|0;
 $34 = $1;
 $35 = (_Mix_PlayMusic(($33|0),($34|0))|0);
 $36 = ($35|0)==(-1);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $0;
 HEAP32[$vararg_buffer4>>2] = $37;
 (_printf((309952|0),($vararg_buffer4|0))|0);
 STACKTOP = sp;return;
}
function _stopMidiMusic() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((308424 + 84|0))>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[309928>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[309928>>2]|0;
 _Mix_FreeMusic(($4|0));
 HEAP32[309928>>2] = 0;
 $5 = HEAP32[309944>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[309944>>2]|0;
  _free($7);
 }
 STACKTOP = sp;return;
}
function _initCdrom() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_printf((309984|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return 0;
}
function _stopMusic() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stopTrackMusic();
 _stopMidiMusic();
 STACKTOP = sp;return;
}
function _addRedrawCurrentArea($left,$top,$right,$bottom) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $area = 0, $bottomValue = 0, $i = 0, $leftValue = 0;
 var $rightValue = 0, $topValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $i = 0;
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $3;
 $8 = $1;
 $9 = (($7) - ($8))|0;
 $10 = Math_imul($6, $9)|0;
 $area = $10;
 while(1) {
  $11 = $i;
  $12 = HEAP32[47480>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   label = 20;
   break;
  }
  $14 = $i;
  $15 = (310016 + ($14<<3)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $0;
  $19 = ($17|0)>=($18|0);
  if ($19) {
   $20 = $0;
   $leftValue = $20;
  } else {
   $21 = $i;
   $22 = (310016 + ($21<<3)|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23&65535;
   $leftValue = $24;
  }
  $25 = $i;
  $26 = (310016 + ($25<<3)|0);
  $27 = (($26) + 4|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = $2;
  $31 = ($29|0)<=($30|0);
  if ($31) {
   $32 = $2;
   $rightValue = $32;
  } else {
   $33 = $i;
   $34 = (310016 + ($33<<3)|0);
   $35 = (($34) + 4|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $rightValue = $37;
  }
  $38 = $i;
  $39 = (310016 + ($38<<3)|0);
  $40 = (($39) + 2|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $1;
  $44 = ($42|0)>=($43|0);
  if ($44) {
   $45 = $1;
   $topValue = $45;
  } else {
   $46 = $i;
   $47 = (310016 + ($46<<3)|0);
   $48 = (($47) + 2|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $topValue = $50;
  }
  $51 = $i;
  $52 = (310016 + ($51<<3)|0);
  $53 = (($52) + 6|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&65535;
  $56 = $3;
  $57 = ($55|0)<=($56|0);
  if ($57) {
   $58 = $3;
   $bottomValue = $58;
  } else {
   $59 = $i;
   $60 = (310016 + ($59<<3)|0);
   $61 = (($60) + 6|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $62&65535;
   $bottomValue = $63;
  }
  $64 = $rightValue;
  $65 = $leftValue;
  $66 = (($64) - ($65))|0;
  $67 = $bottomValue;
  $68 = $topValue;
  $69 = (($67) - ($68))|0;
  $70 = Math_imul($66, $69)|0;
  $71 = $i;
  $72 = (310016 + ($71<<3)|0);
  $73 = (($72) + 6|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = $i;
  $77 = (310016 + ($76<<3)|0);
  $78 = (($77) + 2|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = (($75) - ($80))|0;
  $82 = $i;
  $83 = (310016 + ($82<<3)|0);
  $84 = (($83) + 4|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85&65535;
  $87 = $i;
  $88 = (310016 + ($87<<3)|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89&65535;
  $91 = (($86) - ($90))|0;
  $92 = Math_imul($81, $91)|0;
  $93 = $area;
  $94 = (($92) + ($93))|0;
  $95 = ($70|0)<($94|0);
  if ($95) {
   label = 16;
   break;
  }
  $124 = $i;
  $125 = (($124) + 1)|0;
  $i = $125;
 }
 if ((label|0) == 16) {
  $96 = $leftValue;
  $97 = $96&65535;
  $98 = $i;
  $99 = (310016 + ($98<<3)|0);
  HEAP16[$99>>1] = $97;
  $100 = $topValue;
  $101 = $100&65535;
  $102 = $i;
  $103 = (310016 + ($102<<3)|0);
  $104 = (($103) + 2|0);
  HEAP16[$104>>1] = $101;
  $105 = $rightValue;
  $106 = $105&65535;
  $107 = $i;
  $108 = (310016 + ($107<<3)|0);
  $109 = (($108) + 4|0);
  HEAP16[$109>>1] = $106;
  $110 = $bottomValue;
  $111 = $110&65535;
  $112 = $i;
  $113 = (310016 + ($112<<3)|0);
  $114 = (($113) + 6|0);
  HEAP16[$114>>1] = $111;
  $115 = $i;
  $116 = (310016 + ($115<<3)|0);
  $117 = (($116) + 6|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118&65535;
  $120 = ($119|0)>=(640);
  if ($120) {
   $121 = $i;
   $122 = (310016 + ($121<<3)|0);
   $123 = (($122) + 6|0);
   HEAP16[$123>>1] = 479;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  $126 = $0;
  $127 = $126&65535;
  $128 = $i;
  $129 = (310016 + ($128<<3)|0);
  HEAP16[$129>>1] = $127;
  $130 = $1;
  $131 = $130&65535;
  $132 = $i;
  $133 = (310016 + ($132<<3)|0);
  $134 = (($133) + 2|0);
  HEAP16[$134>>1] = $131;
  $135 = $2;
  $136 = $135&65535;
  $137 = $i;
  $138 = (310016 + ($137<<3)|0);
  $139 = (($138) + 4|0);
  HEAP16[$139>>1] = $136;
  $140 = $3;
  $141 = $140&65535;
  $142 = $i;
  $143 = (310016 + ($142<<3)|0);
  $144 = (($143) + 6|0);
  HEAP16[$144>>1] = $141;
  $145 = $i;
  $146 = (310016 + ($145<<3)|0);
  $147 = (($146) + 6|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148&65535;
  $150 = ($149|0)>=(640);
  if ($150) {
   $151 = $i;
   $152 = (310016 + ($151<<3)|0);
   $153 = (($152) + 6|0);
   HEAP16[$153>>1] = 479;
  }
  $154 = HEAP32[47480>>2]|0;
  $155 = (($154) + 1)|0;
  HEAP32[47480>>2] = $155;
  STACKTOP = sp;return;
 }
}
function _addRedrawArea($left,$top,$right,$bottom) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $0;
 $5 = ($4|0)<(0);
 if ($5) {
  $0 = 0;
 }
 $6 = $1;
 $7 = ($6|0)<(0);
 if ($7) {
  $1 = 0;
 }
 $8 = $2;
 $9 = ($8|0)>=(640);
 if ($9) {
  $2 = 639;
 }
 $10 = $3;
 $11 = ($10|0)>=(480);
 if ($11) {
  $3 = 479;
 }
 $12 = $0;
 $13 = $2;
 $14 = ($12|0)>($13|0);
 if (!($14)) {
  $15 = $1;
  $16 = $3;
  $17 = ($15|0)>($16|0);
  if (!($17)) {
   $18 = $0;
   $19 = $18&65535;
   $20 = HEAP32[47472>>2]|0;
   $21 = (312416 + ($20<<3)|0);
   HEAP16[$21>>1] = $19;
   $22 = $1;
   $23 = $22&65535;
   $24 = HEAP32[47472>>2]|0;
   $25 = (312416 + ($24<<3)|0);
   $26 = (($25) + 2|0);
   HEAP16[$26>>1] = $23;
   $27 = $2;
   $28 = $27&65535;
   $29 = HEAP32[47472>>2]|0;
   $30 = (312416 + ($29<<3)|0);
   $31 = (($30) + 4|0);
   HEAP16[$31>>1] = $28;
   $32 = $3;
   $33 = $32&65535;
   $34 = HEAP32[47472>>2]|0;
   $35 = (312416 + ($34<<3)|0);
   $36 = (($35) + 6|0);
   HEAP16[$36>>1] = $33;
   $37 = HEAP32[47472>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[47472>>2] = $38;
   $39 = $0;
   $40 = $1;
   $41 = $2;
   $42 = $3;
   _addRedrawCurrentArea($39,$40,$41,$42);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _moveNextAreas() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[47480>>2] = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[47472>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (312416 + ($3<<3)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = $i;
  $8 = (312416 + ($7<<3)|0);
  $9 = (($8) + 2|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $i;
  $13 = (312416 + ($12<<3)|0);
  $14 = (($13) + 4|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = $i;
  $18 = (312416 + ($17<<3)|0);
  $19 = (($18) + 6|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  _addRedrawCurrentArea($6,$11,$16,$21);
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 STACKTOP = sp;return;
}
function _flipRedrawAreas() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[47480>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (310016 + ($3<<3)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = $i;
  $8 = (310016 + ($7<<3)|0);
  $9 = (($8) + 2|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $i;
  $13 = (310016 + ($12<<3)|0);
  $14 = (($13) + 4|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = $i;
  $18 = (310016 + ($17<<3)|0);
  $19 = (($18) + 6|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  _copyBlockPhys($6,$11,$16,$21);
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 HEAP32[47480>>2] = 0;
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = HEAP32[47472>>2]|0;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = (312416 + ($27<<3)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = $i;
  $32 = (312416 + ($31<<3)|0);
  $33 = (($32) + 2|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = $i;
  $37 = (312416 + ($36<<3)|0);
  $38 = (($37) + 4|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = $i;
  $42 = (312416 + ($41<<3)|0);
  $43 = (($42) + 6|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  _addRedrawCurrentArea($30,$35,$40,$45);
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 STACKTOP = sp;return;
}
function _blitBackgroundAreas() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currentArea = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $currentArea = 310016;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[47480>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = $currentArea;
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $6 = $currentArea;
  $7 = (($6) + 2|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $currentArea;
  $11 = (($10) + 4|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $currentArea;
  $15 = (($14) + 6|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = HEAP32[25944>>2]|0;
  $19 = $currentArea;
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $currentArea;
  $23 = (($22) + 2|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = HEAP32[25952>>2]|0;
  _blitBox($5,$9,$13,$17,$18,$21,$25,$26);
  $27 = $currentArea;
  $28 = (($27) + 8|0);
  $currentArea = $28;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 STACKTOP = sp;return;
}
function _sortDrawingList($list,$listSize) {
 $list = $list|0;
 $listSize = $listSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $j = 0, $tempStruct = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tempStruct = sp + 16|0;
 $0 = $list;
 $1 = $listSize;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = (($3) - 1)|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $j = 0;
  while(1) {
   $6 = $j;
   $7 = $1;
   $8 = (($7) - 1)|0;
   $9 = $i;
   $10 = (($8) - ($9))|0;
   $11 = ($6|0)<($10|0);
   if (!($11)) {
    break;
   }
   $12 = $j;
   $13 = (($12) + 1)|0;
   $14 = $0;
   $15 = (($14) + (($13*18)|0)|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = $j;
   $19 = $0;
   $20 = (($19) + (($18*18)|0)|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 << 16 >> 16;
   $23 = ($17|0)<($22|0);
   if ($23) {
    $24 = $j;
    $25 = (($24) + 1)|0;
    $26 = $0;
    $27 = (($26) + (($25*18)|0)|0);
    dest=$tempStruct+0|0; src=$27+0|0; stop=dest+18|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    $28 = $j;
    $29 = (($28) + 1)|0;
    $30 = $0;
    $31 = (($30) + (($29*18)|0)|0);
    $32 = $j;
    $33 = $0;
    $34 = (($33) + (($32*18)|0)|0);
    dest=$31+0|0; src=$34+0|0; stop=dest+18|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    $35 = $j;
    $36 = $0;
    $37 = (($36) + (($35*18)|0)|0);
    dest=$37+0|0; src=$tempStruct+0|0; stop=dest+18|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
   }
   $38 = $j;
   $39 = (($38) + 1)|0;
   $j = $39;
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 STACKTOP = sp;return;
}
function _addOverlay($type,$info0,$X,$Y,$info1,$posType,$lifeTime) {
 $type = $type|0;
 $info0 = $info0|0;
 $X = $X|0;
 $Y = $Y|0;
 $info1 = $info1|0;
 $posType = $posType|0;
 $lifeTime = $lifeTime|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $overlay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $info0;
 $2 = $X;
 $3 = $Y;
 $4 = $info1;
 $5 = $posType;
 $6 = $lifeTime;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(10);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $i;
  $10 = (47504 + (($9*14)|0)|0);
  $overlay = $10;
  $11 = $overlay;
  $12 = (($11) + 2|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 << 16 >> 16;
  $15 = ($14|0)==(-1);
  if ($15) {
   break;
  }
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = $overlay;
 HEAP16[$17>>1] = $16;
 $18 = $1;
 $19 = $overlay;
 $20 = (($19) + 2|0);
 HEAP16[$20>>1] = $18;
 $21 = $2;
 $22 = $overlay;
 $23 = (($22) + 4|0);
 HEAP16[$23>>1] = $21;
 $24 = $3;
 $25 = $overlay;
 $26 = (($25) + 6|0);
 HEAP16[$26>>1] = $24;
 $27 = $4;
 $28 = $overlay;
 $29 = (($28) + 8|0);
 HEAP16[$29>>1] = $27;
 $30 = $5;
 $31 = $overlay;
 $32 = (($31) + 10|0);
 HEAP16[$32>>1] = $30;
 $33 = HEAP32[25920>>2]|0;
 $34 = $6;
 $35 = $34 << 16 >> 16;
 $36 = ($35*50)|0;
 $37 = (($33) + ($36))|0;
 $38 = $37&65535;
 $39 = $overlay;
 $40 = (($39) + 12|0);
 HEAP16[$40>>1] = $38;
 STACKTOP = sp;return;
}
function _updateOverlayTypePosition($X1,$Y1,$X2,$Y2) {
 $X1 = $X1|0;
 $Y1 = $Y1|0;
 $X2 = $X2|0;
 $Y2 = $Y2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $newX = 0, $newY = 0, $overlay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X1;
 $1 = $Y1;
 $2 = $X2;
 $3 = $Y2;
 $4 = $2;
 $5 = $4 << 16 >> 16;
 $6 = $0;
 $7 = $6 << 16 >> 16;
 $8 = (($5) - ($7))|0;
 $9 = $8&65535;
 $newX = $9;
 $10 = $3;
 $11 = $10 << 16 >> 16;
 $12 = $1;
 $13 = $12 << 16 >> 16;
 $14 = (($11) - ($13))|0;
 $15 = $14&65535;
 $newY = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(10);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (47504 + (($18*14)|0)|0);
  $overlay = $19;
  $20 = $overlay;
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = ($22|0)==(1);
  if ($23) {
   $24 = $newX;
   $25 = $overlay;
   $26 = (($25) + 4|0);
   HEAP16[$26>>1] = $24;
   $27 = $newY;
   $28 = $overlay;
   $29 = (($28) + 6|0);
   HEAP16[$29>>1] = $27;
  }
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 STACKTOP = sp;return;
}
function _redrawEngineActions($bgRedraw) {
 $bgRedraw = $bgRedraw|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $actor = 0, $actor1 = 0, $actor13 = 0, $actorIdx = 0, $drawListPos = 0, $extra = 0, $extra7 = 0, $flags = 0, $i = 0, $item = 0;
 var $modelActorPos = 0, $offsetX = 0, $offsetY = 0, $overlay = 0, $pos = 0, $range = 0, $shadow = 0, $shadowActorPos = 0, $spriteActorPos = 0, $spriteHeight = 0, $spriteHeight15 = 0, $spriteHeight3 = 0, $spriteHeight9 = 0, $spritePtr = 0, $spritePtr16 = 0, $spriteWidth = 0, $spriteWidth14 = 0, $spriteWidth2 = 0, $spriteWidth8 = 0, $tempX = 0;
 var $tempY = 0, $tempZ = 0, $text = 0, $text19 = 0, $text22 = 0, $textHeight = 0, $textHeight18 = 0, $textHeight21 = 0, $textLength = 0, $textLength17 = 0, $textLength20 = 0, $tmpProjPosX = 0, $tmpProjPosY = 0, $tmpVal = 0, $tmpX = 0, $tmpX10 = 0, $tmpX4 = 0, $tmpY = 0, $tmpY11 = 0, $tmpY5 = 0;
 var $tmpZ = 0, $tmpZ12 = 0, $tmpZ6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $spriteWidth = sp + 176|0;
 $spriteHeight = sp + 172|0;
 $shadow = sp + 200|0;
 $spriteWidth2 = sp + 32|0;
 $spriteHeight3 = sp + 56|0;
 $spriteWidth8 = sp + 16|0;
 $spriteHeight9 = sp + 12|0;
 $spriteWidth14 = sp + 64|0;
 $spriteHeight15 = sp + 68|0;
 $text = sp + 222|0;
 $text19 = sp + 488|0;
 $text22 = sp + 232|0;
 $0 = $bgRedraw;
 $1 = HEAP16[38888>>1]|0;
 $tmpProjPosX = $1;
 $2 = HEAP16[38896>>1]|0;
 $tmpProjPosY = $2;
 _resetClip();
 $3 = $0;
 $4 = ($3|0)!=(0);
 if ($4) {
  _freezeTime();
  $5 = HEAP32[34040>>2]|0;
  $6 = ($5|0)!=(-1);
  if ($6) {
   $7 = HEAP32[34040>>2]|0;
   $8 = ($7|0)!=(-2);
   if ($8) {
    _fadeOut(120312);
   }
  }
  _clearScreen();
  _redrawGrid();
  $9 = $tmpProjPosX;
  $10 = $tmpProjPosY;
  $11 = HEAP16[38888>>1]|0;
  $12 = HEAP16[38896>>1]|0;
  _updateOverlayTypePosition($9,$10,$11,$12);
  $13 = HEAP32[25952>>2]|0;
  $14 = HEAP32[25944>>2]|0;
  _copyScreen($13,$14);
  $15 = HEAP32[34040>>2]|0;
  $16 = ($15|0)!=(-1);
  if ($16) {
   $17 = HEAP32[34040>>2]|0;
   $18 = ($17|0)!=(-2);
   if ($18) {
    _fadeIn(120312);
    _setPalette(120312);
   }
  }
 } else {
  _blitBackgroundAreas();
 }
 $modelActorPos = 0;
 $drawListPos = 0;
 $spriteActorPos = 4096;
 $shadowActorPos = 3072;
 $modelActorPos = 0;
 while(1) {
  $19 = $modelActorPos;
  $20 = HEAP32[24248>>2]|0;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $modelActorPos;
  $23 = (136 + (($22*232)|0)|0);
  $actor = $23;
  $24 = $actor;
  $25 = (($24) + 2|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 & -17;
  HEAP16[$25>>1] = $27;
  $28 = HEAP16[39456>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = ($29|0)==(-1);
  if ($30) {
   label = 14;
  } else {
   $31 = $actor;
   $32 = (($31) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP16[39464>>1]|0;
   $35 = $34 << 16 >> 16;
   $36 = ($35*24)|0;
   $37 = (34296 + ($36)|0);
   $38 = (($37) + 8|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39 << 16 >> 16;
   $41 = ($33|0)<=($40|0);
   if ($41) {
    label = 14;
   }
  }
  if ((label|0) == 14) {
   label = 0;
   $42 = $actor;
   $43 = HEAP16[$42>>1]|0;
   $44 = ($43&65535) >>> 13;
   $45 = $44 & 1;
   $46 = $45&65535;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $0;
    $49 = ($48|0)==(0);
    if ($49) {
     $50 = $actor;
     $51 = (($50) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = HEAP32[39424>>2]|0;
     $54 = (($52) - ($53))|0;
     $55 = $actor;
     $56 = (($55) + 40|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = HEAP32[39432>>2]|0;
     $59 = (($57) - ($58))|0;
     $60 = $actor;
     $61 = (($60) + 44|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP32[39440>>2]|0;
     $64 = (($62) - ($63))|0;
     (_projectPositionOnScreen($54,$59,$64)|0);
     $65 = HEAP16[38904>>1]|0;
     $66 = $65 << 16 >> 16;
     $67 = ($66|0)>(-50);
     if ($67) {
      $68 = HEAP16[38904>>1]|0;
      $69 = $68 << 16 >> 16;
      $70 = ($69|0)<(680);
      if ($70) {
       $71 = HEAP16[38912>>1]|0;
       $72 = $71 << 16 >> 16;
       $73 = ($72|0)>(-30);
       if ($73) {
        $74 = HEAP16[38912>>1]|0;
        $75 = $74 << 16 >> 16;
        $76 = ($75|0)<(580);
        if ($76) {
         $77 = $actor;
         $78 = (($77) + 2|0);
         $79 = HEAP16[$78>>1]|0;
         $80 = $79 & -17;
         $81 = $80 | 16;
         HEAP16[$78>>1] = $81;
        }
       }
      }
     }
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $82 = $actor;
    $83 = (($82) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)!=(-1);
    if ($85) {
     $86 = $actor;
     $87 = HEAP16[$86>>1]|0;
     $88 = ($87&65535) >>> 9;
     $89 = $88 & 1;
     $90 = ($89<<16>>16)!=(0);
     if (!($90)) {
      $91 = $actor;
      $92 = (($91) + 36|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = HEAP32[39424>>2]|0;
      $95 = (($93) - ($94))|0;
      $96 = $actor;
      $97 = (($96) + 40|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = HEAP32[39432>>2]|0;
      $100 = (($98) - ($99))|0;
      $101 = $actor;
      $102 = (($101) + 44|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = HEAP32[39440>>2]|0;
      $105 = (($103) - ($104))|0;
      (_projectPositionOnScreen($95,$100,$105)|0);
      $106 = $actor;
      $107 = HEAP16[$106>>1]|0;
      $108 = ($107&65535) >>> 3;
      $109 = $108 & 1;
      $110 = $109&65535;
      $111 = ($110|0)!=(0);
      if ($111) {
       $112 = HEAP16[38904>>1]|0;
       $113 = $112 << 16 >> 16;
       $114 = ($113|0)>(-112);
       if ($114) {
        $115 = HEAP16[38904>>1]|0;
        $116 = $115 << 16 >> 16;
        $117 = ($116|0)<(752);
        if ($117) {
         $118 = HEAP16[38912>>1]|0;
         $119 = $118 << 16 >> 16;
         $120 = ($119|0)>(-50);
         if ($120) {
          $121 = HEAP16[38912>>1]|0;
          $122 = $121 << 16 >> 16;
          $123 = ($122|0)<(651);
          if ($123) {
           label = 34;
          } else {
           label = 29;
          }
         } else {
          label = 29;
         }
        } else {
         label = 29;
        }
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $124 = $actor;
       $125 = HEAP16[$124>>1]|0;
       $126 = ($125&65535) >>> 3;
       $127 = $126 & 1;
       $128 = ($127<<16>>16)!=(0);
       if (!($128)) {
        $129 = HEAP16[38904>>1]|0;
        $130 = $129 << 16 >> 16;
        $131 = ($130|0)>(-50);
        if ($131) {
         $132 = HEAP16[38904>>1]|0;
         $133 = $132 << 16 >> 16;
         $134 = ($133|0)<(680);
         if ($134) {
          $135 = HEAP16[38912>>1]|0;
          $136 = $135 << 16 >> 16;
          $137 = ($136|0)>(-30);
          if ($137) {
           $138 = HEAP16[38912>>1]|0;
           $139 = $138 << 16 >> 16;
           $140 = ($139|0)<(580);
           if ($140) {
            label = 34;
           }
          }
         }
        }
       }
      }
      if ((label|0) == 34) {
       label = 0;
       $141 = $actor;
       $142 = (($141) + 44|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = $actor;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (($143) + ($146))|0;
       $148 = HEAP32[39424>>2]|0;
       $149 = (($147) - ($148))|0;
       $150 = HEAP32[39440>>2]|0;
       $151 = (($149) - ($150))|0;
       $tmpVal = $151;
       $152 = $actor;
       $153 = (($152) + 156|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($154|0)!=(-1);
       if ($155) {
        $156 = $actor;
        $157 = (($156) + 156|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = (136 + (($158*232)|0)|0);
        $160 = (($159) + 36|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = HEAP32[39424>>2]|0;
        $163 = (($161) - ($162))|0;
        $164 = $actor;
        $165 = (($164) + 156|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (136 + (($166*232)|0)|0);
        $168 = (($167) + 44|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = (($163) + ($169))|0;
        $171 = HEAP32[39440>>2]|0;
        $172 = (($170) - ($171))|0;
        $173 = (($172) + 2)|0;
        $tmpVal = $173;
       }
       $174 = $actor;
       $175 = HEAP16[$174>>1]|0;
       $176 = ($175&65535) >>> 10;
       $177 = $176 & 1;
       $178 = ($177<<16>>16)!=(0);
       if ($178) {
        $179 = $spriteActorPos;
        $180 = $179&65535;
        $181 = $drawListPos;
        $182 = (314816 + (($181*18)|0)|0);
        $183 = (($182) + 2|0);
        HEAP16[$183>>1] = $180;
        $184 = $actor;
        $185 = HEAP16[$184>>1]|0;
        $186 = ($185&65535) >>> 3;
        $187 = $186 & 1;
        $188 = ($187<<16>>16)!=(0);
        if ($188) {
         $189 = $actor;
         $190 = (($189) + 168|0);
         $191 = HEAP32[$190>>2]|0;
         $192 = HEAP32[39424>>2]|0;
         $193 = (($191) - ($192))|0;
         $194 = $actor;
         $195 = (($194) + 172|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = (($193) + ($196))|0;
         $198 = HEAP32[39440>>2]|0;
         $199 = (($197) - ($198))|0;
         $tmpVal = $199;
        }
       } else {
        $200 = $modelActorPos;
        $201 = $200&65535;
        $202 = $drawListPos;
        $203 = (314816 + (($202*18)|0)|0);
        $204 = (($203) + 2|0);
        HEAP16[$204>>1] = $201;
       }
       $205 = $tmpVal;
       $206 = $205&65535;
       $207 = $drawListPos;
       $208 = (314816 + (($207*18)|0)|0);
       HEAP16[$208>>1] = $206;
       $209 = $drawListPos;
       $210 = (($209) + 1)|0;
       $drawListPos = $210;
       $211 = HEAP32[((308424 + 108|0))>>2]|0;
       $212 = ($211|0)!=(0);
       if ($212) {
        $213 = $actor;
        $214 = HEAP16[$213>>1]|0;
        $215 = ($214&65535) >>> 12;
        $216 = $215 & 1;
        $217 = ($216<<16>>16)!=(0);
        if (!($217)) {
         $218 = $actor;
         $219 = (($218) + 156|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = ($220|0)!=(-1);
         if ($221) {
          $222 = $actor;
          $223 = (($222) + 36|0);
          $224 = HEAP32[$223>>2]|0;
          HEAP32[25864>>2] = $224;
          $225 = $actor;
          $226 = (($225) + 40|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = (($227) - 1)|0;
          HEAP32[25872>>2] = $228;
          $229 = $actor;
          $230 = (($229) + 44|0);
          $231 = HEAP32[$230>>2]|0;
          HEAP32[25880>>2] = $231;
         } else {
          $232 = $actor;
          $233 = (($232) + 36|0);
          $234 = HEAP32[$233>>2]|0;
          $235 = $actor;
          $236 = (($235) + 40|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = $actor;
          $239 = (($238) + 44|0);
          $240 = HEAP32[$239>>2]|0;
          _getShadowPosition($234,$237,$240);
         }
         $241 = $tmpVal;
         $242 = (($241) + -1)|0;
         $tmpVal = $242;
         $243 = $tmpVal;
         $244 = $243&65535;
         $245 = $drawListPos;
         $246 = (314816 + (($245*18)|0)|0);
         HEAP16[$246>>1] = $244;
         $247 = $drawListPos;
         $248 = (314816 + (($247*18)|0)|0);
         $249 = (($248) + 2|0);
         HEAP16[$249>>1] = 3072;
         $250 = HEAP32[25864>>2]|0;
         $251 = $250&65535;
         $252 = $drawListPos;
         $253 = (314816 + (($252*18)|0)|0);
         $254 = (($253) + 4|0);
         HEAP16[$254>>1] = $251;
         $255 = HEAP32[25872>>2]|0;
         $256 = $255&65535;
         $257 = $drawListPos;
         $258 = (314816 + (($257*18)|0)|0);
         $259 = (($258) + 6|0);
         HEAP16[$259>>1] = $256;
         $260 = HEAP32[25880>>2]|0;
         $261 = $260&65535;
         $262 = $drawListPos;
         $263 = (314816 + (($262*18)|0)|0);
         $264 = (($263) + 8|0);
         HEAP16[$264>>1] = $261;
         $265 = $drawListPos;
         $266 = (314816 + (($265*18)|0)|0);
         $267 = (($266) + 10|0);
         HEAP16[$267>>1] = 2;
         $268 = $drawListPos;
         $269 = (($268) + 1)|0;
         $drawListPos = $269;
        }
       }
      }
     }
    }
   }
  }
  $270 = $modelActorPos;
  $271 = (($270) + 1)|0;
  $modelActorPos = $271;
  $272 = $spriteActorPos;
  $273 = (($272) + 1)|0;
  $spriteActorPos = $273;
  $274 = $shadowActorPos;
  $275 = (($274) + 1)|0;
  $shadowActorPos = $275;
 }
 $i = 0;
 while(1) {
  $276 = $i;
  $277 = ($276|0)<(50);
  if (!($277)) {
   break;
  }
  $278 = $i;
  $279 = (44680 + (($278*52)|0)|0);
  $extra = $279;
  $280 = $extra;
  $281 = HEAP16[$280>>1]|0;
  $282 = $281 << 16 >> 16;
  $283 = ($282|0)!=(-1);
  if ($283) {
   $284 = $extra;
   $285 = (($284) + 34|0);
   $286 = HEAP16[$285>>1]|0;
   $287 = $286 << 16 >> 16;
   $288 = $287 & 1024;
   $289 = ($288|0)!=(0);
   if ($289) {
    $290 = HEAP32[25920>>2]|0;
    $291 = $extra;
    $292 = (($291) + 40|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = (($290) - ($293))|0;
    $295 = ($294|0)>(35);
    if ($295) {
     $296 = HEAP32[25920>>2]|0;
     $297 = $extra;
     $298 = (($297) + 40|0);
     HEAP32[$298>>2] = $296;
     $299 = $extra;
     $300 = (($299) + 34|0);
     $301 = HEAP16[$300>>1]|0;
     $302 = $301 << 16 >> 16;
     $303 = $302 & 64511;
     $304 = $303&65535;
     HEAP16[$300>>1] = $304;
     $305 = $extra;
     $306 = (($305) + 2|0);
     $307 = HEAP16[$306>>1]|0;
     $308 = $307 << 16 >> 16;
     $309 = $extra;
     $310 = (($309) + 4|0);
     $311 = HEAP16[$310>>1]|0;
     $312 = $311 << 16 >> 16;
     $313 = $extra;
     $314 = (($313) + 6|0);
     $315 = HEAP16[$314>>1]|0;
     $316 = $315 << 16 >> 16;
     _playSample(11,4096,1,$308,$312,$316,-1);
    }
   } else {
    $317 = $extra;
    $318 = (($317) + 34|0);
    $319 = HEAP16[$318>>1]|0;
    $320 = $319 << 16 >> 16;
    $321 = $320 & 1;
    $322 = ($321|0)!=(0);
    if ($322) {
     label = 64;
    } else {
     $323 = $extra;
     $324 = (($323) + 34|0);
     $325 = HEAP16[$324>>1]|0;
     $326 = $325 << 16 >> 16;
     $327 = $326 & 64;
     $328 = ($327|0)!=(0);
     if ($328) {
      label = 64;
     } else {
      $329 = $extra;
      $330 = (($329) + 44|0);
      $331 = HEAP16[$330>>1]|0;
      $332 = $331 << 16 >> 16;
      $333 = $extra;
      $334 = (($333) + 40|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = (($332) + ($335))|0;
      $337 = (($336) - 150)|0;
      $338 = HEAP32[25920>>2]|0;
      $339 = ($337|0)<($338|0);
      if ($339) {
       label = 64;
      } else {
       $340 = HEAP32[25920>>2]|0;
       $341 = $extra;
       $342 = (($341) + 40|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = (($340) + ($343))|0;
       $345 = $344 & 8;
       $346 = ($345|0)!=(0);
       if (!($346)) {
        label = 64;
       }
      }
     }
    }
    if ((label|0) == 64) {
     label = 0;
     $347 = $extra;
     $348 = (($347) + 2|0);
     $349 = HEAP16[$348>>1]|0;
     $350 = $349 << 16 >> 16;
     $351 = HEAP32[39424>>2]|0;
     $352 = (($350) - ($351))|0;
     $353 = $extra;
     $354 = (($353) + 4|0);
     $355 = HEAP16[$354>>1]|0;
     $356 = $355 << 16 >> 16;
     $357 = HEAP32[39432>>2]|0;
     $358 = (($356) - ($357))|0;
     $359 = $extra;
     $360 = (($359) + 6|0);
     $361 = HEAP16[$360>>1]|0;
     $362 = $361 << 16 >> 16;
     $363 = HEAP32[39440>>2]|0;
     $364 = (($362) - ($363))|0;
     (_projectPositionOnScreen($352,$358,$364)|0);
     $365 = HEAP16[38904>>1]|0;
     $366 = $365 << 16 >> 16;
     $367 = ($366|0)>(-50);
     if ($367) {
      $368 = HEAP16[38904>>1]|0;
      $369 = $368 << 16 >> 16;
      $370 = ($369|0)<(680);
      if ($370) {
       $371 = HEAP16[38912>>1]|0;
       $372 = $371 << 16 >> 16;
       $373 = ($372|0)>(-30);
       if ($373) {
        $374 = HEAP16[38912>>1]|0;
        $375 = $374 << 16 >> 16;
        $376 = ($375|0)<(580);
        if ($376) {
         $377 = $extra;
         $378 = (($377) + 2|0);
         $379 = HEAP16[$378>>1]|0;
         $380 = $379 << 16 >> 16;
         $381 = HEAP32[39424>>2]|0;
         $382 = (($380) - ($381))|0;
         $383 = $extra;
         $384 = (($383) + 6|0);
         $385 = HEAP16[$384>>1]|0;
         $386 = $385 << 16 >> 16;
         $387 = (($382) + ($386))|0;
         $388 = HEAP32[39440>>2]|0;
         $389 = (($387) - ($388))|0;
         $390 = $389&65535;
         $391 = $drawListPos;
         $392 = (314816 + (($391*18)|0)|0);
         HEAP16[$392>>1] = $390;
         $393 = $i;
         $394 = (6144 + ($393))|0;
         $395 = $394&65535;
         $396 = $drawListPos;
         $397 = (314816 + (($396*18)|0)|0);
         $398 = (($397) + 2|0);
         HEAP16[$398>>1] = $395;
         $399 = $drawListPos;
         $400 = (($399) + 1)|0;
         $drawListPos = $400;
         $401 = HEAP32[((308424 + 108|0))>>2]|0;
         $402 = ($401|0)==(2);
         if ($402) {
          $403 = $extra;
          $404 = HEAP16[$403>>1]|0;
          $405 = $404 << 16 >> 16;
          $406 = $405 & 32768;
          $407 = ($406|0)!=(0);
          if (!($407)) {
           $408 = $extra;
           $409 = (($408) + 2|0);
           $410 = HEAP16[$409>>1]|0;
           $411 = $410 << 16 >> 16;
           $412 = $extra;
           $413 = (($412) + 4|0);
           $414 = HEAP16[$413>>1]|0;
           $415 = $414 << 16 >> 16;
           $416 = $extra;
           $417 = (($416) + 6|0);
           $418 = HEAP16[$417>>1]|0;
           $419 = $418 << 16 >> 16;
           _getShadowPosition($411,$415,$419);
           $420 = $extra;
           $421 = (($420) + 2|0);
           $422 = HEAP16[$421>>1]|0;
           $423 = $422 << 16 >> 16;
           $424 = HEAP32[39424>>2]|0;
           $425 = (($423) - ($424))|0;
           $426 = $extra;
           $427 = (($426) + 6|0);
           $428 = HEAP16[$427>>1]|0;
           $429 = $428 << 16 >> 16;
           $430 = (($425) + ($429))|0;
           $431 = HEAP32[39440>>2]|0;
           $432 = (($430) - ($431))|0;
           $433 = (($432) - 1)|0;
           $434 = $433&65535;
           $435 = $drawListPos;
           $436 = (314816 + (($435*18)|0)|0);
           HEAP16[$436>>1] = $434;
           $437 = $drawListPos;
           $438 = (314816 + (($437*18)|0)|0);
           $439 = (($438) + 2|0);
           HEAP16[$439>>1] = 3072;
           $440 = HEAP32[25864>>2]|0;
           $441 = $440&65535;
           $442 = $drawListPos;
           $443 = (314816 + (($442*18)|0)|0);
           $444 = (($443) + 4|0);
           HEAP16[$444>>1] = $441;
           $445 = HEAP32[25872>>2]|0;
           $446 = $445&65535;
           $447 = $drawListPos;
           $448 = (314816 + (($447*18)|0)|0);
           $449 = (($448) + 6|0);
           HEAP16[$449>>1] = $446;
           $450 = HEAP32[25880>>2]|0;
           $451 = $450&65535;
           $452 = $drawListPos;
           $453 = (314816 + (($452*18)|0)|0);
           $454 = (($453) + 8|0);
           HEAP16[$454>>1] = $451;
           $455 = $drawListPos;
           $456 = (314816 + (($455*18)|0)|0);
           $457 = (($456) + 10|0);
           HEAP16[$457>>1] = 0;
           $458 = $drawListPos;
           $459 = (($458) + 1)|0;
           $drawListPos = $459;
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $460 = $i;
  $461 = (($460) + 1)|0;
  $i = $461;
 }
 $462 = $drawListPos;
 _sortDrawingList(314816,$462);
 HEAP32[47472>>2] = 0;
 $463 = $drawListPos;
 $464 = ($463|0)>(0);
 if ($464) {
  $pos = 0;
  while(1) {
   $465 = $pos;
   $466 = (314816 + (($465*18)|0)|0);
   $467 = (($466) + 2|0);
   $468 = HEAP16[$467>>1]|0;
   $469 = $468&65535;
   $470 = $469 & 1023;
   $actorIdx = $470;
   $471 = $actorIdx;
   $472 = (136 + (($471*232)|0)|0);
   $actor1 = $472;
   $473 = $pos;
   $474 = (314816 + (($473*18)|0)|0);
   $475 = (($474) + 2|0);
   $476 = HEAP16[$475>>1]|0;
   $477 = $476&65535;
   $478 = $477 & 64512;
   $flags = $478;
   $479 = $flags;
   $480 = ($479>>>0)<(3072);
   if ($480) {
    $481 = $flags;
    $482 = ($481|0)!=(0);
    if (!($482)) {
     $483 = $actor1;
     $484 = (($483) + 188|0);
     $485 = HEAP32[$484>>2]|0;
     $486 = $actor1;
     $487 = (($486) + 180|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = (39472 + ($488<<2)|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = $actor1;
     $492 = (($491) + 4|0);
     $493 = HEAP32[$492>>2]|0;
     $494 = (23352 + ($493<<2)|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = $actor1;
     $497 = (($496) + 224|0);
     (_setModelAnimation($485,$490,$495,$497)|0);
     $498 = $actor1;
     $499 = (($498) + 36|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = HEAP32[39424>>2]|0;
     $502 = (($500) - ($501))|0;
     $503 = $actor1;
     $504 = (($503) + 40|0);
     $505 = HEAP32[$504>>2]|0;
     $506 = HEAP32[39432>>2]|0;
     $507 = (($505) - ($506))|0;
     $508 = $actor1;
     $509 = (($508) + 44|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = HEAP32[39440>>2]|0;
     $512 = (($510) - ($511))|0;
     $513 = $actor1;
     $514 = (($513) + 60|0);
     $515 = HEAP32[$514>>2]|0;
     $516 = $actor1;
     $517 = (($516) + 4|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = (23352 + ($518<<2)|0);
     $520 = HEAP32[$519>>2]|0;
     $521 = (_renderIsoModel($502,$507,$512,0,$515,0,$520)|0);
     $522 = ($521|0)!=(0);
     if (!($522)) {
      $523 = HEAP32[47432>>2]|0;
      $524 = ($523|0)<(0);
      if ($524) {
       HEAP32[47432>>2] = 0;
      }
      $525 = HEAP32[47448>>2]|0;
      $526 = ($525|0)<(0);
      if ($526) {
       HEAP32[47448>>2] = 0;
      }
      $527 = HEAP32[47440>>2]|0;
      $528 = ($527|0)>=(640);
      if ($528) {
       HEAP32[47440>>2] = 639;
      }
      $529 = HEAP32[47456>>2]|0;
      $530 = ($529|0)>=(480);
      if ($530) {
       HEAP32[47456>>2] = 479;
      }
      $531 = HEAP32[47432>>2]|0;
      $532 = HEAP32[47448>>2]|0;
      $533 = HEAP32[47440>>2]|0;
      $534 = HEAP32[47456>>2]|0;
      _setClip($531,$532,$533,$534);
      $535 = HEAP32[47664>>2]|0;
      $536 = HEAP32[47680>>2]|0;
      $537 = ($535|0)<=($536|0);
      if ($537) {
       $538 = HEAP32[47648>>2]|0;
       $539 = HEAP32[47696>>2]|0;
       $540 = ($538|0)<=($539|0);
       if ($540) {
        $541 = $actor1;
        $542 = (($541) + 2|0);
        $543 = HEAP16[$542>>1]|0;
        $544 = $543 & -17;
        $545 = $544 | 16;
        HEAP16[$542>>1] = $545;
        $546 = $actor1;
        $547 = (($546) + 36|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = (($548) + 256)|0;
        $550 = $549 >> 9;
        $tempX = $550;
        $551 = $actor1;
        $552 = (($551) + 40|0);
        $553 = HEAP32[$552>>2]|0;
        $554 = $553 >> 8;
        $tempY = $554;
        $555 = $actor1;
        $556 = (($555) + 20|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = $557 & 127;
        $559 = ($558|0)!=(0);
        if ($559) {
         $560 = $tempY;
         $561 = (($560) + 1)|0;
         $tempY = $561;
        }
        $562 = $actor1;
        $563 = (($562) + 44|0);
        $564 = HEAP32[$563>>2]|0;
        $565 = (($564) + 256)|0;
        $566 = $565 >> 9;
        $tempZ = $566;
        $567 = $tempX;
        $568 = $tempY;
        $569 = $tempZ;
        _drawOverModelActor($567,$568,$569);
        $570 = HEAP16[32>>1]|0;
        $571 = ($570<<16>>16)!=(0);
        if ($571) {
         $572 = HEAP16[32>>1]|0;
         $573 = $572 << 16 >> 16;
         $574 = (($573) + 10)|0;
         HEAP32[47696>>2] = $574;
         HEAP32[47456>>2] = $574;
        }
        $575 = HEAP32[47664>>2]|0;
        $576 = HEAP32[47648>>2]|0;
        $577 = HEAP32[47440>>2]|0;
        $578 = HEAP32[47456>>2]|0;
        _addRedrawArea($575,$576,$577,$578);
        $579 = $actor1;
        $580 = HEAP16[$579>>1]|0;
        $581 = ($580&65535) >>> 13;
        $582 = $581 & 1;
        $583 = $582&65535;
        $584 = ($583|0)!=(0);
        do {
         if ($584) {
          $585 = $0;
          $586 = ($585|0)==(1);
          if (!($586)) {
           break;
          }
          $587 = HEAP32[47664>>2]|0;
          $588 = HEAP32[47648>>2]|0;
          $589 = HEAP32[47440>>2]|0;
          $590 = HEAP32[47456>>2]|0;
          $591 = HEAP32[25952>>2]|0;
          $592 = HEAP32[47664>>2]|0;
          $593 = HEAP32[47648>>2]|0;
          $594 = HEAP32[25944>>2]|0;
          _blitBox($587,$588,$589,$590,$591,$592,$593,$594);
         }
        } while(0);
       }
      }
     }
    }
   } else {
    $595 = $flags;
    $596 = ($595|0)==(3072);
    if ($596) {
     $597 = HEAP16[32>>1]|0;
     $598 = ($597<<16>>16)!=(0);
     if ($598) {
      label = 109;
     } else {
      $599 = $pos;
      $600 = (314816 + (($599*18)|0)|0);
      dest=$shadow+0|0; src=$600+0|0; stop=dest+18|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
      $601 = (($shadow) + 4|0);
      $602 = HEAP16[$601>>1]|0;
      $603 = $602&65535;
      $604 = HEAP32[39424>>2]|0;
      $605 = (($603) - ($604))|0;
      $606 = (($shadow) + 6|0);
      $607 = HEAP16[$606>>1]|0;
      $608 = $607&65535;
      $609 = HEAP32[39432>>2]|0;
      $610 = (($608) - ($609))|0;
      $611 = (($shadow) + 8|0);
      $612 = HEAP16[$611>>1]|0;
      $613 = $612&65535;
      $614 = HEAP32[39440>>2]|0;
      $615 = (($613) - ($614))|0;
      (_projectPositionOnScreen($605,$610,$615)|0);
      $616 = (($shadow) + 10|0);
      $617 = HEAP16[$616>>1]|0;
      $618 = $617&65535;
      $619 = HEAP32[34064>>2]|0;
      _getSpriteSize($618,$spriteWidth,$spriteHeight,$619);
      $620 = HEAP16[38904>>1]|0;
      $621 = $620 << 16 >> 16;
      $622 = HEAP32[$spriteWidth>>2]|0;
      $623 = (($622|0) / 2)&-1;
      $624 = (($621) - ($623))|0;
      HEAP32[47432>>2] = $624;
      $625 = HEAP16[38912>>1]|0;
      $626 = $625 << 16 >> 16;
      $627 = HEAP32[$spriteHeight>>2]|0;
      $628 = (($627|0) / 2)&-1;
      $629 = (($626) - ($628))|0;
      HEAP32[47448>>2] = $629;
      $630 = HEAP16[38904>>1]|0;
      $631 = $630 << 16 >> 16;
      $632 = HEAP32[$spriteWidth>>2]|0;
      $633 = (($632|0) / 2)&-1;
      $634 = (($631) + ($633))|0;
      HEAP32[47440>>2] = $634;
      $635 = HEAP16[38912>>1]|0;
      $636 = $635 << 16 >> 16;
      $637 = HEAP32[$spriteHeight>>2]|0;
      $638 = (($637|0) / 2)&-1;
      $639 = (($636) + ($638))|0;
      HEAP32[47456>>2] = $639;
      $640 = HEAP32[47432>>2]|0;
      $641 = HEAP32[47448>>2]|0;
      $642 = HEAP32[47440>>2]|0;
      $643 = HEAP32[47456>>2]|0;
      _setClip($640,$641,$642,$643);
      $644 = HEAP32[47664>>2]|0;
      $645 = HEAP32[47680>>2]|0;
      $646 = ($644|0)<=($645|0);
      if ($646) {
       $647 = HEAP32[47648>>2]|0;
       $648 = HEAP32[47696>>2]|0;
       $649 = ($647|0)<=($648|0);
       if ($649) {
        $650 = (($shadow) + 10|0);
        $651 = HEAP16[$650>>1]|0;
        $652 = $651&65535;
        $653 = HEAP32[47432>>2]|0;
        $654 = HEAP32[47448>>2]|0;
        $655 = HEAP32[34064>>2]|0;
        _drawSprite($652,$653,$654,$655);
       }
      }
      $656 = (($shadow) + 4|0);
      $657 = HEAP16[$656>>1]|0;
      $658 = $657&65535;
      $659 = (($658) + 256)|0;
      $660 = $659 >> 9;
      $tmpX = $660;
      $661 = (($shadow) + 6|0);
      $662 = HEAP16[$661>>1]|0;
      $663 = $662&65535;
      $664 = $663 >> 8;
      $tmpY = $664;
      $665 = (($shadow) + 8|0);
      $666 = HEAP16[$665>>1]|0;
      $667 = $666&65535;
      $668 = (($667) + 256)|0;
      $669 = $668 >> 9;
      $tmpZ = $669;
      $670 = $tmpX;
      $671 = $tmpY;
      $672 = $tmpZ;
      _drawOverModelActor($670,$671,$672);
      $673 = HEAP32[47664>>2]|0;
      $674 = HEAP32[47648>>2]|0;
      $675 = HEAP32[47440>>2]|0;
      $676 = HEAP32[47456>>2]|0;
      _addRedrawArea($673,$674,$675,$676);
     }
    } else {
     label = 109;
    }
    if ((label|0) == 109) {
     label = 0;
     $677 = $flags;
     $678 = ($677>>>0)<(4096);
     if ($678) {
     } else {
      $679 = $flags;
      $680 = ($679|0)==(4096);
      if ($680) {
       $681 = $actor1;
       $682 = (($681) + 4|0);
       $683 = HEAP32[$682>>2]|0;
       $684 = (24264 + ($683<<2)|0);
       $685 = HEAP32[$684>>2]|0;
       $spritePtr = $685;
       $686 = $actor1;
       $687 = (($686) + 36|0);
       $688 = HEAP32[$687>>2]|0;
       $689 = HEAP32[39424>>2]|0;
       $690 = (($688) - ($689))|0;
       $691 = $actor1;
       $692 = (($691) + 40|0);
       $693 = HEAP32[$692>>2]|0;
       $694 = HEAP32[39432>>2]|0;
       $695 = (($693) - ($694))|0;
       $696 = $actor1;
       $697 = (($696) + 44|0);
       $698 = HEAP32[$697>>2]|0;
       $699 = HEAP32[39440>>2]|0;
       $700 = (($698) - ($699))|0;
       (_projectPositionOnScreen($690,$695,$700)|0);
       $701 = $spritePtr;
       _getSpriteSize(0,$spriteWidth2,$spriteHeight3,$701);
       $702 = HEAP16[38904>>1]|0;
       $703 = $702 << 16 >> 16;
       $704 = HEAP32[23336>>2]|0;
       $705 = $actor1;
       $706 = (($705) + 4|0);
       $707 = HEAP32[$706>>2]|0;
       $708 = $707<<4;
       $709 = (($704) + ($708)|0);
       $710 = HEAP16[$709>>1]|0;
       $711 = $710 << 16 >> 16;
       $712 = (($703) + ($711))|0;
       HEAP32[47432>>2] = $712;
       $713 = HEAP16[38912>>1]|0;
       $714 = $713 << 16 >> 16;
       $715 = HEAP32[23336>>2]|0;
       $716 = $actor1;
       $717 = (($716) + 4|0);
       $718 = HEAP32[$717>>2]|0;
       $719 = $718<<4;
       $720 = (($715) + ($719)|0);
       $721 = (($720) + 2|0);
       $722 = HEAP16[$721>>1]|0;
       $723 = $722 << 16 >> 16;
       $724 = (($714) + ($723))|0;
       HEAP32[47448>>2] = $724;
       $725 = HEAP32[47432>>2]|0;
       $726 = HEAP32[$spriteWidth2>>2]|0;
       $727 = (($725) + ($726))|0;
       HEAP32[47440>>2] = $727;
       $728 = HEAP32[47448>>2]|0;
       $729 = HEAP32[$spriteHeight3>>2]|0;
       $730 = (($728) + ($729))|0;
       HEAP32[47456>>2] = $730;
       $731 = $actor1;
       $732 = HEAP16[$731>>1]|0;
       $733 = ($732&65535) >>> 3;
       $734 = $733 & 1;
       $735 = ($734<<16>>16)!=(0);
       if ($735) {
        $736 = HEAP16[38888>>1]|0;
        $737 = $736 << 16 >> 16;
        $738 = $actor1;
        $739 = (($738) + 72|0);
        $740 = HEAP32[$739>>2]|0;
        $741 = (($737) + ($740))|0;
        $742 = HEAP16[38896>>1]|0;
        $743 = $742 << 16 >> 16;
        $744 = $actor1;
        $745 = (($744) + 76|0);
        $746 = HEAP32[$745>>2]|0;
        $747 = (($743) + ($746))|0;
        $748 = HEAP16[38888>>1]|0;
        $749 = $748 << 16 >> 16;
        $750 = $actor1;
        $751 = (($750) + 80|0);
        $752 = HEAP32[$751>>2]|0;
        $753 = (($749) + ($752))|0;
        $754 = HEAP16[38896>>1]|0;
        $755 = $754 << 16 >> 16;
        $756 = $actor1;
        $757 = (($756) + 84|0);
        $758 = HEAP32[$757>>2]|0;
        $759 = (($755) + ($758))|0;
        _setClip($741,$747,$753,$759);
       } else {
        $760 = HEAP32[47432>>2]|0;
        $761 = HEAP32[47448>>2]|0;
        $762 = HEAP32[47440>>2]|0;
        $763 = HEAP32[47456>>2]|0;
        _setClip($760,$761,$762,$763);
       }
       $764 = HEAP32[47664>>2]|0;
       $765 = HEAP32[47680>>2]|0;
       $766 = ($764|0)<=($765|0);
       if ($766) {
        $767 = HEAP32[47648>>2]|0;
        $768 = HEAP32[47696>>2]|0;
        $769 = ($767|0)<=($768|0);
        if ($769) {
         $770 = HEAP32[47432>>2]|0;
         $771 = HEAP32[47448>>2]|0;
         $772 = $spritePtr;
         _drawSprite(0,$770,$771,$772);
         $773 = $actor1;
         $774 = (($773) + 2|0);
         $775 = HEAP16[$774>>1]|0;
         $776 = $775 & -17;
         $777 = $776 | 16;
         HEAP16[$774>>1] = $777;
         $778 = $actor1;
         $779 = HEAP16[$778>>1]|0;
         $780 = ($779&65535) >>> 3;
         $781 = $780 & 1;
         $782 = ($781<<16>>16)!=(0);
         if ($782) {
          $783 = $actor1;
          $784 = (($783) + 168|0);
          $785 = HEAP32[$784>>2]|0;
          $786 = (($785) + 256)|0;
          $787 = $786 >> 9;
          $788 = $actor1;
          $789 = (($788) + 176|0);
          $790 = HEAP32[$789>>2]|0;
          $791 = $790 >> 8;
          $792 = $actor1;
          $793 = (($792) + 172|0);
          $794 = HEAP32[$793>>2]|0;
          $795 = (($794) + 256)|0;
          $796 = $795 >> 9;
          _drawOverSpriteActor($787,$791,$796);
         } else {
          $797 = $actor1;
          $798 = (($797) + 36|0);
          $799 = HEAP32[$798>>2]|0;
          $800 = $actor1;
          $801 = (($800) + 200|0);
          $802 = (($801) + 2|0);
          $803 = HEAP16[$802>>1]|0;
          $804 = $803 << 16 >> 16;
          $805 = (($799) + ($804))|0;
          $806 = (($805) + 256)|0;
          $807 = $806 >> 9;
          $tmpX4 = $807;
          $808 = $actor1;
          $809 = (($808) + 40|0);
          $810 = HEAP32[$809>>2]|0;
          $811 = $810 >> 8;
          $tmpY5 = $811;
          $812 = $actor1;
          $813 = (($812) + 20|0);
          $814 = HEAP32[$813>>2]|0;
          $815 = $814 & 127;
          $816 = ($815|0)!=(0);
          if ($816) {
           $817 = $tmpY5;
           $818 = (($817) + 1)|0;
           $tmpY5 = $818;
          }
          $819 = $actor1;
          $820 = (($819) + 44|0);
          $821 = HEAP32[$820>>2]|0;
          $822 = $actor1;
          $823 = (($822) + 200|0);
          $824 = (($823) + 8|0);
          $825 = (($824) + 2|0);
          $826 = HEAP16[$825>>1]|0;
          $827 = $826 << 16 >> 16;
          $828 = (($821) + ($827))|0;
          $829 = (($828) + 256)|0;
          $830 = $829 >> 9;
          $tmpZ6 = $830;
          $831 = $tmpX4;
          $832 = $tmpY5;
          $833 = $tmpZ6;
          _drawOverSpriteActor($831,$832,$833);
         }
         $834 = HEAP32[47664>>2]|0;
         $835 = HEAP32[47648>>2]|0;
         $836 = HEAP32[47680>>2]|0;
         $837 = HEAP32[47696>>2]|0;
         _addRedrawArea($834,$835,$836,$837);
         $838 = $actor1;
         $839 = HEAP16[$838>>1]|0;
         $840 = ($839&65535) >>> 13;
         $841 = $840 & 1;
         $842 = $841&65535;
         $843 = ($842|0)!=(0);
         if ($843) {
          $844 = $0;
          $845 = ($844|0)==(1);
          if ($845) {
           $846 = HEAP32[47664>>2]|0;
           $847 = HEAP32[47648>>2]|0;
           $848 = HEAP32[47680>>2]|0;
           $849 = HEAP32[47696>>2]|0;
           $850 = HEAP32[25952>>2]|0;
           $851 = HEAP32[47664>>2]|0;
           $852 = HEAP32[47648>>2]|0;
           $853 = HEAP32[25944>>2]|0;
           _blitBox($846,$847,$848,$849,$850,$851,$852,$853);
          }
         }
        }
       }
      } else {
       $854 = $flags;
       $855 = ($854|0)==(6144);
       if ($855) {
        $856 = $actorIdx;
        $857 = (44680 + (($856*52)|0)|0);
        $extra7 = $857;
        $858 = $extra7;
        $859 = (($858) + 2|0);
        $860 = HEAP16[$859>>1]|0;
        $861 = $860 << 16 >> 16;
        $862 = HEAP32[39424>>2]|0;
        $863 = (($861) - ($862))|0;
        $864 = $extra7;
        $865 = (($864) + 4|0);
        $866 = HEAP16[$865>>1]|0;
        $867 = $866 << 16 >> 16;
        $868 = HEAP32[39432>>2]|0;
        $869 = (($867) - ($868))|0;
        $870 = $extra7;
        $871 = (($870) + 6|0);
        $872 = HEAP16[$871>>1]|0;
        $873 = $872 << 16 >> 16;
        $874 = HEAP32[39440>>2]|0;
        $875 = (($873) - ($874))|0;
        (_projectPositionOnScreen($863,$869,$875)|0);
        $876 = $extra7;
        $877 = HEAP16[$876>>1]|0;
        $878 = $877 << 16 >> 16;
        $879 = $878 & 32768;
        $880 = ($879|0)!=(0);
        if ($880) {
         $881 = $actorIdx;
         $882 = HEAP16[38904>>1]|0;
         $883 = $882 << 16 >> 16;
         $884 = HEAP16[38912>>1]|0;
         $885 = $884 << 16 >> 16;
         _drawExtraSpecial($881,$883,$885);
        } else {
         $886 = $extra7;
         $887 = HEAP16[$886>>1]|0;
         $888 = $887 << 16 >> 16;
         $889 = (24264 + ($888<<2)|0);
         $890 = HEAP32[$889>>2]|0;
         _getSpriteSize(0,$spriteWidth8,$spriteHeight9,$890);
         $891 = HEAP16[38904>>1]|0;
         $892 = $891 << 16 >> 16;
         $893 = HEAP32[23336>>2]|0;
         $894 = $extra7;
         $895 = HEAP16[$894>>1]|0;
         $896 = $895 << 16 >> 16;
         $897 = $896<<4;
         $898 = (($893) + ($897)|0);
         $899 = HEAP16[$898>>1]|0;
         $900 = $899 << 16 >> 16;
         $901 = (($892) + ($900))|0;
         HEAP32[47432>>2] = $901;
         $902 = HEAP16[38912>>1]|0;
         $903 = $902 << 16 >> 16;
         $904 = HEAP32[23336>>2]|0;
         $905 = $extra7;
         $906 = HEAP16[$905>>1]|0;
         $907 = $906 << 16 >> 16;
         $908 = $907<<4;
         $909 = (($904) + ($908)|0);
         $910 = (($909) + 2|0);
         $911 = HEAP16[$910>>1]|0;
         $912 = $911 << 16 >> 16;
         $913 = (($903) + ($912))|0;
         HEAP32[47448>>2] = $913;
         $914 = HEAP32[47432>>2]|0;
         $915 = HEAP32[$spriteWidth8>>2]|0;
         $916 = (($914) + ($915))|0;
         HEAP32[47440>>2] = $916;
         $917 = HEAP32[47448>>2]|0;
         $918 = HEAP32[$spriteHeight9>>2]|0;
         $919 = (($917) + ($918))|0;
         HEAP32[47456>>2] = $919;
         $920 = HEAP32[47432>>2]|0;
         $921 = HEAP32[47448>>2]|0;
         $922 = $extra7;
         $923 = HEAP16[$922>>1]|0;
         $924 = $923 << 16 >> 16;
         $925 = (24264 + ($924<<2)|0);
         $926 = HEAP32[$925>>2]|0;
         _drawSprite(0,$920,$921,$926);
        }
        $927 = HEAP32[47432>>2]|0;
        $928 = HEAP32[47448>>2]|0;
        $929 = HEAP32[47440>>2]|0;
        $930 = HEAP32[47456>>2]|0;
        _setClip($927,$928,$929,$930);
        $931 = HEAP32[47664>>2]|0;
        $932 = HEAP32[47680>>2]|0;
        $933 = ($931|0)<=($932|0);
        if ($933) {
         $934 = HEAP32[47648>>2]|0;
         $935 = HEAP32[47696>>2]|0;
         $936 = ($934|0)<=($935|0);
         if ($936) {
          $937 = $pos;
          $938 = (314816 + (($937*18)|0)|0);
          $939 = (($938) + 4|0);
          $940 = HEAP16[$939>>1]|0;
          $941 = $940&65535;
          $942 = (($941) + 256)|0;
          $943 = $942 >> 9;
          $tmpX10 = $943;
          $944 = $pos;
          $945 = (314816 + (($944*18)|0)|0);
          $946 = (($945) + 6|0);
          $947 = HEAP16[$946>>1]|0;
          $948 = $947&65535;
          $949 = $948 >> 8;
          $tmpY11 = $949;
          $950 = $pos;
          $951 = (314816 + (($950*18)|0)|0);
          $952 = (($951) + 8|0);
          $953 = HEAP16[$952>>1]|0;
          $954 = $953&65535;
          $955 = (($954) + 256)|0;
          $956 = $955 >> 9;
          $tmpZ12 = $956;
          $957 = $tmpX10;
          $958 = $tmpY11;
          $959 = $tmpZ12;
          _drawOverModelActor($957,$958,$959);
          $960 = HEAP32[47664>>2]|0;
          $961 = HEAP32[47648>>2]|0;
          $962 = HEAP32[47440>>2]|0;
          $963 = HEAP32[47456>>2]|0;
          _addRedrawArea($960,$961,$962,$963);
         }
        }
       }
      }
     }
    }
   }
   _resetClip();
   $964 = $pos;
   $965 = (($964) + 1)|0;
   $pos = $965;
   $966 = $pos;
   $967 = $drawListPos;
   $968 = ($966|0)<($967|0);
   if (!($968)) {
    break;
   }
  }
 }
 $i = 0;
 while(1) {
  $969 = $i;
  $970 = ($969|0)<(10);
  if (!($970)) {
   break;
  }
  $971 = $i;
  $972 = (47504 + (($971*14)|0)|0);
  $overlay = $972;
  $973 = $overlay;
  $974 = (($973) + 2|0);
  $975 = HEAP16[$974>>1]|0;
  $976 = $975 << 16 >> 16;
  $977 = ($976|0)!=(-1);
  L197: do {
   if ($977) {
    $978 = $overlay;
    $979 = (($978) + 10|0);
    $980 = HEAP16[$979>>1]|0;
    $981 = $980 << 16 >> 16;
    do {
     if ((($981|0) == 1)) {
      $990 = $overlay;
      $991 = (($990) + 8|0);
      $992 = HEAP16[$991>>1]|0;
      $993 = $992 << 16 >> 16;
      $994 = (136 + (($993*232)|0)|0);
      $actor13 = $994;
      $995 = $actor13;
      $996 = (($995) + 36|0);
      $997 = HEAP32[$996>>2]|0;
      $998 = HEAP32[39424>>2]|0;
      $999 = (($997) - ($998))|0;
      $1000 = $actor13;
      $1001 = (($1000) + 40|0);
      $1002 = HEAP32[$1001>>2]|0;
      $1003 = $actor13;
      $1004 = (($1003) + 200|0);
      $1005 = (($1004) + 4|0);
      $1006 = (($1005) + 2|0);
      $1007 = HEAP16[$1006>>1]|0;
      $1008 = $1007 << 16 >> 16;
      $1009 = (($1002) + ($1008))|0;
      $1010 = HEAP32[39432>>2]|0;
      $1011 = (($1009) - ($1010))|0;
      $1012 = $actor13;
      $1013 = (($1012) + 44|0);
      $1014 = HEAP32[$1013>>2]|0;
      $1015 = HEAP32[39440>>2]|0;
      $1016 = (($1014) - ($1015))|0;
      (_projectPositionOnScreen($999,$1011,$1016)|0);
      $1017 = HEAP16[38904>>1]|0;
      $1018 = $overlay;
      $1019 = (($1018) + 4|0);
      HEAP16[$1019>>1] = $1017;
      $1020 = HEAP16[38912>>1]|0;
      $1021 = $overlay;
      $1022 = (($1021) + 6|0);
      HEAP16[$1022>>1] = $1020;
      $1023 = HEAP32[25920>>2]|0;
      $1024 = $overlay;
      $1025 = (($1024) + 12|0);
      $1026 = HEAP16[$1025>>1]|0;
      $1027 = $1026 << 16 >> 16;
      $1028 = ($1023|0)>=($1027|0);
      if ($1028) {
       $1029 = $overlay;
       $1030 = (($1029) + 2|0);
       HEAP16[$1030>>1] = -1;
       break L197;
      } else {
       break;
      }
     } else if ((($981|0) == 0)) {
      $982 = HEAP32[25920>>2]|0;
      $983 = $overlay;
      $984 = (($983) + 12|0);
      $985 = HEAP16[$984>>1]|0;
      $986 = $985 << 16 >> 16;
      $987 = ($982|0)>=($986|0);
      if ($987) {
       $988 = $overlay;
       $989 = (($988) + 2|0);
       HEAP16[$989>>1] = -1;
       break L197;
      } else {
       break;
      }
     }
    } while(0);
    $1031 = $overlay;
    $1032 = HEAP16[$1031>>1]|0;
    $1033 = $1032 << 16 >> 16;
    switch ($1033|0) {
    case 2:  {
     $1141 = $overlay;
     $1142 = (($1141) + 8|0);
     $1143 = HEAP16[$1142>>1]|0;
     $1144 = $1143 << 16 >> 16;
     $1145 = $overlay;
     $1146 = (($1145) + 2|0);
     $1147 = HEAP16[$1146>>1]|0;
     $1148 = $1147 << 16 >> 16;
     $1149 = $overlay;
     $1150 = (($1149) + 12|0);
     $1151 = HEAP16[$1150>>1]|0;
     $1152 = $1151 << 16 >> 16;
     $1153 = HEAP32[25920>>2]|0;
     $1154 = (($1152) - ($1153))|0;
     $1155 = (($1154) - 50)|0;
     $1156 = (_getAverageValue($1144,$1148,100,$1155)|0);
     $range = $1156;
     $1157 = $range;
     HEAP32[$vararg_buffer1>>2] = $1157;
     (_sprintf($text19,317520,$vararg_buffer1)|0);
     $1158 = (_getTextSize($text19)|0);
     $textLength17 = $1158;
     $textHeight18 = 48;
     $1159 = $overlay;
     $1160 = (($1159) + 4|0);
     $1161 = HEAP16[$1160>>1]|0;
     $1162 = $1161 << 16 >> 16;
     $1163 = $textLength17;
     $1164 = (($1163|0) / 2)&-1;
     $1165 = (($1162) - ($1164))|0;
     HEAP32[47432>>2] = $1165;
     $1166 = $overlay;
     $1167 = (($1166) + 6|0);
     $1168 = HEAP16[$1167>>1]|0;
     $1169 = $1168 << 16 >> 16;
     $1170 = (($1169) - 24)|0;
     HEAP32[47448>>2] = $1170;
     $1171 = $overlay;
     $1172 = (($1171) + 4|0);
     $1173 = HEAP16[$1172>>1]|0;
     $1174 = $1173 << 16 >> 16;
     $1175 = $textLength17;
     $1176 = (($1175|0) / 2)&-1;
     $1177 = (($1174) + ($1176))|0;
     HEAP32[47440>>2] = $1177;
     $1178 = $overlay;
     $1179 = (($1178) + 6|0);
     $1180 = HEAP16[$1179>>1]|0;
     $1181 = $1180 << 16 >> 16;
     $1182 = $textHeight18;
     $1183 = (($1181) + ($1182))|0;
     HEAP32[47456>>2] = $1183;
     $1184 = HEAP32[47432>>2]|0;
     $1185 = HEAP32[47448>>2]|0;
     $1186 = HEAP32[47440>>2]|0;
     $1187 = HEAP32[47456>>2]|0;
     _setClip($1184,$1185,$1186,$1187);
     _setFontColor(155);
     $1188 = HEAP32[47432>>2]|0;
     $1189 = HEAP32[47448>>2]|0;
     _drawText($1188,$1189,$text19);
     $1190 = HEAP32[47664>>2]|0;
     $1191 = HEAP32[47680>>2]|0;
     $1192 = ($1190|0)<=($1191|0);
     if ($1192) {
      $1193 = HEAP32[47648>>2]|0;
      $1194 = HEAP32[47696>>2]|0;
      $1195 = ($1193|0)<=($1194|0);
      if ($1195) {
       $1196 = HEAP32[47664>>2]|0;
       $1197 = HEAP32[47648>>2]|0;
       $1198 = HEAP32[47440>>2]|0;
       $1199 = HEAP32[47456>>2]|0;
       _addRedrawArea($1196,$1197,$1198,$1199);
      }
     }
     break;
    }
    case 4:  {
     $1216 = $overlay;
     $1217 = (($1216) + 2|0);
     $1218 = HEAP16[$1217>>1]|0;
     $1219 = $1218 << 16 >> 16;
     _getMenuText($1219,$text22);
     $1220 = (_getTextSize($text22)|0);
     $textLength20 = $1220;
     $textHeight21 = 48;
     $1221 = $overlay;
     $1222 = (($1221) + 4|0);
     $1223 = HEAP16[$1222>>1]|0;
     $1224 = $1223 << 16 >> 16;
     $1225 = $textLength20;
     $1226 = (($1225|0) / 2)&-1;
     $1227 = (($1224) - ($1226))|0;
     HEAP32[47432>>2] = $1227;
     $1228 = $overlay;
     $1229 = (($1228) + 6|0);
     $1230 = HEAP16[$1229>>1]|0;
     $1231 = $1230 << 16 >> 16;
     $1232 = (($1231) - 24)|0;
     HEAP32[47448>>2] = $1232;
     $1233 = $overlay;
     $1234 = (($1233) + 4|0);
     $1235 = HEAP16[$1234>>1]|0;
     $1236 = $1235 << 16 >> 16;
     $1237 = $textLength20;
     $1238 = (($1237|0) / 2)&-1;
     $1239 = (($1236) + ($1238))|0;
     HEAP32[47440>>2] = $1239;
     $1240 = $overlay;
     $1241 = (($1240) + 6|0);
     $1242 = HEAP16[$1241>>1]|0;
     $1243 = $1242 << 16 >> 16;
     $1244 = $textHeight21;
     $1245 = (($1243) + ($1244))|0;
     HEAP32[47456>>2] = $1245;
     $1246 = HEAP32[47432>>2]|0;
     $1247 = ($1246|0)<(0);
     if ($1247) {
      HEAP32[47432>>2] = 0;
     }
     $1248 = HEAP32[47448>>2]|0;
     $1249 = ($1248|0)<(0);
     if ($1249) {
      HEAP32[47448>>2] = 0;
     }
     $1250 = HEAP32[47440>>2]|0;
     $1251 = ($1250|0)>(639);
     if ($1251) {
      HEAP32[47440>>2] = 639;
     }
     $1252 = HEAP32[47456>>2]|0;
     $1253 = ($1252|0)>(479);
     if ($1253) {
      HEAP32[47456>>2] = 479;
     }
     $1254 = HEAP32[47432>>2]|0;
     $1255 = HEAP32[47448>>2]|0;
     $1256 = HEAP32[47440>>2]|0;
     $1257 = HEAP32[47456>>2]|0;
     _setClip($1254,$1255,$1256,$1257);
     $1258 = $overlay;
     $1259 = (($1258) + 8|0);
     $1260 = HEAP16[$1259>>1]|0;
     $1261 = $1260 << 16 >> 16;
     $1262 = (136 + (($1261*232)|0)|0);
     $1263 = (($1262) + 96|0);
     $1264 = HEAP32[$1263>>2]|0;
     _setFontColor($1264);
     $1265 = HEAP32[47432>>2]|0;
     $1266 = HEAP32[47448>>2]|0;
     _drawText($1265,$1266,$text22);
     $1267 = HEAP32[47664>>2]|0;
     $1268 = HEAP32[47680>>2]|0;
     $1269 = ($1267|0)<=($1268|0);
     if ($1269) {
      $1270 = HEAP32[47648>>2]|0;
      $1271 = HEAP32[47696>>2]|0;
      $1272 = ($1270|0)<=($1271|0);
      if ($1272) {
       $1273 = HEAP32[47664>>2]|0;
       $1274 = HEAP32[47648>>2]|0;
       $1275 = HEAP32[47440>>2]|0;
       $1276 = HEAP32[47456>>2]|0;
       _addRedrawArea($1273,$1274,$1275,$1276);
      }
     }
     break;
    }
    case 3:  {
     $1200 = $overlay;
     $1201 = (($1200) + 2|0);
     $1202 = HEAP16[$1201>>1]|0;
     $1203 = $1202 << 16 >> 16;
     $item = $1203;
     _drawSplittedBox(10,10,69,69,0);
     _setClip(10,10,69,69);
     $1204 = $item;
     $1205 = (38656 + ($1204<<2)|0);
     $1206 = HEAP32[$1205>>2]|0;
     _prepareIsoModel($1206);
     _setCameraPosition(40,40,128,200,200);
     _setCameraAngle(0,0,0,60,0,0,16000);
     $1207 = HEAP16[310008>>1]|0;
     $1208 = $1207 << 16 >> 16;
     $1209 = (($1208) + 1)|0;
     $1210 = $1209&65535;
     HEAP16[310008>>1] = $1210;
     $1211 = HEAP16[310008>>1]|0;
     $1212 = $1211 << 16 >> 16;
     $1213 = $item;
     $1214 = (38656 + ($1213<<2)|0);
     $1215 = HEAP32[$1214>>2]|0;
     (_renderIsoModel(0,0,0,0,$1212,0,$1215)|0);
     _drawBox(10,10,69,69);
     _addRedrawArea(10,10,69,69);
     _initEngineProjections();
     break;
    }
    case 0:  {
     $1034 = $overlay;
     $1035 = (($1034) + 2|0);
     $1036 = HEAP16[$1035>>1]|0;
     $1037 = $1036 << 16 >> 16;
     $1038 = (24264 + ($1037<<2)|0);
     $1039 = HEAP32[$1038>>2]|0;
     $spritePtr16 = $1039;
     $1040 = $spritePtr16;
     _getSpriteSize(0,$spriteWidth14,$spriteHeight15,$1040);
     $1041 = HEAP32[23336>>2]|0;
     $1042 = $overlay;
     $1043 = (($1042) + 2|0);
     $1044 = HEAP16[$1043>>1]|0;
     $1045 = $1044 << 16 >> 16;
     $1046 = $1045<<4;
     $1047 = (($1041) + ($1046)|0);
     $1048 = HEAP16[$1047>>1]|0;
     $offsetX = $1048;
     $1049 = HEAP32[23336>>2]|0;
     $1050 = $overlay;
     $1051 = (($1050) + 2|0);
     $1052 = HEAP16[$1051>>1]|0;
     $1053 = $1052 << 16 >> 16;
     $1054 = $1053<<4;
     $1055 = (($1049) + ($1054)|0);
     $1056 = (($1055) + 2|0);
     $1057 = HEAP16[$1056>>1]|0;
     $offsetY = $1057;
     $1058 = $offsetX;
     $1059 = $1058 << 16 >> 16;
     $1060 = $overlay;
     $1061 = (($1060) + 4|0);
     $1062 = HEAP16[$1061>>1]|0;
     $1063 = $1062 << 16 >> 16;
     $1064 = (($1059) + ($1063))|0;
     HEAP32[47432>>2] = $1064;
     $1065 = $offsetY;
     $1066 = $1065 << 16 >> 16;
     $1067 = $overlay;
     $1068 = (($1067) + 6|0);
     $1069 = HEAP16[$1068>>1]|0;
     $1070 = $1069 << 16 >> 16;
     $1071 = (($1066) + ($1070))|0;
     HEAP32[47448>>2] = $1071;
     $1072 = HEAP32[47432>>2]|0;
     $1073 = HEAP32[$spriteWidth14>>2]|0;
     $1074 = (($1072) + ($1073))|0;
     HEAP32[47440>>2] = $1074;
     $1075 = HEAP32[47448>>2]|0;
     $1076 = HEAP32[$spriteHeight15>>2]|0;
     $1077 = (($1075) + ($1076))|0;
     HEAP32[47456>>2] = $1077;
     $1078 = HEAP32[47432>>2]|0;
     $1079 = HEAP32[47448>>2]|0;
     $1080 = $spritePtr16;
     _drawSprite(0,$1078,$1079,$1080);
     $1081 = HEAP32[47664>>2]|0;
     $1082 = HEAP32[47680>>2]|0;
     $1083 = ($1081|0)<=($1082|0);
     if ($1083) {
      $1084 = HEAP32[47648>>2]|0;
      $1085 = HEAP32[47696>>2]|0;
      $1086 = ($1084|0)<=($1085|0);
      if ($1086) {
       $1087 = HEAP32[47664>>2]|0;
       $1088 = HEAP32[47648>>2]|0;
       $1089 = HEAP32[47440>>2]|0;
       $1090 = HEAP32[47456>>2]|0;
       _addRedrawArea($1087,$1088,$1089,$1090);
      }
     }
     break;
    }
    case 1:  {
     $1091 = $overlay;
     $1092 = (($1091) + 2|0);
     $1093 = HEAP16[$1092>>1]|0;
     $1094 = $1093 << 16 >> 16;
     HEAP32[$vararg_buffer>>2] = $1094;
     (_sprintf($text,317520,$vararg_buffer)|0);
     $1095 = (_getTextSize($text)|0);
     $textLength = $1095;
     $textHeight = 48;
     $1096 = $overlay;
     $1097 = (($1096) + 4|0);
     $1098 = HEAP16[$1097>>1]|0;
     $1099 = $1098 << 16 >> 16;
     $1100 = $textLength;
     $1101 = (($1100|0) / 2)&-1;
     $1102 = (($1099) - ($1101))|0;
     HEAP32[47432>>2] = $1102;
     $1103 = $overlay;
     $1104 = (($1103) + 6|0);
     $1105 = HEAP16[$1104>>1]|0;
     $1106 = $1105 << 16 >> 16;
     $1107 = (($1106) - 24)|0;
     HEAP32[47448>>2] = $1107;
     $1108 = $overlay;
     $1109 = (($1108) + 4|0);
     $1110 = HEAP16[$1109>>1]|0;
     $1111 = $1110 << 16 >> 16;
     $1112 = $textLength;
     $1113 = (($1112|0) / 2)&-1;
     $1114 = (($1111) + ($1113))|0;
     HEAP32[47440>>2] = $1114;
     $1115 = $overlay;
     $1116 = (($1115) + 6|0);
     $1117 = HEAP16[$1116>>1]|0;
     $1118 = $1117 << 16 >> 16;
     $1119 = $textHeight;
     $1120 = (($1118) + ($1119))|0;
     HEAP32[47456>>2] = $1120;
     $1121 = HEAP32[47432>>2]|0;
     $1122 = HEAP32[47448>>2]|0;
     $1123 = HEAP32[47440>>2]|0;
     $1124 = HEAP32[47456>>2]|0;
     _setClip($1121,$1122,$1123,$1124);
     $1125 = $overlay;
     $1126 = (($1125) + 8|0);
     $1127 = HEAP16[$1126>>1]|0;
     $1128 = $1127 << 16 >> 16;
     _setFontColor($1128);
     $1129 = HEAP32[47432>>2]|0;
     $1130 = HEAP32[47448>>2]|0;
     _drawText($1129,$1130,$text);
     $1131 = HEAP32[47664>>2]|0;
     $1132 = HEAP32[47680>>2]|0;
     $1133 = ($1131|0)<=($1132|0);
     if ($1133) {
      $1134 = HEAP32[47648>>2]|0;
      $1135 = HEAP32[47696>>2]|0;
      $1136 = ($1134|0)<=($1135|0);
      if ($1136) {
       $1137 = HEAP32[47664>>2]|0;
       $1138 = HEAP32[47648>>2]|0;
       $1139 = HEAP32[47440>>2]|0;
       $1140 = HEAP32[47456>>2]|0;
       _addRedrawArea($1137,$1138,$1139,$1140);
      }
     }
     break;
    }
    default: {
    }
    }
    label = 179;
   } else {
    label = 179;
   }
  } while(0);
  if ((label|0) == 179) {
   label = 0;
  }
  $1277 = $i;
  $1278 = (($1277) + 1)|0;
  $i = $1278;
 }
 _resetClip();
 $1279 = HEAP32[34040>>2]|0;
 $1280 = ($1279|0)==(-2);
 if ($1280) {
  $1281 = HEAP32[25952>>2]|0;
  _crossFade($1281,120312);
  HEAP32[34040>>2] = -1;
 }
 $1282 = $0;
 $1283 = ($1282|0)!=(0);
 if ($1283) {
  _flip();
  _moveNextAreas();
  _unfreezeTime();
 } else {
  _flipRedrawAreas();
 }
 $1284 = HEAP16[121352>>1]|0;
 $1285 = ($1284<<16>>16)!=(0);
 if ($1285) {
  $1286 = HEAP16[121360>>1]|0;
  $1287 = ($1286<<16>>16)!=(0);
  if ($1287) {
   _fadeToPal(120312);
  } else {
   _fadeToPal(121376);
  }
  HEAP16[121352>>1] = 0;
 }
 $1288 = HEAP32[34032>>2]|0;
 $1289 = ($1288|0)!=(0);
 if (!($1289)) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _drawBubble($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $actor = 0, $spriteHeight = 0, $spritePtr = 0, $spriteWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $spriteWidth = sp;
 $spriteHeight = sp + 4|0;
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $actor;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[39424>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $actor;
 $9 = (($8) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $actor;
 $12 = (($11) + 200|0);
 $13 = (($12) + 4|0);
 $14 = (($13) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = (($10) + ($16))|0;
 $18 = HEAP32[39432>>2]|0;
 $19 = (($17) - ($18))|0;
 $20 = $actor;
 $21 = (($20) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[39440>>2]|0;
 $24 = (($22) - ($23))|0;
 (_projectPositionOnScreen($7,$19,$24)|0);
 $25 = $0;
 $26 = HEAP32[47488>>2]|0;
 $27 = ($25|0)!=($26|0);
 if ($27) {
  $28 = HEAP32[47496>>2]|0;
  $29 = $28 ^ 1;
  HEAP32[47496>>2] = $29;
  $30 = $0;
  HEAP32[47488>>2] = $30;
 }
 $31 = HEAP32[47496>>2]|0;
 $32 = (24264 + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $spritePtr = $33;
 $34 = $spritePtr;
 _getSpriteSize(0,$spriteWidth,$spriteHeight,$34);
 $35 = HEAP32[47496>>2]|0;
 $36 = ($35|0)==(90);
 if ($36) {
  $37 = HEAP16[38904>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = (($38) + 10)|0;
  HEAP32[47432>>2] = $39;
 } else {
  $40 = HEAP16[38904>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = (($41) - 10)|0;
  $43 = HEAP32[$spriteWidth>>2]|0;
  $44 = (($42) - ($43))|0;
  HEAP32[47432>>2] = $44;
 }
 $45 = HEAP16[38912>>1]|0;
 $46 = $45 << 16 >> 16;
 $47 = (($46) - 20)|0;
 HEAP32[47448>>2] = $47;
 $48 = HEAP32[$spriteWidth>>2]|0;
 $49 = HEAP32[47432>>2]|0;
 $50 = (($48) + ($49))|0;
 $51 = (($50) - 1)|0;
 HEAP32[47440>>2] = $51;
 $52 = HEAP32[$spriteHeight>>2]|0;
 $53 = HEAP32[47448>>2]|0;
 $54 = (($52) + ($53))|0;
 $55 = (($54) - 1)|0;
 HEAP32[47456>>2] = $55;
 $56 = HEAP32[47432>>2]|0;
 $57 = HEAP32[47448>>2]|0;
 $58 = HEAP32[47440>>2]|0;
 $59 = HEAP32[47456>>2]|0;
 _setClip($56,$57,$58,$59);
 $60 = HEAP32[47432>>2]|0;
 $61 = HEAP32[47448>>2]|0;
 $62 = $spritePtr;
 _drawSprite(0,$60,$61,$62);
 $63 = HEAP32[47664>>2]|0;
 $64 = HEAP32[47680>>2]|0;
 $65 = ($63|0)<=($64|0);
 if (!($65)) {
  _resetClip();
  STACKTOP = sp;return;
 }
 $66 = HEAP32[47648>>2]|0;
 $67 = HEAP32[47696>>2]|0;
 $68 = ($66|0)<=($67|0);
 if (!($68)) {
  _resetClip();
  STACKTOP = sp;return;
 }
 $69 = HEAP32[47432>>2]|0;
 $70 = HEAP32[47448>>2]|0;
 $71 = HEAP32[47440>>2]|0;
 $72 = HEAP32[47456>>2]|0;
 _copyBlockPhys($69,$70,$71,$72);
 _resetClip();
 STACKTOP = sp;return;
}
function _projectPositionOnScreen($cX,$cY,$cZ) {
 $cX = $cX|0;
 $cY = $cY|0;
 $cZ = $cZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $posZ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cX;
 $2 = $cY;
 $3 = $cZ;
 $4 = HEAP32[38880>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $41 = $1;
  $42 = $3;
  $43 = (($41) - ($42))|0;
  $44 = ($43*24)|0;
  $45 = (($44|0) / 512)&-1;
  $46 = HEAP32[38928>>2]|0;
  $47 = (($45) + ($46))|0;
  $48 = $47&65535;
  HEAP16[38904>>1] = $48;
  $49 = $1;
  $50 = $3;
  $51 = (($49) + ($50))|0;
  $52 = ($51*12)|0;
  $53 = $2;
  $54 = ($53*30)|0;
  $55 = (($52) - ($54))|0;
  $56 = (($55|0) / 512)&-1;
  $57 = HEAP32[38936>>2]|0;
  $58 = (($56) + ($57))|0;
  $59 = $58&65535;
  HEAP16[38912>>1] = $59;
  $60 = $3;
  $61 = $2;
  $62 = (($60) - ($61))|0;
  $63 = $1;
  $64 = (($62) - ($63))|0;
  $65 = $64&65535;
  HEAP16[38920>>1] = $65;
  $0 = 1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $6 = HEAP32[319576>>2]|0;
 $7 = $1;
 $8 = (($7) - ($6))|0;
 $1 = $8;
 $9 = HEAP32[319584>>2]|0;
 $10 = $2;
 $11 = (($10) - ($9))|0;
 $2 = $11;
 $12 = HEAP32[319592>>2]|0;
 $13 = $3;
 $14 = (($13) - ($12))|0;
 $3 = $14;
 $15 = $3;
 $16 = ($15|0)>=(0);
 if (!($16)) {
  HEAP16[38904>>1] = 0;
  HEAP16[38912>>1] = 0;
  HEAP16[38920>>1] = 0;
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $17 = $3;
 $18 = HEAP32[319600>>2]|0;
 $19 = (($17) + ($18))|0;
 $posZ = $19;
 $20 = $posZ;
 $21 = ($20|0)<(0);
 if ($21) {
  $posZ = 32767;
 }
 $22 = $1;
 $23 = HEAP32[319608>>2]|0;
 $24 = Math_imul($22, $23)|0;
 $25 = $posZ;
 $26 = (($24|0) / ($25|0))&-1;
 $27 = HEAP32[38928>>2]|0;
 $28 = (($26) + ($27))|0;
 $29 = $28&65535;
 HEAP16[38904>>1] = $29;
 $30 = $2;
 $31 = (0 - ($30))|0;
 $32 = HEAP32[319616>>2]|0;
 $33 = Math_imul($31, $32)|0;
 $34 = $posZ;
 $35 = (($33|0) / ($34|0))&-1;
 $36 = HEAP32[38936>>2]|0;
 $37 = (($35) + ($36))|0;
 $38 = $37&65535;
 HEAP16[38912>>1] = $38;
 $39 = $posZ;
 $40 = $39&65535;
 HEAP16[38920>>1] = $40;
 $0 = -1;
 $66 = $0;
 STACKTOP = sp;return ($66|0);
}
function _setCameraPosition($X,$Y,$cX,$cY,$cZ) {
 $X = $X|0;
 $Y = $Y|0;
 $cX = $cX|0;
 $cY = $cY|0;
 $cZ = $cZ|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $cX;
 $3 = $cY;
 $4 = $cZ;
 $5 = $0;
 HEAP32[38928>>2] = $5;
 $6 = $1;
 HEAP32[38936>>2] = $6;
 $7 = $2;
 HEAP32[319600>>2] = $7;
 $8 = $3;
 HEAP32[319608>>2] = $8;
 $9 = $4;
 HEAP32[319616>>2] = $9;
 HEAP32[38880>>2] = 0;
 STACKTOP = sp;return;
}
function _setBaseTranslation($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $0;
 HEAP32[319624>>2] = $3;
 $4 = $1;
 HEAP32[319632>>2] = $4;
 $5 = $2;
 HEAP32[319640>>2] = $5;
 STACKTOP = sp;return;
}
function _setOrthoProjection($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $0;
 HEAP32[38928>>2] = $3;
 $4 = $1;
 HEAP32[38936>>2] = $4;
 $5 = $2;
 HEAP32[38944>>2] = $5;
 HEAP32[38880>>2] = 1;
 STACKTOP = sp;return;
}
function _getBaseRotationPosition($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = HEAP32[319648>>2]|0;
 $4 = $0;
 $5 = Math_imul($3, $4)|0;
 $6 = HEAP32[((319648 + 4|0))>>2]|0;
 $7 = $1;
 $8 = Math_imul($6, $7)|0;
 $9 = (($5) + ($8))|0;
 $10 = HEAP32[((319648 + 8|0))>>2]|0;
 $11 = $2;
 $12 = Math_imul($10, $11)|0;
 $13 = (($9) + ($12))|0;
 $14 = $13 >> 14;
 HEAP32[38952>>2] = $14;
 $15 = HEAP32[((319648 + 12|0))>>2]|0;
 $16 = $0;
 $17 = Math_imul($15, $16)|0;
 $18 = HEAP32[((319648 + 16|0))>>2]|0;
 $19 = $1;
 $20 = Math_imul($18, $19)|0;
 $21 = (($17) + ($20))|0;
 $22 = HEAP32[((319648 + 20|0))>>2]|0;
 $23 = $2;
 $24 = Math_imul($22, $23)|0;
 $25 = (($21) + ($24))|0;
 $26 = $25 >> 14;
 HEAP32[38960>>2] = $26;
 $27 = HEAP32[((319648 + 24|0))>>2]|0;
 $28 = $0;
 $29 = Math_imul($27, $28)|0;
 $30 = HEAP32[((319648 + 28|0))>>2]|0;
 $31 = $1;
 $32 = Math_imul($30, $31)|0;
 $33 = (($29) + ($32))|0;
 $34 = HEAP32[((319648 + 32|0))>>2]|0;
 $35 = $2;
 $36 = Math_imul($34, $35)|0;
 $37 = (($33) + ($36))|0;
 $38 = $37 >> 14;
 HEAP32[38968>>2] = $38;
 STACKTOP = sp;return;
}
function _setBaseRotation($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $Xradians = 0.0, $Yradians = 0.0, $Zradians = 0.0;
 var $matrixElem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 HEAP32[38976>>2] = ((317528 + 768|0));
 $3 = $0;
 $4 = $3 & 1023;
 HEAP32[319688>>2] = $4;
 $5 = $1;
 $6 = $5 & 1023;
 HEAP32[319696>>2] = $6;
 $7 = $2;
 $8 = $7 & 1023;
 HEAP32[319704>>2] = $8;
 $9 = $0;
 $10 = (256 - ($9))|0;
 $11 = (($10|0) % 1024)&-1;
 $12 = (+($11|0));
 $13 = $12 * 2.0;
 $14 = $13 * 3.1415000000000002;
 $15 = $14 / 1024.0;
 $Xradians = $15;
 $16 = $1;
 $17 = (256 - ($16))|0;
 $18 = (($17|0) % 1024)&-1;
 $19 = (+($18|0));
 $20 = $19 * 2.0;
 $21 = $20 * 3.1415000000000002;
 $22 = $21 / 1024.0;
 $Yradians = $22;
 $23 = $2;
 $24 = (256 - ($23))|0;
 $25 = (($24|0) % 1024)&-1;
 $26 = (+($25|0));
 $27 = $26 * 2.0;
 $28 = $27 * 3.1415000000000002;
 $29 = $28 / 1024.0;
 $Zradians = $29;
 $30 = $Zradians;
 $31 = (+Math_sin((+$30)));
 $32 = $Yradians;
 $33 = (+Math_sin((+$32)));
 $34 = $31 * $33;
 $35 = $34 * 16384.0;
 $36 = (~~(($35)));
 HEAP32[319648>>2] = $36;
 $37 = $Zradians;
 $38 = (+Math_cos((+$37)));
 $39 = -$38;
 $40 = $39 * 16384.0;
 $41 = (~~(($40)));
 HEAP32[((319648 + 4|0))>>2] = $41;
 $42 = $Zradians;
 $43 = (+Math_sin((+$42)));
 $44 = $Yradians;
 $45 = (+Math_cos((+$44)));
 $46 = $43 * $45;
 $47 = $46 * 16384.0;
 $48 = (~~(($47)));
 HEAP32[((319648 + 8|0))>>2] = $48;
 $49 = $Zradians;
 $50 = (+Math_cos((+$49)));
 $51 = $Xradians;
 $52 = (+Math_sin((+$51)));
 $53 = $50 * $52;
 $54 = $53 * 16384.0;
 $55 = (~~(($54)));
 HEAP32[((319648 + 12|0))>>2] = $55;
 $56 = $Zradians;
 $57 = (+Math_sin((+$56)));
 $58 = $Xradians;
 $59 = (+Math_sin((+$58)));
 $60 = $57 * $59;
 $61 = $60 * 16384.0;
 $62 = (~~(($61)));
 HEAP32[((319648 + 16|0))>>2] = $62;
 $63 = $Zradians;
 $64 = (+Math_cos((+$63)));
 $65 = $Xradians;
 $66 = (+Math_cos((+$65)));
 $67 = $64 * $66;
 $68 = $67 * 16384.0;
 $69 = (~~(($68)));
 HEAP32[((319648 + 24|0))>>2] = $69;
 $70 = $Zradians;
 $71 = (+Math_sin((+$70)));
 $72 = $Xradians;
 $73 = (+Math_cos((+$72)));
 $74 = $71 * $73;
 $75 = $74 * 16384.0;
 $76 = (~~(($75)));
 HEAP32[((319648 + 28|0))>>2] = $76;
 $77 = HEAP32[((319648 + 12|0))>>2]|0;
 $matrixElem = $77;
 $78 = $Yradians;
 $79 = (+Math_sin((+$78)));
 $80 = $matrixElem;
 $81 = (+($80|0));
 $82 = $79 * $81;
 $83 = $Yradians;
 $84 = (+Math_cos((+$83)));
 $85 = 16384.0 * $84;
 $86 = $Xradians;
 $87 = (+Math_cos((+$86)));
 $88 = $85 * $87;
 $89 = $82 + $88;
 $90 = (~~(($89)));
 HEAP32[((319648 + 12|0))>>2] = $90;
 $91 = $Yradians;
 $92 = (+Math_cos((+$91)));
 $93 = $matrixElem;
 $94 = (+($93|0));
 $95 = $92 * $94;
 $96 = $Yradians;
 $97 = (+Math_sin((+$96)));
 $98 = 16384.0 * $97;
 $99 = $Xradians;
 $100 = (+Math_cos((+$99)));
 $101 = $98 * $100;
 $102 = $95 - $101;
 $103 = (~~(($102)));
 HEAP32[((319648 + 20|0))>>2] = $103;
 $104 = HEAP32[((319648 + 24|0))>>2]|0;
 $matrixElem = $104;
 $105 = $Yradians;
 $106 = (+Math_sin((+$105)));
 $107 = $matrixElem;
 $108 = (+($107|0));
 $109 = $106 * $108;
 $110 = $Xradians;
 $111 = (+Math_sin((+$110)));
 $112 = 16384.0 * $111;
 $113 = $Yradians;
 $114 = (+Math_cos((+$113)));
 $115 = $112 * $114;
 $116 = $109 - $115;
 $117 = (~~(($116)));
 HEAP32[((319648 + 24|0))>>2] = $117;
 $118 = $Yradians;
 $119 = (+Math_cos((+$118)));
 $120 = $matrixElem;
 $121 = (+($120|0));
 $122 = $119 * $121;
 $123 = $Xradians;
 $124 = (+Math_sin((+$123)));
 $125 = 16384.0 * $124;
 $126 = $Yradians;
 $127 = (+Math_sin((+$126)));
 $128 = $125 * $127;
 $129 = $122 + $128;
 $130 = (~~(($129)));
 HEAP32[((319648 + 32|0))>>2] = $130;
 $131 = HEAP32[319624>>2]|0;
 $132 = HEAP32[319632>>2]|0;
 $133 = HEAP32[319640>>2]|0;
 _getBaseRotationPosition($131,$132,$133);
 $134 = HEAP32[38952>>2]|0;
 HEAP32[319576>>2] = $134;
 $135 = HEAP32[38960>>2]|0;
 HEAP32[319584>>2] = $135;
 $136 = HEAP32[38968>>2]|0;
 HEAP32[319592>>2] = $136;
 STACKTOP = sp;return;
}
function _getCameraAnglePositions($X,$Y,$Z) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = HEAP32[319648>>2]|0;
 $4 = $0;
 $5 = Math_imul($3, $4)|0;
 $6 = HEAP32[((319648 + 12|0))>>2]|0;
 $7 = $1;
 $8 = Math_imul($6, $7)|0;
 $9 = (($5) + ($8))|0;
 $10 = HEAP32[((319648 + 24|0))>>2]|0;
 $11 = $2;
 $12 = Math_imul($10, $11)|0;
 $13 = (($9) + ($12))|0;
 $14 = $13 >> 14;
 HEAP32[38952>>2] = $14;
 $15 = HEAP32[((319648 + 4|0))>>2]|0;
 $16 = $0;
 $17 = Math_imul($15, $16)|0;
 $18 = HEAP32[((319648 + 16|0))>>2]|0;
 $19 = $1;
 $20 = Math_imul($18, $19)|0;
 $21 = (($17) + ($20))|0;
 $22 = HEAP32[((319648 + 28|0))>>2]|0;
 $23 = $2;
 $24 = Math_imul($22, $23)|0;
 $25 = (($21) + ($24))|0;
 $26 = $25 >> 14;
 HEAP32[38960>>2] = $26;
 $27 = HEAP32[((319648 + 8|0))>>2]|0;
 $28 = $0;
 $29 = Math_imul($27, $28)|0;
 $30 = HEAP32[((319648 + 20|0))>>2]|0;
 $31 = $1;
 $32 = Math_imul($30, $31)|0;
 $33 = (($29) + ($32))|0;
 $34 = HEAP32[((319648 + 32|0))>>2]|0;
 $35 = $2;
 $36 = Math_imul($34, $35)|0;
 $37 = (($33) + ($36))|0;
 $38 = $37 >> 14;
 HEAP32[38968>>2] = $38;
 STACKTOP = sp;return;
}
function _setCameraAngle($transPosX,$transPosY,$transPosZ,$rotPosX,$rotPosY,$rotPosZ,$param6) {
 $transPosX = $transPosX|0;
 $transPosY = $transPosY|0;
 $transPosZ = $transPosZ|0;
 $rotPosX = $rotPosX|0;
 $rotPosY = $rotPosY|0;
 $rotPosZ = $rotPosZ|0;
 $param6 = $param6|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $transPosX;
 $1 = $transPosY;
 $2 = $transPosZ;
 $3 = $rotPosX;
 $4 = $rotPosY;
 $5 = $rotPosZ;
 $6 = $param6;
 $7 = $0;
 HEAP32[319624>>2] = $7;
 $8 = $1;
 HEAP32[319632>>2] = $8;
 $9 = $2;
 HEAP32[319640>>2] = $9;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 _setBaseRotation($10,$11,$12);
 $13 = $6;
 $14 = HEAP32[319592>>2]|0;
 $15 = (($14) + ($13))|0;
 HEAP32[319592>>2] = $15;
 $16 = HEAP32[319576>>2]|0;
 $17 = HEAP32[319584>>2]|0;
 $18 = HEAP32[319592>>2]|0;
 _getCameraAnglePositions($16,$17,$18);
 $19 = HEAP32[38952>>2]|0;
 HEAP32[319624>>2] = $19;
 $20 = HEAP32[38960>>2]|0;
 HEAP32[319632>>2] = $20;
 $21 = HEAP32[38968>>2]|0;
 HEAP32[319640>>2] = $21;
 STACKTOP = sp;return;
}
function _applyRotation($tempMatrix,$currentMatrix) {
 $tempMatrix = $tempMatrix|0;
 $currentMatrix = $currentMatrix|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $angle = 0, $angleVar1 = 0, $angleVar2 = 0;
 var $i = 0, $matrix1 = 0, $matrix2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $matrix1 = sp + 20|0;
 $matrix2 = sp + 56|0;
 $0 = $tempMatrix;
 $1 = $currentMatrix;
 $2 = HEAP32[319712>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[319712>>2]|0;
  $angle = $4;
  $5 = $angle;
  $6 = $5 & 1023;
  $7 = (317528 + ($6<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $angleVar2 = $9;
  $10 = $angle;
  $11 = (($10) + 256)|0;
  $angle = $11;
  $12 = $angle;
  $13 = $12 & 1023;
  $14 = (317528 + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $angleVar1 = $16;
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$matrix1>>2] = $18;
  $19 = $1;
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($matrix1) + 12|0);
  HEAP32[$22>>2] = $21;
  $23 = $1;
  $24 = (($23) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($matrix1) + 24|0);
  HEAP32[$26>>2] = $25;
  $27 = $1;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $angleVar2;
  $31 = Math_imul($29, $30)|0;
  $32 = $1;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $angleVar1;
  $36 = Math_imul($34, $35)|0;
  $37 = (($31) + ($36))|0;
  $38 = $37 >> 14;
  $39 = (($matrix1) + 4|0);
  HEAP32[$39>>2] = $38;
  $40 = $1;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $angleVar1;
  $44 = Math_imul($42, $43)|0;
  $45 = $1;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $angleVar2;
  $49 = Math_imul($47, $48)|0;
  $50 = (($44) - ($49))|0;
  $51 = $50 >> 14;
  $52 = (($matrix1) + 8|0);
  HEAP32[$52>>2] = $51;
  $53 = $1;
  $54 = (($53) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $angleVar2;
  $57 = Math_imul($55, $56)|0;
  $58 = $1;
  $59 = (($58) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $angleVar1;
  $62 = Math_imul($60, $61)|0;
  $63 = (($57) + ($62))|0;
  $64 = $63 >> 14;
  $65 = (($matrix1) + 16|0);
  HEAP32[$65>>2] = $64;
  $66 = $1;
  $67 = (($66) + 20|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $angleVar1;
  $70 = Math_imul($68, $69)|0;
  $71 = $1;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $angleVar2;
  $75 = Math_imul($73, $74)|0;
  $76 = (($70) - ($75))|0;
  $77 = $76 >> 14;
  $78 = (($matrix1) + 20|0);
  HEAP32[$78>>2] = $77;
  $79 = $1;
  $80 = (($79) + 32|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $angleVar2;
  $83 = Math_imul($81, $82)|0;
  $84 = $1;
  $85 = (($84) + 28|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $angleVar1;
  $88 = Math_imul($86, $87)|0;
  $89 = (($83) + ($88))|0;
  $90 = $89 >> 14;
  $91 = (($matrix1) + 28|0);
  HEAP32[$91>>2] = $90;
  $92 = $1;
  $93 = (($92) + 32|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $angleVar1;
  $96 = Math_imul($94, $95)|0;
  $97 = $1;
  $98 = (($97) + 28|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $angleVar2;
  $101 = Math_imul($99, $100)|0;
  $102 = (($96) - ($101))|0;
  $103 = $102 >> 14;
  $104 = (($matrix1) + 32|0);
  HEAP32[$104>>2] = $103;
 } else {
  $i = 0;
  while(1) {
   $105 = $i;
   $106 = ($105|0)<(9);
   if (!($106)) {
    break;
   }
   $107 = $i;
   $108 = $1;
   $109 = (($108) + ($107<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $i;
   $112 = (($matrix1) + ($111<<2)|0);
   HEAP32[$112>>2] = $110;
   $113 = $i;
   $114 = (($113) + 1)|0;
   $i = $114;
  }
 }
 $115 = HEAP32[319720>>2]|0;
 $116 = ($115|0)!=(0);
 if ($116) {
  $117 = HEAP32[319720>>2]|0;
  $angle = $117;
  $118 = $angle;
  $119 = $118 & 1023;
  $120 = (317528 + ($119<<1)|0);
  $121 = HEAP16[$120>>1]|0;
  $122 = $121 << 16 >> 16;
  $angleVar2 = $122;
  $123 = $angle;
  $124 = (($123) + 256)|0;
  $angle = $124;
  $125 = $angle;
  $126 = $125 & 1023;
  $127 = (317528 + ($126<<1)|0);
  $128 = HEAP16[$127>>1]|0;
  $129 = $128 << 16 >> 16;
  $angleVar1 = $129;
  $130 = (($matrix1) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($matrix2) + 8|0);
  HEAP32[$132>>2] = $131;
  $133 = (($matrix1) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($matrix2) + 20|0);
  HEAP32[$135>>2] = $134;
  $136 = (($matrix1) + 32|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($matrix2) + 32|0);
  HEAP32[$138>>2] = $137;
  $139 = (($matrix1) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $angleVar2;
  $142 = Math_imul($140, $141)|0;
  $143 = HEAP32[$matrix1>>2]|0;
  $144 = $angleVar1;
  $145 = Math_imul($143, $144)|0;
  $146 = (($142) + ($145))|0;
  $147 = $146 >> 14;
  HEAP32[$matrix2>>2] = $147;
  $148 = (($matrix1) + 4|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $angleVar1;
  $151 = Math_imul($149, $150)|0;
  $152 = HEAP32[$matrix1>>2]|0;
  $153 = $angleVar2;
  $154 = Math_imul($152, $153)|0;
  $155 = (($151) - ($154))|0;
  $156 = $155 >> 14;
  $157 = (($matrix2) + 4|0);
  HEAP32[$157>>2] = $156;
  $158 = (($matrix1) + 16|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = $angleVar2;
  $161 = Math_imul($159, $160)|0;
  $162 = (($matrix1) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $angleVar1;
  $165 = Math_imul($163, $164)|0;
  $166 = (($161) + ($165))|0;
  $167 = $166 >> 14;
  $168 = (($matrix2) + 12|0);
  HEAP32[$168>>2] = $167;
  $169 = (($matrix1) + 16|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $angleVar1;
  $172 = Math_imul($170, $171)|0;
  $173 = (($matrix1) + 12|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $angleVar2;
  $176 = Math_imul($174, $175)|0;
  $177 = (($172) - ($176))|0;
  $178 = $177 >> 14;
  $179 = (($matrix2) + 16|0);
  HEAP32[$179>>2] = $178;
  $180 = (($matrix1) + 28|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $angleVar2;
  $183 = Math_imul($181, $182)|0;
  $184 = (($matrix1) + 24|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $angleVar1;
  $187 = Math_imul($185, $186)|0;
  $188 = (($183) + ($187))|0;
  $189 = $188 >> 14;
  $190 = (($matrix2) + 24|0);
  HEAP32[$190>>2] = $189;
  $191 = (($matrix1) + 28|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $angleVar1;
  $194 = Math_imul($192, $193)|0;
  $195 = (($matrix1) + 24|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = $angleVar2;
  $198 = Math_imul($196, $197)|0;
  $199 = (($194) - ($198))|0;
  $200 = $199 >> 14;
  $201 = (($matrix2) + 28|0);
  HEAP32[$201>>2] = $200;
 } else {
  $i = 0;
  while(1) {
   $202 = $i;
   $203 = ($202|0)<(9);
   if (!($203)) {
    break;
   }
   $204 = $i;
   $205 = (($matrix1) + ($204<<2)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $i;
   $208 = (($matrix2) + ($207<<2)|0);
   HEAP32[$208>>2] = $206;
   $209 = $i;
   $210 = (($209) + 1)|0;
   $i = $210;
  }
 }
 $211 = HEAP32[319728>>2]|0;
 $212 = ($211|0)!=(0);
 if ($212) {
  $213 = HEAP32[319728>>2]|0;
  $angle = $213;
  $214 = $angle;
  $215 = $214 & 1023;
  $216 = (317528 + ($215<<1)|0);
  $217 = HEAP16[$216>>1]|0;
  $218 = $217 << 16 >> 16;
  $angleVar2 = $218;
  $219 = $angle;
  $220 = (($219) + 256)|0;
  $angle = $220;
  $221 = $angle;
  $222 = $221 & 1023;
  $223 = (317528 + ($222<<1)|0);
  $224 = HEAP16[$223>>1]|0;
  $225 = $224 << 16 >> 16;
  $angleVar1 = $225;
  $226 = (($matrix2) + 4|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = $0;
  $229 = (($228) + 4|0);
  HEAP32[$229>>2] = $227;
  $230 = (($matrix2) + 16|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = $0;
  $233 = (($232) + 16|0);
  HEAP32[$233>>2] = $231;
  $234 = (($matrix2) + 28|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $0;
  $237 = (($236) + 28|0);
  HEAP32[$237>>2] = $235;
  $238 = HEAP32[$matrix2>>2]|0;
  $239 = $angleVar1;
  $240 = Math_imul($238, $239)|0;
  $241 = (($matrix2) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = $angleVar2;
  $244 = Math_imul($242, $243)|0;
  $245 = (($240) - ($244))|0;
  $246 = $245 >> 14;
  $247 = $0;
  HEAP32[$247>>2] = $246;
  $248 = HEAP32[$matrix2>>2]|0;
  $249 = $angleVar2;
  $250 = Math_imul($248, $249)|0;
  $251 = (($matrix2) + 8|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $angleVar1;
  $254 = Math_imul($252, $253)|0;
  $255 = (($250) + ($254))|0;
  $256 = $255 >> 14;
  $257 = $0;
  $258 = (($257) + 8|0);
  HEAP32[$258>>2] = $256;
  $259 = (($matrix2) + 12|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $angleVar1;
  $262 = Math_imul($260, $261)|0;
  $263 = (($matrix2) + 20|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = $angleVar2;
  $266 = Math_imul($264, $265)|0;
  $267 = (($262) - ($266))|0;
  $268 = $267 >> 14;
  $269 = $0;
  $270 = (($269) + 12|0);
  HEAP32[$270>>2] = $268;
  $271 = (($matrix2) + 12|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $angleVar2;
  $274 = Math_imul($272, $273)|0;
  $275 = (($matrix2) + 20|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = $angleVar1;
  $278 = Math_imul($276, $277)|0;
  $279 = (($274) + ($278))|0;
  $280 = $279 >> 14;
  $281 = $0;
  $282 = (($281) + 20|0);
  HEAP32[$282>>2] = $280;
  $283 = (($matrix2) + 24|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $angleVar1;
  $286 = Math_imul($284, $285)|0;
  $287 = (($matrix2) + 32|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $angleVar2;
  $290 = Math_imul($288, $289)|0;
  $291 = (($286) - ($290))|0;
  $292 = $291 >> 14;
  $293 = $0;
  $294 = (($293) + 24|0);
  HEAP32[$294>>2] = $292;
  $295 = (($matrix2) + 24|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = $angleVar2;
  $298 = Math_imul($296, $297)|0;
  $299 = (($matrix2) + 32|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $angleVar1;
  $302 = Math_imul($300, $301)|0;
  $303 = (($298) + ($302))|0;
  $304 = $303 >> 14;
  $305 = $0;
  $306 = (($305) + 32|0);
  HEAP32[$306>>2] = $304;
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $307 = $i;
  $308 = ($307|0)<(9);
  if (!($308)) {
   break;
  }
  $309 = $i;
  $310 = (($matrix2) + ($309<<2)|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $i;
  $313 = $0;
  $314 = (($313) + ($312<<2)|0);
  HEAP32[$314>>2] = $311;
  $315 = $i;
  $316 = (($315) + 1)|0;
  $i = $316;
 }
 STACKTOP = sp;return;
}
function _applyPointsRotation($firstPointsPtr,$numPoints,$destPoints,$rotationMatrix) {
 $firstPointsPtr = $firstPointsPtr|0;
 $numPoints = $numPoints|0;
 $destPoints = $destPoints|0;
 $rotationMatrix = $rotationMatrix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $numOfPoints = 0, $pointsPtr = 0;
 var $tempPtr = 0, $tmpX = 0, $tmpY = 0, $tmpZ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $firstPointsPtr;
 $1 = $numPoints;
 $2 = $destPoints;
 $3 = $rotationMatrix;
 $4 = $1;
 $numOfPoints = $4;
 while(1) {
  $5 = $0;
  $pointsPtr = $5;
  $6 = $0;
  $tempPtr = $6;
  $7 = $tempPtr;
  $8 = HEAP16[$7>>1]|0;
  $tmpX = $8;
  $9 = $tempPtr;
  $10 = (($9) + 2|0);
  $11 = HEAP16[$10>>1]|0;
  $tmpY = $11;
  $12 = $tempPtr;
  $13 = (($12) + 4|0);
  $14 = HEAP16[$13>>1]|0;
  $tmpZ = $14;
  $15 = $3;
  $16 = HEAP32[$15>>2]|0;
  $17 = $tmpX;
  $18 = $17 << 16 >> 16;
  $19 = Math_imul($16, $18)|0;
  $20 = $3;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $tmpY;
  $24 = $23 << 16 >> 16;
  $25 = Math_imul($22, $24)|0;
  $26 = (($19) + ($25))|0;
  $27 = $3;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $tmpZ;
  $31 = $30 << 16 >> 16;
  $32 = Math_imul($29, $31)|0;
  $33 = (($26) + ($32))|0;
  $34 = $33 >> 14;
  $35 = HEAP32[38952>>2]|0;
  $36 = (($34) + ($35))|0;
  $37 = $36&65535;
  $38 = $2;
  HEAP16[$38>>1] = $37;
  $39 = $3;
  $40 = (($39) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $tmpX;
  $43 = $42 << 16 >> 16;
  $44 = Math_imul($41, $43)|0;
  $45 = $3;
  $46 = (($45) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $tmpY;
  $49 = $48 << 16 >> 16;
  $50 = Math_imul($47, $49)|0;
  $51 = (($44) + ($50))|0;
  $52 = $3;
  $53 = (($52) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $tmpZ;
  $56 = $55 << 16 >> 16;
  $57 = Math_imul($54, $56)|0;
  $58 = (($51) + ($57))|0;
  $59 = $58 >> 14;
  $60 = HEAP32[38960>>2]|0;
  $61 = (($59) + ($60))|0;
  $62 = $61&65535;
  $63 = $2;
  $64 = (($63) + 2|0);
  HEAP16[$64>>1] = $62;
  $65 = $3;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $tmpX;
  $69 = $68 << 16 >> 16;
  $70 = Math_imul($67, $69)|0;
  $71 = $3;
  $72 = (($71) + 28|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $tmpY;
  $75 = $74 << 16 >> 16;
  $76 = Math_imul($73, $75)|0;
  $77 = (($70) + ($76))|0;
  $78 = $3;
  $79 = (($78) + 32|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $tmpZ;
  $82 = $81 << 16 >> 16;
  $83 = Math_imul($80, $82)|0;
  $84 = (($77) + ($83))|0;
  $85 = $84 >> 14;
  $86 = HEAP32[38968>>2]|0;
  $87 = (($85) + ($86))|0;
  $88 = $87&65535;
  $89 = $2;
  $90 = (($89) + 4|0);
  HEAP16[$90>>1] = $88;
  $91 = $2;
  $92 = (($91) + 6|0);
  $2 = $92;
  $93 = $pointsPtr;
  $94 = (($93) + 6|0);
  $0 = $94;
  $95 = $numOfPoints;
  $96 = (($95) + -1)|0;
  $numOfPoints = $96;
  $97 = ($96|0)!=(0);
  if (!($97)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _processRotatedElement($rotZ,$rotY,$rotX,$elemPtr) {
 $rotZ = $rotZ|0;
 $rotY = $rotY|0;
 $rotX = $rotX|0;
 $elemPtr = $elemPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $baseElement = 0, $currentMatrix = 0, $firstPoint = 0;
 var $numOfPoints = 0, $pointIdx = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $rotZ;
 $1 = $rotY;
 $2 = $rotX;
 $3 = $elemPtr;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $firstPoint = $6;
 $7 = $3;
 $8 = (($7) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $numOfPoints = $10;
 $11 = $2;
 HEAP32[319712>>2] = $11;
 $12 = $1;
 HEAP32[319728>>2] = $12;
 $13 = $0;
 HEAP32[319720>>2] = $13;
 $14 = $firstPoint;
 $15 = (($14|0) % 6)&-1;
 $16 = ($15|0)!=(0);
 if ($16) {
  (_printf((319736|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 $17 = $3;
 $18 = (($17) + 6|0);
 $19 = HEAP16[$18>>1]|0;
 $baseElement = $19;
 $20 = $baseElement;
 $21 = $20 << 16 >> 16;
 $22 = ($21|0)==(-1);
 if ($22) {
  $currentMatrix = 319648;
  HEAP32[38952>>2] = 0;
  HEAP32[38960>>2] = 0;
  HEAP32[38968>>2] = 0;
 } else {
  $23 = $3;
  $24 = (($23) + 4|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = (($26|0) / 6)&-1;
  $pointIdx = $27;
  $28 = $baseElement;
  $29 = $28 << 16 >> 16;
  $30 = (319808 + ($29)|0);
  $currentMatrix = $30;
  $31 = $pointIdx;
  $32 = (320896 + (($31*6)|0)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  HEAP32[38952>>2] = $34;
  $35 = $pointIdx;
  $36 = (320896 + (($35*6)|0)|0);
  $37 = (($36) + 2|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  HEAP32[38960>>2] = $39;
  $40 = $pointIdx;
  $41 = (320896 + (($40*6)|0)|0);
  $42 = (($41) + 4|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  HEAP32[38968>>2] = $44;
 }
 $45 = HEAP32[325696>>2]|0;
 $46 = $currentMatrix;
 _applyRotation($45,$46);
 $47 = $numOfPoints;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = HEAP32[325752>>2]|0;
  $50 = $firstPoint;
  $51 = (($49) + ($50)|0);
  $52 = $numOfPoints;
  $53 = $firstPoint;
  $54 = (($53|0) / 6)&-1;
  $55 = (320896 + (($54*6)|0)|0);
  $56 = HEAP32[325696>>2]|0;
  _applyPointsRotation($51,$52,$55,$56);
  STACKTOP = sp;return;
 }
 (_printf((325704|0),($vararg_buffer1|0))|0);
 $49 = HEAP32[325752>>2]|0;
 $50 = $firstPoint;
 $51 = (($49) + ($50)|0);
 $52 = $numOfPoints;
 $53 = $firstPoint;
 $54 = (($53|0) / 6)&-1;
 $55 = (320896 + (($54*6)|0)|0);
 $56 = HEAP32[325696>>2]|0;
 _applyPointsRotation($51,$52,$55,$56);
 STACKTOP = sp;return;
}
function _applyPointsTranslation($firstPointsPtr,$numPoints,$destPoints,$translationMatrix) {
 $firstPointsPtr = $firstPointsPtr|0;
 $numPoints = $numPoints|0;
 $destPoints = $destPoints|0;
 $translationMatrix = $translationMatrix|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $numOfPoints = 0, $pointsPtr = 0, $tempPtr = 0, $tmpX = 0, $tmpY = 0, $tmpZ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $firstPointsPtr;
 $1 = $numPoints;
 $2 = $destPoints;
 $3 = $translationMatrix;
 $4 = $1;
 $numOfPoints = $4;
 while(1) {
  $5 = $0;
  $pointsPtr = $5;
  $6 = $0;
  $tempPtr = $6;
  $7 = $tempPtr;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = HEAP32[319720>>2]|0;
  $11 = (($9) + ($10))|0;
  $12 = $11&65535;
  $tmpX = $12;
  $13 = $tempPtr;
  $14 = (($13) + 2|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = HEAP32[319728>>2]|0;
  $18 = (($16) + ($17))|0;
  $19 = $18&65535;
  $tmpY = $19;
  $20 = $tempPtr;
  $21 = (($20) + 4|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = HEAP32[319712>>2]|0;
  $25 = (($23) + ($24))|0;
  $26 = $25&65535;
  $tmpZ = $26;
  $27 = $3;
  $28 = HEAP32[$27>>2]|0;
  $29 = $tmpX;
  $30 = $29 << 16 >> 16;
  $31 = Math_imul($28, $30)|0;
  $32 = $3;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $tmpY;
  $36 = $35 << 16 >> 16;
  $37 = Math_imul($34, $36)|0;
  $38 = (($31) + ($37))|0;
  $39 = $3;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $tmpZ;
  $43 = $42 << 16 >> 16;
  $44 = Math_imul($41, $43)|0;
  $45 = (($38) + ($44))|0;
  $46 = $45 >> 14;
  $47 = HEAP32[38952>>2]|0;
  $48 = (($46) + ($47))|0;
  $49 = $48&65535;
  $50 = $2;
  HEAP16[$50>>1] = $49;
  $51 = $3;
  $52 = (($51) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $tmpX;
  $55 = $54 << 16 >> 16;
  $56 = Math_imul($53, $55)|0;
  $57 = $3;
  $58 = (($57) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $tmpY;
  $61 = $60 << 16 >> 16;
  $62 = Math_imul($59, $61)|0;
  $63 = (($56) + ($62))|0;
  $64 = $3;
  $65 = (($64) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $tmpZ;
  $68 = $67 << 16 >> 16;
  $69 = Math_imul($66, $68)|0;
  $70 = (($63) + ($69))|0;
  $71 = $70 >> 14;
  $72 = HEAP32[38960>>2]|0;
  $73 = (($71) + ($72))|0;
  $74 = $73&65535;
  $75 = $2;
  $76 = (($75) + 2|0);
  HEAP16[$76>>1] = $74;
  $77 = $3;
  $78 = (($77) + 24|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $tmpX;
  $81 = $80 << 16 >> 16;
  $82 = Math_imul($79, $81)|0;
  $83 = $3;
  $84 = (($83) + 28|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $tmpY;
  $87 = $86 << 16 >> 16;
  $88 = Math_imul($85, $87)|0;
  $89 = (($82) + ($88))|0;
  $90 = $3;
  $91 = (($90) + 32|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $tmpZ;
  $94 = $93 << 16 >> 16;
  $95 = Math_imul($92, $94)|0;
  $96 = (($89) + ($95))|0;
  $97 = $96 >> 14;
  $98 = HEAP32[38968>>2]|0;
  $99 = (($97) + ($98))|0;
  $100 = $99&65535;
  $101 = $2;
  $102 = (($101) + 4|0);
  HEAP16[$102>>1] = $100;
  $103 = $2;
  $104 = (($103) + 6|0);
  $2 = $104;
  $105 = $pointsPtr;
  $106 = (($105) + 6|0);
  $0 = $106;
  $107 = $numOfPoints;
  $108 = (($107) + -1)|0;
  $numOfPoints = $108;
  $109 = ($108|0)!=(0);
  if (!($109)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _processTranslatedElement($rotX,$rotY,$rotZ,$elemPtr) {
 $rotX = $rotX|0;
 $rotY = $rotY|0;
 $rotZ = $rotZ|0;
 $elemPtr = $elemPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $dest = 0, $i = 0, $i1 = 0, $source = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rotX;
 $1 = $rotY;
 $2 = $rotZ;
 $3 = $elemPtr;
 $4 = $0;
 HEAP32[319712>>2] = $4;
 $5 = $1;
 HEAP32[319728>>2] = $5;
 $6 = $2;
 HEAP32[319720>>2] = $6;
 $7 = $3;
 $8 = (($7) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = ($10|0)==(-1);
 if ($11) {
  HEAP32[38952>>2] = 0;
  HEAP32[38960>>2] = 0;
  HEAP32[38968>>2] = 0;
  $12 = HEAP32[325696>>2]|0;
  $dest = $12;
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = ($13|0)<(9);
   if (!($14)) {
    break;
   }
   $15 = $i;
   $16 = (319648 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $i;
   $19 = $dest;
   $20 = (($19) + ($18<<2)|0);
   HEAP32[$20>>2] = $17;
   $21 = $i;
   $22 = (($21) + 1)|0;
   $i = $22;
  }
  $66 = HEAP32[325752>>2]|0;
  $67 = $3;
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($66) + ($69)|0);
  $71 = $3;
  $72 = (($71) + 2|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = $3;
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = (($77|0) / 6)&-1;
  $79 = (320896 + (($78*6)|0)|0);
  $80 = HEAP32[325696>>2]|0;
  _applyPointsTranslation($70,$74,$79,$80);
  STACKTOP = sp;return;
 } else {
  $23 = $3;
  $24 = (($23) + 4|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = (($26|0) / 6)&-1;
  $28 = (320896 + (($27*6)|0)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  HEAP32[38952>>2] = $30;
  $31 = $3;
  $32 = (($31) + 4|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = (($34|0) / 6)&-1;
  $36 = (320896 + (($35*6)|0)|0);
  $37 = (($36) + 2|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  HEAP32[38960>>2] = $39;
  $40 = $3;
  $41 = (($40) + 4|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = (($43|0) / 6)&-1;
  $45 = (320896 + (($44*6)|0)|0);
  $46 = (($45) + 4|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  HEAP32[38968>>2] = $48;
  $49 = $3;
  $50 = (($49) + 6|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = (319808 + ($52)|0);
  $source = $53;
  $54 = HEAP32[325696>>2]|0;
  $dest = $54;
  $i1 = 0;
  while(1) {
   $55 = $i1;
   $56 = ($55|0)<(9);
   if (!($56)) {
    break;
   }
   $57 = $i1;
   $58 = $source;
   $59 = (($58) + ($57<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $i1;
   $62 = $dest;
   $63 = (($62) + ($61<<2)|0);
   HEAP32[$63>>2] = $60;
   $64 = $i1;
   $65 = (($64) + 1)|0;
   $i1 = $65;
  }
  $66 = HEAP32[325752>>2]|0;
  $67 = $3;
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($66) + ($69)|0);
  $71 = $3;
  $72 = (($71) + 2|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = $3;
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = (($77|0) / 6)&-1;
  $79 = (320896 + (($78*6)|0)|0);
  $80 = HEAP32[325696>>2]|0;
  _applyPointsTranslation($70,$74,$79,$80);
  STACKTOP = sp;return;
 }
}
function _translateGroup($ax,$bx,$cx) {
 $ax = $ax|0;
 $bx = $bx|0;
 $cx = $cx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $eax = 0, $ebp = 0, $ebx = 0, $ecx = 0, $edi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ax;
 $1 = $bx;
 $2 = $cx;
 $3 = $0;
 $4 = $3 << 16 >> 16;
 $ebp = $4;
 $5 = $1;
 $6 = $5 << 16 >> 16;
 $ebx = $6;
 $7 = $2;
 $8 = $7 << 16 >> 16;
 $ecx = $8;
 $9 = HEAP32[325760>>2]|0;
 $edi = $9;
 $10 = HEAP32[((325760 + 4|0))>>2]|0;
 $eax = $10;
 $11 = $ebp;
 $12 = $edi;
 $13 = Math_imul($12, $11)|0;
 $edi = $13;
 $14 = $ebx;
 $15 = $eax;
 $16 = Math_imul($15, $14)|0;
 $eax = $16;
 $17 = $eax;
 $18 = $edi;
 $19 = (($18) + ($17))|0;
 $edi = $19;
 $20 = HEAP32[((325760 + 8|0))>>2]|0;
 $eax = $20;
 $21 = $ecx;
 $22 = $eax;
 $23 = Math_imul($22, $21)|0;
 $eax = $23;
 $24 = $edi;
 $25 = $eax;
 $26 = (($25) + ($24))|0;
 $eax = $26;
 $27 = $eax;
 $28 = $27 >> 14;
 $eax = $28;
 $29 = $eax;
 HEAP32[38952>>2] = $29;
 $30 = HEAP32[((325760 + 12|0))>>2]|0;
 $edi = $30;
 $31 = HEAP32[((325760 + 16|0))>>2]|0;
 $eax = $31;
 $32 = $ebp;
 $33 = $edi;
 $34 = Math_imul($33, $32)|0;
 $edi = $34;
 $35 = $ebx;
 $36 = $eax;
 $37 = Math_imul($36, $35)|0;
 $eax = $37;
 $38 = $eax;
 $39 = $edi;
 $40 = (($39) + ($38))|0;
 $edi = $40;
 $41 = HEAP32[((325760 + 20|0))>>2]|0;
 $eax = $41;
 $42 = $ecx;
 $43 = $eax;
 $44 = Math_imul($43, $42)|0;
 $eax = $44;
 $45 = $edi;
 $46 = $eax;
 $47 = (($46) + ($45))|0;
 $eax = $47;
 $48 = $eax;
 $49 = $48 >> 14;
 $eax = $49;
 $50 = $eax;
 HEAP32[38960>>2] = $50;
 $51 = HEAP32[((325760 + 24|0))>>2]|0;
 $52 = $ebp;
 $53 = Math_imul($52, $51)|0;
 $ebp = $53;
 $54 = HEAP32[((325760 + 28|0))>>2]|0;
 $55 = $ebx;
 $56 = Math_imul($55, $54)|0;
 $ebx = $56;
 $57 = HEAP32[((325760 + 32|0))>>2]|0;
 $58 = $ecx;
 $59 = Math_imul($58, $57)|0;
 $ecx = $59;
 $60 = $ebp;
 $61 = $ebx;
 $62 = (($61) + ($60))|0;
 $ebx = $62;
 $63 = $ecx;
 $64 = $ebx;
 $65 = (($64) + ($63))|0;
 $ebx = $65;
 $66 = $ebx;
 $67 = $66 >> 14;
 $ebx = $67;
 $68 = $eax;
 HEAP32[38968>>2] = $68;
 STACKTOP = sp;return;
}
function _setLightVector($angleX,$angleY,$angleZ) {
 $angleX = $angleX|0;
 $angleY = $angleY|0;
 $angleZ = $angleZ|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $angleX;
 $1 = $angleY;
 $2 = $angleZ;
 $3 = $0;
 HEAP32[319712>>2] = $3;
 $4 = $1;
 HEAP32[319728>>2] = $4;
 $5 = $2;
 HEAP32[319720>>2] = $5;
 _applyRotation(325760,319648);
 _translateGroup(0,0,59);
 $6 = HEAP32[38952>>2]|0;
 HEAP32[325800>>2] = $6;
 $7 = HEAP32[38960>>2]|0;
 HEAP32[325808>>2] = $7;
 $8 = HEAP32[38968>>2]|0;
 HEAP32[325816>>2] = $8;
 STACKTOP = sp;return;
}
function _computePolygons() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cdelta = 0, $currentVertexX = 0, $currentVertexY = 0, $cvalue = 0, $direction = 0, $hsize = 0, $i = 0, $nVertex = 0, $oldVertexX = 0, $oldVertexY = 0, $outPtr = 0, $outPtr1 = 0, $slope = 0.0, $up = 0, $vertexX = 0;
 var $vertexY = 0, $vertices = 0, $vsize = 0, $xpos = 0.0, $ypos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[39392>>2] = 39000;
 HEAP32[326016>>2] = 325824;
 $vertices = 39000;
 HEAP16[326024>>1] = 32767;
 HEAP16[326032>>1] = 32767;
 HEAP16[326040>>1] = -32768;
 HEAP16[326048>>1] = -32768;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[38992>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $vertices;
  $5 = (($4) + (($3*6)|0)|0);
  $6 = (($5) + 2|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = (_clamp(($7|0),0,639)|0);
  $9 = $i;
  $10 = $vertices;
  $11 = (($10) + (($9*6)|0)|0);
  $12 = (($11) + 2|0);
  HEAP16[$12>>1] = $8;
  $13 = $i;
  $14 = $vertices;
  $15 = (($14) + (($13*6)|0)|0);
  $16 = (($15) + 2|0);
  $17 = HEAP16[$16>>1]|0;
  $vertexX = $17;
  $18 = $vertexX;
  $19 = $18 << 16 >> 16;
  $20 = HEAP16[326032>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($19|0)<($21|0);
  if ($22) {
   $23 = $vertexX;
   HEAP16[326032>>1] = $23;
  }
  $24 = $vertexX;
  $25 = $24 << 16 >> 16;
  $26 = HEAP16[326048>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = ($25|0)>($27|0);
  if ($28) {
   $29 = $vertexX;
   HEAP16[326048>>1] = $29;
  }
  $30 = $i;
  $31 = $vertices;
  $32 = (($31) + (($30*6)|0)|0);
  $33 = (($32) + 4|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = (_clamp(($34|0),0,479)|0);
  $36 = $i;
  $37 = $vertices;
  $38 = (($37) + (($36*6)|0)|0);
  $39 = (($38) + 4|0);
  HEAP16[$39>>1] = $35;
  $40 = $i;
  $41 = $vertices;
  $42 = (($41) + (($40*6)|0)|0);
  $43 = (($42) + 4|0);
  $44 = HEAP16[$43>>1]|0;
  $vertexY = $44;
  $45 = $vertexY;
  $46 = $45 << 16 >> 16;
  $47 = HEAP16[326024>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = ($46|0)<($48|0);
  if ($49) {
   $50 = $vertexY;
   HEAP16[326024>>1] = $50;
  }
  $51 = $vertexY;
  $52 = $51 << 16 >> 16;
  $53 = HEAP16[326040>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = ($52|0)>($54|0);
  if ($55) {
   $56 = $vertexY;
   HEAP16[326040>>1] = $56;
  }
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 $59 = HEAP32[38992>>2]|0;
 $60 = (($59) - 1)|0;
 $61 = $vertices;
 $62 = (($61) + (($60*6)|0)|0);
 $63 = HEAP8[$62>>0]|0;
 HEAP8[326056>>0] = $63;
 HEAP8[326064>>0] = $63;
 $64 = HEAP32[38992>>2]|0;
 $65 = (($64) - 1)|0;
 $66 = $vertices;
 $67 = (($66) + (($65*6)|0)|0);
 $68 = (($67) + 2|0);
 $69 = HEAP16[$68>>1]|0;
 $currentVertexX = $69;
 $70 = HEAP32[38992>>2]|0;
 $71 = (($70) - 1)|0;
 $72 = $vertices;
 $73 = (($72) + (($71*6)|0)|0);
 $74 = (($73) + 4|0);
 $75 = HEAP16[$74>>1]|0;
 $currentVertexY = $75;
 $nVertex = 0;
 while(1) {
  $76 = $nVertex;
  $77 = HEAP32[38992>>2]|0;
  $78 = ($76|0)<($77|0);
  if (!($78)) {
   break;
  }
  $79 = $currentVertexY;
  $oldVertexY = $79;
  $80 = $currentVertexX;
  $oldVertexX = $80;
  $81 = HEAP8[326064>>0]|0;
  HEAP8[326072>>0] = $81;
  $82 = $nVertex;
  $83 = $vertices;
  $84 = (($83) + (($82*6)|0)|0);
  $85 = HEAP8[$84>>0]|0;
  HEAP8[326056>>0] = $85;
  HEAP8[326064>>0] = $85;
  $86 = $nVertex;
  $87 = $vertices;
  $88 = (($87) + (($86*6)|0)|0);
  $89 = (($88) + 2|0);
  $90 = HEAP16[$89>>1]|0;
  $currentVertexX = $90;
  $91 = $nVertex;
  $92 = $vertices;
  $93 = (($92) + (($91*6)|0)|0);
  $94 = (($93) + 4|0);
  $95 = HEAP16[$94>>1]|0;
  $currentVertexY = $95;
  $96 = $currentVertexY;
  $97 = $96 << 16 >> 16;
  $98 = $oldVertexY;
  $99 = $98 << 16 >> 16;
  $100 = ($97|0)==($99|0);
  if ($100) {
  } else {
   $101 = $currentVertexY;
   $102 = $101 << 16 >> 16;
   $103 = $oldVertexY;
   $104 = $103 << 16 >> 16;
   $105 = ($102|0)<($104|0);
   $106 = $105&1;
   $107 = $106&255;
   $up = $107;
   $108 = $up;
   $109 = $108 << 24 >> 24;
   $110 = ($109|0)!=(0);
   $111 = $110 ? -1 : 1;
   $112 = $111&255;
   $direction = $112;
   $113 = $currentVertexY;
   $114 = $113 << 16 >> 16;
   $115 = $oldVertexY;
   $116 = $115 << 16 >> 16;
   $117 = (($114) - ($116))|0;
   $118 = (Math_abs(($117|0))|0);
   $119 = $118&65535;
   $vsize = $119;
   $120 = $currentVertexX;
   $121 = $120 << 16 >> 16;
   $122 = $oldVertexX;
   $123 = $122 << 16 >> 16;
   $124 = (($121) - ($123))|0;
   $125 = (Math_abs(($124|0))|0);
   $126 = $125&65535;
   $hsize = $126;
   $127 = $direction;
   $128 = $127 << 24 >> 24;
   $129 = $oldVertexX;
   $130 = $129 << 16 >> 16;
   $131 = Math_imul($128, $130)|0;
   $132 = $direction;
   $133 = $132 << 24 >> 24;
   $134 = $currentVertexX;
   $135 = $134 << 16 >> 16;
   $136 = Math_imul($133, $135)|0;
   $137 = ($131|0)>($136|0);
   if ($137) {
    $138 = $currentVertexX;
    $139 = (+($138<<16>>16));
    $xpos = $139;
    $140 = $currentVertexY;
    $ypos = $140;
    $141 = HEAP8[326056>>0]|0;
    $142 = $141&255;
    $143 = $142 << 8;
    $144 = HEAP8[326072>>0]|0;
    $145 = $144&255;
    $146 = HEAP8[326056>>0]|0;
    $147 = $146&255;
    $148 = (($145) - ($147))|0;
    $149 = $148 << 8;
    $150 = $vsize;
    $151 = $150 << 16 >> 16;
    $152 = (($149|0) % ($151|0))&-1;
    $153 = (($143) + ($152))|0;
    $154 = $153&65535;
    $cvalue = $154;
    $155 = HEAP8[326072>>0]|0;
    $156 = $155&255;
    $157 = HEAP8[326056>>0]|0;
    $158 = $157&255;
    $159 = (($156) - ($158))|0;
    $160 = $159 << 8;
    $161 = $vsize;
    $162 = $161 << 16 >> 16;
    $163 = (($160|0) / ($162|0))&-1;
    $164 = $163&65535;
    $cdelta = $164;
    $165 = $direction;
    $166 = $165 << 24 >> 24;
    $167 = (0 - ($166))|0;
    $168 = $167&255;
    $direction = $168;
   } else {
    $169 = $oldVertexX;
    $170 = (+($169<<16>>16));
    $xpos = $170;
    $171 = $oldVertexY;
    $ypos = $171;
    $172 = HEAP8[326072>>0]|0;
    $173 = $172&255;
    $174 = $173 << 8;
    $175 = HEAP8[326056>>0]|0;
    $176 = $175&255;
    $177 = HEAP8[326072>>0]|0;
    $178 = $177&255;
    $179 = (($176) - ($178))|0;
    $180 = $179 << 8;
    $181 = $vsize;
    $182 = $181 << 16 >> 16;
    $183 = (($180|0) % ($182|0))&-1;
    $184 = (($174) + ($183))|0;
    $185 = $184&65535;
    $cvalue = $185;
    $186 = HEAP8[326056>>0]|0;
    $187 = $186&255;
    $188 = HEAP8[326072>>0]|0;
    $189 = $188&255;
    $190 = (($187) - ($189))|0;
    $191 = $190 << 8;
    $192 = $vsize;
    $193 = $192 << 16 >> 16;
    $194 = (($191|0) / ($193|0))&-1;
    $195 = $194&65535;
    $cdelta = $195;
   }
   $196 = $ypos;
   $197 = $196 << 16 >> 16;
   $198 = $up;
   $199 = $198 << 24 >> 24;
   $200 = ($199|0)!=(0);
   $201 = $200 ? 480 : 0;
   $202 = (($197) + ($201))|0;
   $203 = (326080 + ($202<<1)|0);
   $outPtr = $203;
   $204 = $hsize;
   $205 = (+($204<<16>>16));
   $206 = $vsize;
   $207 = (+($206<<16>>16));
   $208 = $205 / $207;
   $slope = $208;
   $209 = $up;
   $210 = $209 << 24 >> 24;
   $211 = ($210|0)!=(0);
   if ($211) {
    $212 = $slope;
    $213 = -$212;
    $215 = $213;
   } else {
    $214 = $slope;
    $215 = $214;
   }
   $slope = $215;
   $i = 0;
   while(1) {
    $216 = $i;
    $217 = $vsize;
    $218 = $217 << 16 >> 16;
    $219 = (($218) + 2)|0;
    $220 = ($216|0)<($219|0);
    if (!($220)) {
     break;
    }
    $221 = $outPtr;
    $222 = $221;
    $223 = (($222) - (326080))|0;
    $224 = (($223|0) / 2)&-1;
    $225 = ($224|0)<(960);
    if ($225) {
     $226 = $outPtr;
     $227 = $226;
     $228 = (($227) - (326080))|0;
     $229 = (($228|0) / 2)&-1;
     $230 = ($229|0)>(0);
     if ($230) {
      $231 = $xpos;
      $232 = (~~(($231)));
      $233 = $outPtr;
      HEAP16[$233>>1] = $232;
     }
    }
    $234 = $direction;
    $235 = $234 << 24 >> 24;
    $236 = $outPtr;
    $237 = (($236) + ($235<<1)|0);
    $outPtr = $237;
    $238 = $slope;
    $239 = $xpos;
    $240 = $239 + $238;
    $xpos = $240;
    $241 = $i;
    $242 = (($241) + 1)|0;
    $i = $242;
   }
   $243 = HEAP16[38984>>1]|0;
   $244 = $243 << 16 >> 16;
   $245 = ($244|0)>=(7);
   if ($245) {
    $246 = $ypos;
    $247 = $246 << 16 >> 16;
    $248 = $up;
    $249 = $248 << 24 >> 24;
    $250 = ($249|0)!=(0);
    $251 = $250 ? 480 : 0;
    $252 = (($247) + ($251))|0;
    $253 = (328000 + ($252<<1)|0);
    $outPtr1 = $253;
    $i = 0;
    while(1) {
     $254 = $i;
     $255 = $vsize;
     $256 = $255 << 16 >> 16;
     $257 = (($256) + 2)|0;
     $258 = ($254|0)<($257|0);
     if (!($258)) {
      break;
     }
     $259 = $outPtr1;
     $260 = $259;
     $261 = (($260) - (328000))|0;
     $262 = (($261|0) / 2)&-1;
     $263 = ($262|0)<(960);
     if ($263) {
      $264 = $outPtr1;
      $265 = $264;
      $266 = (($265) - (328000))|0;
      $267 = (($266|0) / 2)&-1;
      $268 = ($267|0)>(0);
      if ($268) {
       $269 = $cvalue;
       $270 = $outPtr1;
       HEAP16[$270>>1] = $269;
      }
     }
     $271 = $direction;
     $272 = $271 << 24 >> 24;
     $273 = $outPtr1;
     $274 = (($273) + ($272<<1)|0);
     $outPtr1 = $274;
     $275 = $cdelta;
     $276 = $275 << 16 >> 16;
     $277 = $cvalue;
     $278 = $277 << 16 >> 16;
     $279 = (($278) + ($276))|0;
     $280 = $279&65535;
     $cvalue = $280;
     $281 = $i;
     $282 = (($281) + 1)|0;
     $i = $282;
    }
   }
  }
  $283 = $nVertex;
  $284 = (($283) + 1)|0;
  $nVertex = $284;
 }
 STACKTOP = sp;return 1;
}
function _renderPolygons($renderType,$color) {
 $renderType = $renderType|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $ax = 0, $ax3 = 0, $bh = 0, $bx = 0, $bx2 = 0, $colorSize = 0, $colorSize7 = 0, $currentColor = 0, $currentColor8 = 0, $currentColor9 = 0, $currentLine = 0, $currentXPos = 0, $currentXPos6 = 0, $dx = 0, $dx1 = 0, $hsize = 0, $j = 0;
 var $mask = 0, $out = 0, $out2 = 0, $ptr1 = 0, $ptr2 = 0, $start = 0, $startColor = 0, $startColor4 = 0, $startCopy = 0, $stop = 0, $stopColor = 0, $stopColor5 = 0, $temp = 0, $vsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $renderType;
 $1 = $color;
 $2 = HEAP32[25952>>2]|0;
 $3 = HEAP16[326024>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = ($4*640)|0;
 $6 = (($2) + ($5)|0);
 $out = $6;
 $7 = HEAP16[326024>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (326080 + ($8<<1)|0);
 $ptr1 = $9;
 $10 = HEAP16[326024>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (328000 + ($11<<1)|0);
 $ptr2 = $12;
 $13 = HEAP16[326040>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = HEAP16[326024>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = (($14) - ($16))|0;
 $vsize = $17;
 $18 = $vsize;
 $19 = (($18) + 1)|0;
 $vsize = $19;
 $20 = $0;
 do {
  switch ($20|0) {
  case 1:  {
   $73 = HEAP16[326024>>1]|0;
   $74 = $73 << 16 >> 16;
   $currentLine = $74;
   while(1) {
    $75 = $currentLine;
    $76 = ($75|0)>=(0);
    if ($76) {
     $77 = $currentLine;
     $78 = ($77|0)<(480);
     if ($78) {
      $79 = $ptr1;
      $80 = HEAP16[$79>>1]|0;
      $start = $80;
      $81 = $ptr1;
      $82 = (($81) + 960|0);
      $83 = HEAP16[$82>>1]|0;
      $stop = $83;
      $84 = $ptr1;
      $85 = (($84) + 2|0);
      $ptr1 = $85;
      $86 = $stop;
      $87 = $86 << 16 >> 16;
      $88 = $start;
      $89 = $88 << 16 >> 16;
      $90 = (($87) - ($89))|0;
      $hsize = $90;
      $91 = $hsize;
      $92 = ($91|0)>=(0);
      if ($92) {
       $mask = 17371;
       $93 = $1;
       $94 = $93&255;
       $95 = $94&255;
       $dx = $95;
       $96 = $dx;
       $97 = $96&65535;
       $98 = $97 | 768;
       $99 = $98&65535;
       $dx = $99;
       $100 = $hsize;
       $101 = (($100) + 1)|0;
       $hsize = $101;
       $102 = $start;
       $103 = $102 << 16 >> 16;
       $104 = $out;
       $105 = (($104) + ($103)|0);
       $out2 = $105;
       $106 = $start;
       $107 = $106 << 16 >> 16;
       $startCopy = $107;
       $108 = $startCopy;
       $j = $108;
       while(1) {
        $109 = $j;
        $110 = $hsize;
        $111 = $startCopy;
        $112 = (($110) + ($111))|0;
        $113 = ($109|0)<($112|0);
        if (!($113)) {
         break;
        }
        $114 = $mask;
        $115 = $114&65535;
        $116 = $start;
        $117 = $116 << 16 >> 16;
        $118 = (($117) + ($115))|0;
        $119 = $118&65535;
        $start = $119;
        $120 = $start;
        $121 = $120 << 16 >> 16;
        $122 = $121 & 65280;
        $123 = $start;
        $124 = $123 << 16 >> 16;
        $125 = $124 & 255;
        $126 = $dx;
        $127 = $126&65535;
        $128 = $127 >> 8;
        $129 = $128&255;
        $130 = $129&255;
        $131 = $125 & $130;
        $132 = $122 | $131;
        $133 = $132&65535;
        $start = $133;
        $134 = $start;
        $135 = $134 << 16 >> 16;
        $136 = $135 & 65280;
        $137 = $start;
        $138 = $137 << 16 >> 16;
        $139 = $138 & 255;
        $140 = $dx;
        $141 = $140&65535;
        $142 = $141 & 255;
        $143 = (($139) + ($142))|0;
        $144 = $136 | $143;
        $145 = $144&65535;
        $start = $145;
        $146 = $j;
        $147 = ($146|0)>=(0);
        if ($147) {
         $148 = $j;
         $149 = ($148|0)<(640);
         if ($149) {
          $150 = $start;
          $151 = $150 << 16 >> 16;
          $152 = $151 & 255;
          $153 = $152&255;
          $154 = $j;
          $155 = $out;
          $156 = (($155) + ($154)|0);
          HEAP8[$156>>0] = $153;
         }
        }
        $157 = $mask;
        $158 = $157&65535;
        $159 = $158 << 2;
        $160 = $mask;
        $161 = $160&65535;
        $162 = $161 >> 14;
        $163 = $159 | $162;
        $164 = $163&65535;
        $mask = $164;
        $165 = $mask;
        $166 = (($165) + 1)<<16>>16;
        $mask = $166;
        $167 = $j;
        $168 = (($167) + 1)|0;
        $j = $168;
       }
      }
     }
    }
    $169 = $out;
    $170 = (($169) + 640|0);
    $out = $170;
    $171 = $currentLine;
    $172 = (($171) + 1)|0;
    $currentLine = $172;
    $173 = $vsize;
    $174 = (($173) + -1)|0;
    $vsize = $174;
    $175 = ($174|0)!=(0);
    if (!($175)) {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   while(1) {
    $369 = $ptr1;
    $370 = HEAP16[$369>>1]|0;
    $start = $370;
    $371 = $ptr1;
    $372 = (($371) + 960|0);
    $373 = HEAP16[$372>>1]|0;
    $stop = $373;
    $374 = $ptr1;
    $375 = (($374) + 2|0);
    $ptr1 = $375;
    $376 = $stop;
    $377 = $376 << 16 >> 16;
    $378 = $start;
    $379 = $378 << 16 >> 16;
    $380 = (($377) - ($379))|0;
    $hsize = $380;
    $381 = $hsize;
    $382 = ($381|0)>=(0);
    if ($382) {
     $383 = $hsize;
     $384 = (($383) + 1)|0;
     $hsize = $384;
     $385 = $start;
     $386 = $385 << 16 >> 16;
     $387 = $out;
     $388 = (($387) + ($386)|0);
     $out2 = $388;
     $389 = $hsize;
     $390 = $389 >> 1;
     $391 = ($390|0)<(0);
     if ($391) {
      $392 = $1;
      $393 = $392 & 255;
      $394 = $393&65535;
      $bx2 = $394;
      $395 = $bx2;
      $396 = $395&65535;
      $397 = $396 << 8;
      $398 = $397&65535;
      $bx2 = $398;
      $399 = $1;
      $400 = $399 & 255;
      $401 = $bx2;
      $402 = $401&65535;
      $403 = (($402) + ($400))|0;
      $404 = $403&65535;
      $bx2 = $404;
      $j = 0;
      while(1) {
       $405 = $j;
       $406 = $hsize;
       $407 = ($405|0)<($406|0);
       if (!($407)) {
        break;
       }
       $408 = $out2;
       $409 = HEAP8[$408>>0]|0;
       $410 = $409&255;
       $411 = $410 & 3855;
       $412 = $bx2;
       $413 = $412&65535;
       $414 = $411 | $413;
       $415 = $414&255;
       $416 = $out2;
       HEAP8[$416>>0] = $415;
       $417 = $j;
       $418 = (($417) + 1)|0;
       $j = $418;
      }
     } else {
      $419 = $out2;
      $420 = HEAP8[$419>>0]|0;
      $421 = $420&255;
      $422 = $421 & 15;
      $423 = $1;
      $424 = $422 | $423;
      $425 = $424&255;
      $426 = $out2;
      $427 = (($426) + 1|0);
      $out2 = $427;
      HEAP8[$426>>0] = $425;
     }
    }
    $428 = $out;
    $429 = (($428) + 640|0);
    $out = $429;
    $430 = $vsize;
    $431 = (($430) + -1)|0;
    $vsize = $431;
    $432 = ($431|0)!=(0);
    if (!($432)) {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $21 = HEAP16[326024>>1]|0;
   $22 = $21 << 16 >> 16;
   $currentLine = $22;
   while(1) {
    $23 = $currentLine;
    $24 = ($23|0)>=(0);
    if ($24) {
     $25 = $currentLine;
     $26 = ($25|0)<(480);
     if ($26) {
      $27 = $ptr1;
      $28 = (($27) + 960|0);
      $29 = HEAP16[$28>>1]|0;
      $stop = $29;
      $30 = $ptr1;
      $31 = HEAP16[$30>>1]|0;
      $start = $31;
      $32 = $ptr1;
      $33 = (($32) + 2|0);
      $ptr1 = $33;
      $34 = $stop;
      $35 = $34 << 16 >> 16;
      $36 = $start;
      $37 = $36 << 16 >> 16;
      $38 = (($35) - ($37))|0;
      $hsize = $38;
      $39 = $hsize;
      $40 = ($39|0)>=(0);
      if ($40) {
       $41 = $hsize;
       $42 = (($41) + 1)|0;
       $hsize = $42;
       $43 = $start;
       $44 = $43 << 16 >> 16;
       $45 = $out;
       $46 = (($45) + ($44)|0);
       $out2 = $46;
       $47 = $start;
       $48 = $47 << 16 >> 16;
       $j = $48;
       while(1) {
        $49 = $j;
        $50 = $hsize;
        $51 = $start;
        $52 = $51 << 16 >> 16;
        $53 = (($50) + ($52))|0;
        $54 = ($49|0)<($53|0);
        if (!($54)) {
         break;
        }
        $55 = $j;
        $56 = ($55|0)>=(0);
        if ($56) {
         $57 = $j;
         $58 = ($57|0)<(640);
         if ($58) {
          $59 = $1;
          $60 = $59&255;
          $61 = $j;
          $62 = $out;
          $63 = (($62) + ($61)|0);
          HEAP8[$63>>0] = $60;
         }
        }
        $64 = $j;
        $65 = (($64) + 1)|0;
        $j = $65;
       }
      }
     }
    }
    $66 = $out;
    $67 = (($66) + 640|0);
    $out = $67;
    $68 = $currentLine;
    $69 = (($68) + 1)|0;
    $currentLine = $69;
    $70 = $vsize;
    $71 = (($70) + -1)|0;
    $vsize = $71;
    $72 = ($71|0)!=(0);
    if (!($72)) {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $176 = HEAP16[326024>>1]|0;
   $177 = $176 << 16 >> 16;
   $currentLine = $177;
   while(1) {
    $178 = $currentLine;
    $179 = ($178|0)>=(0);
    if ($179) {
     $180 = $currentLine;
     $181 = ($180|0)<(480);
     if ($181) {
      $182 = $ptr1;
      $183 = HEAP16[$182>>1]|0;
      $start = $183;
      $184 = $ptr1;
      $185 = (($184) + 960|0);
      $186 = HEAP16[$185>>1]|0;
      $stop = $186;
      $187 = $ptr1;
      $188 = (($187) + 2|0);
      $ptr1 = $188;
      $189 = $stop;
      $190 = $189 << 16 >> 16;
      $191 = $start;
      $192 = $191 << 16 >> 16;
      $193 = (($190) - ($192))|0;
      $hsize = $193;
      $194 = $hsize;
      $195 = ($194|0)>=(0);
      if ($195) {
       $196 = $hsize;
       $197 = (($196) + 1)|0;
       $hsize = $197;
       $198 = $start;
       $199 = $198 << 16 >> 16;
       $200 = $out;
       $201 = (($200) + ($199)|0);
       $out2 = $201;
       $202 = $start;
       $203 = $202 << 16 >> 16;
       $j = $203;
       while(1) {
        $204 = $j;
        $205 = $hsize;
        $206 = $start;
        $207 = $206 << 16 >> 16;
        $208 = (($205) + ($207))|0;
        $209 = ($204|0)<($208|0);
        if (!($209)) {
         break;
        }
        $210 = $start;
        $211 = $210 << 16 >> 16;
        $212 = HEAP16[326024>>1]|0;
        $213 = $212 << 16 >> 16;
        $214 = (($213|0) % 1)&-1;
        $215 = (($211) + ($214))|0;
        $216 = $215 & 1;
        $217 = ($216|0)!=(0);
        if ($217) {
         $218 = $j;
         $219 = ($218|0)>=(0);
         if ($219) {
          $220 = $j;
          $221 = ($220|0)<(640);
          if ($221) {
           $222 = $1;
           $223 = $222&255;
           $224 = $j;
           $225 = $out;
           $226 = (($225) + ($224)|0);
           HEAP8[$226>>0] = $223;
          }
         }
        }
        $227 = $out2;
        $228 = (($227) + 1|0);
        $out2 = $228;
        $229 = $j;
        $230 = (($229) + 1)|0;
        $j = $230;
       }
      }
     }
    }
    $231 = $out;
    $232 = (($231) + 640|0);
    $out = $232;
    $233 = $currentLine;
    $234 = (($233) + 1)|0;
    $currentLine = $234;
    $235 = $vsize;
    $236 = (($235) + -1)|0;
    $vsize = $236;
    $237 = ($236|0)!=(0);
    if (!($237)) {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $238 = $1;
   $239 = $238&65535;
   $240 = $239&65535;
   $241 = $240 << 16;
   $bx = $241;
   $242 = $vsize;
   HEAP32[329920>>2] = $242;
   L90: while(1) {
    while(1) {
     $243 = $ptr1;
     $244 = HEAP16[$243>>1]|0;
     $start = $244;
     $245 = $ptr1;
     $246 = (($245) + 960|0);
     $247 = HEAP16[$246>>1]|0;
     $stop = $247;
     $248 = $ptr1;
     $249 = (($248) + 2|0);
     $ptr1 = $249;
     $250 = $stop;
     $251 = $250 << 16 >> 16;
     $252 = $start;
     $253 = $252 << 16 >> 16;
     $254 = (($251) - ($253))|0;
     $hsize = $254;
     $255 = $hsize;
     $256 = ($255|0)!=(0);
     if ($256) {
      break;
     }
     $257 = $start;
     $258 = $257 << 16 >> 16;
     $259 = $out;
     $260 = (($259) + ($258)|0);
     $out2 = $260;
     $261 = $bx;
     $262 = $261 >> 24;
     $263 = $262&65535;
     $264 = $263&65535;
     $265 = $264 & 15;
     $266 = $265&255;
     $267 = $out2;
     HEAP8[$267>>0] = $266;
     $268 = $out2;
     $269 = (($268) + 1|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = $270&255;
     $1 = $271;
     $272 = $out;
     $273 = (($272) + 640|0);
     $out = $273;
     $274 = HEAP32[329920>>2]|0;
     $275 = (($274) + -1)|0;
     HEAP32[329920>>2] = $275;
     $276 = HEAP32[329920>>2]|0;
     $277 = ($276|0)!=(0);
     if (!($277)) {
      label = 58;
      break L90;
     }
    }
    $278 = $stop;
    $279 = $278 << 16 >> 16;
    $280 = $start;
    $281 = $280 << 16 >> 16;
    $282 = ($279|0)>=($281|0);
    if ($282) {
     $283 = $hsize;
     $284 = (($283) + 1)|0;
     $hsize = $284;
     $285 = $1;
     $286 = $285 >> 16;
     $287 = $286&65535;
     $288 = $287&65535;
     $bx = $288;
     $289 = $start;
     $290 = $289 << 16 >> 16;
     $291 = $out;
     $292 = (($291) + ($290)|0);
     $out2 = $292;
     $293 = $bx;
     $294 = $293 & 240;
     $295 = $294 << 8;
     $ax = $295;
     $296 = $bx;
     $297 = $296 << 8;
     $bx = $297;
     $298 = $bx;
     $299 = $298 & 15;
     $300 = $ax;
     $301 = (($300) + ($299))|0;
     $ax = $301;
     $302 = $bx;
     $303 = $ax;
     $304 = (($303) - ($302))|0;
     $ax = $304;
     $305 = $ax;
     $306 = (($305) + 1)|0;
     $ax = $306;
     $307 = $ax;
     $308 = $307 >> 16;
     $ax = $308;
     $309 = $ax;
     $310 = $hsize;
     $311 = (($309|0) / ($310|0))&-1;
     $ax = $311;
     $312 = $ax;
     $313 = $312 & 240;
     $314 = $313&65535;
     $temp = $314;
     $315 = $temp;
     $316 = $315&65535;
     $317 = $316 >> 8;
     $318 = $317&65535;
     $temp = $318;
     $319 = $ax;
     $320 = $319 & 15;
     $321 = $temp;
     $322 = $321&65535;
     $323 = (($322) + ($320))|0;
     $324 = $323&65535;
     $temp = $324;
     $325 = $temp;
     $326 = $325&65535;
     $ax = $326;
     $327 = $ax;
     $328 = $327&65535;
     $dx1 = $328;
     $329 = $ax;
     $330 = $329 & 15;
     $331 = $bx;
     $332 = $331 & 240;
     $333 = (($330) + ($332))|0;
     $ax = $333;
     $334 = $hsize;
     $335 = (($334) + 1)|0;
     $hsize = $335;
     $336 = $hsize;
     $337 = $336 & 1;
     $338 = ($337|0)!=(0);
     if ($338) {
      $ax = 0;
     }
     $339 = $hsize;
     $340 = $339 >> 1;
     $j = $340;
     while(1) {
      $341 = $ax;
      $342 = $341 & 15;
      $343 = $342&255;
      $344 = $out2;
      $345 = (($344) + 1|0);
      $out2 = $345;
      HEAP8[$344>>0] = $343;
      $346 = $dx1;
      $347 = $346&65535;
      $348 = $ax;
      $349 = (($348) + ($347))|0;
      $ax = $349;
      $350 = $j;
      $351 = (($350) + -1)|0;
      $j = $351;
      $352 = $j;
      $353 = ($352|0)!=(0);
      if (!($353)) {
       break;
      }
      $354 = $ax;
      $355 = $354 & 15;
      $356 = $355&255;
      $357 = $out2;
      $358 = (($357) + 1|0);
      $out2 = $358;
      HEAP8[$357>>0] = $356;
      $359 = $dx1;
      $360 = $359&65535;
      $361 = $ax;
      $362 = (($361) + ($360))|0;
      $ax = $362;
     }
    }
    $363 = $out;
    $364 = (($363) + 640|0);
    $out = $364;
    $365 = HEAP32[329920>>2]|0;
    $366 = (($365) + -1)|0;
    HEAP32[329920>>2] = $366;
    $367 = HEAP32[329920>>2]|0;
    $368 = ($367|0)!=(0);
    if (!($368)) {
     label = 70;
     break;
    }
   }
   if ((label|0) == 58) {
    STACKTOP = sp;return;
   }
   else if ((label|0) == 70) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 3:  {
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $702 = $vsize;
   HEAP32[329920>>2] = $702;
   $703 = HEAP16[326024>>1]|0;
   $704 = $703 << 16 >> 16;
   $currentLine = $704;
   while(1) {
    $705 = $currentLine;
    $706 = ($705|0)>=(0);
    if ($706) {
     $707 = $currentLine;
     $708 = ($707|0)<(480);
     if ($708) {
      $709 = $ptr1;
      $710 = (($709) + 960|0);
      $711 = HEAP16[$710>>1]|0;
      $stop = $711;
      $712 = $ptr1;
      $713 = HEAP16[$712>>1]|0;
      $start = $713;
      $714 = $ptr1;
      $715 = (($714) + 2|0);
      $ptr1 = $715;
      $716 = $stop;
      $717 = $716 << 16 >> 16;
      $718 = $start;
      $719 = $718 << 16 >> 16;
      $720 = (($717) - ($719))|0;
      $hsize = $720;
      $721 = $hsize;
      $722 = ($721|0)>=(0);
      if ($722) {
       $723 = $ptr2;
       $724 = HEAP16[$723>>1]|0;
       $startColor4 = $724;
       $725 = $ptr2;
       $726 = (($725) + 960|0);
       $727 = HEAP16[$726>>1]|0;
       $stopColor5 = $727;
       $728 = $start;
       $729 = $728 << 16 >> 16;
       $currentXPos6 = $729;
       $730 = $start;
       $731 = $730 << 16 >> 16;
       $732 = $out;
       $733 = (($732) + ($731)|0);
       $out2 = $733;
       $734 = $ptr2;
       $735 = (($734) + 2|0);
       $ptr2 = $735;
       $736 = $hsize;
       $737 = ($736|0)==(0);
       if ($737) {
        $738 = $currentXPos6;
        $739 = ($738|0)>=(0);
        if ($739) {
         $740 = $currentXPos6;
         $741 = ($740|0)<(640);
         if ($741) {
          $742 = $startColor4;
          $743 = $742&65535;
          $744 = $stopColor5;
          $745 = $744&65535;
          $746 = (($743) + ($745))|0;
          $747 = (($746|0) / 2)&-1;
          $748 = $747 >> 8;
          $749 = $748&255;
          $750 = $out2;
          HEAP8[$750>>0] = $749;
         }
        }
       } else {
        $751 = $stopColor5;
        $752 = $751&65535;
        $753 = $startColor4;
        $754 = $753&65535;
        $755 = (($752) - ($754))|0;
        $756 = $755&65535;
        $colorSize7 = $756;
        $757 = $hsize;
        $758 = ($757|0)==(1);
        if ($758) {
         $759 = $startColor4;
         $currentColor = $759;
         $760 = $hsize;
         $761 = (($760) + 1)|0;
         $hsize = $761;
         $762 = $hsize;
         $763 = (($762|0) / 2)&-1;
         $hsize = $763;
         $764 = $currentColor;
         $765 = $764&65535;
         $766 = $765 & 255;
         $767 = $766&65535;
         $currentColor = $767;
         $768 = $startColor4;
         $769 = $768&65535;
         $770 = $currentColor;
         $771 = $770&65535;
         $772 = (($771) + ($769))|0;
         $773 = $772&65535;
         $currentColor = $773;
         $774 = $currentXPos6;
         $775 = ($774|0)>=(0);
         if ($775) {
          $776 = $currentXPos6;
          $777 = ($776|0)<(640);
          if ($777) {
           $778 = $currentColor;
           $779 = $778&65535;
           $780 = $779 >> 8;
           $781 = $780&255;
           $782 = $out2;
           HEAP8[$782>>0] = $781;
          }
         }
         $783 = $currentColor;
         $784 = $783&65535;
         $785 = $784 & 255;
         $786 = $785&65535;
         $currentColor = $786;
         $787 = $colorSize7;
         $788 = $787 << 16 >> 16;
         $789 = $startColor4;
         $790 = $789&65535;
         $791 = (($790) + ($788))|0;
         $792 = $791&65535;
         $startColor4 = $792;
         $793 = $currentColor;
         $794 = $793&65535;
         $795 = $794 & 65280;
         $796 = $currentColor;
         $797 = $796&65535;
         $798 = $797 & 255;
         $799 = $hsize;
         $800 = $799 & 255;
         $801 = $798 << $800;
         $802 = $801 & 255;
         $803 = $795 | $802;
         $804 = $803&65535;
         $currentColor = $804;
         $805 = $startColor4;
         $806 = $805&65535;
         $807 = $currentColor;
         $808 = $807&65535;
         $809 = (($808) + ($806))|0;
         $810 = $809&65535;
         $currentColor = $810;
         $811 = $currentXPos6;
         $812 = (($811) + 1)|0;
         $currentXPos6 = $812;
         $813 = $currentXPos6;
         $814 = ($813|0)>=(0);
         if ($814) {
          $815 = $currentXPos6;
          $816 = ($815|0)<(640);
          if ($816) {
           $817 = $currentColor;
           $818 = $817&65535;
           $819 = $818 >> 8;
           $820 = $819&255;
           $821 = $out2;
           $822 = (($821) + 1|0);
           HEAP8[$822>>0] = $820;
          }
         }
        } else {
         $823 = $hsize;
         $824 = ($823|0)==(2);
         if ($824) {
          $825 = $startColor4;
          $currentColor8 = $825;
          $826 = $hsize;
          $827 = (($826) + 1)|0;
          $hsize = $827;
          $828 = $hsize;
          $829 = (($828|0) / 2)&-1;
          $hsize = $829;
          $830 = $currentColor8;
          $831 = $830&65535;
          $832 = $831 & 255;
          $833 = $832&65535;
          $currentColor8 = $833;
          $834 = $colorSize7;
          $835 = $834 << 16 >> 16;
          $836 = (($835|0) / 2)&-1;
          $837 = $836&65535;
          $colorSize7 = $837;
          $838 = $currentColor8;
          $839 = $838&65535;
          $840 = $839 & 65280;
          $841 = $currentColor8;
          $842 = $841&65535;
          $843 = $842 & 255;
          $844 = $hsize;
          $845 = $844 & 255;
          $846 = $843 << $845;
          $847 = $846 & 255;
          $848 = $840 | $847;
          $849 = $848&65535;
          $currentColor8 = $849;
          $850 = $startColor4;
          $851 = $850&65535;
          $852 = $currentColor8;
          $853 = $852&65535;
          $854 = (($853) + ($851))|0;
          $855 = $854&65535;
          $currentColor8 = $855;
          $856 = $currentXPos6;
          $857 = ($856|0)>=(0);
          if ($857) {
           $858 = $currentXPos6;
           $859 = ($858|0)<(640);
           if ($859) {
            $860 = $currentColor8;
            $861 = $860&65535;
            $862 = $861 >> 8;
            $863 = $862&255;
            $864 = $out2;
            HEAP8[$864>>0] = $863;
           }
          }
          $865 = $out2;
          $866 = (($865) + 1|0);
          $out2 = $866;
          $867 = $currentXPos6;
          $868 = (($867) + 1)|0;
          $currentXPos6 = $868;
          $869 = $colorSize7;
          $870 = $869 << 16 >> 16;
          $871 = $startColor4;
          $872 = $871&65535;
          $873 = (($872) + ($870))|0;
          $874 = $873&65535;
          $startColor4 = $874;
          $875 = $currentColor8;
          $876 = $875&65535;
          $877 = $876 & 255;
          $878 = $877&65535;
          $currentColor8 = $878;
          $879 = $startColor4;
          $880 = $879&65535;
          $881 = $currentColor8;
          $882 = $881&65535;
          $883 = (($882) + ($880))|0;
          $884 = $883&65535;
          $currentColor8 = $884;
          $885 = $currentXPos6;
          $886 = ($885|0)>=(0);
          if ($886) {
           $887 = $currentXPos6;
           $888 = ($887|0)<(640);
           if ($888) {
            $889 = $currentColor8;
            $890 = $889&65535;
            $891 = $890 >> 8;
            $892 = $891&255;
            $893 = $out2;
            HEAP8[$893>>0] = $892;
           }
          }
          $894 = $currentColor8;
          $895 = $894&65535;
          $896 = $895 & 255;
          $897 = $896&65535;
          $currentColor8 = $897;
          $898 = $colorSize7;
          $899 = $898 << 16 >> 16;
          $900 = $startColor4;
          $901 = $900&65535;
          $902 = (($901) + ($899))|0;
          $903 = $902&65535;
          $startColor4 = $903;
          $904 = $currentColor8;
          $905 = $904&65535;
          $906 = $905 & 65280;
          $907 = $currentColor8;
          $908 = $907&65535;
          $909 = $908 & 255;
          $910 = $hsize;
          $911 = $910 & 255;
          $912 = $909 << $911;
          $913 = $912 & 255;
          $914 = $906 | $913;
          $915 = $914&65535;
          $currentColor8 = $915;
          $916 = $startColor4;
          $917 = $916&65535;
          $918 = $currentColor8;
          $919 = $918&65535;
          $920 = (($919) + ($917))|0;
          $921 = $920&65535;
          $currentColor8 = $921;
          $922 = $currentXPos6;
          $923 = (($922) + 1)|0;
          $currentXPos6 = $923;
          $924 = $currentXPos6;
          $925 = ($924|0)>=(0);
          if ($925) {
           $926 = $currentXPos6;
           $927 = ($926|0)<(640);
           if ($927) {
            $928 = $currentColor8;
            $929 = $928&65535;
            $930 = $929 >> 8;
            $931 = $930&255;
            $932 = $out2;
            $933 = (($932) + 1|0);
            HEAP8[$933>>0] = $931;
           }
          }
         } else {
          $934 = $startColor4;
          $currentColor9 = $934;
          $935 = $hsize;
          $936 = $colorSize7;
          $937 = $936 << 16 >> 16;
          $938 = (($937|0) / ($935|0))&-1;
          $939 = $938&65535;
          $colorSize7 = $939;
          $940 = $hsize;
          $941 = (($940) + 1)|0;
          $hsize = $941;
          $942 = $hsize;
          $943 = (($942|0) % 2)&-1;
          $944 = ($943|0)!=(0);
          if ($944) {
           $945 = $hsize;
           $946 = (($945|0) / 2)&-1;
           $hsize = $946;
           $947 = $currentColor9;
           $948 = $947&65535;
           $949 = $948 & 255;
           $950 = $949&65535;
           $currentColor9 = $950;
           $951 = $currentColor9;
           $952 = $951&65535;
           $953 = $952 & 65280;
           $954 = $currentColor9;
           $955 = $954&65535;
           $956 = $955 & 255;
           $957 = $hsize;
           $958 = $957 & 255;
           $959 = $956 << $958;
           $960 = $959 & 255;
           $961 = $953 | $960;
           $962 = $961&65535;
           $currentColor9 = $962;
           $963 = $startColor4;
           $964 = $963&65535;
           $965 = $currentColor9;
           $966 = $965&65535;
           $967 = (($966) + ($964))|0;
           $968 = $967&65535;
           $currentColor9 = $968;
           $969 = $currentXPos6;
           $970 = ($969|0)>=(0);
           if ($970) {
            $971 = $currentXPos6;
            $972 = ($971|0)<(640);
            if ($972) {
             $973 = $currentColor9;
             $974 = $973&65535;
             $975 = $974 >> 8;
             $976 = $975&255;
             $977 = $out2;
             HEAP8[$977>>0] = $976;
            }
           }
           $978 = $out2;
           $979 = (($978) + 1|0);
           $out2 = $979;
           $980 = $currentXPos6;
           $981 = (($980) + 1)|0;
           $currentXPos6 = $981;
          } else {
           $982 = $hsize;
           $983 = (($982|0) / 2)&-1;
           $hsize = $983;
          }
          while(1) {
           $984 = $currentColor9;
           $985 = $984&65535;
           $986 = $985 & 255;
           $987 = $986&65535;
           $currentColor9 = $987;
           $988 = $startColor4;
           $989 = $988&65535;
           $990 = $currentColor9;
           $991 = $990&65535;
           $992 = (($991) + ($989))|0;
           $993 = $992&65535;
           $currentColor9 = $993;
           $994 = $currentXPos6;
           $995 = ($994|0)>=(0);
           if ($995) {
            $996 = $currentXPos6;
            $997 = ($996|0)<(640);
            if ($997) {
             $998 = $currentColor9;
             $999 = $998&65535;
             $1000 = $999 >> 8;
             $1001 = $1000&255;
             $1002 = $out2;
             HEAP8[$1002>>0] = $1001;
            }
           }
           $1003 = $currentXPos6;
           $1004 = (($1003) + 1)|0;
           $currentXPos6 = $1004;
           $1005 = $currentColor9;
           $1006 = $1005&65535;
           $1007 = $1006 & 255;
           $1008 = $1007&65535;
           $currentColor9 = $1008;
           $1009 = $colorSize7;
           $1010 = $1009 << 16 >> 16;
           $1011 = $startColor4;
           $1012 = $1011&65535;
           $1013 = (($1012) + ($1010))|0;
           $1014 = $1013&65535;
           $startColor4 = $1014;
           $1015 = $currentColor9;
           $1016 = $1015&65535;
           $1017 = $1016 & 65280;
           $1018 = $currentColor9;
           $1019 = $1018&65535;
           $1020 = $1019 & 255;
           $1021 = $hsize;
           $1022 = $1021 & 255;
           $1023 = $1020 << $1022;
           $1024 = $1023 & 255;
           $1025 = $1017 | $1024;
           $1026 = $1025&65535;
           $currentColor9 = $1026;
           $1027 = $startColor4;
           $1028 = $1027&65535;
           $1029 = $currentColor9;
           $1030 = $1029&65535;
           $1031 = (($1030) + ($1028))|0;
           $1032 = $1031&65535;
           $currentColor9 = $1032;
           $1033 = $currentXPos6;
           $1034 = ($1033|0)>=(0);
           if ($1034) {
            $1035 = $currentXPos6;
            $1036 = ($1035|0)<(640);
            if ($1036) {
             $1037 = $currentColor9;
             $1038 = $1037&65535;
             $1039 = $1038 >> 8;
             $1040 = $1039&255;
             $1041 = $out2;
             $1042 = (($1041) + 1|0);
             HEAP8[$1042>>0] = $1040;
            }
           }
           $1043 = $currentXPos6;
           $1044 = (($1043) + 1)|0;
           $currentXPos6 = $1044;
           $1045 = $out2;
           $1046 = (($1045) + 2|0);
           $out2 = $1046;
           $1047 = $colorSize7;
           $1048 = $1047 << 16 >> 16;
           $1049 = $startColor4;
           $1050 = $1049&65535;
           $1051 = (($1050) + ($1048))|0;
           $1052 = $1051&65535;
           $startColor4 = $1052;
           $1053 = $hsize;
           $1054 = (($1053) + -1)|0;
           $hsize = $1054;
           $1055 = ($1054|0)!=(0);
           if (!($1055)) {
            break;
           }
          }
         }
        }
       }
      }
     }
    }
    $1056 = $out;
    $1057 = (($1056) + 640|0);
    $out = $1057;
    $1058 = $currentLine;
    $1059 = (($1058) + 1)|0;
    $currentLine = $1059;
    $1060 = HEAP32[329920>>2]|0;
    $1061 = (($1060) + -1)|0;
    HEAP32[329920>>2] = $1061;
    $1062 = ($1061|0)!=(0);
    if (!($1062)) {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $499 = $vsize;
   HEAP32[329920>>2] = $499;
   $500 = HEAP16[326024>>1]|0;
   $501 = $500 << 16 >> 16;
   $currentLine = $501;
   while(1) {
    $502 = $currentLine;
    $503 = ($502|0)>=(0);
    if ($503) {
     $504 = $currentLine;
     $505 = ($504|0)<(480);
     if ($505) {
      $506 = $ptr2;
      $507 = HEAP16[$506>>1]|0;
      $startColor = $507;
      $508 = $ptr2;
      $509 = (($508) + 960|0);
      $510 = HEAP16[$509>>1]|0;
      $stopColor = $510;
      $511 = $stopColor;
      $512 = $511&65535;
      $513 = $startColor;
      $514 = $513&65535;
      $515 = (($512) - ($514))|0;
      $516 = $515&65535;
      $colorSize = $516;
      $517 = $ptr1;
      $518 = (($517) + 960|0);
      $519 = HEAP16[$518>>1]|0;
      $stop = $519;
      $520 = $ptr1;
      $521 = HEAP16[$520>>1]|0;
      $start = $521;
      $522 = $ptr1;
      $523 = (($522) + 2|0);
      $ptr1 = $523;
      $524 = $start;
      $525 = $524 << 16 >> 16;
      $526 = $out;
      $527 = (($526) + ($525)|0);
      $out2 = $527;
      $528 = $stop;
      $529 = $528 << 16 >> 16;
      $530 = $start;
      $531 = $530 << 16 >> 16;
      $532 = (($529) - ($531))|0;
      $hsize = $532;
      $533 = $ptr2;
      $534 = (($533) + 2|0);
      $ptr2 = $534;
      $535 = $hsize;
      $536 = ($535|0)==(0);
      if ($536) {
       $537 = $start;
       $538 = $537 << 16 >> 16;
       $539 = ($538|0)>=(0);
       if ($539) {
        $540 = $start;
        $541 = $540 << 16 >> 16;
        $542 = ($541|0)<(640);
        if ($542) {
         $543 = $startColor;
         $544 = $543&65535;
         $545 = $stopColor;
         $546 = $545&65535;
         $547 = (($544) + ($546))|0;
         $548 = (($547|0) / 2)&-1;
         $549 = $548 >> 8;
         $550 = $549&255;
         $551 = $out2;
         HEAP8[$551>>0] = $550;
        }
       }
      } else {
       $552 = $hsize;
       $553 = ($552|0)>(0);
       if ($553) {
        $554 = $hsize;
        $555 = ($554|0)==(1);
        if ($555) {
         $556 = $start;
         $557 = $556 << 16 >> 16;
         $558 = ($557|0)>=(-1);
         if ($558) {
          $559 = $start;
          $560 = $559 << 16 >> 16;
          $561 = ($560|0)<(639);
          if ($561) {
           $562 = $stopColor;
           $563 = $562&65535;
           $564 = $563 >> 8;
           $565 = $564&255;
           $566 = $out2;
           $567 = (($566) + 1|0);
           HEAP8[$567>>0] = $565;
          }
         }
         $568 = $start;
         $569 = $568 << 16 >> 16;
         $570 = ($569|0)>=(0);
         if ($570) {
          $571 = $start;
          $572 = $571 << 16 >> 16;
          $573 = ($572|0)<(640);
          if ($573) {
           $574 = $startColor;
           $575 = $574&65535;
           $576 = $575 >> 8;
           $577 = $576&255;
           $578 = $out2;
           HEAP8[$578>>0] = $577;
          }
         }
        } else {
         $579 = $hsize;
         $580 = ($579|0)==(2);
         if ($580) {
          $581 = $start;
          $582 = $581 << 16 >> 16;
          $583 = ($582|0)>=(-2);
          if ($583) {
           $584 = $start;
           $585 = $584 << 16 >> 16;
           $586 = ($585|0)<(638);
           if ($586) {
            $587 = $stopColor;
            $588 = $587&65535;
            $589 = $588 >> 8;
            $590 = $589&255;
            $591 = $out2;
            $592 = (($591) + 2|0);
            HEAP8[$592>>0] = $590;
           }
          }
          $593 = $start;
          $594 = $593 << 16 >> 16;
          $595 = ($594|0)>=(-1);
          if ($595) {
           $596 = $start;
           $597 = $596 << 16 >> 16;
           $598 = ($597|0)<(639);
           if ($598) {
            $599 = $startColor;
            $600 = $599&65535;
            $601 = $stopColor;
            $602 = $601&65535;
            $603 = (($600) + ($602))|0;
            $604 = (($603|0) / 2)&-1;
            $605 = $604 >> 8;
            $606 = $605&255;
            $607 = $out2;
            $608 = (($607) + 1|0);
            HEAP8[$608>>0] = $606;
           }
          }
          $609 = $start;
          $610 = $609 << 16 >> 16;
          $611 = ($610|0)>=(0);
          if ($611) {
           $612 = $start;
           $613 = $612 << 16 >> 16;
           $614 = ($613|0)<(640);
           if ($614) {
            $615 = $startColor;
            $616 = $615&65535;
            $617 = $616 >> 8;
            $618 = $617&255;
            $619 = $out2;
            HEAP8[$619>>0] = $618;
           }
          }
         } else {
          $620 = $start;
          $621 = $620 << 16 >> 16;
          $currentXPos = $621;
          $622 = $hsize;
          $623 = $colorSize;
          $624 = $623 << 16 >> 16;
          $625 = (($624|0) / ($622|0))&-1;
          $626 = $625&65535;
          $colorSize = $626;
          $627 = $hsize;
          $628 = (($627) + 1)|0;
          $hsize = $628;
          $629 = $hsize;
          $630 = (($629|0) % 2)&-1;
          $631 = ($630|0)!=(0);
          if ($631) {
           $632 = $hsize;
           $633 = (($632|0) / 2)&-1;
           $hsize = $633;
           $634 = $currentXPos;
           $635 = ($634|0)>=(0);
           if ($635) {
            $636 = $currentXPos;
            $637 = ($636|0)<(640);
            if ($637) {
             $638 = $startColor;
             $639 = $638&65535;
             $640 = $639 >> 8;
             $641 = $640&255;
             $642 = $out2;
             HEAP8[$642>>0] = $641;
            }
           }
           $643 = $out2;
           $644 = (($643) + 1|0);
           $out2 = $644;
           $645 = $currentXPos;
           $646 = (($645) + 1)|0;
           $currentXPos = $646;
           $647 = $colorSize;
           $648 = $647 << 16 >> 16;
           $649 = $startColor;
           $650 = $649&65535;
           $651 = (($650) + ($648))|0;
           $652 = $651&65535;
           $startColor = $652;
          } else {
           $653 = $hsize;
           $654 = (($653|0) / 2)&-1;
           $hsize = $654;
          }
          while(1) {
           $655 = $currentXPos;
           $656 = ($655|0)>=(0);
           if ($656) {
            $657 = $currentXPos;
            $658 = ($657|0)<(640);
            if ($658) {
             $659 = $startColor;
             $660 = $659&65535;
             $661 = $660 >> 8;
             $662 = $661&255;
             $663 = $out2;
             HEAP8[$663>>0] = $662;
            }
           }
           $664 = $currentXPos;
           $665 = (($664) + 1)|0;
           $currentXPos = $665;
           $666 = $colorSize;
           $667 = $666 << 16 >> 16;
           $668 = $startColor;
           $669 = $668&65535;
           $670 = (($669) + ($667))|0;
           $671 = $670&65535;
           $startColor = $671;
           $672 = $currentXPos;
           $673 = ($672|0)>=(0);
           if ($673) {
            $674 = $currentXPos;
            $675 = ($674|0)<(640);
            if ($675) {
             $676 = $startColor;
             $677 = $676&65535;
             $678 = $677 >> 8;
             $679 = $678&255;
             $680 = $out2;
             $681 = (($680) + 1|0);
             HEAP8[$681>>0] = $679;
            }
           }
           $682 = $currentXPos;
           $683 = (($682) + 1)|0;
           $currentXPos = $683;
           $684 = $out2;
           $685 = (($684) + 2|0);
           $out2 = $685;
           $686 = $colorSize;
           $687 = $686 << 16 >> 16;
           $688 = $startColor;
           $689 = $688&65535;
           $690 = (($689) + ($687))|0;
           $691 = $690&65535;
           $startColor = $691;
           $692 = $hsize;
           $693 = (($692) + -1)|0;
           $hsize = $693;
           $694 = ($693|0)!=(0);
           if (!($694)) {
            break;
           }
          }
         }
        }
       }
      }
     }
    }
    $695 = $out;
    $696 = (($695) + 640|0);
    $out = $696;
    $697 = $currentLine;
    $698 = (($697) + 1)|0;
    $currentLine = $698;
    $699 = HEAP32[329920>>2]|0;
    $700 = (($699) + -1)|0;
    HEAP32[329920>>2] = $700;
    $701 = ($700|0)!=(0);
    if (!($701)) {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $bh = 0;
   $433 = HEAP16[326024>>1]|0;
   $434 = $433 << 16 >> 16;
   $currentLine = $434;
   while(1) {
    $435 = $currentLine;
    $436 = ($435|0)>=(0);
    if ($436) {
     $437 = $currentLine;
     $438 = ($437|0)<(480);
     if ($438) {
      $439 = $ptr1;
      $440 = HEAP16[$439>>1]|0;
      $start = $440;
      $441 = $ptr1;
      $442 = (($441) + 960|0);
      $443 = HEAP16[$442>>1]|0;
      $stop = $443;
      $444 = $ptr1;
      $445 = (($444) + 2|0);
      $ptr1 = $445;
      $446 = $stop;
      $447 = $446 << 16 >> 16;
      $448 = $start;
      $449 = $448 << 16 >> 16;
      $450 = (($447) - ($449))|0;
      $hsize = $450;
      $451 = $hsize;
      $452 = ($451|0)>=(0);
      if ($452) {
       $453 = $hsize;
       $454 = (($453) + 1)|0;
       $hsize = $454;
       $455 = $start;
       $456 = $455 << 16 >> 16;
       $457 = $out;
       $458 = (($457) + ($456)|0);
       $out2 = $458;
       $459 = $hsize;
       $460 = (($459|0) / 2)&-1;
       $hsize = $460;
       $461 = $hsize;
       $462 = ($461|0)>(1);
       if ($462) {
        $463 = $bh;
        $464 = $463&255;
        $465 = $464 ^ 1;
        $466 = $465&255;
        $bh = $466;
        $467 = $out2;
        $468 = HEAP8[$467>>0]|0;
        $469 = $468&255;
        $ax3 = $469;
        $470 = $ax3;
        $471 = $470&65535;
        $472 = $471 & 1;
        $473 = $472&65535;
        $ax3 = $473;
        $474 = $ax3;
        $475 = $474&65535;
        $476 = $bh;
        $477 = $476&255;
        $478 = $475 ^ $477;
        $479 = ($478|0)!=(0);
        if ($479) {
         $480 = $out2;
         $481 = (($480) + 1|0);
         $out2 = $481;
        }
        $j = 0;
        while(1) {
         $482 = $j;
         $483 = $hsize;
         $484 = ($482|0)<($483|0);
         if (!($484)) {
          break;
         }
         $485 = $1;
         $486 = $485&255;
         $487 = $out2;
         HEAP8[$487>>0] = $486;
         $488 = $out2;
         $489 = (($488) + 2|0);
         $out2 = $489;
         $490 = $j;
         $491 = (($490) + 1)|0;
         $j = $491;
        }
       }
      }
     }
    }
    $492 = $out;
    $493 = (($492) + 640|0);
    $out = $493;
    $494 = $currentLine;
    $495 = (($494) + 1)|0;
    $currentLine = $495;
    $496 = $vsize;
    $497 = (($496) + -1)|0;
    $vsize = $497;
    $498 = ($497|0)!=(0);
    if (!($498)) {
     break;
    }
   }
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _circleFill($x,$y,$radius,$color) {
 $x = $x|0;
 $y = $y|0;
 $radius = $radius|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currentLine = 0, $width = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $radius;
 $3 = $color;
 $4 = $2;
 $5 = (($4) + 1)|0;
 $2 = $5;
 $6 = $2;
 $7 = (0 - ($6))|0;
 $currentLine = $7;
 while(1) {
  $8 = $currentLine;
  $9 = $2;
  $10 = ($8|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = $currentLine;
  $12 = (Math_abs(($11|0))|0);
  $13 = $2;
  $14 = ($12|0)!=($13|0);
  if ($14) {
   $15 = $currentLine;
   $16 = (+($15|0));
   $17 = $2;
   $18 = (+($17|0));
   $19 = $16 / $18;
   $20 = $19;
   $21 = (+Math_acos((+$20)));
   $22 = (+Math_sin((+$21)));
   $width = $22;
  } else {
   $width = 0.0;
  }
  $23 = $2;
  $24 = (+($23|0));
  $25 = $width;
  $26 = $25 * $24;
  $width = $26;
  $27 = $width;
  $28 = $27 < 0.0;
  if ($28) {
   $29 = $width;
   $30 = -$29;
   $width = $30;
  }
  $31 = $0;
  $32 = (+($31|0));
  $33 = $width;
  $34 = $32 - $33;
  $35 = (~~(($34)));
  $36 = $currentLine;
  $37 = $1;
  $38 = (($36) + ($37))|0;
  $39 = $0;
  $40 = (+($39|0));
  $41 = $width;
  $42 = $40 + $41;
  $43 = (~~(($42)));
  $44 = $currentLine;
  $45 = $1;
  $46 = (($44) + ($45))|0;
  $47 = $3;
  $48 = $47 << 24 >> 24;
  _drawLine($35,$38,$43,$46,$48);
  $49 = $currentLine;
  $50 = (($49) + 1)|0;
  $currentLine = $50;
 }
 STACKTOP = sp;return;
}
function _renderModelElements($pointer) {
 $pointer = $pointer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ax = 0, $bestDepth = 0, $bestPoly = 0;
 var $bestZ = 0, $bx = 0, $center = 0, $circleParam1 = 0, $circleParam3 = 0, $circleParam4 = 0, $circleParam5 = 0, $color = 0, $color1 = 0, $counter = 0, $currentComputedVertex = 0, $currentDepth = 0, $currentPolyHeader = 0, $currentPolyVertex = 0, $currentVertex = 0, $cx = 0, $depth = 0, $destPtr = 0, $destinationHeader = 0, $destinationVertex = 0;
 var $eax = 0, $edi = 0, $i = 0, $j = 0, $lineCoordinatesPtr = 0, $lineDataPtr = 0, $param = 0, $point1 = 0, $point2 = 0, $render23 = 0, $render24 = 0, $render25 = 0, $shadeEntry = 0, $shadeValue = 0, $size = 0, $temp = 0, $type = 0, $vararg_buffer = 0, $x1 = 0, $x2 = 0;
 var $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pointer;
 $bestPoly = 0;
 $edi = 329928;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $temp = $3;
 $4 = $1;
 $5 = (($4) + 2|0);
 $1 = $5;
 $6 = $temp;
 $7 = ($6<<16>>16)!=(0);
 if ($7) {
  $8 = $temp;
  HEAP16[339928>>1] = $8;
  while(1) {
   $9 = $edi;
   $render23 = $9;
   $10 = $1;
   $currentPolyHeader = $10;
   $11 = $1;
   $12 = (($11) + 2|0);
   $1 = $12;
   $13 = $currentPolyHeader;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   HEAP16[38984>>1] = $15;
   $16 = HEAP16[38984>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = ($17|0)>=(9);
   if ($18) {
    $19 = $edi;
    $destinationHeader = $19;
    $20 = $currentPolyHeader;
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = (($22) - 2)|0;
    $24 = $23&255;
    $25 = $destinationHeader;
    HEAP8[$25>>0] = $24;
    $26 = $currentPolyHeader;
    $27 = (($26) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $destinationHeader;
    $30 = (($29) + 1|0);
    HEAP8[$30>>0] = $28;
    $31 = $currentPolyHeader;
    $32 = (($31) + 2|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $destinationHeader;
    $35 = (($34) + 2|0);
    HEAP16[$35>>1] = $33;
    $36 = $1;
    $37 = (($36) + 2|0);
    $1 = $37;
    $38 = $edi;
    $39 = (($38) + 4|0);
    $edi = $39;
    $40 = $destinationHeader;
    $41 = (($40) + 1|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $counter = $43;
    $bestDepth = -32000;
    $44 = $edi;
    HEAP32[339936>>2] = $44;
    while(1) {
     $45 = $1;
     $currentPolyVertex = $45;
     $46 = $currentPolyHeader;
     $47 = (($46) + 2|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48 << 16 >> 16;
     $50 = $currentPolyVertex;
     $51 = HEAP16[$50>>1]|0;
     $52 = $51 << 16 >> 16;
     $53 = (339944 + ($52<<1)|0);
     $54 = HEAP16[$53>>1]|0;
     $55 = $54 << 16 >> 16;
     $56 = (($49) + ($55))|0;
     $57 = $56&65535;
     $shadeValue = $57;
     $58 = $edi;
     $currentComputedVertex = $58;
     $59 = $shadeValue;
     $60 = $currentComputedVertex;
     HEAP16[$60>>1] = $59;
     $61 = $currentPolyVertex;
     $62 = (($61) + 2|0);
     $63 = HEAP16[$62>>1]|0;
     $64 = $63 << 16 >> 16;
     $65 = (($64|0) / 6)&-1;
     $66 = (340944 + (($65*6)|0)|0);
     $currentVertex = $66;
     $67 = $edi;
     $68 = (($67) + 2|0);
     $destinationVertex = $68;
     $69 = $currentVertex;
     $70 = HEAP16[$69>>1]|0;
     $71 = $destinationVertex;
     HEAP16[$71>>1] = $70;
     $72 = $currentVertex;
     $73 = (($72) + 2|0);
     $74 = HEAP16[$73>>1]|0;
     $75 = $destinationVertex;
     $76 = (($75) + 2|0);
     HEAP16[$76>>1] = $74;
     $77 = $edi;
     $78 = (($77) + 6|0);
     $edi = $78;
     $79 = $1;
     $80 = (($79) + 4|0);
     $1 = $80;
     $81 = $currentVertex;
     $82 = (($81) + 4|0);
     $83 = HEAP16[$82>>1]|0;
     $84 = $83 << 16 >> 16;
     $currentDepth = $84;
     $85 = $currentDepth;
     $86 = $bestDepth;
     $87 = ($85|0)>($86|0);
     if ($87) {
      $88 = $currentDepth;
      $bestDepth = $88;
     }
     $89 = $counter;
     $90 = (($89) + -1)<<16>>16;
     $counter = $90;
     $91 = ($90<<16>>16)!=(0);
     if (!($91)) {
      break;
     }
    }
   } else {
    $92 = HEAP16[38984>>1]|0;
    $93 = $92 << 16 >> 16;
    $94 = ($93|0)>=(7);
    if ($94) {
     $95 = $edi;
     $destinationHeader = $95;
     $96 = $currentPolyHeader;
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = (($98) - 7)|0;
     $100 = $99&255;
     $101 = $destinationHeader;
     HEAP8[$101>>0] = $100;
     $102 = $currentPolyHeader;
     $103 = (($102) + 1|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $destinationHeader;
     $106 = (($105) + 1|0);
     HEAP8[$106>>0] = $104;
     $107 = $currentPolyHeader;
     $108 = (($107) + 2|0);
     $109 = HEAP16[$108>>1]|0;
     $color = $109;
     $110 = $1;
     $111 = (($110) + 2|0);
     $112 = HEAP16[$111>>1]|0;
     $shadeEntry = $112;
     $113 = $1;
     $114 = (($113) + 4|0);
     $1 = $114;
     $115 = $color;
     $116 = $115 << 16 >> 16;
     $117 = $shadeEntry;
     $118 = $117 << 16 >> 16;
     $119 = (339944 + ($118<<1)|0);
     $120 = HEAP16[$119>>1]|0;
     $121 = $120 << 16 >> 16;
     $122 = (($116) + ($121))|0;
     $123 = $122&65535;
     $124 = $edi;
     $125 = (($124) + 2|0);
     HEAP16[$125>>1] = $123;
     $126 = $edi;
     $127 = (($126) + 4|0);
     $edi = $127;
     $128 = $edi;
     HEAP32[339936>>2] = $128;
     $bestDepth = -32000;
     $129 = $destinationHeader;
     $130 = (($129) + 1|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = $131&255;
     $counter = $132;
     while(1) {
      $133 = $1;
      $134 = HEAP16[$133>>1]|0;
      $135 = $134 << 16 >> 16;
      $eax = $135;
      $136 = $1;
      $137 = (($136) + 2|0);
      $1 = $137;
      $138 = $eax;
      $139 = (($138|0) / 6)&-1;
      $140 = (340944 + (($139*6)|0)|0);
      $currentVertex = $140;
      $141 = $edi;
      $142 = (($141) + 2|0);
      $destinationVertex = $142;
      $143 = $currentVertex;
      $144 = HEAP16[$143>>1]|0;
      $145 = $destinationVertex;
      HEAP16[$145>>1] = $144;
      $146 = $currentVertex;
      $147 = (($146) + 2|0);
      $148 = HEAP16[$147>>1]|0;
      $149 = $destinationVertex;
      $150 = (($149) + 2|0);
      HEAP16[$150>>1] = $148;
      $151 = $edi;
      $152 = (($151) + 6|0);
      $edi = $152;
      $153 = $currentVertex;
      $154 = (($153) + 4|0);
      $155 = HEAP16[$154>>1]|0;
      $156 = $155 << 16 >> 16;
      $currentDepth = $156;
      $157 = $currentDepth;
      $158 = $bestDepth;
      $159 = ($157|0)>($158|0);
      if ($159) {
       $160 = $currentDepth;
       $bestDepth = $160;
      }
      $161 = $counter;
      $162 = (($161) + -1)<<16>>16;
      $counter = $162;
      $163 = ($162<<16>>16)!=(0);
      if (!($163)) {
       break;
      }
     }
    } else {
     $164 = $edi;
     $destinationHeader = $164;
     $165 = $currentPolyHeader;
     $166 = HEAP8[$165>>0]|0;
     $167 = $destinationHeader;
     HEAP8[$167>>0] = $166;
     $168 = $currentPolyHeader;
     $169 = (($168) + 1|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = $destinationHeader;
     $172 = (($171) + 1|0);
     HEAP8[$172>>0] = $170;
     $173 = $currentPolyHeader;
     $174 = (($173) + 2|0);
     $175 = HEAP16[$174>>1]|0;
     $176 = $destinationHeader;
     $177 = (($176) + 2|0);
     HEAP16[$177>>1] = $175;
     $178 = $1;
     $179 = (($178) + 2|0);
     $1 = $179;
     $180 = $edi;
     $181 = (($180) + 4|0);
     $edi = $181;
     $bestDepth = -32000;
     $182 = $edi;
     HEAP32[339936>>2] = $182;
     $eax = 0;
     $183 = $currentPolyHeader;
     $184 = (($183) + 1|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $counter = $186;
     while(1) {
      $187 = $1;
      $188 = HEAP16[$187>>1]|0;
      $189 = $188 << 16 >> 16;
      $eax = $189;
      $190 = $1;
      $191 = (($190) + 2|0);
      $1 = $191;
      $192 = $eax;
      $193 = (($192|0) / 6)&-1;
      $194 = (340944 + (($193*6)|0)|0);
      $currentVertex = $194;
      $195 = $edi;
      $196 = (($195) + 2|0);
      $destinationVertex = $196;
      $197 = $currentVertex;
      $198 = HEAP16[$197>>1]|0;
      $199 = $destinationVertex;
      HEAP16[$199>>1] = $198;
      $200 = $currentVertex;
      $201 = (($200) + 2|0);
      $202 = HEAP16[$201>>1]|0;
      $203 = $destinationVertex;
      $204 = (($203) + 2|0);
      HEAP16[$204>>1] = $202;
      $205 = $edi;
      $206 = (($205) + 6|0);
      $edi = $206;
      $207 = $currentVertex;
      $208 = (($207) + 4|0);
      $209 = HEAP16[$208>>1]|0;
      $210 = $209 << 16 >> 16;
      $currentDepth = $210;
      $211 = $currentDepth;
      $212 = $bestDepth;
      $213 = ($211|0)>($212|0);
      if ($213) {
       $214 = $currentDepth;
       $bestDepth = $214;
      }
      $215 = $counter;
      $216 = (($215) + -1)<<16>>16;
      $counter = $216;
      $217 = ($216<<16>>16)!=(0);
      if (!($217)) {
       break;
      }
     }
    }
   }
   $218 = $edi;
   $render24 = $218;
   $219 = HEAP32[339936>>2]|0;
   $edi = $219;
   $220 = $bestDepth;
   $render25 = $220;
   $221 = $edi;
   $222 = (($221) + 4|0);
   $223 = HEAP16[$222>>1]|0;
   $ax = $223;
   $224 = $edi;
   $225 = (($224) + 8|0);
   $226 = HEAP16[$225>>1]|0;
   $bx = $226;
   $227 = $edi;
   $228 = (($227) + 16|0);
   $229 = HEAP16[$228>>1]|0;
   $230 = $229 << 16 >> 16;
   $231 = $ax;
   $232 = $231 << 16 >> 16;
   $233 = (($232) - ($230))|0;
   $234 = $233&65535;
   $ax = $234;
   $235 = $edi;
   $236 = (($235) + 2|0);
   $237 = HEAP16[$236>>1]|0;
   $238 = $237 << 16 >> 16;
   $239 = $bx;
   $240 = $239 << 16 >> 16;
   $241 = (($240) - ($238))|0;
   $242 = $241&65535;
   $bx = $242;
   $243 = $bx;
   $244 = $243 << 16 >> 16;
   $245 = $ax;
   $246 = $245 << 16 >> 16;
   $247 = Math_imul($246, $244)|0;
   $248 = $247&65535;
   $ax = $248;
   $249 = $ax;
   $250 = $249 << 16 >> 16;
   $bestDepth = $250;
   $251 = $currentDepth;
   $252 = $251&65535;
   $bx = $252;
   $253 = $edi;
   $254 = (($253) + 2|0);
   $255 = HEAP16[$254>>1]|0;
   $ax = $255;
   $256 = $edi;
   $257 = (($256) + 10|0);
   $258 = HEAP16[$257>>1]|0;
   $cx = $258;
   $259 = $edi;
   $260 = (($259) + 14|0);
   $261 = HEAP16[$260>>1]|0;
   $262 = $261 << 16 >> 16;
   $263 = $ax;
   $264 = $263 << 16 >> 16;
   $265 = (($264) - ($262))|0;
   $266 = $265&65535;
   $ax = $266;
   $267 = $edi;
   $268 = (($267) + 4|0);
   $269 = HEAP16[$268>>1]|0;
   $270 = $269 << 16 >> 16;
   $271 = $cx;
   $272 = $271 << 16 >> 16;
   $273 = (($272) - ($270))|0;
   $274 = $273&65535;
   $cx = $274;
   $275 = $cx;
   $276 = $275 << 16 >> 16;
   $277 = $ax;
   $278 = $277 << 16 >> 16;
   $279 = Math_imul($278, $276)|0;
   $280 = $279&65535;
   $ax = $280;
   $281 = $bestDepth;
   $282 = $ax;
   $283 = $282 << 16 >> 16;
   $284 = (($283) - ($281))|0;
   $285 = $284&65535;
   $ax = $285;
   $286 = $bx;
   $287 = $286 << 16 >> 16;
   $288 = (($287) - 1)|0;
   $289 = $currentDepth;
   $290 = (($289) - ($288))|0;
   $currentDepth = $290;
   $291 = $currentDepth;
   $292 = ($291|0)<(0);
   if ($292) {
    $293 = $render23;
    $edi = $293;
   } else {
    $294 = HEAP32[345744>>2]|0;
    $295 = (($294) + 1)|0;
    HEAP32[345744>>2] = $295;
    $296 = $render25;
    $297 = $296&65535;
    $298 = HEAP32[345752>>2]|0;
    HEAP16[$298>>1] = $297;
    $299 = HEAP32[345752>>2]|0;
    $300 = (($299) + 2|0);
    HEAP16[$300>>1] = 1;
    $301 = $render23;
    $302 = HEAP32[345752>>2]|0;
    $303 = (($302) + 4|0);
    HEAP32[$303>>2] = $301;
    $304 = HEAP32[345752>>2]|0;
    $305 = (($304) + 8|0);
    HEAP32[345752>>2] = $305;
    $306 = $render24;
    $edi = $306;
   }
   $307 = HEAP16[339928>>1]|0;
   $308 = (($307) + -1)<<16>>16;
   HEAP16[339928>>1] = $308;
   $309 = ($308<<16>>16)!=(0);
   if (!($309)) {
    break;
   }
  }
 }
 $310 = $1;
 $311 = HEAP16[$310>>1]|0;
 $temp = $311;
 $312 = $1;
 $313 = (($312) + 2|0);
 $1 = $313;
 $314 = $temp;
 $315 = ($314<<16>>16)!=(0);
 do {
  if ($315) {
   $316 = $temp;
   $317 = $316 << 16 >> 16;
   $318 = HEAP32[345744>>2]|0;
   $319 = (($318) + ($317))|0;
   HEAP32[345744>>2] = $319;
   while(1) {
    $320 = $1;
    $lineDataPtr = $320;
    $321 = $edi;
    $lineCoordinatesPtr = $321;
    $322 = $lineDataPtr;
    $323 = (($322) + 4|0);
    $324 = HEAP16[$323>>1]|0;
    $325 = $324 << 16 >> 16;
    $326 = (($325|0) % 6)&-1;
    $327 = ($326|0)!=(0);
    if ($327) {
     label = 34;
     break;
    }
    $328 = $lineDataPtr;
    $329 = (($328) + 6|0);
    $330 = HEAP16[$329>>1]|0;
    $331 = $330 << 16 >> 16;
    $332 = (($331|0) % 6)&-1;
    $333 = ($332|0)!=(0);
    if ($333) {
     label = 34;
     break;
    }
    $334 = $lineDataPtr;
    $335 = (($334) + 4|0);
    $336 = HEAP16[$335>>1]|0;
    $337 = $336 << 16 >> 16;
    $338 = (($337|0) / 6)&-1;
    $point1 = $338;
    $339 = $lineDataPtr;
    $340 = (($339) + 6|0);
    $341 = HEAP16[$340>>1]|0;
    $342 = $341 << 16 >> 16;
    $343 = (($342|0) / 6)&-1;
    $point2 = $343;
    $344 = $lineDataPtr;
    $345 = HEAP32[$344>>2]|0;
    $param = $345;
    $346 = $param;
    $347 = $lineCoordinatesPtr;
    HEAP32[$347>>2] = $346;
    $348 = $point1;
    $349 = (340944 + (($348*6)|0)|0);
    $350 = HEAP16[$349>>1]|0;
    $351 = $lineCoordinatesPtr;
    $352 = (($351) + 4|0);
    HEAP16[$352>>1] = $350;
    $353 = $point1;
    $354 = (340944 + (($353*6)|0)|0);
    $355 = (($354) + 2|0);
    $356 = HEAP16[$355>>1]|0;
    $357 = $lineCoordinatesPtr;
    $358 = (($357) + 6|0);
    HEAP16[$358>>1] = $356;
    $359 = $point2;
    $360 = (340944 + (($359*6)|0)|0);
    $361 = HEAP16[$360>>1]|0;
    $362 = $lineCoordinatesPtr;
    $363 = (($362) + 8|0);
    HEAP16[$363>>1] = $361;
    $364 = $point2;
    $365 = (340944 + (($364*6)|0)|0);
    $366 = (($365) + 2|0);
    $367 = HEAP16[$366>>1]|0;
    $368 = $lineCoordinatesPtr;
    $369 = (($368) + 10|0);
    HEAP16[$369>>1] = $367;
    $370 = $point1;
    $371 = (340944 + (($370*6)|0)|0);
    $372 = (($371) + 4|0);
    $373 = HEAP16[$372>>1]|0;
    $374 = $373 << 16 >> 16;
    $bestDepth = $374;
    $375 = $point2;
    $376 = (340944 + (($375*6)|0)|0);
    $377 = (($376) + 4|0);
    $378 = HEAP16[$377>>1]|0;
    $379 = $378 << 16 >> 16;
    $depth = $379;
    $380 = $depth;
    $381 = $bestDepth;
    $382 = ($380|0)>=($381|0);
    if ($382) {
     $383 = $depth;
     $bestDepth = $383;
    }
    $384 = $bestDepth;
    $385 = $384&65535;
    $386 = HEAP32[345752>>2]|0;
    HEAP16[$386>>1] = $385;
    $387 = HEAP32[345752>>2]|0;
    $388 = (($387) + 2|0);
    HEAP16[$388>>1] = 0;
    $389 = $edi;
    $390 = HEAP32[345752>>2]|0;
    $391 = (($390) + 4|0);
    HEAP32[$391>>2] = $389;
    $392 = HEAP32[345752>>2]|0;
    $393 = (($392) + 8|0);
    HEAP32[345752>>2] = $393;
    $394 = $1;
    $395 = (($394) + 8|0);
    $1 = $395;
    $396 = $edi;
    $397 = (($396) + 12|0);
    $edi = $397;
    $398 = $temp;
    $399 = (($398) + -1)<<16>>16;
    $temp = $399;
    $400 = ($399<<16>>16)!=(0);
    if (!($400)) {
     label = 39;
     break;
    }
   }
   if ((label|0) == 34) {
    (_printf((345760|0),($vararg_buffer|0))|0);
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 39) {
    break;
   }
  }
 } while(0);
 $401 = $1;
 $402 = HEAP16[$401>>1]|0;
 $temp = $402;
 $403 = $1;
 $404 = (($403) + 2|0);
 $1 = $404;
 $405 = $temp;
 $406 = ($405<<16>>16)!=(0);
 if ($406) {
  $407 = $temp;
  $408 = $407 << 16 >> 16;
  $409 = HEAP32[345744>>2]|0;
  $410 = (($409) + ($408))|0;
  HEAP32[345744>>2] = $410;
  while(1) {
   $411 = $1;
   $412 = (($411) + 1|0);
   $413 = HEAP8[$412>>0]|0;
   $color1 = $413;
   $414 = $1;
   $415 = (($414) + 6|0);
   $416 = HEAP16[$415>>1]|0;
   $center = $416;
   $417 = $1;
   $418 = (($417) + 4|0);
   $419 = HEAP16[$418>>1]|0;
   $size = $419;
   $420 = $color1;
   $421 = $edi;
   HEAP8[$421>>0] = $420;
   $422 = $center;
   $423 = $422 << 16 >> 16;
   $424 = (($423|0) / 6)&-1;
   $425 = (340944 + (($424*6)|0)|0);
   $426 = HEAP16[$425>>1]|0;
   $427 = $edi;
   $428 = (($427) + 1|0);
   HEAP16[$428>>1] = $426;
   $429 = $center;
   $430 = $429 << 16 >> 16;
   $431 = (($430|0) / 6)&-1;
   $432 = (340944 + (($431*6)|0)|0);
   $433 = (($432) + 2|0);
   $434 = HEAP16[$433>>1]|0;
   $435 = $edi;
   $436 = (($435) + 3|0);
   HEAP16[$436>>1] = $434;
   $437 = $size;
   $438 = $edi;
   $439 = (($438) + 5|0);
   HEAP16[$439>>1] = $437;
   $440 = $center;
   $441 = $440 << 16 >> 16;
   $442 = (($441|0) / 6)&-1;
   $443 = (340944 + (($442*6)|0)|0);
   $444 = (($443) + 4|0);
   $445 = HEAP16[$444>>1]|0;
   $446 = HEAP32[345752>>2]|0;
   HEAP16[$446>>1] = $445;
   $447 = HEAP32[345752>>2]|0;
   $448 = (($447) + 2|0);
   HEAP16[$448>>1] = 2;
   $449 = $edi;
   $450 = HEAP32[345752>>2]|0;
   $451 = (($450) + 4|0);
   HEAP32[$451>>2] = $449;
   $452 = HEAP32[345752>>2]|0;
   $453 = (($452) + 8|0);
   HEAP32[345752>>2] = $453;
   $454 = $1;
   $455 = (($454) + 8|0);
   $1 = $455;
   $456 = $edi;
   $457 = (($456) + 7|0);
   $edi = $457;
   $458 = $temp;
   $459 = (($458) + -1)<<16>>16;
   $temp = $459;
   $460 = ($459<<16>>16)!=(0);
   if (!($460)) {
    break;
   }
  }
 }
 HEAP32[353816>>2] = 345816;
 HEAP32[361824>>2] = 353824;
 $i = 0;
 while(1) {
  $461 = $i;
  $462 = HEAP32[345744>>2]|0;
  $463 = ($461|0)<($462|0);
  if (!($463)) {
   break;
  }
  HEAP32[353816>>2] = 345816;
  $bestZ = -32767;
  $j = 0;
  while(1) {
   $464 = $j;
   $465 = HEAP32[345744>>2]|0;
   $466 = ($464|0)<($465|0);
   if (!($466)) {
    break;
   }
   $467 = HEAP32[353816>>2]|0;
   $468 = HEAP16[$467>>1]|0;
   $469 = $468 << 16 >> 16;
   $470 = $bestZ;
   $471 = $470 << 16 >> 16;
   $472 = ($469|0)>($471|0);
   if ($472) {
    $473 = HEAP32[353816>>2]|0;
    $474 = HEAP16[$473>>1]|0;
    $bestZ = $474;
    $475 = $j;
    $bestPoly = $475;
   }
   $476 = HEAP32[353816>>2]|0;
   $477 = (($476) + 8|0);
   HEAP32[353816>>2] = $477;
   $478 = $j;
   $479 = (($478) + 1)|0;
   $j = $479;
  }
  $480 = $bestPoly;
  $481 = (345816 + ($480<<3)|0);
  $482 = HEAP16[$481>>1]|0;
  $483 = HEAP32[361824>>2]|0;
  HEAP16[$483>>1] = $482;
  $484 = $bestPoly;
  $485 = (345816 + ($484<<3)|0);
  $486 = (($485) + 2|0);
  $487 = HEAP16[$486>>1]|0;
  $488 = HEAP32[361824>>2]|0;
  $489 = (($488) + 2|0);
  HEAP16[$489>>1] = $487;
  $490 = $bestPoly;
  $491 = (345816 + ($490<<3)|0);
  $492 = (($491) + 4|0);
  $493 = HEAP32[$492>>2]|0;
  $494 = HEAP32[361824>>2]|0;
  $495 = (($494) + 4|0);
  HEAP32[$495>>2] = $493;
  $496 = HEAP32[361824>>2]|0;
  $497 = (($496) + 8|0);
  HEAP32[361824>>2] = $497;
  $498 = $bestPoly;
  $499 = (345816 + ($498<<3)|0);
  HEAP16[$499>>1] = -32767;
  $500 = $i;
  $501 = (($500) + 1)|0;
  $i = $501;
 }
 HEAP32[353816>>2] = 353824;
 $502 = HEAP32[345744>>2]|0;
 $503 = ($502|0)!=(0);
 if (!($503)) {
  HEAP32[47440>>2] = -1;
  HEAP32[47456>>2] = -1;
  HEAP32[47432>>2] = -1;
  HEAP32[47448>>2] = -1;
  $0 = -1;
  $656 = $0;
  STACKTOP = sp;return ($656|0);
 }
 $504 = HEAP32[345744>>2]|0;
 $505 = $504&65535;
 HEAP16[339928>>1] = $505;
 $506 = $1;
 HEAP32[339936>>2] = $506;
 while(1) {
  $507 = HEAP32[353816>>2]|0;
  $508 = (($507) + 2|0);
  $509 = HEAP16[$508>>1]|0;
  $type = $509;
  $510 = HEAP32[353816>>2]|0;
  $511 = (($510) + 4|0);
  $512 = HEAP32[$511>>2]|0;
  $1 = $512;
  $513 = HEAP32[339936>>2]|0;
  $514 = (($513) + 8|0);
  HEAP32[339936>>2] = $514;
  $515 = $type;
  $516 = $515 << 16 >> 16;
  if ((($516|0) == 2)) {
   $578 = $1;
   $579 = HEAP32[$578>>2]|0;
   $eax = $579;
   $580 = $1;
   $581 = HEAP8[$580>>0]|0;
   $582 = $581&255;
   $circleParam1 = $582;
   $583 = $1;
   $584 = (($583) + 1|0);
   $585 = HEAP16[$584>>1]|0;
   $586 = $585 << 16 >> 16;
   $circleParam4 = $586;
   $587 = $1;
   $588 = (($587) + 3|0);
   $589 = HEAP16[$588>>1]|0;
   $590 = $589 << 16 >> 16;
   $circleParam5 = $590;
   $591 = $1;
   $592 = (($591) + 5|0);
   $593 = HEAP16[$592>>1]|0;
   $594 = $593 << 16 >> 16;
   $circleParam3 = $594;
   $595 = HEAP32[38880>>2]|0;
   $596 = ($595|0)!=(0);
   if ($596) {
    $606 = $circleParam3;
    $607 = ($606*34)|0;
    $608 = $607 >> 9;
    $circleParam3 = $608;
   } else {
    $597 = $circleParam3;
    $598 = HEAP32[319608>>2]|0;
    $599 = Math_imul($597, $598)|0;
    $600 = HEAP32[319600>>2]|0;
    $601 = $1;
    $602 = HEAP16[$601>>1]|0;
    $603 = $602 << 16 >> 16;
    $604 = (($600) + ($603))|0;
    $605 = (($599|0) / ($604|0))&-1;
    $circleParam3 = $605;
   }
   $609 = $circleParam3;
   $610 = (($609) + 3)|0;
   $circleParam3 = $610;
   $611 = $circleParam4;
   $612 = $circleParam3;
   $613 = (($611) + ($612))|0;
   $614 = HEAP32[47440>>2]|0;
   $615 = ($613|0)>($614|0);
   if ($615) {
    $616 = $circleParam4;
    $617 = $circleParam3;
    $618 = (($616) + ($617))|0;
    HEAP32[47440>>2] = $618;
   }
   $619 = $circleParam4;
   $620 = $circleParam3;
   $621 = (($619) - ($620))|0;
   $622 = HEAP32[47432>>2]|0;
   $623 = ($621|0)<($622|0);
   if ($623) {
    $624 = $circleParam4;
    $625 = $circleParam3;
    $626 = (($624) - ($625))|0;
    HEAP32[47432>>2] = $626;
   }
   $627 = $circleParam5;
   $628 = $circleParam3;
   $629 = (($627) + ($628))|0;
   $630 = HEAP32[47456>>2]|0;
   $631 = ($629|0)>($630|0);
   if ($631) {
    $632 = $circleParam5;
    $633 = $circleParam3;
    $634 = (($632) + ($633))|0;
    HEAP32[47456>>2] = $634;
   }
   $635 = $circleParam5;
   $636 = $circleParam3;
   $637 = (($635) - ($636))|0;
   $638 = HEAP32[47448>>2]|0;
   $639 = ($637|0)<($638|0);
   if ($639) {
    $640 = $circleParam5;
    $641 = $circleParam3;
    $642 = (($640) - ($641))|0;
    HEAP32[47448>>2] = $642;
   }
   $643 = $circleParam3;
   $644 = (($643) - 3)|0;
   $circleParam3 = $644;
   $645 = $circleParam4;
   $646 = $circleParam5;
   $647 = $circleParam3;
   $648 = $circleParam1;
   $649 = $648&255;
   _circleFill($645,$646,$647,$649);
   label = 78;
  } else if ((($516|0) == 0)) {
   $517 = $1;
   $lineCoordinatesPtr = $517;
   $518 = $lineCoordinatesPtr;
   $519 = HEAP32[$518>>2]|0;
   $520 = $519 & 65280;
   $521 = $520 >> 8;
   $522 = $521&65535;
   $color = $522;
   $523 = $lineCoordinatesPtr;
   $524 = (($523) + 4|0);
   $525 = HEAP16[$524>>1]|0;
   $526 = $525 << 16 >> 16;
   $x1 = $526;
   $527 = $lineCoordinatesPtr;
   $528 = (($527) + 6|0);
   $529 = HEAP16[$528>>1]|0;
   $530 = $529 << 16 >> 16;
   $y1 = $530;
   $531 = $lineCoordinatesPtr;
   $532 = (($531) + 8|0);
   $533 = HEAP16[$532>>1]|0;
   $534 = $533 << 16 >> 16;
   $x2 = $534;
   $535 = $lineCoordinatesPtr;
   $536 = (($535) + 10|0);
   $537 = HEAP16[$536>>1]|0;
   $538 = $537 << 16 >> 16;
   $y2 = $538;
   $539 = $x1;
   $540 = $y1;
   $541 = $x2;
   $542 = $y2;
   $543 = $color;
   $544 = $543 << 16 >> 16;
   _drawLine($539,$540,$541,$542,$544);
  } else if ((($516|0) == 1)) {
   $545 = $1;
   $546 = HEAP32[$545>>2]|0;
   $eax = $546;
   $547 = $1;
   $548 = (($547) + 4|0);
   $1 = $548;
   $549 = $eax;
   $550 = $549 & 255;
   $551 = $550&65535;
   HEAP16[38984>>1] = $551;
   $552 = $eax;
   $553 = $552 & 65280;
   $554 = $553 >> 8;
   HEAP32[38992>>2] = $554;
   $555 = $eax;
   $556 = $555 & 16711680;
   $557 = $556 >> 16;
   $558 = $557&65535;
   $color = $558;
   $destPtr = 39000;
   $i = 0;
   while(1) {
    $559 = $i;
    $560 = HEAP32[38992>>2]|0;
    $561 = ($560*3)|0;
    $562 = ($559|0)<($561|0);
    if (!($562)) {
     break;
    }
    $563 = $1;
    $564 = HEAP16[$563>>1]|0;
    $565 = $destPtr;
    HEAP16[$565>>1] = $564;
    $566 = $destPtr;
    $567 = (($566) + 2|0);
    $destPtr = $567;
    $568 = $1;
    $569 = (($568) + 2|0);
    $1 = $569;
    $570 = $i;
    $571 = (($570) + 1)|0;
    $i = $571;
   }
   $572 = (_computePolygons()|0);
   $573 = ($572|0)!=(2);
   if ($573) {
    $574 = HEAP16[38984>>1]|0;
    $575 = $574 << 16 >> 16;
    $576 = $color;
    $577 = $576 << 16 >> 16;
    _renderPolygons($575,$577);
   }
  } else {
   label = 78;
  }
  if ((label|0) == 78) {
   label = 0;
  }
  $650 = HEAP32[339936>>2]|0;
  $1 = $650;
  $651 = HEAP32[353816>>2]|0;
  $652 = (($651) + 8|0);
  HEAP32[353816>>2] = $652;
  $653 = HEAP16[339928>>1]|0;
  $654 = (($653) + -1)<<16>>16;
  HEAP16[339928>>1] = $654;
  $655 = ($654<<16>>16)!=(0);
  if (!($655)) {
   break;
  }
 }
 $0 = 0;
 $656 = $0;
 STACKTOP = sp;return ($656|0);
}
function _renderAnimatedModel($bodyPtr) {
 $bodyPtr = $bodyPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $boneType = 0, $coX = 0, $coY = 0, $coZ = 0, $col1 = 0, $col2 = 0;
 var $col3 = 0, $colPtr = 0, $color = 0, $currentShadeDestination = 0, $elemEntryPtr = 0, $lightMatrix = 0, $numOfShades = 0, $numShades = 0, $pointPtr = 0, $pointPtrDest = 0, $pri2Ptr2 = 0, $shade = 0, $tmpElemPtr = 0, $tmpShadePtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bodyPtr;
 $1 = $0;
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 HEAP32[361832>>2] = $3;
 $4 = $0;
 $5 = (($4) + 2|0);
 $0 = $5;
 $6 = $0;
 HEAP32[325752>>2] = $6;
 $7 = HEAP32[361832>>2]|0;
 $8 = ($7*6)|0;
 $9 = $0;
 $10 = (($9) + ($8)|0);
 $0 = $10;
 $11 = $0;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 HEAP32[361840>>2] = $13;
 $14 = $0;
 $15 = (($14) + 2|0);
 $0 = $15;
 $16 = $0;
 HEAP32[361848>>2] = $16;
 HEAP32[361856>>2] = $16;
 HEAP32[325696>>2] = 319808;
 $17 = HEAP32[319712>>2]|0;
 $18 = HEAP32[319728>>2]|0;
 $19 = HEAP32[319720>>2]|0;
 $20 = HEAP32[361856>>2]|0;
 _processRotatedElement($17,$18,$19,$20);
 $21 = HEAP32[361856>>2]|0;
 $22 = (($21) + 38|0);
 HEAP32[361856>>2] = $22;
 $23 = HEAP32[361856>>2]|0;
 $elemEntryPtr = $23;
 $24 = HEAP32[361840>>2]|0;
 $25 = (($24) - 1)|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = HEAP32[361840>>2]|0;
  $28 = (($27) - 1)|0;
  HEAP32[345744>>2] = $28;
  HEAP32[325696>>2] = ((319808 + 36|0));
  while(1) {
   $29 = $elemEntryPtr;
   $30 = (($29) + 8|0);
   $31 = HEAP16[$30>>1]|0;
   $boneType = $31;
   $32 = $boneType;
   $33 = $32 << 16 >> 16;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = $elemEntryPtr;
    $36 = (($35) + 14|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37 << 16 >> 16;
    $39 = $elemEntryPtr;
    $40 = (($39) + 12|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = $41 << 16 >> 16;
    $43 = $elemEntryPtr;
    $44 = (($43) + 10|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 << 16 >> 16;
    $47 = $elemEntryPtr;
    _processRotatedElement($38,$42,$46,$47);
   } else {
    $48 = $boneType;
    $49 = $48 << 16 >> 16;
    $50 = ($49|0)==(1);
    if ($50) {
     $51 = $elemEntryPtr;
     $52 = (($51) + 14|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53 << 16 >> 16;
     $55 = $elemEntryPtr;
     $56 = (($55) + 12|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = $57 << 16 >> 16;
     $59 = $elemEntryPtr;
     $60 = (($59) + 10|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61 << 16 >> 16;
     $63 = $elemEntryPtr;
     _processTranslatedElement($54,$58,$62,$63);
    }
   }
   $64 = HEAP32[325696>>2]|0;
   $65 = (($64) + 36|0);
   HEAP32[325696>>2] = $65;
   $66 = HEAP32[361856>>2]|0;
   $67 = (($66) + 38|0);
   HEAP32[361856>>2] = $67;
   $68 = HEAP32[361856>>2]|0;
   $elemEntryPtr = $68;
   $69 = HEAP32[345744>>2]|0;
   $70 = (($69) + -1)|0;
   HEAP32[345744>>2] = $70;
   $71 = ($70|0)!=(0);
   if (!($71)) {
    break;
   }
  }
 }
 $72 = HEAP32[361832>>2]|0;
 HEAP32[345744>>2] = $72;
 $pointPtr = 320896;
 $pointPtrDest = 340944;
 $73 = HEAP32[38880>>2]|0;
 $74 = ($73|0)!=(0);
 if ($74) {
  while(1) {
   $75 = $pointPtr;
   $76 = HEAP16[$75>>1]|0;
   $77 = $76 << 16 >> 16;
   $78 = HEAP32[361864>>2]|0;
   $79 = (($77) + ($78))|0;
   $coX = $79;
   $80 = $pointPtr;
   $81 = (($80) + 2|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82 << 16 >> 16;
   $84 = HEAP32[361872>>2]|0;
   $85 = (($83) + ($84))|0;
   $coY = $85;
   $86 = $pointPtr;
   $87 = (($86) + 4|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = HEAP32[361880>>2]|0;
   $91 = (($89) + ($90))|0;
   $92 = (0 - ($91))|0;
   $coZ = $92;
   $93 = $coX;
   $94 = $coZ;
   $95 = (($93) + ($94))|0;
   $96 = ($95*24)|0;
   $97 = (($96|0) / 512)&-1;
   $98 = HEAP32[38928>>2]|0;
   $99 = (($97) + ($98))|0;
   $100 = $99&65535;
   $101 = $pointPtrDest;
   HEAP16[$101>>1] = $100;
   $102 = $coX;
   $103 = $coZ;
   $104 = (($102) - ($103))|0;
   $105 = ($104*12)|0;
   $106 = $coY;
   $107 = ($106*30)|0;
   $108 = (($105) - ($107))|0;
   $109 = (($108|0) / 512)&-1;
   $110 = HEAP32[38936>>2]|0;
   $111 = (($109) + ($110))|0;
   $112 = $111&65535;
   $113 = $pointPtrDest;
   $114 = (($113) + 2|0);
   HEAP16[$114>>1] = $112;
   $115 = $coZ;
   $116 = $coX;
   $117 = (($115) - ($116))|0;
   $118 = $coY;
   $119 = (($117) - ($118))|0;
   $120 = $119&65535;
   $121 = $pointPtrDest;
   $122 = (($121) + 4|0);
   HEAP16[$122>>1] = $120;
   $123 = $pointPtrDest;
   $124 = HEAP16[$123>>1]|0;
   $125 = $124 << 16 >> 16;
   $126 = HEAP32[47432>>2]|0;
   $127 = ($125|0)<($126|0);
   if ($127) {
    $128 = $pointPtrDest;
    $129 = HEAP16[$128>>1]|0;
    $130 = $129 << 16 >> 16;
    HEAP32[47432>>2] = $130;
   }
   $131 = $pointPtrDest;
   $132 = HEAP16[$131>>1]|0;
   $133 = $132 << 16 >> 16;
   $134 = HEAP32[47440>>2]|0;
   $135 = ($133|0)>($134|0);
   if ($135) {
    $136 = $pointPtrDest;
    $137 = HEAP16[$136>>1]|0;
    $138 = $137 << 16 >> 16;
    HEAP32[47440>>2] = $138;
   }
   $139 = $pointPtrDest;
   $140 = (($139) + 2|0);
   $141 = HEAP16[$140>>1]|0;
   $142 = $141 << 16 >> 16;
   $143 = HEAP32[47448>>2]|0;
   $144 = ($142|0)<($143|0);
   if ($144) {
    $145 = $pointPtrDest;
    $146 = (($145) + 2|0);
    $147 = HEAP16[$146>>1]|0;
    $148 = $147 << 16 >> 16;
    HEAP32[47448>>2] = $148;
   }
   $149 = $pointPtrDest;
   $150 = (($149) + 2|0);
   $151 = HEAP16[$150>>1]|0;
   $152 = $151 << 16 >> 16;
   $153 = HEAP32[47456>>2]|0;
   $154 = ($152|0)>($153|0);
   if ($154) {
    $155 = $pointPtrDest;
    $156 = (($155) + 2|0);
    $157 = HEAP16[$156>>1]|0;
    $158 = $157 << 16 >> 16;
    HEAP32[47456>>2] = $158;
   }
   $159 = $pointPtr;
   $160 = (($159) + 6|0);
   $pointPtr = $160;
   $161 = $pointPtrDest;
   $162 = (($161) + 6|0);
   $pointPtrDest = $162;
   $163 = HEAP32[345744>>2]|0;
   $164 = (($163) + -1)|0;
   HEAP32[345744>>2] = $164;
   $165 = ($164|0)!=(0);
   if (!($165)) {
    break;
   }
  }
 } else {
  while(1) {
   $166 = $pointPtr;
   $167 = HEAP16[$166>>1]|0;
   $168 = $167 << 16 >> 16;
   $169 = HEAP32[361864>>2]|0;
   $170 = (($168) + ($169))|0;
   $coX = $170;
   $171 = $pointPtr;
   $172 = (($171) + 2|0);
   $173 = HEAP16[$172>>1]|0;
   $174 = $173 << 16 >> 16;
   $175 = HEAP32[361872>>2]|0;
   $176 = (($174) + ($175))|0;
   $coY = $176;
   $177 = $pointPtr;
   $178 = (($177) + 4|0);
   $179 = HEAP16[$178>>1]|0;
   $180 = $179 << 16 >> 16;
   $181 = HEAP32[361880>>2]|0;
   $182 = (($180) + ($181))|0;
   $183 = (0 - ($182))|0;
   $coZ = $183;
   $184 = HEAP32[319600>>2]|0;
   $185 = $coZ;
   $186 = (($185) + ($184))|0;
   $coZ = $186;
   $187 = $coZ;
   $188 = ($187|0)<=(0);
   if ($188) {
    $coZ = 2147483647;
   }
   $189 = HEAP32[38928>>2]|0;
   $190 = $coX;
   $191 = HEAP32[319608>>2]|0;
   $192 = Math_imul($190, $191)|0;
   $193 = $coZ;
   $194 = (($192|0) / ($193|0))&-1;
   $195 = (($189) + ($194))|0;
   $coX = $195;
   $196 = $coX;
   $197 = ($196|0)>(65535);
   if ($197) {
    $coX = 32767;
   }
   $198 = $coX;
   $199 = $198&65535;
   $200 = $pointPtrDest;
   HEAP16[$200>>1] = $199;
   $201 = $pointPtrDest;
   $202 = HEAP16[$201>>1]|0;
   $203 = $202 << 16 >> 16;
   $204 = HEAP32[47432>>2]|0;
   $205 = ($203|0)<($204|0);
   if ($205) {
    $206 = $pointPtrDest;
    $207 = HEAP16[$206>>1]|0;
    $208 = $207 << 16 >> 16;
    HEAP32[47432>>2] = $208;
   }
   $209 = $pointPtrDest;
   $210 = HEAP16[$209>>1]|0;
   $211 = $210 << 16 >> 16;
   $212 = HEAP32[47440>>2]|0;
   $213 = ($211|0)>($212|0);
   if ($213) {
    $214 = $pointPtrDest;
    $215 = HEAP16[$214>>1]|0;
    $216 = $215 << 16 >> 16;
    HEAP32[47440>>2] = $216;
   }
   $217 = HEAP32[38936>>2]|0;
   $218 = $coY;
   $219 = (0 - ($218))|0;
   $220 = HEAP32[319616>>2]|0;
   $221 = Math_imul($219, $220)|0;
   $222 = $coZ;
   $223 = (($221|0) / ($222|0))&-1;
   $224 = (($217) + ($223))|0;
   $coY = $224;
   $225 = $coY;
   $226 = ($225|0)>(65535);
   if ($226) {
    $coY = 32767;
   }
   $227 = $coY;
   $228 = $227&65535;
   $229 = $pointPtrDest;
   $230 = (($229) + 2|0);
   HEAP16[$230>>1] = $228;
   $231 = $pointPtrDest;
   $232 = (($231) + 2|0);
   $233 = HEAP16[$232>>1]|0;
   $234 = $233 << 16 >> 16;
   $235 = HEAP32[47448>>2]|0;
   $236 = ($234|0)<($235|0);
   if ($236) {
    $237 = $pointPtrDest;
    $238 = (($237) + 2|0);
    $239 = HEAP16[$238>>1]|0;
    $240 = $239 << 16 >> 16;
    HEAP32[47448>>2] = $240;
   }
   $241 = $pointPtrDest;
   $242 = (($241) + 2|0);
   $243 = HEAP16[$242>>1]|0;
   $244 = $243 << 16 >> 16;
   $245 = HEAP32[47456>>2]|0;
   $246 = ($244|0)>($245|0);
   if ($246) {
    $247 = $pointPtrDest;
    $248 = (($247) + 2|0);
    $249 = HEAP16[$248>>1]|0;
    $250 = $249 << 16 >> 16;
    HEAP32[47456>>2] = $250;
   }
   $251 = $coZ;
   $252 = ($251|0)>(65535);
   if ($252) {
    $coZ = 32767;
   }
   $253 = $coZ;
   $254 = $253&65535;
   $255 = $pointPtrDest;
   $256 = (($255) + 4|0);
   HEAP16[$256>>1] = $254;
   $257 = $pointPtr;
   $258 = (($257) + 6|0);
   $pointPtr = $258;
   $259 = $pointPtrDest;
   $260 = (($259) + 6|0);
   $pointPtrDest = $260;
   $261 = HEAP32[345744>>2]|0;
   $262 = (($261) + -1)|0;
   HEAP32[345744>>2] = $262;
   $263 = ($262|0)!=(0);
   if (!($263)) {
    break;
   }
  }
 }
 $264 = HEAP32[361856>>2]|0;
 HEAP32[361888>>2] = $264;
 $265 = HEAP32[361888>>2]|0;
 $266 = HEAP16[$265>>1]|0;
 $267 = $266&65535;
 $numOfShades = $267;
 $268 = HEAP32[361888>>2]|0;
 $269 = (($268) + 2|0);
 HEAP32[361888>>2] = $269;
 $270 = $numOfShades;
 $271 = ($270|0)!=(0);
 if (!($271)) {
  $412 = HEAP32[361888>>2]|0;
  $413 = (_renderModelElements($412)|0);
  STACKTOP = sp;return ($413|0);
 }
 $currentShadeDestination = 339944;
 $lightMatrix = 319808;
 $272 = HEAP32[361840>>2]|0;
 HEAP32[345744>>2] = $272;
 $273 = HEAP32[361848>>2]|0;
 $274 = (($273) + 18|0);
 $pri2Ptr2 = $274;
 $tmpElemPtr = $274;
 while(1) {
  $275 = $tmpElemPtr;
  $276 = HEAP16[$275>>1]|0;
  $277 = $276&65535;
  $numOfShades = $277;
  $278 = $numOfShades;
  $279 = ($278|0)!=(0);
  if ($279) {
   $280 = $numOfShades;
   $numShades = $280;
   $281 = $lightMatrix;
   $282 = HEAP32[$281>>2]|0;
   $283 = HEAP32[325800>>2]|0;
   $284 = Math_imul($282, $283)|0;
   HEAP32[325760>>2] = $284;
   $285 = $lightMatrix;
   $286 = (($285) + 4|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = HEAP32[325800>>2]|0;
   $289 = Math_imul($287, $288)|0;
   HEAP32[((325760 + 4|0))>>2] = $289;
   $290 = $lightMatrix;
   $291 = (($290) + 8|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = HEAP32[325800>>2]|0;
   $294 = Math_imul($292, $293)|0;
   HEAP32[((325760 + 8|0))>>2] = $294;
   $295 = $lightMatrix;
   $296 = (($295) + 12|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = HEAP32[325808>>2]|0;
   $299 = Math_imul($297, $298)|0;
   HEAP32[((325760 + 12|0))>>2] = $299;
   $300 = $lightMatrix;
   $301 = (($300) + 16|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = HEAP32[325808>>2]|0;
   $304 = Math_imul($302, $303)|0;
   HEAP32[((325760 + 16|0))>>2] = $304;
   $305 = $lightMatrix;
   $306 = (($305) + 20|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = HEAP32[325808>>2]|0;
   $309 = Math_imul($307, $308)|0;
   HEAP32[((325760 + 20|0))>>2] = $309;
   $310 = $lightMatrix;
   $311 = (($310) + 24|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[325816>>2]|0;
   $314 = Math_imul($312, $313)|0;
   HEAP32[((325760 + 24|0))>>2] = $314;
   $315 = $lightMatrix;
   $316 = (($315) + 28|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = HEAP32[325816>>2]|0;
   $319 = Math_imul($317, $318)|0;
   HEAP32[((325760 + 28|0))>>2] = $319;
   $320 = $lightMatrix;
   $321 = (($320) + 32|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = HEAP32[325816>>2]|0;
   $324 = Math_imul($322, $323)|0;
   HEAP32[((325760 + 32|0))>>2] = $324;
   while(1) {
    $325 = HEAP32[361888>>2]|0;
    $colPtr = $325;
    $326 = $colPtr;
    $327 = (($326) + 2|0);
    $colPtr = $327;
    $328 = HEAP16[$326>>1]|0;
    $col1 = $328;
    $329 = $colPtr;
    $330 = (($329) + 2|0);
    $colPtr = $330;
    $331 = HEAP16[$329>>1]|0;
    $col2 = $331;
    $332 = $colPtr;
    $333 = (($332) + 2|0);
    $colPtr = $333;
    $334 = HEAP16[$332>>1]|0;
    $col3 = $334;
    $335 = HEAP32[325760>>2]|0;
    $336 = $col1;
    $337 = $336 << 16 >> 16;
    $338 = Math_imul($335, $337)|0;
    $339 = HEAP32[((325760 + 4|0))>>2]|0;
    $340 = $col2;
    $341 = $340 << 16 >> 16;
    $342 = Math_imul($339, $341)|0;
    $343 = (($338) + ($342))|0;
    $344 = HEAP32[((325760 + 8|0))>>2]|0;
    $345 = $col3;
    $346 = $345 << 16 >> 16;
    $347 = Math_imul($344, $346)|0;
    $348 = (($343) + ($347))|0;
    $color = $348;
    $349 = HEAP32[((325760 + 12|0))>>2]|0;
    $350 = $col1;
    $351 = $350 << 16 >> 16;
    $352 = Math_imul($349, $351)|0;
    $353 = HEAP32[((325760 + 16|0))>>2]|0;
    $354 = $col2;
    $355 = $354 << 16 >> 16;
    $356 = Math_imul($353, $355)|0;
    $357 = (($352) + ($356))|0;
    $358 = HEAP32[((325760 + 20|0))>>2]|0;
    $359 = $col3;
    $360 = $359 << 16 >> 16;
    $361 = Math_imul($358, $360)|0;
    $362 = (($357) + ($361))|0;
    $363 = $color;
    $364 = (($363) + ($362))|0;
    $color = $364;
    $365 = HEAP32[((325760 + 24|0))>>2]|0;
    $366 = $col1;
    $367 = $366 << 16 >> 16;
    $368 = Math_imul($365, $367)|0;
    $369 = HEAP32[((325760 + 28|0))>>2]|0;
    $370 = $col2;
    $371 = $370 << 16 >> 16;
    $372 = Math_imul($369, $371)|0;
    $373 = (($368) + ($372))|0;
    $374 = HEAP32[((325760 + 32|0))>>2]|0;
    $375 = $col3;
    $376 = $375 << 16 >> 16;
    $377 = Math_imul($374, $376)|0;
    $378 = (($373) + ($377))|0;
    $379 = $color;
    $380 = (($379) + ($378))|0;
    $color = $380;
    $shade = 0;
    $381 = $color;
    $382 = ($381|0)>(0);
    if ($382) {
     $383 = $color;
     $384 = $383 >> 14;
     $color = $384;
     $385 = HEAP32[361888>>2]|0;
     $tmpShadePtr = $385;
     $386 = $tmpShadePtr;
     $387 = (($386) + 6|0);
     $388 = HEAP16[$387>>1]|0;
     $389 = $388&65535;
     $390 = $color;
     $391 = (($390|0) / ($389|0))&-1;
     $color = $391;
     $392 = $color;
     $393 = $392&65535;
     $394 = $393&65535;
     $shade = $394;
    }
    $395 = $shade;
    $396 = $395&65535;
    $397 = $currentShadeDestination;
    HEAP16[$397>>1] = $396;
    $398 = $currentShadeDestination;
    $399 = (($398) + 2|0);
    $currentShadeDestination = $399;
    $400 = HEAP32[361888>>2]|0;
    $401 = (($400) + 8|0);
    HEAP32[361888>>2] = $401;
    $402 = $numShades;
    $403 = (($402) + -1)|0;
    $numShades = $403;
    $404 = ($403|0)!=(0);
    if (!($404)) {
     break;
    }
   }
  }
  $405 = $pri2Ptr2;
  $406 = (($405) + 38|0);
  $pri2Ptr2 = $406;
  $tmpElemPtr = $406;
  $407 = $lightMatrix;
  $408 = (($407) + 36|0);
  $lightMatrix = $408;
  $409 = HEAP32[345744>>2]|0;
  $410 = (($409) + -1)|0;
  HEAP32[345744>>2] = $410;
  $411 = ($410|0)!=(0);
  if (!($411)) {
   break;
  }
 }
 $412 = HEAP32[361888>>2]|0;
 $413 = (_renderModelElements($412)|0);
 STACKTOP = sp;return ($413|0);
}
function _prepareIsoModel($bodyPtr) {
 $bodyPtr = $bodyPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bodyDataPtr = 0, $bodyHeader = 0, $bp = 0, $bx = 0;
 var $i = 0, $numOfElement1 = 0, $numOfPoint = 0, $offsetToData = 0, $ptr2 = 0, $ptrToKeyData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bodyPtr;
 $bp = 36;
 $bx = 38;
 $1 = $0;
 $bodyHeader = $1;
 $2 = $bodyHeader;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $4 & 128;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $bodyHeader;
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9 | 128;
 $11 = $10&65535;
 HEAP16[$7>>1] = $11;
 $12 = $bodyHeader;
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = $14 & 2;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $bodyHeader;
 $18 = (($17) + 14|0);
 $19 = HEAP16[$18>>1]|0;
 $offsetToData = $19;
 $20 = $0;
 $21 = $offsetToData;
 $22 = $21 << 16 >> 16;
 $23 = (($20) + ($22)|0);
 $24 = (($23) + 16|0);
 $bodyDataPtr = $24;
 $25 = $bodyDataPtr;
 $26 = HEAP16[$25>>1]|0;
 $numOfElement1 = $26;
 $27 = $bodyDataPtr;
 $28 = (($27) + 2|0);
 $29 = $numOfElement1;
 $30 = $29 << 16 >> 16;
 $31 = ($30*6)|0;
 $32 = (($28) + ($31)|0);
 $ptr2 = $32;
 $33 = $ptr2;
 $34 = HEAP16[$33>>1]|0;
 $numOfPoint = $34;
 $35 = $ptr2;
 $36 = (($35) + 2|0);
 $ptrToKeyData = $36;
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = $numOfPoint;
  $39 = $38 << 16 >> 16;
  $40 = ($37|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $ptrToKeyData;
  $42 = (($41) + 38|0);
  $ptrToKeyData = $42;
  $43 = $ptrToKeyData;
  $44 = (($43) + 6|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $bp;
  $48 = Math_imul($46, $47)|0;
  $49 = $bx;
  $50 = (($48|0) / ($49|0))&-1;
  $51 = $50&65535;
  $52 = $ptrToKeyData;
  $53 = (($52) + 6|0);
  HEAP16[$53>>1] = $51;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 STACKTOP = sp;return;
}
function _renderIsoModel($X,$Y,$Z,$angleX,$angleY,$angleZ,$bodyPtr) {
 $X = $X|0;
 $Y = $Y|0;
 $Z = $Z|0;
 $angleX = $angleX|0;
 $angleY = $angleY|0;
 $angleZ = $angleZ|0;
 $bodyPtr = $bodyPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $bodyHeader = 0, $ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $X;
 $1 = $Y;
 $2 = $Z;
 $3 = $angleX;
 $4 = $angleY;
 $5 = $angleZ;
 $6 = $bodyPtr;
 $7 = $3;
 HEAP32[319712>>2] = $7;
 $8 = $4;
 HEAP32[319728>>2] = $8;
 $9 = $5;
 HEAP32[319720>>2] = $9;
 HEAP32[47432>>2] = 32767;
 HEAP32[47448>>2] = 32767;
 HEAP32[47440>>2] = -32767;
 HEAP32[47456>>2] = -32767;
 $10 = HEAP32[38880>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $0;
  $13 = $1;
  $14 = $2;
  _getBaseRotationPosition($12,$13,$14);
  $15 = HEAP32[38952>>2]|0;
  $16 = HEAP32[319576>>2]|0;
  $17 = (($15) - ($16))|0;
  HEAP32[361864>>2] = $17;
  $18 = HEAP32[38960>>2]|0;
  $19 = HEAP32[319584>>2]|0;
  $20 = (($18) - ($19))|0;
  HEAP32[361872>>2] = $20;
  $21 = HEAP32[38968>>2]|0;
  $22 = HEAP32[319592>>2]|0;
  $23 = (($21) - ($22))|0;
  HEAP32[361880>>2] = $23;
 } else {
  $24 = $0;
  HEAP32[361864>>2] = $24;
  $25 = $1;
  HEAP32[361872>>2] = $25;
  $26 = $2;
  HEAP32[361880>>2] = $26;
 }
 HEAP32[345744>>2] = 0;
 HEAP32[345752>>2] = 345816;
 $27 = $6;
 $28 = HEAP16[$27>>1]|0;
 $bodyHeader = $28;
 $29 = $6;
 $30 = (($29) + 16|0);
 $31 = $6;
 $32 = (($31) + 14|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = (($30) + ($34)|0);
 $ptr = $35;
 $36 = $bodyHeader;
 $37 = $36 << 16 >> 16;
 $38 = $37 & 2;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $ptr;
  $41 = (_renderAnimatedModel($40)|0);
  STACKTOP = sp;return ($41|0);
 } else {
  (_printf((361896|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 }
 return (0)|0;
}
function _copyActorInternAnim($bodyPtrSrc,$bodyPtrDest) {
 $bodyPtrSrc = $bodyPtrSrc|0;
 $bodyPtrDest = $bodyPtrDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $ax = 0, $cx = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bodyPtrSrc;
 $1 = $bodyPtrDest;
 $2 = $0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $4 & 2;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = $9 & 2;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (($12) + 16|0);
 $0 = $13;
 $14 = $1;
 $15 = (($14) + 16|0);
 $1 = $15;
 $16 = $0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 HEAP32[$18>>2] = $17;
 $19 = $0;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = $0;
 $25 = $0;
 $26 = (($25) + -2|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (($24) + ($28)|0);
 $0 = $29;
 $30 = $0;
 $31 = $0;
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 << 16 >> 16;
 $34 = ($33*6)|0;
 $35 = (($30) + ($34)|0);
 $36 = (($35) + 2|0);
 $0 = $36;
 $37 = $0;
 $38 = HEAP16[$37>>1]|0;
 $cx = $38;
 $39 = $1;
 $40 = $1;
 $41 = (($40) + -2|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42 << 16 >> 16;
 $44 = (($39) + ($43)|0);
 $1 = $44;
 $45 = $1;
 $46 = $1;
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = ($48*6)|0;
 $50 = (($45) + ($49)|0);
 $51 = (($50) + 2|0);
 $1 = $51;
 $52 = $1;
 $53 = HEAP16[$52>>1]|0;
 $ax = $53;
 $54 = $cx;
 $55 = $54 << 16 >> 16;
 $56 = $ax;
 $57 = $56 << 16 >> 16;
 $58 = ($55|0)>($57|0);
 if ($58) {
  $59 = $ax;
  $cx = $59;
 }
 $60 = $0;
 $61 = (($60) + 10|0);
 $0 = $61;
 $62 = $1;
 $63 = (($62) + 10|0);
 $1 = $63;
 $i = 0;
 while(1) {
  $64 = $i;
  $65 = $cx;
  $66 = $65 << 16 >> 16;
  $67 = ($64|0)<($66|0);
  if (!($67)) {
   break;
  }
  $68 = $0;
  $69 = HEAP32[$68>>2]|0;
  $70 = $1;
  HEAP32[$70>>2] = $69;
  $71 = $0;
  $72 = (($71) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $1;
  $75 = (($74) + 4|0);
  HEAP32[$75>>2] = $73;
  $76 = $1;
  $77 = (($76) + 30|0);
  $1 = $77;
  $78 = $0;
  $79 = (($78) + 30|0);
  $0 = $79;
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 STACKTOP = sp;return;
}
function _renderBehaviourModel($boxLeft,$boxTop,$boxRight,$boxBottom,$Y,$angle,$entityPtr) {
 $boxLeft = $boxLeft|0;
 $boxTop = $boxTop|0;
 $boxRight = $boxRight|0;
 $boxBottom = $boxBottom|0;
 $Y = $Y|0;
 $angle = $angle|0;
 $entityPtr = $entityPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $newAngle = 0, $tmpBoxRight = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $boxLeft;
 $1 = $boxTop;
 $2 = $boxRight;
 $3 = $boxBottom;
 $4 = $Y;
 $5 = $angle;
 $6 = $entityPtr;
 $7 = $2;
 $tmpBoxRight = $7;
 $8 = $3;
 $9 = $1;
 $10 = (($8) + ($9))|0;
 $y = $10;
 $11 = $y;
 $12 = $11 >> 1;
 $y = $12;
 $13 = $2;
 $14 = $0;
 $15 = (($13) + ($14))|0;
 $x = $15;
 $16 = $x;
 $17 = $16 >> 1;
 $x = $17;
 $18 = $x;
 $19 = $y;
 _setOrthoProjection($18,$19,0);
 $20 = $0;
 $21 = $1;
 $22 = $tmpBoxRight;
 $23 = $3;
 _setClip($20,$21,$22,$23);
 $24 = $5;
 $25 = ($24|0)==(-1);
 if (!($25)) {
  $40 = $4;
  $41 = $5;
  $42 = $6;
  (_renderIsoModel(0,$40,0,0,$41,0,$42)|0);
  STACKTOP = sp;return;
 }
 $26 = (_getRealAngle(124656)|0);
 $27 = $26&65535;
 $newAngle = $27;
 $28 = HEAP16[((124656 + 4|0))>>1]|0;
 $29 = $28 << 16 >> 16;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $newAngle;
  $32 = $newAngle;
  $33 = $32 << 16 >> 16;
  $34 = (($33) - 256)|0;
  $35 = $34&65535;
  _setActorAngleSafe($31,$35,50,124656);
 }
 $36 = $4;
 $37 = $newAngle;
 $38 = $37 << 16 >> 16;
 $39 = $6;
 (_renderIsoModel(0,$36,0,0,$38,0,$39)|0);
 STACKTOP = sp;return;
}
function _renderInventoryItem($X,$Y,$itemBodyPtr,$angle,$param) {
 $X = $X|0;
 $Y = $Y|0;
 $itemBodyPtr = $itemBodyPtr|0;
 $angle = $angle|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $X;
 $1 = $Y;
 $2 = $itemBodyPtr;
 $3 = $angle;
 $4 = $param;
 $5 = $0;
 $6 = $1;
 _setCameraPosition($5,$6,128,200,200);
 $7 = $4;
 _setCameraAngle(0,0,0,60,0,0,$7);
 $8 = $3;
 $9 = $2;
 (_renderIsoModel(0,0,0,0,$8,0,$9)|0);
 STACKTOP = sp;return;
}
function _initPalettes() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[361952>>2]|0;
 (_hqrGetallocEntry(121368,$0,0)|0);
 $1 = HEAP32[121368>>2]|0;
 _convertPalToRGBA($1,121376);
 $2 = HEAP32[121368>>2]|0;
 _memcpy((118032|0),($2|0),768)|0;
 _convertPalToRGBA(118032,120312);
 _setPalette(120312);
 HEAP16[121336>>1] = 0;
 STACKTOP = sp;return;
}
function _preloadSprites() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $numEntries = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[362200>>2]|0;
 $1 = (_hqrNumEntries($0)|0);
 $2 = (($1) - 1)|0;
 $numEntries = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $numEntries;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (24264 + ($6<<2)|0);
  $8 = HEAP32[362200>>2]|0;
  $9 = $i;
  $10 = (_hqrGetallocEntry($7,$8,$9)|0);
  $11 = $i;
  $12 = (25064 + ($11<<2)|0);
  HEAP32[$12>>2] = $10;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 STACKTOP = sp;return;
}
function _preloadAnimations() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $numEntries = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[362272>>2]|0;
 $1 = (_hqrNumEntries($0)|0);
 $2 = (($1) - 1)|0;
 $numEntries = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $numEntries;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (39472 + ($6<<2)|0);
  $8 = HEAP32[362272>>2]|0;
  $9 = $i;
  $10 = (_hqrGetallocEntry($7,$8,$9)|0);
  $11 = $i;
  $12 = (41872 + ($11<<2)|0);
  HEAP32[$12>>2] = $10;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 STACKTOP = sp;return;
}
function _preloadInventoryItems() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $numEntries = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[362296>>2]|0;
 $1 = (_hqrNumEntries($0)|0);
 $2 = (($1) - 1)|0;
 $numEntries = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $numEntries;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (38656 + ($6<<2)|0);
  $8 = HEAP32[362296>>2]|0;
  $9 = $i;
  $10 = (_hqrGetallocEntry($7,$8,$9)|0);
  $11 = $i;
  $12 = (38768 + ($11<<2)|0);
  HEAP32[$12>>2] = $10;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 STACKTOP = sp;return;
}
function _initResources() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _initPalettes();
 $0 = HEAP32[361952>>2]|0;
 (_hqrGetallocEntry(123168,$0,1)|0);
 _setFontParameters(2,8);
 _setFontColor(14);
 _setTextCrossColor(136,143,2);
 $1 = HEAP32[361952>>2]|0;
 (_hqrGetallocEntry(34064,$1,4)|0);
 $2 = HEAP32[361952>>2]|0;
 (_hqrGetallocEntry(23336,$2,3)|0);
 _preloadSprites();
 _preloadAnimations();
 _preloadInventoryItems();
 STACKTOP = sp;return;
}
function _setActorStaticFlags($actorIdx,$staticFlags) {
 $actorIdx = $actorIdx|0;
 $staticFlags = $staticFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $staticFlags;
 $2 = $1;
 $3 = $2&65535;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = (136 + (($6*232)|0)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 & -2;
  $10 = $9 | 1;
  HEAP16[$7>>1] = $10;
 }
 $11 = $1;
 $12 = $11&65535;
 $13 = $12 & 2;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $0;
  $16 = (136 + (($15*232)|0)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 & -3;
  $19 = $18 | 2;
  HEAP16[$16>>1] = $19;
 }
 $20 = $1;
 $21 = $20&65535;
 $22 = $21 & 4;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $0;
  $25 = (136 + (($24*232)|0)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 & -5;
  $28 = $27 | 4;
  HEAP16[$25>>1] = $28;
 }
 $29 = $1;
 $30 = $29&65535;
 $31 = $30 & 8;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $0;
  $34 = (136 + (($33*232)|0)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 & -9;
  $37 = $36 | 8;
  HEAP16[$34>>1] = $37;
 }
 $38 = $1;
 $39 = $38&65535;
 $40 = $39 & 16;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $0;
  $43 = (136 + (($42*232)|0)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 & -17;
  $46 = $45 | 16;
  HEAP16[$43>>1] = $46;
 }
 $47 = $1;
 $48 = $47&65535;
 $49 = $48 & 32;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $0;
  $52 = (136 + (($51*232)|0)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 & -33;
  $55 = $54 | 32;
  HEAP16[$52>>1] = $55;
 }
 $56 = $1;
 $57 = $56&65535;
 $58 = $57 & 64;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = $0;
  $61 = (136 + (($60*232)|0)|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 & -65;
  $64 = $63 | 64;
  HEAP16[$61>>1] = $64;
 }
 $65 = $1;
 $66 = $65&65535;
 $67 = $66 & 128;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $0;
  $70 = (136 + (($69*232)|0)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 & -129;
  $73 = $72 | 128;
  HEAP16[$70>>1] = $73;
 }
 $74 = $1;
 $75 = $74&65535;
 $76 = $75 & 256;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $0;
  $79 = (136 + (($78*232)|0)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80 & -257;
  $82 = $81 | 256;
  HEAP16[$79>>1] = $82;
 }
 $83 = $1;
 $84 = $83&65535;
 $85 = $84 & 512;
 $86 = ($85|0)!=(0);
 if ($86) {
  $87 = $0;
  $88 = (136 + (($87*232)|0)|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 & -513;
  $91 = $90 | 512;
  HEAP16[$88>>1] = $91;
 }
 $92 = $1;
 $93 = $92&65535;
 $94 = $93 & 1024;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $0;
  $97 = (136 + (($96*232)|0)|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98 & -1025;
  $100 = $99 | 1024;
  HEAP16[$97>>1] = $100;
 }
 $101 = $1;
 $102 = $101&65535;
 $103 = $102 & 2048;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $0;
  $106 = (136 + (($105*232)|0)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107 & -2049;
  $109 = $108 | 2048;
  HEAP16[$106>>1] = $109;
 }
 $110 = $1;
 $111 = $110&65535;
 $112 = $111 & 4096;
 $113 = ($112|0)!=(0);
 if ($113) {
  $114 = $0;
  $115 = (136 + (($114*232)|0)|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = $116 & -4097;
  $118 = $117 | 4096;
  HEAP16[$115>>1] = $118;
 }
 $119 = $1;
 $120 = $119&65535;
 $121 = $120 & 8192;
 $122 = ($121|0)!=(0);
 if ($122) {
 }
 $123 = $1;
 $124 = $123&65535;
 $125 = $124 & 16384;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $0;
  $128 = (136 + (($127*232)|0)|0);
  $129 = HEAP16[$128>>1]|0;
  $130 = $129 & -16385;
  $131 = $130 | 16384;
  HEAP16[$128>>1] = $131;
 }
 $132 = $1;
 $133 = $132&65535;
 $134 = $133 & 32768;
 $135 = ($134|0)!=(0);
 if (!($135)) {
  STACKTOP = sp;return;
 }
 $136 = $0;
 $137 = (136 + (($136*232)|0)|0);
 $138 = HEAP16[$137>>1]|0;
 $139 = $138 & 32767;
 $140 = $139 | -32768;
 HEAP16[$137>>1] = $140;
 STACKTOP = sp;return;
}
function _loadScene() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $localScene = 0, $scriptSize = 0, $staticFlags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $scriptSize = 0;
 $0 = HEAP32[362304>>2]|0;
 $localScene = $0;
 $1 = $localScene;
 $2 = (($1) + 1|0);
 $localScene = $2;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 HEAP32[122480>>2] = $4;
 $5 = $localScene;
 $6 = (($5) + 1|0);
 $localScene = $6;
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 HEAP32[34072>>2] = $8;
 $9 = $localScene;
 $10 = (($9) + 4|0);
 $localScene = $10;
 $11 = $localScene;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 HEAP32[34080>>2] = $13;
 $14 = $localScene;
 $15 = (($14) + 2|0);
 $localScene = $15;
 $16 = $localScene;
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 HEAP32[34088>>2] = $18;
 $19 = $localScene;
 $20 = (($19) + 2|0);
 $localScene = $20;
 HEAP32[34080>>2] = 896;
 HEAP32[34088>>2] = 950;
 $21 = $localScene;
 $22 = HEAP16[$21>>1]|0;
 HEAP16[34104>>1] = $22;
 $23 = $localScene;
 $24 = (($23) + 2|0);
 $localScene = $24;
 $25 = $localScene;
 $26 = HEAP16[$25>>1]|0;
 HEAP16[34112>>1] = $26;
 $27 = $localScene;
 $28 = (($27) + 2|0);
 $localScene = $28;
 $29 = $localScene;
 $30 = HEAP16[$29>>1]|0;
 HEAP16[34120>>1] = $30;
 $31 = $localScene;
 $32 = (($31) + 2|0);
 $localScene = $32;
 $33 = $localScene;
 $34 = HEAP16[$33>>1]|0;
 HEAP16[((34104 + 2|0))>>1] = $34;
 $35 = $localScene;
 $36 = (($35) + 2|0);
 $localScene = $36;
 $37 = $localScene;
 $38 = HEAP16[$37>>1]|0;
 HEAP16[((34112 + 2|0))>>1] = $38;
 $39 = $localScene;
 $40 = (($39) + 2|0);
 $localScene = $40;
 $41 = $localScene;
 $42 = HEAP16[$41>>1]|0;
 HEAP16[((34120 + 2|0))>>1] = $42;
 $43 = $localScene;
 $44 = (($43) + 2|0);
 $localScene = $44;
 $45 = $localScene;
 $46 = HEAP16[$45>>1]|0;
 HEAP16[((34104 + 4|0))>>1] = $46;
 $47 = $localScene;
 $48 = (($47) + 2|0);
 $localScene = $48;
 $49 = $localScene;
 $50 = HEAP16[$49>>1]|0;
 HEAP16[((34112 + 4|0))>>1] = $50;
 $51 = $localScene;
 $52 = (($51) + 2|0);
 $localScene = $52;
 $53 = $localScene;
 $54 = HEAP16[$53>>1]|0;
 HEAP16[((34120 + 4|0))>>1] = $54;
 $55 = $localScene;
 $56 = (($55) + 2|0);
 $localScene = $56;
 $57 = $localScene;
 $58 = HEAP16[$57>>1]|0;
 HEAP16[((34104 + 6|0))>>1] = $58;
 $59 = $localScene;
 $60 = (($59) + 2|0);
 $localScene = $60;
 $61 = $localScene;
 $62 = HEAP16[$61>>1]|0;
 HEAP16[((34112 + 6|0))>>1] = $62;
 $63 = $localScene;
 $64 = (($63) + 2|0);
 $localScene = $64;
 $65 = $localScene;
 $66 = HEAP16[$65>>1]|0;
 HEAP16[((34120 + 6|0))>>1] = $66;
 $67 = $localScene;
 $68 = (($67) + 2|0);
 $localScene = $68;
 $69 = $localScene;
 $70 = HEAP16[$69>>1]|0;
 HEAP16[34128>>1] = $70;
 $71 = $localScene;
 $72 = (($71) + 2|0);
 $localScene = $72;
 $73 = $localScene;
 $74 = HEAP16[$73>>1]|0;
 HEAP16[34136>>1] = $74;
 $75 = $localScene;
 $76 = (($75) + 2|0);
 $localScene = $76;
 $77 = $localScene;
 $78 = (($77) + 1|0);
 $localScene = $78;
 $79 = HEAP8[$77>>0]|0;
 $80 = $79&255;
 HEAP16[34152>>1] = $80;
 $81 = $localScene;
 $82 = HEAP16[$81>>1]|0;
 HEAP16[34160>>1] = $82;
 $83 = $localScene;
 $84 = (($83) + 2|0);
 $localScene = $84;
 $85 = $localScene;
 $86 = HEAP16[$85>>1]|0;
 HEAP16[34168>>1] = $86;
 $87 = $localScene;
 $88 = (($87) + 2|0);
 $localScene = $88;
 $89 = $localScene;
 $90 = HEAP16[$89>>1]|0;
 HEAP16[34176>>1] = $90;
 $91 = $localScene;
 $92 = (($91) + 2|0);
 $localScene = $92;
 $93 = $localScene;
 $94 = HEAP16[$93>>1]|0;
 $95 = $94&65535;
 $scriptSize = $95;
 $96 = $localScene;
 $97 = (($96) + 2|0);
 $localScene = $97;
 $98 = $localScene;
 $99 = HEAP32[8>>2]|0;
 $100 = (($99) + 124|0);
 HEAP32[$100>>2] = $98;
 $101 = $scriptSize;
 $102 = $localScene;
 $103 = (($102) + ($101)|0);
 $localScene = $103;
 $104 = $localScene;
 $105 = HEAP16[$104>>1]|0;
 $106 = $105&65535;
 $scriptSize = $106;
 $107 = $localScene;
 $108 = (($107) + 2|0);
 $localScene = $108;
 $109 = $localScene;
 $110 = HEAP32[8>>2]|0;
 $111 = (($110) + 132|0);
 HEAP32[$111>>2] = $109;
 $112 = $scriptSize;
 $113 = $localScene;
 $114 = (($113) + ($112)|0);
 $localScene = $114;
 $115 = $localScene;
 $116 = HEAP16[$115>>1]|0;
 $117 = $116&65535;
 HEAP32[24248>>2] = $117;
 $118 = $localScene;
 $119 = (($118) + 2|0);
 $localScene = $119;
 $i = 1;
 while(1) {
  $120 = $i;
  $121 = HEAP32[24248>>2]|0;
  $122 = ($120|0)<($121|0);
  if (!($122)) {
   break;
  }
  $123 = $i;
  $124 = $123&65535;
  _resetActor($124);
  $125 = $localScene;
  $126 = HEAP16[$125>>1]|0;
  $staticFlags = $126;
  $127 = $localScene;
  $128 = (($127) + 2|0);
  $localScene = $128;
  $129 = $i;
  $130 = $staticFlags;
  _setActorStaticFlags($129,$130);
  $131 = $localScene;
  $132 = HEAP16[$131>>1]|0;
  $133 = $132&65535;
  $134 = $i;
  $135 = (136 + (($134*232)|0)|0);
  $136 = (($135) + 4|0);
  HEAP32[$136>>2] = $133;
  $137 = $localScene;
  $138 = (($137) + 2|0);
  $localScene = $138;
  $139 = $i;
  $140 = (136 + (($139*232)|0)|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = ($141&65535) >>> 10;
  $143 = $142 & 1;
  $144 = ($143<<16>>16)!=(0);
  if (!($144)) {
   $145 = $i;
   $146 = (136 + (($145*232)|0)|0);
   $147 = (($146) + 32|0);
   $148 = HEAP32[362224>>2]|0;
   $149 = $i;
   $150 = (136 + (($149*232)|0)|0);
   $151 = (($150) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   (_hqrGetallocEntry($147,$148,$152)|0);
  }
  $153 = $localScene;
  $154 = (($153) + 1|0);
  $localScene = $154;
  $155 = HEAP8[$153>>0]|0;
  $156 = $155&255;
  $157 = $i;
  $158 = (136 + (($157*232)|0)|0);
  $159 = (($158) + 8|0);
  HEAP32[$159>>2] = $156;
  $160 = $localScene;
  $161 = (($160) + 1|0);
  $localScene = $161;
  $162 = HEAP8[$160>>0]|0;
  $163 = $162&255;
  $164 = $i;
  $165 = (136 + (($164*232)|0)|0);
  $166 = (($165) + 12|0);
  HEAP32[$166>>2] = $163;
  $167 = $localScene;
  $168 = HEAP16[$167>>1]|0;
  $169 = $168&65535;
  $170 = $i;
  $171 = (136 + (($170*232)|0)|0);
  $172 = (($171) + 28|0);
  HEAP32[$172>>2] = $169;
  $173 = $localScene;
  $174 = (($173) + 2|0);
  $localScene = $174;
  $175 = $localScene;
  $176 = HEAP16[$175>>1]|0;
  $177 = $176&65535;
  $178 = $i;
  $179 = (136 + (($178*232)|0)|0);
  $180 = (($179) + 36|0);
  HEAP32[$180>>2] = $177;
  $181 = $i;
  $182 = (136 + (($181*232)|0)|0);
  $183 = (($182) + 36|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $i;
  $186 = (136 + (($185*232)|0)|0);
  $187 = (($186) + 108|0);
  HEAP32[$187>>2] = $184;
  $188 = $localScene;
  $189 = (($188) + 2|0);
  $localScene = $189;
  $190 = $localScene;
  $191 = HEAP16[$190>>1]|0;
  $192 = $191&65535;
  $193 = $i;
  $194 = (136 + (($193*232)|0)|0);
  $195 = (($194) + 40|0);
  HEAP32[$195>>2] = $192;
  $196 = $i;
  $197 = (136 + (($196*232)|0)|0);
  $198 = (($197) + 40|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $i;
  $201 = (136 + (($200*232)|0)|0);
  $202 = (($201) + 112|0);
  HEAP32[$202>>2] = $199;
  $203 = $localScene;
  $204 = (($203) + 2|0);
  $localScene = $204;
  $205 = $localScene;
  $206 = HEAP16[$205>>1]|0;
  $207 = $206&65535;
  $208 = $i;
  $209 = (136 + (($208*232)|0)|0);
  $210 = (($209) + 44|0);
  HEAP32[$210>>2] = $207;
  $211 = $i;
  $212 = (136 + (($211*232)|0)|0);
  $213 = (($212) + 44|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $i;
  $216 = (136 + (($215*232)|0)|0);
  $217 = (($216) + 116|0);
  HEAP32[$217>>2] = $214;
  $218 = $localScene;
  $219 = (($218) + 2|0);
  $localScene = $219;
  $220 = $localScene;
  $221 = (($220) + 1|0);
  $localScene = $221;
  $222 = HEAP8[$220>>0]|0;
  $223 = $222&255;
  $224 = $i;
  $225 = (136 + (($224*232)|0)|0);
  $226 = (($225) + 48|0);
  HEAP32[$226>>2] = $223;
  $227 = $localScene;
  $228 = HEAP16[$227>>1]|0;
  $229 = $228&65535;
  $230 = $i;
  $231 = (136 + (($230*232)|0)|0);
  $232 = (($231) + 56|0);
  HEAP32[$232>>2] = $229;
  $233 = $localScene;
  $234 = (($233) + 2|0);
  $localScene = $234;
  $235 = $i;
  $236 = (136 + (($235*232)|0)|0);
  $237 = (($236) + 56|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $238 & 254;
  HEAP32[$237>>2] = $239;
  $240 = $localScene;
  $241 = HEAP16[$240>>1]|0;
  $242 = $241&65535;
  $243 = $i;
  $244 = (136 + (($243*232)|0)|0);
  $245 = (($244) + 60|0);
  HEAP32[$245>>2] = $242;
  $246 = $localScene;
  $247 = (($246) + 2|0);
  $localScene = $247;
  $248 = $localScene;
  $249 = HEAP16[$248>>1]|0;
  $250 = $249&65535;
  $251 = $i;
  $252 = (136 + (($251*232)|0)|0);
  $253 = (($252) + 64|0);
  HEAP32[$253>>2] = $250;
  $254 = $localScene;
  $255 = (($254) + 2|0);
  $localScene = $255;
  $256 = $localScene;
  $257 = HEAP16[$256>>1]|0;
  $258 = $257&65535;
  $259 = $i;
  $260 = (136 + (($259*232)|0)|0);
  $261 = (($260) + 68|0);
  HEAP32[$261>>2] = $258;
  $262 = $localScene;
  $263 = (($262) + 2|0);
  $localScene = $263;
  $264 = $localScene;
  $265 = HEAP16[$264>>1]|0;
  $266 = $265 << 16 >> 16;
  $267 = $i;
  $268 = (136 + (($267*232)|0)|0);
  $269 = (($268) + 72|0);
  HEAP32[$269>>2] = $266;
  $270 = $localScene;
  $271 = (($270) + 2|0);
  $localScene = $271;
  $272 = $localScene;
  $273 = HEAP16[$272>>1]|0;
  $274 = $273 << 16 >> 16;
  $275 = $i;
  $276 = (136 + (($275*232)|0)|0);
  $277 = (($276) + 76|0);
  HEAP32[$277>>2] = $274;
  $278 = $localScene;
  $279 = (($278) + 2|0);
  $localScene = $279;
  $280 = $localScene;
  $281 = HEAP16[$280>>1]|0;
  $282 = $281 << 16 >> 16;
  $283 = $i;
  $284 = (136 + (($283*232)|0)|0);
  $285 = (($284) + 80|0);
  HEAP32[$285>>2] = $282;
  $286 = $localScene;
  $287 = (($286) + 2|0);
  $localScene = $287;
  $288 = $localScene;
  $289 = HEAP16[$288>>1]|0;
  $290 = $289 << 16 >> 16;
  $291 = $i;
  $292 = (136 + (($291*232)|0)|0);
  $293 = (($292) + 84|0);
  HEAP32[$293>>2] = $290;
  $294 = $localScene;
  $295 = (($294) + 2|0);
  $localScene = $295;
  $296 = $i;
  $297 = (136 + (($296*232)|0)|0);
  $298 = (($297) + 84|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = $i;
  $301 = (136 + (($300*232)|0)|0);
  $302 = (($301) + 88|0);
  HEAP32[$302>>2] = $299;
  $303 = $localScene;
  $304 = (($303) + 1|0);
  $localScene = $304;
  $305 = HEAP8[$303>>0]|0;
  $306 = $305&255;
  $307 = $i;
  $308 = (136 + (($307*232)|0)|0);
  $309 = (($308) + 92|0);
  HEAP32[$309>>2] = $306;
  $310 = $localScene;
  $311 = (($310) + 1|0);
  $localScene = $311;
  $312 = HEAP8[$310>>0]|0;
  $313 = $312&255;
  $314 = $i;
  $315 = (136 + (($314*232)|0)|0);
  $316 = (($315) + 96|0);
  HEAP32[$316>>2] = $313;
  $317 = $localScene;
  $318 = (($317) + 1|0);
  $localScene = $318;
  $319 = HEAP8[$317>>0]|0;
  $320 = $319&255;
  $321 = $i;
  $322 = (136 + (($321*232)|0)|0);
  $323 = (($322) + 100|0);
  HEAP32[$323>>2] = $320;
  $324 = $localScene;
  $325 = (($324) + 1|0);
  $localScene = $325;
  $326 = HEAP8[$324>>0]|0;
  $327 = $326&255;
  $328 = $i;
  $329 = (136 + (($328*232)|0)|0);
  $330 = (($329) + 104|0);
  HEAP32[$330>>2] = $327;
  $331 = $localScene;
  $332 = HEAP16[$331>>1]|0;
  $333 = $332&65535;
  $scriptSize = $333;
  $334 = $localScene;
  $335 = (($334) + 2|0);
  $localScene = $335;
  $336 = $localScene;
  $337 = $i;
  $338 = (136 + (($337*232)|0)|0);
  $339 = (($338) + 124|0);
  HEAP32[$339>>2] = $336;
  $340 = $scriptSize;
  $341 = $localScene;
  $342 = (($341) + ($340)|0);
  $localScene = $342;
  $343 = $localScene;
  $344 = HEAP16[$343>>1]|0;
  $345 = $344&65535;
  $scriptSize = $345;
  $346 = $localScene;
  $347 = (($346) + 2|0);
  $localScene = $347;
  $348 = $localScene;
  $349 = $i;
  $350 = (136 + (($349*232)|0)|0);
  $351 = (($350) + 132|0);
  HEAP32[$351>>2] = $348;
  $352 = $scriptSize;
  $353 = $localScene;
  $354 = (($353) + ($352)|0);
  $localScene = $354;
  $355 = $i;
  $356 = (($355) + 1)|0;
  $i = $356;
 }
 $357 = $localScene;
 $358 = HEAP16[$357>>1]|0;
 $359 = $358&65535;
 HEAP32[34288>>2] = $359;
 $360 = $localScene;
 $361 = (($360) + 2|0);
 $localScene = $361;
 $i = 0;
 while(1) {
  $362 = $i;
  $363 = HEAP32[34288>>2]|0;
  $364 = ($362|0)<($363|0);
  if (!($364)) {
   break;
  }
  $365 = $localScene;
  $366 = HEAP16[$365>>1]|0;
  $367 = $i;
  $368 = (34296 + (($367*24)|0)|0);
  HEAP16[$368>>1] = $366;
  $369 = $localScene;
  $370 = (($369) + 2|0);
  $localScene = $370;
  $371 = $localScene;
  $372 = HEAP16[$371>>1]|0;
  $373 = $i;
  $374 = (34296 + (($373*24)|0)|0);
  $375 = (($374) + 2|0);
  HEAP16[$375>>1] = $372;
  $376 = $localScene;
  $377 = (($376) + 2|0);
  $localScene = $377;
  $378 = $localScene;
  $379 = HEAP16[$378>>1]|0;
  $380 = $i;
  $381 = (34296 + (($380*24)|0)|0);
  $382 = (($381) + 4|0);
  HEAP16[$382>>1] = $379;
  $383 = $localScene;
  $384 = (($383) + 2|0);
  $localScene = $384;
  $385 = $localScene;
  $386 = HEAP16[$385>>1]|0;
  $387 = $i;
  $388 = (34296 + (($387*24)|0)|0);
  $389 = (($388) + 6|0);
  HEAP16[$389>>1] = $386;
  $390 = $localScene;
  $391 = (($390) + 2|0);
  $localScene = $391;
  $392 = $localScene;
  $393 = HEAP16[$392>>1]|0;
  $394 = $i;
  $395 = (34296 + (($394*24)|0)|0);
  $396 = (($395) + 6|0);
  $397 = (($396) + 2|0);
  HEAP16[$397>>1] = $393;
  $398 = $localScene;
  $399 = (($398) + 2|0);
  $localScene = $399;
  $400 = $localScene;
  $401 = HEAP16[$400>>1]|0;
  $402 = $i;
  $403 = (34296 + (($402*24)|0)|0);
  $404 = (($403) + 6|0);
  $405 = (($404) + 4|0);
  HEAP16[$405>>1] = $401;
  $406 = $localScene;
  $407 = (($406) + 2|0);
  $localScene = $407;
  $408 = $localScene;
  $409 = HEAP16[$408>>1]|0;
  $410 = $i;
  $411 = (34296 + (($410*24)|0)|0);
  $412 = (($411) + 12|0);
  HEAP16[$412>>1] = $409;
  $413 = $localScene;
  $414 = (($413) + 2|0);
  $localScene = $414;
  $415 = $localScene;
  $416 = HEAP16[$415>>1]|0;
  $417 = $i;
  $418 = (34296 + (($417*24)|0)|0);
  $419 = (($418) + 14|0);
  HEAP16[$419>>1] = $416;
  $420 = $localScene;
  $421 = (($420) + 2|0);
  $localScene = $421;
  $422 = $localScene;
  $423 = HEAP16[$422>>1]|0;
  $424 = $i;
  $425 = (34296 + (($424*24)|0)|0);
  $426 = (($425) + 14|0);
  $427 = (($426) + 2|0);
  HEAP16[$427>>1] = $423;
  $428 = $localScene;
  $429 = (($428) + 2|0);
  $localScene = $429;
  $430 = $localScene;
  $431 = HEAP16[$430>>1]|0;
  $432 = $i;
  $433 = (34296 + (($432*24)|0)|0);
  $434 = (($433) + 14|0);
  $435 = (($434) + 4|0);
  HEAP16[$435>>1] = $431;
  $436 = $localScene;
  $437 = (($436) + 2|0);
  $localScene = $437;
  $438 = $localScene;
  $439 = HEAP16[$438>>1]|0;
  $440 = $i;
  $441 = (34296 + (($440*24)|0)|0);
  $442 = (($441) + 14|0);
  $443 = (($442) + 6|0);
  HEAP16[$443>>1] = $439;
  $444 = $localScene;
  $445 = (($444) + 2|0);
  $localScene = $445;
  $446 = $localScene;
  $447 = HEAP16[$446>>1]|0;
  $448 = $i;
  $449 = (34296 + (($448*24)|0)|0);
  $450 = (($449) + 22|0);
  HEAP16[$450>>1] = $447;
  $451 = $localScene;
  $452 = (($451) + 2|0);
  $localScene = $452;
  $453 = $i;
  $454 = (($453) + 1)|0;
  $i = $454;
 }
 $455 = $localScene;
 $456 = HEAP16[$455>>1]|0;
 $457 = $456&65535;
 HEAP32[36696>>2] = $457;
 $458 = $localScene;
 $459 = (($458) + 2|0);
 $localScene = $459;
 $i = 0;
 while(1) {
  $460 = $i;
  $461 = HEAP32[36696>>2]|0;
  $462 = ($460|0)<($461|0);
  if (!($462)) {
   break;
  }
  $463 = $localScene;
  $464 = HEAP16[$463>>1]|0;
  $465 = $i;
  $466 = (36704 + (($465*6)|0)|0);
  HEAP16[$466>>1] = $464;
  $467 = $localScene;
  $468 = (($467) + 2|0);
  $localScene = $468;
  $469 = $localScene;
  $470 = HEAP16[$469>>1]|0;
  $471 = $i;
  $472 = (36704 + (($471*6)|0)|0);
  $473 = (($472) + 2|0);
  HEAP16[$473>>1] = $470;
  $474 = $localScene;
  $475 = (($474) + 2|0);
  $localScene = $475;
  $476 = $localScene;
  $477 = HEAP16[$476>>1]|0;
  $478 = $i;
  $479 = (36704 + (($478*6)|0)|0);
  $480 = (($479) + 4|0);
  HEAP16[$480>>1] = $477;
  $481 = $localScene;
  $482 = (($481) + 2|0);
  $localScene = $482;
  $483 = $i;
  $484 = (($483) + 1)|0;
  $i = $484;
 }
 STACKTOP = sp;return;
}
function _initScene($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = HEAP32[362176>>2]|0;
 $2 = $0;
 (_hqrGetallocEntry(362304,$1,$2)|0);
 _loadScene();
 STACKTOP = sp;return 1;
}
function _resetScene() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _resetExtras();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(80);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (37920 + ($2)|0);
  HEAP8[$3>>0] = 0;
  $4 = $i;
  $5 = (($4) + 1)|0;
  $i = $5;
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(10);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = (47504 + (($8*14)|0)|0);
  $10 = (($9) + 2|0);
  HEAP16[$10>>1] = -1;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 HEAP32[23344>>2] = 0;
 HEAP16[121360>>1] = 0;
 STACKTOP = sp;return;
}
function _changeScene() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[34040>>2]|0;
 $1 = ($0|0)==(4);
 if ($1) {
  $2 = HEAP8[((38000 + 30|0))>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)!=(0);
  if ($4) {
   HEAP32[34040>>2] = 118;
  }
 }
 $5 = HEAP32[34048>>2]|0;
 HEAP32[34056>>2] = $5;
 $6 = HEAP32[34040>>2]|0;
 HEAP32[34048>>2] = $6;
 _stopSamples();
 _resetScene();
 _loadHeroEntities();
 $7 = HEAP32[8>>2]|0;
 $8 = (($7) + 68|0);
 HEAP32[$8>>2] = 1;
 $9 = HEAP32[8>>2]|0;
 $10 = (($9) + 160|0);
 HEAP32[$10>>2] = -1;
 $11 = HEAP32[8>>2]|0;
 $12 = (($11) + 128|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[8>>2]|0;
 $14 = (($13) + 120|0);
 HEAP32[$14>>2] = -1;
 $15 = HEAP32[8>>2]|0;
 $16 = (($15) + 136|0);
 HEAP32[$16>>2] = -1;
 $17 = HEAP32[34040>>2]|0;
 (_initScene($17)|0);
 $18 = HEAP32[34040>>2]|0;
 $19 = ($18|0)==(116);
 if ($19) {
  label = 6;
 } else {
  $20 = HEAP32[34040>>2]|0;
  $21 = ($20|0)==(117);
  if ($21) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  HEAP32[122480>>2] = 10;
 }
 $22 = HEAP32[122480>>2]|0;
 $23 = (($22) + 3)|0;
 _initTextBank($23);
 $24 = HEAP32[34040>>2]|0;
 (_initGrid($24)|0);
 $25 = HEAP16[34240>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = ($26|0)==(1);
 if ($27) {
  $28 = HEAP16[34208>>1]|0;
  HEAP16[34184>>1] = $28;
  $29 = HEAP16[34216>>1]|0;
  HEAP16[34192>>1] = $29;
  $30 = HEAP16[34224>>1]|0;
  HEAP16[34200>>1] = $30;
 }
 $31 = HEAP16[34240>>1]|0;
 $32 = $31 << 16 >> 16;
 $33 = ($32|0)==(2);
 if ($33) {
  label = 11;
 } else {
  $34 = HEAP16[34240>>1]|0;
  $35 = $34 << 16 >> 16;
  $36 = ($35|0)==(0);
  if ($36) {
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $37 = HEAP16[34160>>1]|0;
  HEAP16[34184>>1] = $37;
  $38 = HEAP16[34168>>1]|0;
  HEAP16[34192>>1] = $38;
  $39 = HEAP16[34176>>1]|0;
  HEAP16[34200>>1] = $39;
 }
 $40 = HEAP16[34184>>1]|0;
 $41 = $40 << 16 >> 16;
 $42 = HEAP32[8>>2]|0;
 $43 = (($42) + 36|0);
 HEAP32[$43>>2] = $41;
 $44 = HEAP16[34192>>1]|0;
 HEAP16[34232>>1] = $44;
 $45 = $44 << 16 >> 16;
 $46 = HEAP32[8>>2]|0;
 $47 = (($46) + 40|0);
 HEAP32[$47>>2] = $45;
 $48 = HEAP16[34200>>1]|0;
 $49 = $48 << 16 >> 16;
 $50 = HEAP32[8>>2]|0;
 $51 = (($50) + 44|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[34080>>2]|0;
 $53 = HEAP32[34088>>2]|0;
 _setLightVector($52,$53,0);
 $54 = HEAP32[34056>>2]|0;
 $55 = HEAP32[34040>>2]|0;
 $56 = ($54|0)!=($55|0);
 if ($56) {
  $57 = HEAP16[128>>1]|0;
  HEAP16[24>>1] = $57;
  $58 = HEAP32[8>>2]|0;
  $59 = (($58) + 60|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $60&65535;
  HEAP16[16>>1] = $61;
  _saveGame();
 }
 _restartHeroScene();
 $a = 1;
 while(1) {
  $62 = $a;
  $63 = HEAP32[24248>>2]|0;
  $64 = ($62|0)<($63|0);
  if (!($64)) {
   break;
  }
  $65 = $a;
  $66 = $65&65535;
  _initActor($66);
  $67 = $a;
  $68 = (($67) + 1)|0;
  $a = $68;
 }
 HEAP16[38288>>1] = 0;
 HEAP16[34024>>1] = 0;
 HEAP16[34240>>1] = 0;
 HEAP32[34096>>2] = 0;
 $69 = HEAP16[34256>>1]|0;
 $70 = $69 << 16 >> 16;
 $71 = (136 + (($70*232)|0)|0);
 $72 = (($71) + 36|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 >> 9;
 HEAP32[39400>>2] = $74;
 $75 = HEAP16[34256>>1]|0;
 $76 = $75 << 16 >> 16;
 $77 = (136 + (($76*232)|0)|0);
 $78 = (($77) + 40|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 HEAP32[39408>>2] = $80;
 $81 = HEAP16[34256>>1]|0;
 $82 = $81 << 16 >> 16;
 $83 = (136 + (($82*232)|0)|0);
 $84 = (($83) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 >> 9;
 HEAP32[39416>>2] = $86;
 HEAP16[38264>>1] = -1;
 HEAP16[24240>>1] = 1;
 HEAP16[39456>>1] = -1;
 HEAP16[39464>>1] = -1;
 HEAP16[47424>>1] = 1;
 HEAP16[121352>>1] = 0;
 HEAP32[34040>>2] = -1;
 HEAP16[37904>>1] = 1;
 HEAP16[37912>>1] = 14;
 $87 = HEAP32[34080>>2]|0;
 $88 = HEAP32[34088>>2]|0;
 _setLightVector($87,$88,0);
 $89 = HEAP16[34152>>1]|0;
 $90 = $89 << 16 >> 16;
 $91 = ($90|0)!=(-1);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = HEAP16[34152>>1]|0;
 $93 = $92 << 16 >> 16;
 _playMidiMusic($93,0);
 STACKTOP = sp;return;
}
function _processEnvironmentSound() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $currentAmb = 0, $decal = 0, $repeat = 0, $s = 0, $sampleIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sampleIdx = -1;
 $0 = HEAP32[25920>>2]|0;
 $1 = HEAP32[34096>>2]|0;
 $2 = ($0|0)>=($1|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (_rand()|0);
 $4 = (($3|0) % 4)&-1;
 $5 = $4&65535;
 $currentAmb = $5;
 $s = 0;
 while(1) {
  $6 = $s;
  $7 = $6 << 16 >> 16;
  $8 = ($7|0)<(4);
  if (!($8)) {
   break;
  }
  $9 = HEAP16[34144>>1]|0;
  $10 = $9 << 16 >> 16;
  $11 = $currentAmb;
  $12 = $11 << 16 >> 16;
  $13 = 1 << $12;
  $14 = $10 & $13;
  $15 = ($14|0)!=(0);
  if (!($15)) {
   $16 = $currentAmb;
   $17 = $16 << 16 >> 16;
   $18 = 1 << $17;
   $19 = HEAP16[34144>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = $20 | $18;
   $22 = $21&65535;
   HEAP16[34144>>1] = $22;
   $23 = HEAP16[34144>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = ($24|0)==(15);
   if ($25) {
    HEAP16[34144>>1] = 0;
   }
   $26 = $currentAmb;
   $27 = $26 << 16 >> 16;
   $28 = (34104 + ($27<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $sampleIdx = $29;
   $30 = $sampleIdx;
   $31 = $30 << 16 >> 16;
   $32 = ($31|0)!=(-1);
   if ($32) {
    label = 8;
    break;
   }
  }
  $54 = $currentAmb;
  $55 = (($54) + 1)<<16>>16;
  $currentAmb = $55;
  $56 = $currentAmb;
  $57 = $56 << 16 >> 16;
  $58 = $57 & 3;
  $59 = $58&65535;
  $currentAmb = $59;
  $60 = $s;
  $61 = (($60) + 1)<<16>>16;
  $s = $61;
 }
 if ((label|0) == 8) {
  $33 = $currentAmb;
  $34 = $33 << 16 >> 16;
  $35 = (34120 + ($34<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $decal = $36;
  $37 = $currentAmb;
  $38 = $37 << 16 >> 16;
  $39 = (34112 + ($38<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $repeat = $40;
  $41 = $sampleIdx;
  $42 = $41 << 16 >> 16;
  $43 = (_rand()|0);
  $44 = $decal;
  $45 = $44 << 16 >> 16;
  $46 = (($43|0) % ($45|0))&-1;
  $47 = (4096 + ($46))|0;
  $48 = $decal;
  $49 = $48 << 16 >> 16;
  $50 = (($49|0) / 2)&-1;
  $51 = (($47) - ($50))|0;
  $52 = $repeat;
  $53 = $52 << 16 >> 16;
  _playSample($42,$51,$53,110,-1,110,-1);
 }
 $62 = HEAP32[25920>>2]|0;
 $63 = (_rand()|0);
 $64 = HEAP16[34136>>1]|0;
 $65 = $64 << 16 >> 16;
 $66 = (($63|0) % ($65|0))&-1;
 $67 = HEAP16[34128>>1]|0;
 $68 = $67 << 16 >> 16;
 $69 = (($66) + ($68))|0;
 $70 = ($69*50)|0;
 $71 = (($62) + ($70))|0;
 HEAP32[34096>>2] = $71;
 STACKTOP = sp;return;
}
function _processZoneExtraBonus($zone) {
 $zone = $zone|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $angle = 0, $bonusTable = 0, $currentBonus = 0, $index = 0;
 var $numBonus = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bonusTable = sp + 24|0;
 $0 = $zone;
 $numBonus = 0;
 $1 = $0;
 $2 = (($1) + 14|0);
 $3 = (($2) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $a = 0;
 while(1) {
  $6 = $a;
  $7 = ($6|0)<(5);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = (($8) + 14|0);
  $10 = (($9) + 2|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = $a;
  $14 = (($13) + 4)|0;
  $15 = 1 << $14;
  $16 = $12 & $15;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $a;
   $19 = $18&255;
   $20 = $numBonus;
   $21 = (($20) + 1)|0;
   $numBonus = $21;
   $22 = (($bonusTable) + ($20)|0);
   HEAP8[$22>>0] = $19;
  }
  $23 = $a;
  $24 = (($23) + 1)|0;
  $a = $24;
 }
 $25 = $numBonus;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = (_rand()|0);
  $28 = $numBonus;
  $29 = (($27|0) % ($28|0))&-1;
  $30 = (($bonusTable) + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $currentBonus = $31;
  $32 = HEAP16[24256>>1]|0;
  $33 = ($32<<16>>16)!=(0);
  if (!($33)) {
   $34 = $currentBonus;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)==(2);
   if ($36) {
    $currentBonus = 1;
   }
  }
  $37 = $0;
  $38 = (($37) + 6|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $0;
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = (($40) + ($43))|0;
  $45 = (Math_abs(($44|0))|0);
  $46 = (($45|0) / 2)&-1;
  $47 = $0;
  $48 = (($47) + 6|0);
  $49 = (($48) + 4|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = $0;
  $53 = (($52) + 4|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = (($51) + ($55))|0;
  $57 = (Math_abs(($56|0))|0);
  $58 = (($57|0) / 2)&-1;
  $59 = HEAP32[8>>2]|0;
  $60 = (($59) + 36|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = HEAP32[8>>2]|0;
  $63 = (($62) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_getAngleAndSetTargetActorDistance($46,$58,$61,$64)|0);
  $angle = $65;
  $66 = $0;
  $67 = (($66) + 6|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = $0;
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = (($69) + ($72))|0;
  $74 = (Math_abs(($73|0))|0);
  $75 = (($74|0) / 2)&-1;
  $76 = $0;
  $77 = (($76) + 6|0);
  $78 = (($77) + 2|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79 << 16 >> 16;
  $81 = $0;
  $82 = (($81) + 6|0);
  $83 = (($82) + 4|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = $0;
  $87 = (($86) + 4|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = (($85) + ($89))|0;
  $91 = (Math_abs(($90|0))|0);
  $92 = (($91|0) / 2)&-1;
  $93 = $angle;
  $94 = $currentBonus;
  $95 = $94 << 24 >> 24;
  $96 = (($95) + 3)|0;
  $97 = $0;
  $98 = (($97) + 14|0);
  $99 = (($98) + 4|0);
  $100 = HEAP16[$99>>1]|0;
  $101 = $100 << 16 >> 16;
  $102 = (_addExtraBonus($75,$80,$92,180,$93,$96,$101)|0);
  $index = $102;
  $103 = $index;
  $104 = ($103|0)!=(-1);
  if ($104) {
   $105 = $index;
   $106 = (44680 + (($105*52)|0)|0);
   $107 = (($106) + 34|0);
   $108 = HEAP16[$107>>1]|0;
   $109 = $108 << 16 >> 16;
   $110 = $109 | 1024;
   $111 = $110&65535;
   HEAP16[$107>>1] = $111;
   $112 = $0;
   $113 = (($112) + 14|0);
   $114 = (($113) + 6|0);
   HEAP16[$114>>1] = 1;
  }
 }
 STACKTOP = sp;return;
}
function _processActorZones($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actor = 0, $currentX = 0, $currentY = 0, $currentZ = 0, $tmpCellingGrid = 0, $z = 0, $zone = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $actor;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $currentX = $5;
 $6 = $actor;
 $7 = (($6) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $currentY = $8;
 $9 = $actor;
 $10 = (($9) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $currentZ = $11;
 $12 = $actor;
 $13 = (($12) + 160|0);
 HEAP32[$13>>2] = -1;
 $tmpCellingGrid = 0;
 $14 = $0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = $0;
  $17 = $16&65535;
  HEAP16[34264>>1] = $17;
 }
 $z = 0;
 while(1) {
  $18 = $z;
  $19 = HEAP32[34288>>2]|0;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $z;
  $22 = (34296 + (($21*24)|0)|0);
  $zone = $22;
  $23 = $currentX;
  $24 = $zone;
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = ($23|0)>=($26|0);
  if ($27) {
   $28 = $currentX;
   $29 = $zone;
   $30 = (($29) + 6|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31 << 16 >> 16;
   $33 = ($28|0)<=($32|0);
   if ($33) {
    $34 = $currentY;
    $35 = $zone;
    $36 = (($35) + 2|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37 << 16 >> 16;
    $39 = ($34|0)>=($38|0);
    if ($39) {
     $40 = $currentY;
     $41 = $zone;
     $42 = (($41) + 6|0);
     $43 = (($42) + 2|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = $44 << 16 >> 16;
     $46 = ($40|0)<=($45|0);
     if ($46) {
      $47 = $currentZ;
      $48 = $zone;
      $49 = (($48) + 4|0);
      $50 = HEAP16[$49>>1]|0;
      $51 = $50 << 16 >> 16;
      $52 = ($47|0)>=($51|0);
      if ($52) {
       $53 = $currentZ;
       $54 = $zone;
       $55 = (($54) + 6|0);
       $56 = (($55) + 4|0);
       $57 = HEAP16[$56>>1]|0;
       $58 = $57 << 16 >> 16;
       $59 = ($53|0)<=($58|0);
       if ($59) {
        $60 = $zone;
        $61 = (($60) + 12|0);
        $62 = HEAP16[$61>>1]|0;
        $63 = $62 << 16 >> 16;
        switch ($63|0) {
        case 1:  {
         $118 = HEAP16[34256>>1]|0;
         $119 = $118 << 16 >> 16;
         $120 = $0;
         $121 = ($119|0)==($120|0);
         if ($121) {
          HEAP16[34024>>1] = 1;
          $122 = HEAP32[39400>>2]|0;
          $123 = $zone;
          $124 = (($123) + 14|0);
          $125 = (($124) + 2|0);
          $126 = HEAP16[$125>>1]|0;
          $127 = $126 << 16 >> 16;
          $128 = ($122|0)!=($127|0);
          if ($128) {
           label = 20;
          } else {
           $129 = HEAP32[39408>>2]|0;
           $130 = $zone;
           $131 = (($130) + 14|0);
           $132 = (($131) + 4|0);
           $133 = HEAP16[$132>>1]|0;
           $134 = $133 << 16 >> 16;
           $135 = ($129|0)!=($134|0);
           if ($135) {
            label = 20;
           } else {
            $136 = HEAP32[39416>>2]|0;
            $137 = $zone;
            $138 = (($137) + 14|0);
            $139 = (($138) + 6|0);
            $140 = HEAP16[$139>>1]|0;
            $141 = $140 << 16 >> 16;
            $142 = ($136|0)!=($141|0);
            if ($142) {
             label = 20;
            }
           }
          }
          if ((label|0) == 20) {
           label = 0;
           $143 = $zone;
           $144 = (($143) + 14|0);
           $145 = (($144) + 2|0);
           $146 = HEAP16[$145>>1]|0;
           $147 = $146 << 16 >> 16;
           HEAP32[39400>>2] = $147;
           $148 = $zone;
           $149 = (($148) + 14|0);
           $150 = (($149) + 4|0);
           $151 = HEAP16[$150>>1]|0;
           $152 = $151 << 16 >> 16;
           HEAP32[39408>>2] = $152;
           $153 = $zone;
           $154 = (($153) + 14|0);
           $155 = (($154) + 6|0);
           $156 = HEAP16[$155>>1]|0;
           $157 = $156 << 16 >> 16;
           HEAP32[39416>>2] = $157;
           HEAP16[47424>>1] = 1;
          }
         }
         break;
        }
        case 3:  {
         $164 = HEAP16[34256>>1]|0;
         $165 = $164 << 16 >> 16;
         $166 = $0;
         $167 = ($165|0)==($166|0);
         if ($167) {
          $tmpCellingGrid = 1;
          $168 = HEAP16[39456>>1]|0;
          $169 = $168 << 16 >> 16;
          $170 = $zone;
          $171 = (($170) + 14|0);
          $172 = HEAP16[$171>>1]|0;
          $173 = $172 << 16 >> 16;
          $174 = ($169|0)!=($173|0);
          if ($174) {
           $175 = $zone;
           $176 = (($175) + 14|0);
           $177 = HEAP16[$176>>1]|0;
           $178 = $177 << 16 >> 16;
           $179 = ($178|0)!=(-1);
           if ($179) {
            _createGridMap();
           }
           $180 = $zone;
           $181 = (($180) + 14|0);
           $182 = HEAP16[$181>>1]|0;
           HEAP16[39456>>1] = $182;
           $183 = $z;
           $184 = $183&65535;
           HEAP16[39464>>1] = $184;
           _freezeTime();
           $185 = HEAP16[39456>>1]|0;
           $186 = $185 << 16 >> 16;
           (_initCellingGrid($186)|0);
           _unfreezeTime();
          }
         }
         break;
        }
        case 2:  {
         $158 = $zone;
         $159 = (($158) + 14|0);
         $160 = HEAP16[$159>>1]|0;
         $161 = $160 << 16 >> 16;
         $162 = $actor;
         $163 = (($162) + 160|0);
         HEAP32[$163>>2] = $161;
         break;
        }
        case 6:  {
         $209 = $0;
         $210 = ($209|0)!=(0);
         do {
          if (!($210)) {
           $211 = HEAP16[128>>1]|0;
           $212 = $211 << 16 >> 16;
           $213 = ($212|0)!=(4);
           if ($213) {
            $214 = $actor;
            $215 = (($214) + 12|0);
            $216 = HEAP32[$215>>2]|0;
            $217 = ($216|0)==(1);
            if (!($217)) {
             $218 = $actor;
             $219 = (($218) + 12|0);
             $220 = HEAP32[$219>>2]|0;
             $221 = ($220|0)==(13);
             if (!($221)) {
              $222 = $actor;
              $223 = (($222) + 12|0);
              $224 = HEAP32[$223>>2]|0;
              $225 = ($224|0)==(12);
              if (!($225)) {
               break;
              }
             }
            }
            $226 = $actor;
            $227 = (($226) + 200|0);
            $228 = HEAP16[$227>>1]|0;
            $229 = $228 << 16 >> 16;
            $230 = $actor;
            $231 = (($230) + 200|0);
            $232 = (($231) + 8|0);
            $233 = HEAP16[$232>>1]|0;
            $234 = $233 << 16 >> 16;
            $235 = $actor;
            $236 = (($235) + 60|0);
            $237 = HEAP32[$236>>2]|0;
            $238 = (($237) + 1408)|0;
            _rotateActor($229,$234,$238);
            $239 = HEAP16[44360>>1]|0;
            $240 = $239 << 16 >> 16;
            $241 = HEAP32[38952>>2]|0;
            $242 = (($241) + ($240))|0;
            HEAP32[38952>>2] = $242;
            $243 = HEAP16[44376>>1]|0;
            $244 = $243 << 16 >> 16;
            $245 = HEAP32[38968>>2]|0;
            $246 = (($245) + ($244))|0;
            HEAP32[38968>>2] = $246;
            $247 = HEAP32[38952>>2]|0;
            $248 = ($247|0)>=(0);
            if ($248) {
             $249 = HEAP32[38968>>2]|0;
             $250 = ($249|0)>=(0);
             if ($250) {
              $251 = HEAP32[38952>>2]|0;
              $252 = ($251|0)<=(32256);
              if ($252) {
               $253 = HEAP32[38968>>2]|0;
               $254 = ($253|0)<=(32256);
               if ($254) {
                $255 = HEAP32[38952>>2]|0;
                $256 = $actor;
                $257 = (($256) + 40|0);
                $258 = HEAP32[$257>>2]|0;
                $259 = (($258) + 256)|0;
                $260 = HEAP32[38968>>2]|0;
                $261 = (_getBrickShape($255,$259,$260)|0);
                $262 = ($261|0)!=(0);
                if ($262) {
                 HEAP16[34264>>1] = 1;
                 $263 = $actor;
                 $264 = (($263) + 40|0);
                 $265 = HEAP32[$264>>2]|0;
                 $266 = $zone;
                 $267 = (($266) + 2|0);
                 $268 = HEAP16[$267>>1]|0;
                 $269 = $268 << 16 >> 16;
                 $270 = $zone;
                 $271 = (($270) + 6|0);
                 $272 = (($271) + 2|0);
                 $273 = HEAP16[$272>>1]|0;
                 $274 = $273 << 16 >> 16;
                 $275 = (($269) + ($274))|0;
                 $276 = (Math_abs(($275|0))|0);
                 $277 = (($276|0) / 2)&-1;
                 $278 = ($265|0)>=($277|0);
                 if ($278) {
                  $279 = $0;
                  (_initAnim(13,2,0,$279)|0);
                 } else {
                  $280 = $0;
                  (_initAnim(12,0,-1,$280)|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         } while(0);
         break;
        }
        case 0:  {
         $64 = $0;
         $65 = ($64|0)!=(0);
         if (!($65)) {
          $66 = $actor;
          $67 = (($66) + 104|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ($68|0)>(0);
          if ($69) {
           $70 = $zone;
           $71 = (($70) + 14|0);
           $72 = HEAP16[$71>>1]|0;
           $73 = $72 << 16 >> 16;
           HEAP32[34040>>2] = $73;
           $74 = $actor;
           $75 = (($74) + 36|0);
           $76 = HEAP32[$75>>2]|0;
           $77 = $zone;
           $78 = HEAP16[$77>>1]|0;
           $79 = $78 << 16 >> 16;
           $80 = (($76) - ($79))|0;
           $81 = $zone;
           $82 = (($81) + 14|0);
           $83 = (($82) + 2|0);
           $84 = HEAP16[$83>>1]|0;
           $85 = $84 << 16 >> 16;
           $86 = (($80) + ($85))|0;
           $87 = $86&65535;
           HEAP16[34208>>1] = $87;
           $88 = $actor;
           $89 = (($88) + 40|0);
           $90 = HEAP32[$89>>2]|0;
           $91 = $zone;
           $92 = (($91) + 2|0);
           $93 = HEAP16[$92>>1]|0;
           $94 = $93 << 16 >> 16;
           $95 = (($90) - ($94))|0;
           $96 = $zone;
           $97 = (($96) + 14|0);
           $98 = (($97) + 4|0);
           $99 = HEAP16[$98>>1]|0;
           $100 = $99 << 16 >> 16;
           $101 = (($95) + ($100))|0;
           $102 = $101&65535;
           HEAP16[34216>>1] = $102;
           $103 = $actor;
           $104 = (($103) + 44|0);
           $105 = HEAP32[$104>>2]|0;
           $106 = $zone;
           $107 = (($106) + 4|0);
           $108 = HEAP16[$107>>1]|0;
           $109 = $108 << 16 >> 16;
           $110 = (($105) - ($109))|0;
           $111 = $zone;
           $112 = (($111) + 14|0);
           $113 = (($112) + 6|0);
           $114 = HEAP16[$113>>1]|0;
           $115 = $114 << 16 >> 16;
           $116 = (($110) + ($115))|0;
           $117 = $116&65535;
           HEAP16[34224>>1] = $117;
           HEAP16[34240>>1] = 1;
          }
         }
         break;
        }
        case 5:  {
         $193 = $0;
         $194 = ($193|0)!=(0);
         if (!($194)) {
          $195 = HEAP16[44352>>1]|0;
          $196 = $195 << 16 >> 16;
          $197 = ($196|0)!=(0);
          if ($197) {
           _freezeTime();
           $198 = $zone;
           $199 = (($198) + 14|0);
           $200 = (($199) + 2|0);
           $201 = HEAP16[$200>>1]|0;
           $202 = $201 << 16 >> 16;
           _setFontCrossColor($202);
           $203 = $0;
           $204 = $203&65535;
           HEAP16[34280>>1] = $204;
           $205 = $zone;
           $206 = (($205) + 14|0);
           $207 = HEAP16[$206>>1]|0;
           $208 = $207 << 16 >> 16;
           _drawTextFullscreen($208);
           _unfreezeTime();
           _redrawEngineActions(1);
          }
         }
         break;
        }
        case 4:  {
         $187 = $0;
         $188 = ($187|0)!=(0);
         if (!($188)) {
          $189 = HEAP16[44352>>1]|0;
          $190 = $189 << 16 >> 16;
          $191 = ($190|0)!=(0);
          if ($191) {
           (_initAnim(11,1,0,0)|0);
           $192 = $zone;
           _processZoneExtraBonus($192);
          }
         }
         break;
        }
        default: {
        }
        }
       }
      }
     }
    }
   }
  }
  $281 = $z;
  $282 = (($281) + 1)|0;
  $z = $282;
 }
 $283 = $tmpCellingGrid;
 $284 = ($283|0)!=(0);
 if ($284) {
  STACKTOP = sp;return;
 }
 $285 = $0;
 $286 = HEAP16[34256>>1]|0;
 $287 = $286 << 16 >> 16;
 $288 = ($285|0)==($287|0);
 if (!($288)) {
  STACKTOP = sp;return;
 }
 $289 = HEAP16[39456>>1]|0;
 $290 = $289 << 16 >> 16;
 $291 = ($290|0)!=(-1);
 if (!($291)) {
  STACKTOP = sp;return;
 }
 HEAP16[39456>>1] = -1;
 HEAP16[39464>>1] = -1;
 _createGridMap();
 HEAP16[47424>>1] = 1;
 STACKTOP = sp;return;
}
function _adelineLogo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _playMidiMusic(31,0);
 _loadImage(27,1);
 _delaySkip(7000);
 _fadeOut(118808);
 HEAP16[121336>>1] = 1;
 STACKTOP = sp;return;
}
function _loadImage($index,$fade_in) {
 $index = $index|0;
 $fade_in = $fade_in|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $fade_in;
 $2 = HEAP32[25944>>2]|0;
 $3 = HEAP32[361952>>2]|0;
 $4 = $0;
 (_hqrGetEntry($2,$3,$4)|0);
 $5 = HEAP32[25944>>2]|0;
 $6 = HEAP32[25952>>2]|0;
 _copyScreen($5,$6);
 $7 = $0;
 $8 = (($7) + 1)|0;
 _loadCustomPalette($8);
 $9 = $1;
 $10 = ($9<<16>>16)!=(0);
 if ($10) {
  _fadeToPal(118808);
  HEAP16[121336>>1] = 1;
  STACKTOP = sp;return;
 } else {
  _setPalette(118808);
  HEAP16[121336>>1] = 1;
  STACKTOP = sp;return;
 }
}
function _fadeOut($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palette;
 $1 = HEAP32[((308424 + 92|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 _fadeToBlack($3);
 STACKTOP = sp;return;
}
function _loadMenuImage($fade_in) {
 $fade_in = $fade_in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fade_in;
 $1 = HEAP32[25944>>2]|0;
 $2 = HEAP32[361952>>2]|0;
 (_hqrGetEntry($1,$2,14)|0);
 $3 = HEAP32[25944>>2]|0;
 $4 = HEAP32[25952>>2]|0;
 _copyScreen($3,$4);
 $5 = $0;
 $6 = ($5<<16>>16)!=(0);
 if ($6) {
  _fadeToPal(120312);
  HEAP16[121336>>1] = 0;
  STACKTOP = sp;return;
 } else {
  _setPalette(120312);
  HEAP16[121336>>1] = 0;
  STACKTOP = sp;return;
 }
}
function _copyScreen($source,$destination) {
 $source = $source|0;
 $destination = $destination|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $destination;
 $2 = $1;
 $3 = $0;
 _memcpy(($2|0),($3|0),307200)|0;
 STACKTOP = sp;return;
}
function _fadeToPal($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palette;
 $i = 100;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<=(100);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $i;
  _adjustPalette(0,0,0,$3,$4);
  _fpsCycles(50);
  $5 = $i;
  $6 = (($5) + 3)|0;
  $i = $6;
 }
 $7 = $0;
 _setPalette($7);
 HEAP16[121344>>1] = 0;
 STACKTOP = sp;return;
}
function _loadCustomPalette($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = HEAP32[361952>>2]|0;
 $2 = $0;
 (_hqrGetEntry(118032,$1,$2)|0);
 _convertPalToRGBA(118032,118808);
 STACKTOP = sp;return;
}
function _convertPalToRGBA($palSource,$palDest) {
 $palSource = $palSource|0;
 $palDest = $palDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palSource;
 $1 = $palDest;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(256);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $1;
  HEAP8[$6>>0] = $5;
  $7 = $0;
  $8 = (($7) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $1;
  $11 = (($10) + 1|0);
  HEAP8[$11>>0] = $9;
  $12 = $0;
  $13 = (($12) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $1;
  $16 = (($15) + 2|0);
  HEAP8[$16>>0] = $14;
  $17 = $1;
  $18 = (($17) + 4|0);
  $1 = $18;
  $19 = $0;
  $20 = (($19) + 3|0);
  $0 = $20;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return;
}
function _loadImageDelay($index,$time) {
 $index = $index|0;
 $time = $time|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $time;
 $2 = $0;
 _loadImage($2,1);
 $3 = $1;
 $4 = ($3*1000)|0;
 _delaySkip($4);
 _fadeOut(118808);
 STACKTOP = sp;return;
}
function _fadeIn($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palette;
 $1 = HEAP32[((308424 + 92|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[25952>>2]|0;
  $4 = $0;
  _crossFade($3,$4);
 } else {
  $5 = $0;
  _fadeToPal($5);
 }
 $6 = $0;
 _setPalette($6);
 STACKTOP = sp;return;
}
function _fadeToBlack($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palette;
 $i = 0;
 $1 = HEAP16[121344>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ($2|0)==(0);
 if (!($3)) {
  HEAP16[121344>>1] = 1;
  STACKTOP = sp;return;
 }
 $i = 100;
 while(1) {
  $4 = $i;
  $5 = ($4|0)>=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = $i;
  _adjustPalette(0,0,0,$6,$7);
  _fpsCycles(50);
  $8 = $i;
  $9 = (($8) - 3)|0;
  $i = $9;
 }
 HEAP16[121344>>1] = 1;
 STACKTOP = sp;return;
}
function _crossDot($modifier,$color,$param,$intensity) {
 $modifier = $modifier|0;
 $color = $color|0;
 $param = $param|0;
 $intensity = $intensity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $modifier;
 $2 = $color;
 $3 = $param;
 $4 = $intensity;
 $5 = $3;
 $6 = ($5|0)!=(0);
 if ($6) {
  $8 = $2;
  $9 = $1;
  $10 = (($8) - ($9))|0;
  $11 = $4;
  $12 = Math_imul($10, $11)|0;
  $13 = $3;
  $14 = (($12|0) / ($13|0))&-1;
  $15 = $1;
  $16 = (($14) + ($15))|0;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $7 = $2;
  $0 = $7;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _adjustPalette($R,$G,$B,$palette,$intensity) {
 $R = $R|0;
 $G = $G|0;
 $B = $B|0;
 $palette = $palette|0;
 $intensity = $intensity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $counter = 0;
 var $i = 0, $local = 0, $localPalette = 0, $newA = 0, $newB = 0, $newG = 0, $newR = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localPalette = sp + 40|0;
 $0 = $R;
 $1 = $G;
 $2 = $B;
 $3 = $palette;
 $4 = $intensity;
 $counter = 0;
 $5 = $4;
 $local = $5;
 $newR = $localPalette;
 $6 = (($localPalette) + 1|0);
 $newG = $6;
 $7 = (($localPalette) + 2|0);
 $newB = $7;
 $8 = (($localPalette) + 3|0);
 $newA = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(256);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = $11&255;
  $13 = $counter;
  $14 = $3;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $local;
  $19 = (_crossDot($12,$17,100,$18)|0);
  $20 = $19&255;
  $21 = $newR;
  HEAP8[$21>>0] = $20;
  $22 = $1;
  $23 = $22&255;
  $24 = $counter;
  $25 = (($24) + 1)|0;
  $26 = $3;
  $27 = (($26) + ($25)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $local;
  $31 = (_crossDot($23,$29,100,$30)|0);
  $32 = $31&255;
  $33 = $newG;
  HEAP8[$33>>0] = $32;
  $34 = $2;
  $35 = $34&255;
  $36 = $counter;
  $37 = (($36) + 2)|0;
  $38 = $3;
  $39 = (($38) + ($37)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $local;
  $43 = (_crossDot($35,$41,100,$42)|0);
  $44 = $43&255;
  $45 = $newB;
  HEAP8[$45>>0] = $44;
  $46 = $newA;
  HEAP8[$46>>0] = 0;
  $47 = $newR;
  $48 = (($47) + 4|0);
  $newR = $48;
  $49 = $newG;
  $50 = (($49) + 4|0);
  $newG = $50;
  $51 = $newB;
  $52 = (($51) + 4|0);
  $newB = $52;
  $53 = $newA;
  $54 = (($53) + 4|0);
  $newA = $54;
  $55 = $counter;
  $56 = (($55) + 4)|0;
  $counter = $56;
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 _setPalette($localPalette);
 STACKTOP = sp;return;
}
function _adjustCrossPalette($pal1,$pal2) {
 $pal1 = $pal1|0;
 $pal2 = $pal2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $counter = 0, $i = 0;
 var $intensity = 0, $localPalette = 0, $newA = 0, $newB = 0, $newG = 0, $newR = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $localPalette = sp + 40|0;
 $0 = $pal1;
 $1 = $pal2;
 $counter = 0;
 $intensity = 0;
 while(1) {
  $counter = 0;
  $2 = $counter;
  $3 = (($localPalette) + ($2)|0);
  $newR = $3;
  $4 = $counter;
  $5 = (($4) + 1)|0;
  $6 = (($localPalette) + ($5)|0);
  $newG = $6;
  $7 = $counter;
  $8 = (($7) + 2)|0;
  $9 = (($localPalette) + ($8)|0);
  $newB = $9;
  $10 = $counter;
  $11 = (($10) + 3)|0;
  $12 = (($localPalette) + ($11)|0);
  $newA = $12;
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = ($13|0)<(256);
   if (!($14)) {
    break;
   }
   $15 = $counter;
   $16 = $0;
   $17 = (($16) + ($15)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $counter;
   $21 = $1;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $intensity;
   $26 = (_crossDot($19,$24,100,$25)|0);
   $27 = $26&255;
   $28 = $newR;
   HEAP8[$28>>0] = $27;
   $29 = $counter;
   $30 = (($29) + 1)|0;
   $31 = $0;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $counter;
   $36 = (($35) + 1)|0;
   $37 = $1;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $intensity;
   $42 = (_crossDot($34,$40,100,$41)|0);
   $43 = $42&255;
   $44 = $newG;
   HEAP8[$44>>0] = $43;
   $45 = $counter;
   $46 = (($45) + 2)|0;
   $47 = $0;
   $48 = (($47) + ($46)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $counter;
   $52 = (($51) + 2)|0;
   $53 = $1;
   $54 = (($53) + ($52)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $intensity;
   $58 = (_crossDot($50,$56,100,$57)|0);
   $59 = $58&255;
   $60 = $newB;
   HEAP8[$60>>0] = $59;
   $61 = $newA;
   HEAP8[$61>>0] = 0;
   $62 = $newR;
   $63 = (($62) + 4|0);
   $newR = $63;
   $64 = $newG;
   $65 = (($64) + 4|0);
   $newG = $65;
   $66 = $newB;
   $67 = (($66) + 4|0);
   $newB = $67;
   $68 = $newA;
   $69 = (($68) + 4|0);
   $newA = $69;
   $70 = $counter;
   $71 = (($70) + 4)|0;
   $counter = $71;
   $72 = $i;
   $73 = (($72) + 1)|0;
   $i = $73;
  }
  _setPalette($localPalette);
  _fpsCycles(50);
  $74 = $intensity;
  $75 = (($74) + 1)|0;
  $intensity = $75;
  $76 = $intensity;
  $77 = ($76|0)<=(100);
  if (!($77)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _setBackPal() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset((118032|0),0,768)|0;
 _memset((120312|0),0,1024)|0;
 _setPalette(120312);
 HEAP16[121344>>1] = 1;
 STACKTOP = sp;return;
}
function _fadePalRed($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palette;
 $i = 100;
 $i = 100;
 while(1) {
  $1 = $i;
  $2 = ($1|0)>=(0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $i;
  _adjustPalette(-1,0,0,$3,$4);
  _fpsCycles(50);
  $5 = $i;
  $6 = (($5) - 2)|0;
  $i = $6;
 }
 STACKTOP = sp;return;
}
function _fadeRedPal($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palette;
 $i = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<=(100);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $i;
  _adjustPalette(-1,0,0,$3,$4);
  _fpsCycles(50);
  $5 = $i;
  $6 = (($5) + 2)|0;
  $i = $6;
 }
 STACKTOP = sp;return;
}
function _clearScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25952>>2]|0;
 _memset(($0|0),0,307200)|0;
 STACKTOP = sp;return;
}
function _processLifeConditions($actor) {
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actorIdx = 0, $actorIdx1 = 0, $actorIdx2 = 0, $actorIdx3 = 0, $actorIdx4 = 0, $actorIdx5 = 0, $actorIdx8 = 0, $conditionOpcode = 0, $conditionValueSize = 0;
 var $distance = 0, $distance11 = 0, $flagIdx = 0, $flagIdx7 = 0, $heroAngle = 0, $heroAngle6 = 0, $item = 0, $newAngle = 0, $otherActor = 0, $targetActor = 0, $targetActor10 = 0, $targetActorIdx = 0, $targetActorIdx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $actor;
 $conditionValueSize = 1;
 $1 = HEAP32[362312>>2]|0;
 $2 = (($1) + 1|0);
 HEAP32[362312>>2] = $2;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $conditionOpcode = $4;
 $5 = $conditionOpcode;
 do {
  switch ($5|0) {
  case 22:  {
   $242 = HEAP32[362312>>2]|0;
   $243 = (($242) + 1|0);
   HEAP32[362312>>2] = $243;
   $244 = HEAP8[$242>>0]|0;
   $245 = $244&255;
   $targetActorIdx9 = $245;
   $246 = $targetActorIdx9;
   $247 = (136 + (($246*232)|0)|0);
   $targetActor10 = $247;
   $conditionValueSize = 2;
   $248 = $targetActor10;
   $249 = (($248) + 2|0);
   $250 = HEAP16[$249>>1]|0;
   $251 = ($250&65535) >>> 5;
   $252 = $251 & 1;
   $253 = ($252<<16>>16)!=(0);
   if ($253) {
    HEAP16[34272>>1] = 32000;
   } else {
    $254 = $0;
    $255 = (($254) + 36|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = $0;
    $258 = (($257) + 40|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $0;
    $261 = (($260) + 44|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $targetActor10;
    $264 = (($263) + 36|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $targetActor10;
    $267 = (($266) + 40|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = $targetActor10;
    $270 = (($269) + 44|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = (_getDistance3D($256,$259,$262,$265,$268,$271)|0);
    $distance11 = $272;
    $273 = $distance11;
    $274 = (Math_abs(($273|0))|0);
    $275 = ($274|0)>(32000);
    if ($275) {
     HEAP16[34272>>1] = 32000;
    } else {
     $276 = $distance11;
     $277 = $276&65535;
     HEAP16[34272>>1] = $277;
    }
   }
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 20:  {
   $240 = HEAP16[128>>1]|0;
   HEAP16[34272>>1] = $240;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 21:  {
   $241 = HEAP16[38256>>1]|0;
   HEAP16[34272>>1] = $241;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 19:  {
   $conditionValueSize = 2;
   $239 = HEAP16[38296>>1]|0;
   HEAP16[34272>>1] = $239;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 0:  {
   $6 = $0;
   $7 = (($6) + 104|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)<=(0);
   if ($9) {
    HEAP16[34272>>1] = -1;
   } else {
    $10 = $0;
    $11 = (($10) + 148|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12&65535;
    HEAP16[34272>>1] = $13;
   }
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 1:  {
   $14 = HEAP32[362312>>2]|0;
   $15 = (($14) + 1|0);
   HEAP32[362312>>2] = $15;
   $16 = HEAP8[$14>>0]|0;
   $17 = $16&255;
   $actorIdx = $17;
   $18 = $actorIdx;
   $19 = (136 + (($18*232)|0)|0);
   $20 = (($19) + 104|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)<=(0);
   if ($22) {
    HEAP16[34272>>1] = -1;
   } else {
    $23 = $actorIdx;
    $24 = (136 + (($23*232)|0)|0);
    $25 = (($24) + 148|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26&65535;
    HEAP16[34272>>1] = $27;
   }
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 2:  {
   $28 = HEAP32[362312>>2]|0;
   $29 = (($28) + 1|0);
   HEAP32[362312>>2] = $29;
   $30 = HEAP8[$28>>0]|0;
   $31 = $30&255;
   $actorIdx1 = $31;
   $conditionValueSize = 2;
   $32 = $actorIdx1;
   $33 = (136 + (($32*232)|0)|0);
   $otherActor = $33;
   $34 = $otherActor;
   $35 = (($34) + 2|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = ($36&65535) >>> 5;
   $38 = $37 & 1;
   $39 = ($38<<16>>16)!=(0);
   if ($39) {
    HEAP16[34272>>1] = 32000;
   } else {
    $40 = $0;
    $41 = (($40) + 40|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $otherActor;
    $44 = (($43) + 40|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($42) - ($45))|0;
    $47 = (Math_abs(($46|0))|0);
    $48 = ($47|0)>=(1500);
    if ($48) {
     HEAP16[34272>>1] = 32000;
    } else {
     $49 = $0;
     $50 = (($49) + 36|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $0;
     $53 = (($52) + 44|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $otherActor;
     $56 = (($55) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $otherActor;
     $59 = (($58) + 44|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (_getDistance2D($51,$54,$57,$60)|0);
     $distance = $61;
     $62 = $distance;
     $63 = (Math_abs(($62|0))|0);
     $64 = ($63|0)>(32000);
     if ($64) {
      HEAP16[34272>>1] = 32000;
     } else {
      $65 = $distance;
      $66 = $65&65535;
      HEAP16[34272>>1] = $66;
     }
    }
   }
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 7:  {
   $93 = $0;
   $94 = (($93) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95&65535;
   HEAP16[34272>>1] = $96;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 3:  {
   $67 = $0;
   $68 = (($67) + 160|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69&65535;
   HEAP16[34272>>1] = $70;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 4:  {
   $71 = HEAP32[362312>>2]|0;
   $72 = (($71) + 1|0);
   HEAP32[362312>>2] = $72;
   $73 = HEAP8[$71>>0]|0;
   $74 = $73&255;
   $actorIdx2 = $74;
   $75 = $actorIdx2;
   $76 = (136 + (($75*232)|0)|0);
   $77 = (($76) + 160|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78&65535;
   HEAP16[34272>>1] = $79;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 5:  {
   $80 = $0;
   $81 = (($80) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82&65535;
   HEAP16[34272>>1] = $83;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 6:  {
   $84 = HEAP32[362312>>2]|0;
   $85 = (($84) + 1|0);
   HEAP32[362312>>2] = $85;
   $86 = HEAP8[$84>>0]|0;
   $87 = $86&255;
   $actorIdx3 = $87;
   $88 = $actorIdx3;
   $89 = (136 + (($88*232)|0)|0);
   $90 = (($89) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91&65535;
   HEAP16[34272>>1] = $92;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 13:  {
   $199 = $0;
   $200 = (($199) + 52|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201&65535;
   HEAP16[34272>>1] = $202;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 14:  {
   $203 = HEAP16[44352>>1]|0;
   HEAP16[34272>>1] = $203;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 15:  {
   $204 = HEAP32[362312>>2]|0;
   $205 = (($204) + 1|0);
   HEAP32[362312>>2] = $205;
   $206 = HEAP8[$204>>0]|0;
   $207 = $206&255;
   $flagIdx7 = $207;
   $208 = HEAP8[((38000 + 70|0))>>0]|0;
   $209 = ($208<<24>>24)!=(0);
   do {
    if ($209) {
     $210 = HEAP8[((38000 + 70|0))>>0]|0;
     $211 = $210&255;
     $212 = ($211|0)!=(0);
     if ($212) {
      $213 = $flagIdx7;
      $214 = ($213|0)>=(28);
      if ($214) {
       label = 55;
       break;
      }
     }
     $219 = $flagIdx7;
     $220 = ($219|0)==(70);
     if ($220) {
      $221 = $flagIdx7;
      $222 = (38000 + ($221)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      HEAP16[34272>>1] = $224;
     } else {
      HEAP16[34272>>1] = 0;
     }
    } else {
     label = 55;
    }
   } while(0);
   if ((label|0) == 55) {
    $215 = $flagIdx7;
    $216 = (38000 + ($215)|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = $217&255;
    HEAP16[34272>>1] = $218;
   }
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 18:  {
   $238 = HEAP16[38288>>1]|0;
   HEAP16[34272>>1] = $238;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 16:  {
   $225 = $0;
   $226 = (($225) + 104|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $227&65535;
   HEAP16[34272>>1] = $228;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 17:  {
   $229 = HEAP32[362312>>2]|0;
   $230 = (($229) + 1|0);
   HEAP32[362312>>2] = $230;
   $231 = HEAP8[$229>>0]|0;
   $232 = $231&255;
   $actorIdx8 = $232;
   $233 = $actorIdx8;
   $234 = (136 + (($233*232)|0)|0);
   $235 = (($234) + 104|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $236&65535;
   HEAP16[34272>>1] = $237;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 8:  {
   $97 = HEAP32[362312>>2]|0;
   $98 = (($97) + 1|0);
   HEAP32[362312>>2] = $98;
   $99 = HEAP8[$97>>0]|0;
   $100 = $99&255;
   $actorIdx4 = $100;
   $101 = $actorIdx4;
   $102 = (136 + (($101*232)|0)|0);
   $103 = (($102) + 12|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $104&65535;
   HEAP16[34272>>1] = $105;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 10:  {
   $110 = HEAP32[362312>>2]|0;
   $111 = (($110) + 1|0);
   HEAP32[362312>>2] = $111;
   $112 = HEAP8[$110>>0]|0;
   $113 = $112&255;
   $actorIdx5 = $113;
   $114 = $actorIdx5;
   $115 = (136 + (($114*232)|0)|0);
   $116 = (($115) + 136|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $117&65535;
   HEAP16[34272>>1] = $118;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 11:  {
   $119 = HEAP32[362312>>2]|0;
   $120 = (($119) + 1|0);
   HEAP32[362312>>2] = $120;
   $121 = HEAP8[$119>>0]|0;
   $122 = $121&255;
   $flagIdx = $122;
   $123 = $flagIdx;
   $124 = (37920 + ($123)|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   HEAP16[34272>>1] = $126;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 9:  {
   $106 = $0;
   $107 = (($106) + 136|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108&65535;
   HEAP16[34272>>1] = $109;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 12:  {
   $newAngle = 0;
   $127 = HEAP32[362312>>2]|0;
   $128 = (($127) + 1|0);
   HEAP32[362312>>2] = $128;
   $129 = HEAP8[$127>>0]|0;
   $130 = $129&255;
   $targetActorIdx = $130;
   $131 = $targetActorIdx;
   $132 = (136 + (($131*232)|0)|0);
   $targetActor = $132;
   $conditionValueSize = 2;
   $133 = $targetActor;
   $134 = (($133) + 2|0);
   $135 = HEAP16[$134>>1]|0;
   $136 = ($135&65535) >>> 5;
   $137 = $136 & 1;
   $138 = ($137<<16>>16)!=(0);
   if ($138) {
    HEAP16[34272>>1] = 32000;
   } else {
    $139 = $targetActor;
    $140 = (($139) + 40|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $0;
    $143 = (($142) + 40|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($141) - ($144))|0;
    $146 = (Math_abs(($145|0))|0);
    $147 = ($146|0)<(1500);
    if ($147) {
     $148 = $0;
     $149 = (($148) + 36|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $0;
     $152 = (($151) + 44|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $targetActor;
     $155 = (($154) + 36|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $targetActor;
     $158 = (($157) + 44|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (_getAngleAndSetTargetActorDistance($150,$153,$156,$159)|0);
     $newAngle = $160;
     $161 = HEAP32[44416>>2]|0;
     $162 = (Math_abs(($161|0))|0);
     $163 = ($162|0)>(32000);
     if ($163) {
      HEAP32[44416>>2] = 32000;
     }
    } else {
     HEAP32[44416>>2] = 32000;
    }
    $164 = $targetActorIdx;
    $165 = ($164|0)!=(0);
    if ($165) {
     $180 = HEAP16[128>>1]|0;
     $181 = $180 << 16 >> 16;
     $182 = ($181|0)==(3);
     if ($182) {
      $183 = $0;
      $184 = (($183) + 60|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = (($185) + 1152)|0;
      $187 = $newAngle;
      $188 = (($186) - ($187))|0;
      $189 = (($188) + 1024)|0;
      $heroAngle6 = $189;
      $190 = $heroAngle6;
      $191 = $190 & 1023;
      $heroAngle6 = $191;
      $192 = $heroAngle6;
      $193 = (Math_abs(($192|0))|0);
      $194 = ($193|0)>(256);
      if ($194) {
       HEAP16[34272>>1] = 32000;
      } else {
       $195 = HEAP32[44416>>2]|0;
       $196 = $195&65535;
       HEAP16[34272>>1] = $196;
      }
     } else {
      $197 = HEAP32[44416>>2]|0;
      $198 = $197&65535;
      HEAP16[34272>>1] = $198;
     }
    } else {
     $166 = $0;
     $167 = (($166) + 60|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + 1152)|0;
     $170 = $newAngle;
     $171 = (($169) - ($170))|0;
     $172 = (($171) + 1024)|0;
     $heroAngle = $172;
     $173 = $heroAngle;
     $174 = $173 & 1023;
     $heroAngle = $174;
     $175 = $heroAngle;
     $176 = (Math_abs(($175|0))|0);
     $177 = ($176|0)>(256);
     if ($177) {
      HEAP16[34272>>1] = 32000;
     } else {
      $178 = HEAP32[44416>>2]|0;
      $179 = $178&65535;
      HEAP16[34272>>1] = $179;
     }
    }
   }
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 28:  {
   $305 = $0;
   $306 = (($305) + 156|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = $307&65535;
   HEAP16[34272>>1] = $308;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 29:  {
   HEAP16[34272>>1] = 1;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 24: case 23:  {
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 27:  {
   $304 = HEAP16[38328>>1]|0;
   HEAP16[34272>>1] = $304;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 26:  {
   $conditionValueSize = 2;
   $302 = HEAP32[38648>>2]|0;
   $303 = $302&65535;
   HEAP16[34272>>1] = $303;
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  case 25:  {
   $278 = HEAP32[362312>>2]|0;
   $279 = (($278) + 1|0);
   HEAP32[362312>>2] = $279;
   $280 = HEAP8[$278>>0]|0;
   $281 = $280&255;
   $item = $281;
   $282 = HEAP8[((38000 + 70|0))>>0]|0;
   $283 = ($282<<24>>24)!=(0);
   if ($283) {
    HEAP16[34272>>1] = 0;
   } else {
    $284 = $item;
    $285 = HEAP32[34008>>2]|0;
    $286 = ($284|0)==($285|0);
    if ($286) {
     HEAP16[34272>>1] = 1;
    } else {
     $287 = $item;
     $288 = (38344 + ($287)|0);
     $289 = HEAP8[$288>>0]|0;
     $290 = $289&255;
     $291 = ($290|0)==(1);
     if ($291) {
      $292 = $item;
      $293 = (38000 + ($292)|0);
      $294 = HEAP8[$293>>0]|0;
      $295 = $294&255;
      $296 = ($295|0)==(1);
      if ($296) {
       HEAP16[34272>>1] = 1;
      } else {
       label = 81;
      }
     } else {
      label = 81;
     }
     if ((label|0) == 81) {
      HEAP16[34272>>1] = 0;
     }
    }
    $297 = HEAP16[34272>>1]|0;
    $298 = $297 << 16 >> 16;
    $299 = ($298|0)==(1);
    if ($299) {
     $300 = $item;
     $301 = $300&65535;
     _addOverlay(3,$301,0,0,0,0,3);
    }
   }
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
   break;
  }
  default: {
   $309 = $conditionOpcode;
   HEAP32[$vararg_buffer>>2] = $309;
   (_printf((362320|0),($vararg_buffer|0))|0);
   $310 = $conditionValueSize;
   STACKTOP = sp;return ($310|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _processLifeOperators($valueSize) {
 $valueSize = $valueSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conditionValue = 0, $operatorCode = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $valueSize;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $operatorCode = $5;
 $6 = $1;
 $7 = ($6|0)==(1);
 do {
  if ($7) {
   $8 = HEAP32[362312>>2]|0;
   $9 = (($8) + 1|0);
   HEAP32[362312>>2] = $9;
   $10 = HEAP8[$8>>0]|0;
   $11 = $10&255;
   $conditionValue = $11;
  } else {
   $12 = $1;
   $13 = ($12|0)==(2);
   if ($13) {
    $14 = HEAP32[362312>>2]|0;
    $15 = HEAP16[$14>>1]|0;
    $16 = $15 << 16 >> 16;
    $conditionValue = $16;
    $17 = HEAP32[362312>>2]|0;
    $18 = (($17) + 2|0);
    HEAP32[362312>>2] = $18;
    break;
   } else {
    $19 = $1;
    HEAP32[$vararg_buffer>>2] = $19;
    (_printf((362360|0),($vararg_buffer|0))|0);
    $0 = 0;
    $46 = $0;
    STACKTOP = sp;return ($46|0);
   }
  }
 } while(0);
 $20 = $operatorCode;
 L10: do {
  switch ($20|0) {
  case 0:  {
   $21 = HEAP16[34272>>1]|0;
   $22 = $21 << 16 >> 16;
   $23 = $conditionValue;
   $24 = ($22|0)==($23|0);
   if (!($24)) {
    break L10;
   }
   $0 = 1;
   $46 = $0;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 1:  {
   $25 = HEAP16[34272>>1]|0;
   $26 = $25 << 16 >> 16;
   $27 = $conditionValue;
   $28 = ($26|0)>($27|0);
   if (!($28)) {
    break L10;
   }
   $0 = 1;
   $46 = $0;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 3:  {
   $33 = HEAP16[34272>>1]|0;
   $34 = $33 << 16 >> 16;
   $35 = $conditionValue;
   $36 = ($34|0)>=($35|0);
   if (!($36)) {
    break L10;
   }
   $0 = 1;
   $46 = $0;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 2:  {
   $29 = HEAP16[34272>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = $conditionValue;
   $32 = ($30|0)<($31|0);
   if (!($32)) {
    break L10;
   }
   $0 = 1;
   $46 = $0;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 4:  {
   $37 = HEAP16[34272>>1]|0;
   $38 = $37 << 16 >> 16;
   $39 = $conditionValue;
   $40 = ($38|0)<=($39|0);
   if (!($40)) {
    break L10;
   }
   $0 = 1;
   $46 = $0;
   STACKTOP = sp;return ($46|0);
   break;
  }
  case 5:  {
   $41 = HEAP16[34272>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = $conditionValue;
   $44 = ($42|0)!=($43|0);
   if (!($44)) {
    break L10;
   }
   $0 = 1;
   $46 = $0;
   STACKTOP = sp;return ($46|0);
   break;
  }
  default: {
   $45 = $operatorCode;
   HEAP32[$vararg_buffer1>>2] = $45;
   (_printf((362400|0),($vararg_buffer1|0))|0);
  }
  }
 } while(0);
 $0 = 0;
 $46 = $0;
 STACKTOP = sp;return ($46|0);
}
function _lEMPTY($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 STACKTOP = sp;return 0;
}
function _lEND($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 128|0);
 HEAP32[$3>>2] = -1;
 STACKTOP = sp;return 1;
}
function _lNOP($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 STACKTOP = sp;return 0;
}
function _lSNIF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $valueSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (_processLifeConditions($2)|0);
 $valueSize = $3;
 $4 = $valueSize;
 $5 = (_processLifeOperators($4)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $7 = HEAP32[362440>>2]|0;
  HEAP8[$7>>0] = 13;
 }
 $8 = $1;
 $9 = (($8) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[362312>>2]|0;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = (($10) + ($13)|0);
 HEAP32[362312>>2] = $14;
 STACKTOP = sp;return 0;
}
function _lOFFSET($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[362312>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($4) + ($7)|0);
 HEAP32[362312>>2] = $8;
 STACKTOP = sp;return 0;
}
function _lNEVERIF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $valueSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (_processLifeConditions($2)|0);
 $valueSize = $3;
 $4 = $valueSize;
 (_processLifeOperators($4)|0);
 $5 = $1;
 $6 = (($5) + 132|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[362312>>2]|0;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($7) + ($10)|0);
 HEAP32[362312>>2] = $11;
 STACKTOP = sp;return 0;
}
function _lNO_IF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 STACKTOP = sp;return 0;
}
function _lLABEL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 STACKTOP = sp;return 0;
}
function _lRETURN($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 STACKTOP = sp;return 1;
}
function _lIF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $valueSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (_processLifeConditions($2)|0);
 $valueSize = $3;
 $4 = $valueSize;
 $5 = (_processLifeOperators($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $14 = HEAP32[362312>>2]|0;
  $15 = (($14) + 2|0);
  HEAP32[362312>>2] = $15;
  STACKTOP = sp;return 0;
 } else {
  $7 = $1;
  $8 = (($7) + 132|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[362312>>2]|0;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = (($9) + ($12)|0);
  HEAP32[362312>>2] = $13;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _lSWIF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $valueSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (_processLifeConditions($2)|0);
 $valueSize = $3;
 $4 = $valueSize;
 $5 = (_processLifeOperators($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $14 = HEAP32[362312>>2]|0;
  $15 = (($14) + 2|0);
  HEAP32[362312>>2] = $15;
  $16 = HEAP32[362440>>2]|0;
  HEAP8[$16>>0] = 2;
  STACKTOP = sp;return 0;
 } else {
  $7 = $1;
  $8 = (($7) + 132|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[362312>>2]|0;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = (($9) + ($12)|0);
  HEAP32[362312>>2] = $13;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _lONEIF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $valueSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (_processLifeConditions($2)|0);
 $valueSize = $3;
 $4 = $valueSize;
 $5 = (_processLifeOperators($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $14 = HEAP32[362312>>2]|0;
  $15 = (($14) + 2|0);
  HEAP32[362312>>2] = $15;
  $16 = HEAP32[362440>>2]|0;
  HEAP8[$16>>0] = 4;
  STACKTOP = sp;return 0;
 } else {
  $7 = $1;
  $8 = (($7) + 132|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[362312>>2]|0;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = (($9) + ($12)|0);
  HEAP32[362312>>2] = $13;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _lELSE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[362312>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($4) + ($7)|0);
 HEAP32[362312>>2] = $8;
 STACKTOP = sp;return 0;
}
function _lBODY($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bodyIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $bodyIdx = $4;
 $5 = $bodyIdx;
 $6 = $0;
 $7 = $6&65535;
 _initModelActor($5,$7);
 $8 = HEAP32[362312>>2]|0;
 $9 = (($8) + 1|0);
 HEAP32[362312>>2] = $9;
 STACKTOP = sp;return 0;
}
function _lBODY_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActorIdx = 0, $otherBodyIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $otherBodyIdx = $9;
 $10 = $otherBodyIdx;
 $11 = $otherActorIdx;
 $12 = $11&65535;
 _initModelActor($10,$12);
 STACKTOP = sp;return 0;
}
function _lANIM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $animIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $animIdx = $5;
 $6 = $animIdx;
 $7 = $0;
 (_initAnim($6,0,0,$7)|0);
 STACKTOP = sp;return 0;
}
function _lANIM_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActorIdx = 0, $otherAnimIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $otherAnimIdx = $9;
 $10 = $otherAnimIdx;
 $11 = $otherActorIdx;
 (_initAnim($10,0,0,$11)|0);
 STACKTOP = sp;return 0;
}
function _lSET_LIFE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $1;
 $6 = (($5) + 128|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[362312>>2]|0;
 $8 = (($7) + 2|0);
 HEAP32[362312>>2] = $8;
 STACKTOP = sp;return 0;
}
function _lSET_LIFE_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $otherActorIdx;
 $10 = (136 + (($9*232)|0)|0);
 $11 = (($10) + 128|0);
 HEAP32[$11>>2] = $8;
 $12 = HEAP32[362312>>2]|0;
 $13 = (($12) + 2|0);
 HEAP32[362312>>2] = $13;
 STACKTOP = sp;return 0;
}
function _lSET_TRACK($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $1;
 $6 = (($5) + 120|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[362312>>2]|0;
 $8 = (($7) + 2|0);
 HEAP32[362312>>2] = $8;
 STACKTOP = sp;return 0;
}
function _lSET_TRACK_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $otherActorIdx;
 $10 = (136 + (($9*232)|0)|0);
 $11 = (($10) + 120|0);
 HEAP32[$11>>2] = $8;
 $12 = HEAP32[362312>>2]|0;
 $13 = (($12) + 2|0);
 HEAP32[362312>>2] = $13;
 STACKTOP = sp;return 0;
}
function _lMESSAGE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $textIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $textIdx = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 _freezeTime();
 $7 = HEAP32[124376>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  _drawBubble($9);
 }
 $10 = $1;
 $11 = (($10) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 _setFontCrossColor($12);
 $13 = $0;
 $14 = $13&65535;
 HEAP16[34280>>1] = $14;
 $15 = $textIdx;
 _drawTextFullscreen($15);
 _unfreezeTime();
 _redrawEngineActions(1);
 STACKTOP = sp;return 0;
}
function _lFALLABLE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $flag = $5;
 $6 = $flag;
 $7 = $6 & 1;
 $8 = $7&65535;
 $9 = $1;
 $10 = HEAP16[$9>>1]|0;
 $11 = $8 & 1;
 $12 = ($11 << 11)&65535;
 $13 = $10 & -2049;
 $14 = $13 | $12;
 HEAP16[$9>>1] = $14;
 STACKTOP = sp;return 0;
}
function _lSET_DIRMODE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $controlMode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $controlMode = $5;
 $6 = $controlMode;
 $7 = $1;
 $8 = (($7) + 68|0);
 HEAP32[$8>>2] = $6;
 $9 = $controlMode;
 $10 = ($9|0)==(2);
 if (!($10)) {
  STACKTOP = sp;return 0;
 }
 $11 = HEAP32[362312>>2]|0;
 $12 = (($11) + 1|0);
 HEAP32[362312>>2] = $12;
 $13 = HEAP8[$11>>0]|0;
 $14 = $13&255;
 $15 = $1;
 $16 = (($15) + 88|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return 0;
}
function _lSET_DIRMODE_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $controlMode = 0, $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $controlMode = $9;
 $10 = $controlMode;
 $11 = $otherActorIdx;
 $12 = (136 + (($11*232)|0)|0);
 $13 = (($12) + 68|0);
 HEAP32[$13>>2] = $10;
 $14 = $controlMode;
 $15 = ($14|0)==(2);
 if (!($15)) {
  STACKTOP = sp;return 0;
 }
 $16 = HEAP32[362312>>2]|0;
 $17 = (($16) + 1|0);
 HEAP32[362312>>2] = $17;
 $18 = HEAP8[$16>>0]|0;
 $19 = $18&255;
 $20 = $otherActorIdx;
 $21 = (136 + (($20*232)|0)|0);
 $22 = (($21) + 88|0);
 HEAP32[$22>>2] = $19;
 STACKTOP = sp;return 0;
}
function _lCAM_FOLLOW($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $followedActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $followedActorIdx = $5;
 $6 = HEAP16[34256>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = $followedActorIdx;
 $9 = ($7|0)!=($8|0);
 if (!($9)) {
  STACKTOP = sp;return 0;
 }
 $10 = $followedActorIdx;
 $11 = (136 + (($10*232)|0)|0);
 $12 = (($11) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >> 9;
 HEAP32[39400>>2] = $14;
 $15 = $followedActorIdx;
 $16 = (136 + (($15*232)|0)|0);
 $17 = (($16) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >> 8;
 HEAP32[39408>>2] = $19;
 $20 = $followedActorIdx;
 $21 = (136 + (($20*232)|0)|0);
 $22 = (($21) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >> 9;
 HEAP32[39416>>2] = $24;
 $25 = $followedActorIdx;
 $26 = $25&65535;
 HEAP16[34256>>1] = $26;
 HEAP16[47424>>1] = 1;
 STACKTOP = sp;return 0;
}
function _lSET_BEHAVIOUR($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $behavior = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $behavior = $5;
 (_initAnim(0,0,-1,0)|0);
 $6 = $behavior;
 _setBehaviour($6);
 STACKTOP = sp;return 0;
}
function _lSET_FLAG_CUBE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flagIdx = 0, $flagValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $flagIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $flagValue = $9;
 $10 = $flagValue;
 $11 = $10&255;
 $12 = $flagIdx;
 $13 = (37920 + ($12)|0);
 HEAP8[$13>>0] = $11;
 STACKTOP = sp;return 0;
}
function _lCOMPORTEMENT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 STACKTOP = sp;return 0;
}
function _lSET_COMPORTEMENT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $1;
 $6 = (($5) + 128|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[362312>>2]|0;
 $8 = (($7) + 2|0);
 HEAP32[362312>>2] = $8;
 STACKTOP = sp;return 0;
}
function _lSET_COMPORTEMENT_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $otherActorIdx;
 $10 = (136 + (($9*232)|0)|0);
 $11 = (($10) + 128|0);
 HEAP32[$11>>2] = $8;
 $12 = HEAP32[362312>>2]|0;
 $13 = (($12) + 2|0);
 HEAP32[362312>>2] = $13;
 STACKTOP = sp;return 0;
}
function _lEND_COMPORTEMENT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 STACKTOP = sp;return 1;
}
function _lSET_FLAG_GAME($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flagIdx = 0, $flagValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $flagIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $flagValue = $9;
 $10 = $flagValue;
 $11 = $10&255;
 $12 = $flagIdx;
 $13 = (38000 + ($12)|0);
 HEAP8[$13>>0] = $11;
 STACKTOP = sp;return 0;
}
function _lKILL_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = $otherActorIdx;
 _processActorCarrier($6);
 $7 = $otherActorIdx;
 $8 = (136 + (($7*232)|0)|0);
 $9 = (($8) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & -33;
 $12 = $11 | 32;
 HEAP16[$9>>1] = $12;
 $13 = $otherActorIdx;
 $14 = (136 + (($13*232)|0)|0);
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = -1;
 $16 = $otherActorIdx;
 $17 = (136 + (($16*232)|0)|0);
 $18 = (($17) + 160|0);
 HEAP32[$18>>2] = -1;
 $19 = $otherActorIdx;
 $20 = (136 + (($19*232)|0)|0);
 $21 = (($20) + 104|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lSUICIDE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $0;
 _processActorCarrier($2);
 $3 = $1;
 $4 = (($3) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & -33;
 $7 = $6 | 32;
 HEAP16[$4>>1] = $7;
 $8 = $1;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = -1;
 $10 = $1;
 $11 = (($10) + 160|0);
 HEAP32[$11>>2] = -1;
 $12 = $1;
 $13 = (($12) + 104|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lUSE_ONE_LITTLE_KEY($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP16[38288>>1]|0;
 $3 = (($2) + -1)<<16>>16;
 HEAP16[38288>>1] = $3;
 $4 = HEAP16[38288>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ($5|0)<(0);
 if ($6) {
  HEAP16[38288>>1] = 0;
 }
 _addOverlay(0,6,0,0,0,1,1);
 STACKTOP = sp;return 0;
}
function _lGIVE_GOLD_PIECES($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $hideRange = 0, $i = 0, $kashes = 0, $oldNumKashes = 0, $overlay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP16[38296>>1]|0;
 $oldNumKashes = $2;
 $hideRange = 0;
 $3 = HEAP32[362312>>2]|0;
 $4 = HEAP16[$3>>1]|0;
 $kashes = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = $kashes;
 $8 = $7 << 16 >> 16;
 $9 = HEAP16[38296>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($10) - ($8))|0;
 $12 = $11&65535;
 HEAP16[38296>>1] = $12;
 $13 = HEAP16[38296>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = ($14|0)<(0);
 if ($15) {
  HEAP16[38296>>1] = 0;
 }
 _addOverlay(0,3,10,15,0,0,3);
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $16 << 16 >> 16;
  $18 = ($17|0)<(10);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $19 << 16 >> 16;
  $21 = (47504 + (($20*14)|0)|0);
  $overlay = $21;
  $22 = $overlay;
  $23 = (($22) + 2|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = ($25|0)!=(-1);
  if ($26) {
   $27 = $overlay;
   $28 = HEAP16[$27>>1]|0;
   $29 = $28 << 16 >> 16;
   $30 = ($29|0)==(2);
   if ($30) {
    label = 7;
    break;
   }
  }
  $58 = $i;
  $59 = (($58) + 1)<<16>>16;
  $i = $59;
 }
 if ((label|0) == 7) {
  $31 = $overlay;
  $32 = (($31) + 8|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $overlay;
  $36 = (($35) + 2|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = $overlay;
  $40 = (($39) + 12|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41 << 16 >> 16;
  $43 = HEAP32[25920>>2]|0;
  $44 = (($42) - ($43))|0;
  $45 = (($44) - 50)|0;
  $46 = (_getAverageValue($34,$38,100,$45)|0);
  $47 = $46&65535;
  $48 = $overlay;
  $49 = (($48) + 2|0);
  HEAP16[$49>>1] = $47;
  $50 = HEAP16[38296>>1]|0;
  $51 = $overlay;
  $52 = (($51) + 8|0);
  HEAP16[$52>>1] = $50;
  $53 = HEAP32[25920>>2]|0;
  $54 = (($53) + 150)|0;
  $55 = $54&65535;
  $56 = $overlay;
  $57 = (($56) + 12|0);
  HEAP16[$57>>1] = $55;
  $hideRange = 1;
 }
 $60 = $hideRange;
 $61 = ($60<<16>>16)!=(0);
 if ($61) {
  STACKTOP = sp;return 0;
 }
 $62 = $oldNumKashes;
 $63 = HEAP16[38296>>1]|0;
 _addOverlay(2,$62,50,20,$63,0,3);
 STACKTOP = sp;return 0;
}
function _lEND_LIFE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 128|0);
 HEAP32[$3>>2] = -1;
 STACKTOP = sp;return 1;
}
function _lSTOP_L_TRACK($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($5) + 144|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = (($7) + 120|0);
 HEAP32[$8>>2] = -1;
 STACKTOP = sp;return 0;
}
function _lRESTORE_L_TRACK($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 144|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($5) + 120|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return 0;
}
function _lMESSAGE_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $otherActorIdx = 0, $textIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $textIdx = $8;
 $9 = HEAP32[362312>>2]|0;
 $10 = (($9) + 2|0);
 HEAP32[362312>>2] = $10;
 _freezeTime();
 $11 = HEAP32[124376>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $otherActorIdx;
  _drawBubble($13);
 }
 $14 = $otherActorIdx;
 $15 = (136 + (($14*232)|0)|0);
 $16 = (($15) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 _setFontCrossColor($17);
 $18 = $otherActorIdx;
 $19 = $18&65535;
 HEAP16[34280>>1] = $19;
 $20 = $textIdx;
 _drawTextFullscreen($20);
 _unfreezeTime();
 _redrawEngineActions(1);
 STACKTOP = sp;return 0;
}
function _lINC_CHAPTER($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP16[38256>>1]|0;
 $3 = (($2) + 1)<<16>>16;
 HEAP16[38256>>1] = $3;
 STACKTOP = sp;return 0;
}
function _lFOUND_OBJECT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $item = $5;
 _freezeTime();
 $6 = $item;
 _processFoundItem($6);
 _unfreezeTime();
 _redrawEngineActions(1);
 STACKTOP = sp;return 0;
}
function _lSET_DOOR_LEFT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $distance = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $distance = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = $1;
 $8 = (($7) + 60|0);
 HEAP32[$8>>2] = 768;
 $9 = $1;
 $10 = (($9) + 168|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $distance;
 $13 = (($11) - ($12))|0;
 $14 = $1;
 $15 = (($14) + 36|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & -65;
 HEAP16[$17>>1] = $19;
 $20 = $1;
 $21 = (($20) + 64|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lSET_DOOR_RIGHT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $distance = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $distance = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = $1;
 $8 = (($7) + 60|0);
 HEAP32[$8>>2] = 256;
 $9 = $1;
 $10 = (($9) + 168|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $distance;
 $13 = (($11) + ($12))|0;
 $14 = $1;
 $15 = (($14) + 36|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & -65;
 HEAP16[$17>>1] = $19;
 $20 = $1;
 $21 = (($20) + 64|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lSET_DOOR_UP($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $distance = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $distance = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = $1;
 $8 = (($7) + 60|0);
 HEAP32[$8>>2] = 512;
 $9 = $1;
 $10 = (($9) + 172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $distance;
 $13 = (($11) - ($12))|0;
 $14 = $1;
 $15 = (($14) + 44|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & -65;
 HEAP16[$17>>1] = $19;
 $20 = $1;
 $21 = (($20) + 64|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lSET_DOOR_DOWN($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $distance = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $distance = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = $1;
 $8 = (($7) + 60|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = (($9) + 172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $distance;
 $13 = (($11) + ($12))|0;
 $14 = $1;
 $15 = (($14) + 44|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & -65;
 HEAP16[$17>>1] = $19;
 $20 = $1;
 $21 = (($20) + 64|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lGIVE_BONUS($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flag = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $flag = $5;
 $6 = $1;
 $7 = (($6) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 496;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $0;
  _processActorExtraBonus($11);
 }
 $12 = $flag;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $1;
 $15 = (($14) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | 1;
 HEAP32[$15>>2] = $17;
 STACKTOP = sp;return 0;
}
function _lCHANGE_CUBE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $sceneIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $sceneIdx = $5;
 $6 = $sceneIdx;
 HEAP32[34040>>2] = $6;
 HEAP16[34240>>1] = 2;
 STACKTOP = sp;return 0;
}
function _lOBJ_COL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collision = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $collision = $5;
 $6 = $collision;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & -2;
  $11 = $10 | 1;
  HEAP16[$8>>1] = $11;
  STACKTOP = sp;return 0;
 } else {
  $12 = $1;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 & -2;
  HEAP16[$12>>1] = $14;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _lBRICK_COL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collision = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $collision = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & -3;
 HEAP16[$6>>1] = $8;
 $9 = $1;
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & -33;
 HEAP16[$9>>1] = $11;
 $12 = $collision;
 $13 = ($12|0)==(1);
 if ($13) {
  $14 = $1;
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 & -3;
  $17 = $16 | 2;
  HEAP16[$14>>1] = $17;
  STACKTOP = sp;return 0;
 }
 $18 = $collision;
 $19 = ($18|0)==(2);
 if ($19) {
  $20 = $1;
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 & -3;
  $23 = $22 | 2;
  HEAP16[$20>>1] = $23;
  $24 = $1;
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 & -33;
  $27 = $26 | 32;
  HEAP16[$24>>1] = $27;
 }
 STACKTOP = sp;return 0;
}
function _lOR_IF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $valueSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (_processLifeConditions($2)|0);
 $valueSize = $3;
 $4 = $valueSize;
 $5 = (_processLifeOperators($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = (($7) + 132|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[362312>>2]|0;
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = (($9) + ($12)|0);
  HEAP32[362312>>2] = $13;
  STACKTOP = sp;return 0;
 } else {
  $14 = HEAP32[362312>>2]|0;
  $15 = (($14) + 2|0);
  HEAP32[362312>>2] = $15;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _lINVISIBLE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = $5 & 1;
 $9 = ($8 << 9)&65535;
 $10 = $7 & -513;
 $11 = $10 | $9;
 HEAP16[$6>>1] = $11;
 STACKTOP = sp;return 0;
}
function _lZOOM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 HEAP32[34032>>2] = $5;
 $6 = HEAP32[34032>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP16[47464>>1]|0;
  $9 = ($8<<16>>16)!=(0);
  if (!($9)) {
   $10 = HEAP32[((308424 + 116|0))>>2]|0;
   $11 = ($10|0)!=(0);
   if ($11) {
    _fadeToBlack(121376);
    _initMCGA();
    _setBackPal();
    HEAP16[121352>>1] = 1;
    STACKTOP = sp;return 0;
   }
  }
 }
 $12 = HEAP32[34032>>2]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = HEAP16[47464>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = ($15|0)!=(0);
  if ($16) {
   _fadeToBlack(121376);
   _initSVGA();
   _setBackPal();
   HEAP16[121352>>1] = 1;
   HEAP16[47424>>1] = 1;
  }
 }
 STACKTOP = sp;return 0;
}
function _lPOS_POINT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trackIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $trackIdx = $5;
 $6 = $trackIdx;
 $7 = (36704 + (($6*6)|0)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 HEAP32[38952>>2] = $9;
 $10 = $trackIdx;
 $11 = (36704 + (($10*6)|0)|0);
 $12 = (($11) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 HEAP32[38960>>2] = $14;
 $15 = $trackIdx;
 $16 = (36704 + (($15*6)|0)|0);
 $17 = (($16) + 4|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 HEAP32[38968>>2] = $19;
 $20 = HEAP32[38952>>2]|0;
 $21 = $1;
 $22 = (($21) + 36|0);
 HEAP32[$22>>2] = $20;
 $23 = HEAP32[38960>>2]|0;
 $24 = $1;
 $25 = (($24) + 40|0);
 HEAP32[$25>>2] = $23;
 $26 = HEAP32[38968>>2]|0;
 $27 = $1;
 $28 = (($27) + 44|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return 0;
}
function _lSET_MAGIC_LEVEL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 HEAP16[24256>>1] = $5;
 $6 = HEAP16[24256>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($7*20)|0;
 $9 = $8&65535;
 HEAP16[38320>>1] = $9;
 STACKTOP = sp;return 0;
}
function _lSUB_MAGIC_POINT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 HEAP16[38320>>1] = $5;
 $6 = HEAP16[38320>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($7|0)<(0);
 if (!($8)) {
  STACKTOP = sp;return 0;
 }
 HEAP16[38320>>1] = 0;
 STACKTOP = sp;return 0;
}
function _lSET_LIFE_POINT_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lifeValue = 0, $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $lifeValue = $9;
 $10 = $lifeValue;
 $11 = $otherActorIdx;
 $12 = (136 + (($11*232)|0)|0);
 $13 = (($12) + 104|0);
 HEAP32[$13>>2] = $10;
 STACKTOP = sp;return 0;
}
function _lSUB_LIFE_POINT_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lifeValue = 0, $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $lifeValue = $9;
 $10 = $lifeValue;
 $11 = $otherActorIdx;
 $12 = (136 + (($11*232)|0)|0);
 $13 = (($12) + 104|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($10))|0;
 HEAP32[$13>>2] = $15;
 $16 = $otherActorIdx;
 $17 = (136 + (($16*232)|0)|0);
 $18 = (($17) + 104|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(0);
 if (!($20)) {
  STACKTOP = sp;return 0;
 }
 $21 = $otherActorIdx;
 $22 = (136 + (($21*232)|0)|0);
 $23 = (($22) + 104|0);
 HEAP32[$23>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lHIT_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActorIdx = 0, $strengthOfHit = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $strengthOfHit = $9;
 $10 = $0;
 $11 = $otherActorIdx;
 $12 = $strengthOfHit;
 $13 = $otherActorIdx;
 $14 = (136 + (($13*232)|0)|0);
 $15 = (($14) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 _hitActor($10,$11,$12,$16);
 STACKTOP = sp;return 0;
}
function _lPLAY_FLA($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $movie = 0, $nameSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $movie = $2;
 $3 = $movie;
 $4 = (_strlen(($3|0))|0);
 $nameSize = $4;
 $5 = $nameSize;
 $6 = (($5) + 1)|0;
 $7 = HEAP32[362312>>2]|0;
 $8 = (($7) + ($6)|0);
 HEAP32[362312>>2] = $8;
 $9 = $movie;
 _playFlaMovie($9);
 _setPalette(120312);
 _clearScreen();
 _flip();
 STACKTOP = sp;return 0;
}
function _lPLAY_MIDI($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $midiIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $midiIdx = $5;
 $6 = $midiIdx;
 _playMidiMusic($6,0);
 STACKTOP = sp;return 0;
}
function _lINC_CLOVER_BOX($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP16[38304>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(10);
 if (!($4)) {
  STACKTOP = sp;return 0;
 }
 $5 = HEAP16[38304>>1]|0;
 $6 = (($5) + 1)<<16>>16;
 HEAP16[38304>>1] = $6;
 STACKTOP = sp;return 0;
}
function _lSET_USED_INVENTORY($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $item = $5;
 $6 = $item;
 $7 = ($6|0)<(24);
 if (!($7)) {
  STACKTOP = sp;return 0;
 }
 $8 = $item;
 $9 = (38344 + ($8)|0);
 HEAP8[$9>>0] = 1;
 STACKTOP = sp;return 0;
}
function _lADD_CHOICE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $choiceIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $choiceIdx = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = $choiceIdx;
 $8 = HEAP32[38600>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[38600>>2] = $9;
 $10 = (38560 + ($8<<2)|0);
 HEAP32[$10>>2] = $7;
 STACKTOP = sp;return 0;
}
function _lASK_CHOICE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $choiceIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $choiceIdx = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 _freezeTime();
 $7 = HEAP32[124376>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  _drawBubble($9);
 }
 $10 = $1;
 $11 = (($10) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 _setFontCrossColor($12);
 $13 = $choiceIdx;
 _processGameChoices($13);
 HEAP32[38600>>2] = 0;
 _unfreezeTime();
 _redrawEngineActions(1);
 STACKTOP = sp;return 0;
}
function _lBIG_MESSAGE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $textIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $textIdx = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 _freezeTime();
 _textClipFull();
 $7 = HEAP32[124376>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  _drawBubble($9);
 }
 $10 = $1;
 $11 = (($10) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 _setFontCrossColor($12);
 $13 = $0;
 $14 = $13&65535;
 HEAP16[34280>>1] = $14;
 $15 = $textIdx;
 _drawTextFullscreen($15);
 _textClipSmall();
 _unfreezeTime();
 _redrawEngineActions(1);
 STACKTOP = sp;return 0;
}
function _lINIT_PINGOUIN($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $pingouinActor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $pingouinActor = $5;
 $6 = $pingouinActor;
 $7 = (136 + (($6*232)|0)|0);
 $8 = (($7) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -33;
 $11 = $10 | 32;
 HEAP16[$8>>1] = $11;
 $12 = $pingouinActor;
 $13 = $12&65535;
 HEAP16[34248>>1] = $13;
 $14 = $pingouinActor;
 $15 = (136 + (($14*232)|0)|0);
 $16 = (($15) + 4|0);
 HEAP32[$16>>2] = -1;
 $17 = $pingouinActor;
 $18 = (136 + (($17*232)|0)|0);
 $19 = (($18) + 160|0);
 HEAP32[$19>>2] = -1;
 STACKTOP = sp;return 0;
}
function _lSET_HOLO_POS($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $location = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $location = $5;
 $6 = $location;
 _setHolomapPosition($6);
 $7 = HEAP8[38000>>0]|0;
 $8 = ($7<<24>>24)!=(0);
 if (!($8)) {
  STACKTOP = sp;return 0;
 }
 _addOverlay(3,0,0,0,0,0,3);
 STACKTOP = sp;return 0;
}
function _lCLR_HOLO_POS($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $location = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $location = $5;
 $6 = $location;
 _clearHolomapPosition($6);
 STACKTOP = sp;return 0;
}
function _lADD_FUEL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = HEAP16[38328>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($7) + ($5))|0;
 $9 = $8&65535;
 HEAP16[38328>>1] = $9;
 $10 = HEAP16[38328>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($11|0)>(100);
 if (!($12)) {
  STACKTOP = sp;return 0;
 }
 HEAP16[38328>>1] = 100;
 STACKTOP = sp;return 0;
}
function _lSUB_FUEL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = HEAP16[38328>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($7) - ($5))|0;
 $9 = $8&65535;
 HEAP16[38328>>1] = $9;
 $10 = HEAP16[38328>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($11|0)<(0);
 if (!($12)) {
  STACKTOP = sp;return 0;
 }
 HEAP16[38328>>1] = 0;
 STACKTOP = sp;return 0;
}
function _lSET_GRM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 HEAP16[39464>>1] = $5;
 $6 = HEAP16[39464>>1]|0;
 $7 = $6 << 16 >> 16;
 (_initCellingGrid($7)|0);
 STACKTOP = sp;return 0;
}
function _lSAY_MESSAGE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $textEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $textEntry = $3;
 $4 = HEAP32[362312>>2]|0;
 $5 = (($4) + 2|0);
 HEAP32[362312>>2] = $5;
 $6 = $textEntry;
 $7 = $0;
 $8 = $7&65535;
 _addOverlay(4,$6,0,0,$8,1,2);
 _freezeTime();
 $9 = $textEntry;
 $10 = $9 << 16 >> 16;
 (_initVoxToPlay($10)|0);
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lSAY_MESSAGE_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActorIdx = 0, $textEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $textEntry = $7;
 $8 = HEAP32[362312>>2]|0;
 $9 = (($8) + 2|0);
 HEAP32[362312>>2] = $9;
 $10 = $textEntry;
 $11 = $otherActorIdx;
 $12 = $11&65535;
 _addOverlay(4,$10,0,0,$12,1,2);
 _freezeTime();
 $13 = $textEntry;
 $14 = $13 << 16 >> 16;
 (_initVoxToPlay($14)|0);
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lFULL_POINT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[8>>2]|0;
 $3 = (($2) + 104|0);
 HEAP32[$3>>2] = 50;
 $4 = HEAP16[24256>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ($5*20)|0;
 $7 = $6&65535;
 HEAP16[38320>>1] = $7;
 STACKTOP = sp;return 0;
}
function _lBETA($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAngle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $newAngle = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = $newAngle;
 $8 = $1;
 $9 = (($8) + 60|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 _clearRealAngle($10);
 STACKTOP = sp;return 0;
}
function _lGRM_OFF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP16[39464>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)!=(-1);
 if (!($4)) {
  STACKTOP = sp;return 0;
 }
 HEAP16[39456>>1] = -1;
 HEAP16[39464>>1] = -1;
 _createGridMap();
 _redrawEngineActions(1);
 STACKTOP = sp;return 0;
}
function _lFADE_PAL_RED($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 _fadePalRed(121376);
 HEAP16[121360>>1] = 0;
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lFADE_ALARM_RED($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 $2 = HEAP32[361952>>2]|0;
 (_hqrGetEntry(118032,$2,22)|0);
 _convertPalToRGBA(118032,120312);
 _fadePalRed(120312);
 HEAP16[121360>>1] = 1;
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lFADE_ALARM_PAL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 $2 = HEAP32[361952>>2]|0;
 (_hqrGetEntry(118032,$2,22)|0);
 _convertPalToRGBA(118032,120312);
 _adjustCrossPalette(120312,121376);
 HEAP16[121360>>1] = 0;
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lFADE_RED_PAL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 _fadeRedPal(121376);
 HEAP16[121360>>1] = 0;
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lFADE_RED_ALARM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 $2 = HEAP32[361952>>2]|0;
 (_hqrGetEntry(118032,$2,22)|0);
 _convertPalToRGBA(118032,120312);
 _fadeRedPal(120312);
 HEAP16[121360>>1] = 1;
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lFADE_PAL_ALARM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 $2 = HEAP32[361952>>2]|0;
 (_hqrGetEntry(118032,$2,22)|0);
 _convertPalToRGBA(118032,120312);
 _adjustCrossPalette(121376,120312);
 HEAP16[121360>>1] = 1;
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lEXPLODE_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $otherActor = 0, $otherActorIdx = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = $otherActorIdx;
 $7 = (136 + (($6*232)|0)|0);
 $otherActor = $7;
 $8 = $otherActor;
 $9 = (($8) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $otherActor;
 $12 = (($11) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $otherActor;
 $15 = (($14) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 (_addExtraExplode($10,$13,$16)|0);
 STACKTOP = sp;return 0;
}
function _lBUBBLE_ON($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP32[124376>>2] = 1;
 STACKTOP = sp;return 0;
}
function _lBUBBLE_OFF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP32[124376>>2] = 1;
 STACKTOP = sp;return 0;
}
function _lASK_CHOICE_OBJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $choiceIdx = 0;
 var $otherActorIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $otherActorIdx = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $choiceIdx = $8;
 $9 = HEAP32[362312>>2]|0;
 $10 = (($9) + 2|0);
 HEAP32[362312>>2] = $10;
 _freezeTime();
 $11 = HEAP32[124376>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $otherActorIdx;
  _drawBubble($13);
 }
 $14 = $otherActorIdx;
 $15 = (136 + (($14*232)|0)|0);
 $16 = (($15) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 _setFontCrossColor($17);
 $18 = $choiceIdx;
 _processGameChoices($18);
 HEAP32[38600>>2] = 0;
 _unfreezeTime();
 _redrawEngineActions(1);
 STACKTOP = sp;return 0;
}
function _lSET_DARK_PAL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 $2 = HEAP32[361952>>2]|0;
 (_hqrGetEntry(118032,$2,24)|0);
 $3 = HEAP16[121352>>1]|0;
 $4 = ($3<<16>>16)!=(0);
 if (!($4)) {
  _convertPalToRGBA(118032,120312);
  _setPalette(120312);
 }
 HEAP16[121360>>1] = 1;
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lSET_NORMAL_PAL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP16[121360>>1] = 0;
 $2 = HEAP16[121352>>1]|0;
 $3 = ($2<<16>>16)!=(0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 _setPalette(121376);
 STACKTOP = sp;return 0;
}
function _lMESSAGE_SENDELL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpFlagDisplayText = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _freezeTime();
 _fadeToBlack(120312);
 _loadImage(25,1);
 _textClipFull();
 _setFontCrossColor(15);
 HEAP32[123888>>2] = 0;
 $2 = HEAP32[((308424 + 32|0))>>2]|0;
 $tmpFlagDisplayText = $2;
 HEAP32[((308424 + 32|0))>>2] = 1;
 _drawTextFullscreen(6);
 HEAP32[123888>>2] = 1;
 _textClipSmall();
 _fadeToBlack(118808);
 _clearScreen();
 _setPalette(120312);
 $3 = $tmpFlagDisplayText;
 HEAP32[((308424 + 32|0))>>2] = $3;
 while(1) {
  _readKeys();
  $4 = HEAP16[120304>>1]|0;
  $5 = $4 << 16 >> 16;
  $6 = ($5|0)!=(0);
  if ($6) {
   $10 = 1;
  } else {
   $7 = HEAP16[122408>>1]|0;
   $8 = $7 << 16 >> 16;
   $9 = ($8|0)!=(0);
   $10 = $9;
  }
  if (!($10)) {
   break;
  }
 }
 _unfreezeTime();
 STACKTOP = sp;return 0;
}
function _lANIM_SET($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $animIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $animIdx = $5;
 $6 = $1;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = -1;
 $8 = $1;
 $9 = (($8) + 180|0);
 HEAP32[$9>>2] = -1;
 $10 = $animIdx;
 $11 = $0;
 (_initAnim($10,0,0,$11)|0);
 STACKTOP = sp;return 0;
}
function _lHOLOMAP_TRAJ($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 STACKTOP = sp;return -1;
}
function _lGAME_OVER($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[8>>2]|0;
 $3 = (($2) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & -5;
 $6 = $5 | 4;
 HEAP16[$3>>1] = $6;
 $7 = HEAP32[8>>2]|0;
 $8 = (($7) + 104|0);
 HEAP32[$8>>2] = 0;
 HEAP16[38312>>1] = 0;
 STACKTOP = sp;return 1;
}
function _lTHE_END($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP32[25912>>2] = 1;
 HEAP16[38312>>1] = 0;
 $2 = HEAP32[8>>2]|0;
 $3 = (($2) + 104|0);
 HEAP32[$3>>2] = 50;
 HEAP16[38320>>1] = 80;
 HEAP32[34048>>2] = 113;
 $4 = HEAP16[24>>1]|0;
 HEAP16[128>>1] = $4;
 HEAP16[34184>>1] = -1;
 $5 = HEAP16[16>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = HEAP32[8>>2]|0;
 $8 = (($7) + 60|0);
 HEAP32[$8>>2] = $6;
 _saveGame();
 STACKTOP = sp;return 1;
}
function _lMIDI_OFF($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _stopMidiMusic();
 STACKTOP = sp;return 0;
}
function _lPLAY_CD_TRACK($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $track = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $track = $5;
 $6 = $track;
 _playTrackMusic($6);
 STACKTOP = sp;return 0;
}
function _lPROJ_ISO($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 _setOrthoProjection(311,240,512);
 _setBaseTranslation(0,0,0);
 _setBaseRotation(0,0,0);
 $2 = HEAP32[34080>>2]|0;
 $3 = HEAP32[34088>>2]|0;
 _setLightVector($2,$3,0);
 STACKTOP = sp;return 0;
}
function _lPROJ_3D($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[25952>>2]|0;
 $3 = HEAP32[25944>>2]|0;
 _copyScreen($2,$3);
 _flip();
 HEAP16[37904>>1] = 0;
 _setCameraPosition(320,240,128,1024,1024);
 _setCameraAngle(0,1500,0,25,-128,0,13000);
 _setLightVector(896,950,0);
 _initTextBank(1);
 STACKTOP = sp;return 0;
}
function _lTEXT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $textBoxRight = 0, $textIdx = 0, $textSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $textIdx = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = (($5) + 2|0);
 HEAP32[362312>>2] = $6;
 $7 = HEAP32[362448>>2]|0;
 $8 = ($7|0)<(440);
 if (!($8)) {
  STACKTOP = sp;return 0;
 }
 $9 = HEAP32[((308424 + 72|0))>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $textIdx;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $textIdx = 16;
  }
 }
 $13 = $textIdx;
 _getMenuText($13,362456);
 $14 = (_getTextSize(362456)|0);
 $textBoxRight = $14;
 $textSize = $14;
 _setFontColor(15);
 $15 = HEAP32[362448>>2]|0;
 _drawText(0,$15,362456);
 $16 = $textSize;
 $17 = ($16|0)>(639);
 if ($17) {
  $textBoxRight = 639;
 }
 $18 = HEAP32[362448>>2]|0;
 $19 = (($18) + 40)|0;
 HEAP32[362448>>2] = $19;
 $20 = HEAP32[362448>>2]|0;
 $21 = $textBoxRight;
 $22 = HEAP32[362448>>2]|0;
 _copyBlockPhys(0,$20,$21,$22);
 STACKTOP = sp;return 0;
}
function _lCLEAR_TEXT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP32[362448>>2] = 0;
 _drawSplittedBox(0,0,639,240,0);
 _copyBlockPhys(0,0,639,240);
 STACKTOP = sp;return 0;
}
function _lBRUTAL_EXIT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP32[25912>>2] = 0;
 STACKTOP = sp;return 1;
}
function _processLifeScript($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor = 0, $end = 0, $scriptOpcode = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $actorIdx;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $actor;
 $4 = (($3) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $actor;
 $7 = (($6) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) + ($8)|0);
 HEAP32[362312>>2] = $9;
 $end = -2;
 while(1) {
  $10 = HEAP32[362312>>2]|0;
  HEAP32[362440>>2] = $10;
  $11 = HEAP32[362312>>2]|0;
  $12 = (($11) + 1|0);
  HEAP32[362312>>2] = $12;
  $13 = HEAP8[$11>>0]|0;
  $14 = $13&255;
  $scriptOpcode = $14;
  $15 = $scriptOpcode;
  $16 = ($15|0)<=(105);
  if ($16) {
   $17 = $scriptOpcode;
   $18 = (362712 + ($17<<3)|0);
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $0;
   $22 = $actor;
   $23 = (FUNCTION_TABLE_iii[$20 & 255]($21,$22)|0);
   $end = $23;
  } else {
   $24 = $0;
   $25 = $actor;
   $26 = (($25) + 128|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer>>2] = $24;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $27;
   (_printf((363560|0),($vararg_buffer|0))|0);
  }
  $28 = $end;
  $29 = ($28|0)<(0);
  if ($29) {
   $30 = $0;
   $31 = $scriptOpcode;
   $32 = (362712 + ($31<<3)|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $30;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $33;
   (_printf((363616|0),($vararg_buffer2|0))|0);
  }
  $34 = $end;
  $35 = ($34|0)!=(1);
  if (!($35)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _mEND($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP32[365160>>2] = 0;
 $2 = $1;
 $3 = (($2) + 120|0);
 HEAP32[$3>>2] = -1;
 STACKTOP = sp;return 0;
}
function _mNOP($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 STACKTOP = sp;return 0;
}
function _mBODY($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bodyIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $bodyIdx = $4;
 $5 = $bodyIdx;
 $6 = $0;
 $7 = $6&65535;
 _initModelActor($5,$7);
 $8 = $1;
 $9 = (($8) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return 0;
}
function _mANIM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $animIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = (($2) + 1|0);
 HEAP32[362312>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $animIdx = $5;
 $6 = $animIdx;
 $7 = $0;
 $8 = (_initAnim($6,0,0,$7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 120|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$11>>2] = $13;
  STACKTOP = sp;return 0;
 } else {
  $14 = HEAP32[365168>>2]|0;
  $15 = $1;
  $16 = (($15) + 120|0);
  HEAP32[$16>>2] = $14;
  HEAP32[365160>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _mGOTO_POINT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAngle = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 HEAP16[34272>>1] = $8;
 $9 = HEAP16[34272>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (36704 + (($10*6)|0)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 HEAP32[38952>>2] = $13;
 $14 = HEAP16[34272>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (36704 + (($15*6)|0)|0);
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 HEAP32[38960>>2] = $19;
 $20 = HEAP16[34272>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (36704 + (($21*6)|0)|0);
 $23 = (($22) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 HEAP32[38968>>2] = $25;
 $26 = $1;
 $27 = (($26) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $1;
 $30 = (($29) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[38952>>2]|0;
 $33 = HEAP32[38968>>2]|0;
 $34 = (_getAngleAndSetTargetActorDistance($28,$31,$32,$33)|0);
 $newAngle = $34;
 $35 = $1;
 $36 = HEAP16[$35>>1]|0;
 $37 = ($36&65535) >>> 10;
 $38 = $37 & 1;
 $39 = ($38<<16>>16)!=(0);
 if ($39) {
  $40 = $newAngle;
  $41 = $1;
  $42 = (($41) + 60|0);
  HEAP32[$42>>2] = $40;
 } else {
  $43 = $1;
  $44 = (($43) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $newAngle;
  $47 = $1;
  $48 = (($47) + 64|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $1;
  $51 = (($50) + 212|0);
  _moveActor($45,$46,$49,$51);
 }
 $52 = HEAP32[44416>>2]|0;
 $53 = ($52|0)>(500);
 if (!($53)) {
  STACKTOP = sp;return 0;
 }
 HEAP32[365160>>2] = 0;
 $54 = $1;
 $55 = (($54) + 120|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) - 2)|0;
 HEAP32[$55>>2] = $57;
 STACKTOP = sp;return 0;
}
function _mWAIT_ANIM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4&65535) >>> 2;
 $6 = $5 & 1;
 $7 = ($6<<16>>16)!=(0);
 if ($7) {
  HEAP32[365160>>2] = 0;
  $12 = $1;
  _clearRealAngle($12);
  STACKTOP = sp;return 0;
 } else {
  HEAP32[365160>>2] = 0;
  $8 = $1;
  $9 = (($8) + 120|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + -1)|0;
  HEAP32[$9>>2] = $11;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _mLOOP($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 STACKTOP = sp;return -1;
}
function _mANGLE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $actorIdx;
 $2 = $actor;
 $3 = $2;
 $4 = (($3) + 120|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 2)|0;
 HEAP32[$4>>2] = $6;
 $7 = $2;
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8&65535) >>> 10;
 $10 = $9 & 1;
 $11 = ($10<<16>>16)!=(0);
 do {
  if (!($11)) {
   $12 = HEAP32[362312>>2]|0;
   $13 = HEAP16[$12>>1]|0;
   HEAP16[34272>>1] = $13;
   $14 = $2;
   $15 = (($14) + 212|0);
   $16 = (($15) + 4|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $2;
    $21 = (($20) + 60|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP16[34272>>1]|0;
    $24 = $23 << 16 >> 16;
    $25 = $2;
    $26 = (($25) + 64|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[365176>>2]|0;
    _moveActor($22,$24,$27,$28);
   }
   $29 = $2;
   $30 = (($29) + 60|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP16[34272>>1]|0;
   $33 = $32 << 16 >> 16;
   $34 = ($31|0)==($33|0);
   if (!($34)) {
    HEAP32[365160>>2] = 0;
    $36 = $2;
    $37 = (($36) + 120|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) - 3)|0;
    HEAP32[$37>>2] = $39;
    break;
   }
   $35 = $2;
   _clearRealAngle($35);
   $0 = 0;
   $40 = $0;
   STACKTOP = sp;return ($40|0);
  }
 } while(0);
 $0 = 0;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _mPOS_POINT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 HEAP16[34272>>1] = $8;
 $9 = HEAP16[34272>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (36704 + (($10*6)|0)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 HEAP32[38952>>2] = $13;
 $14 = HEAP16[34272>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (36704 + (($15*6)|0)|0);
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 HEAP32[38960>>2] = $19;
 $20 = HEAP16[34272>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (36704 + (($21*6)|0)|0);
 $23 = (($22) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 HEAP32[38968>>2] = $25;
 $26 = $1;
 $27 = HEAP16[$26>>1]|0;
 $28 = ($27&65535) >>> 10;
 $29 = $28 & 1;
 $30 = ($29<<16>>16)!=(0);
 if ($30) {
  $31 = $1;
  $32 = (($31) + 64|0);
  HEAP32[$32>>2] = 0;
 }
 $33 = HEAP32[38952>>2]|0;
 $34 = $1;
 $35 = (($34) + 36|0);
 HEAP32[$35>>2] = $33;
 $36 = HEAP32[38960>>2]|0;
 $37 = $1;
 $38 = (($37) + 40|0);
 HEAP32[$38>>2] = $36;
 $39 = HEAP32[38968>>2]|0;
 $40 = $1;
 $41 = (($40) + 44|0);
 HEAP32[$41>>2] = $39;
 STACKTOP = sp;return 0;
}
function _mLABEL($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $1;
 $6 = (($5) + 136|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = (($7) + 120|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = $1;
 $12 = (($11) + 120|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - 2)|0;
 $15 = $1;
 $16 = (($15) + 140|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return 0;
}
function _mGOTO($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = $1;
 $6 = (($5) + 120|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return 0;
}
function _mSTOP($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 HEAP32[365160>>2] = 0;
 $2 = $1;
 $3 = (($2) + 120|0);
 HEAP32[$3>>2] = -1;
 STACKTOP = sp;return 0;
}
function _mGOTO_SYM_POINT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAngle = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 HEAP16[34272>>1] = $8;
 $9 = HEAP16[34272>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (36704 + (($10*6)|0)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 HEAP32[38952>>2] = $13;
 $14 = HEAP16[34272>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (36704 + (($15*6)|0)|0);
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 HEAP32[38960>>2] = $19;
 $20 = HEAP16[34272>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (36704 + (($21*6)|0)|0);
 $23 = (($22) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 HEAP32[38968>>2] = $25;
 $26 = $1;
 $27 = (($26) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $1;
 $30 = (($29) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[38952>>2]|0;
 $33 = HEAP32[38968>>2]|0;
 $34 = (_getAngleAndSetTargetActorDistance($28,$31,$32,$33)|0);
 $35 = (512 + ($34))|0;
 $newAngle = $35;
 $36 = $1;
 $37 = HEAP16[$36>>1]|0;
 $38 = ($37&65535) >>> 10;
 $39 = $38 & 1;
 $40 = ($39<<16>>16)!=(0);
 if ($40) {
  $41 = $newAngle;
  $42 = $1;
  $43 = (($42) + 60|0);
  HEAP32[$43>>2] = $41;
 } else {
  $44 = $1;
  $45 = (($44) + 60|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $newAngle;
  $48 = $1;
  $49 = (($48) + 64|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $1;
  $52 = (($51) + 212|0);
  _moveActor($46,$47,$50,$52);
 }
 $53 = HEAP32[44416>>2]|0;
 $54 = ($53|0)>(500);
 if (!($54)) {
  STACKTOP = sp;return 0;
 }
 HEAP32[365160>>2] = 0;
 $55 = $1;
 $56 = (($55) + 120|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) - 2)|0;
 HEAP32[$56>>2] = $58;
 STACKTOP = sp;return 0;
}
function _mWAIT_NUM_ANIM($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $animPos = 0, $animRepeats = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = (($6) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8&65535) >>> 2;
 $10 = $9 & 1;
 $11 = ($10<<16>>16)!=(0);
 if ($11) {
  $12 = HEAP32[362312>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $animRepeats = $14;
  $15 = HEAP32[362312>>2]|0;
  $16 = (($15) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $animPos = $18;
  $19 = $animPos;
  $20 = (($19) + 1)|0;
  $animPos = $20;
  $21 = $animPos;
  $22 = $animRepeats;
  $23 = ($21|0)==($22|0);
  if ($23) {
   $animPos = 0;
  } else {
   HEAP32[365160>>2] = 0;
  }
  $24 = $animPos;
  $25 = $24&255;
  $26 = HEAP32[362312>>2]|0;
  $27 = (($26) + 1|0);
  HEAP8[$27>>0] = $25;
 } else {
  HEAP32[365160>>2] = 0;
 }
 $28 = HEAP32[365160>>2]|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  STACKTOP = sp;return 0;
 }
 $30 = $1;
 $31 = (($30) + 120|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) - 3)|0;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return 0;
}
function _mSAMPLE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $sampleIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $sampleIdx = $4;
 $5 = $sampleIdx;
 $6 = $1;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 _playSample($5,4096,1,$8,$11,$14,$15);
 $16 = $1;
 $17 = (($16) + 120|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 2)|0;
 HEAP32[$17>>2] = $19;
 STACKTOP = sp;return 0;
}
function _mGOTO_POINT_3D($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 10;
 $9 = $8 & 1;
 $10 = ($9<<16>>16)!=(0);
 if (!($10)) {
  STACKTOP = sp;return 0;
 }
 $11 = HEAP32[362312>>2]|0;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 HEAP16[34272>>1] = $13;
 $14 = HEAP16[34272>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (36704 + (($15*6)|0)|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 HEAP32[38952>>2] = $18;
 $19 = HEAP16[34272>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = (36704 + (($20*6)|0)|0);
 $22 = (($21) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 HEAP32[38960>>2] = $24;
 $25 = HEAP16[34272>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (36704 + (($26*6)|0)|0);
 $28 = (($27) + 4|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 << 16 >> 16;
 HEAP32[38968>>2] = $30;
 $31 = $1;
 $32 = (($31) + 36|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $1;
 $35 = (($34) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[38952>>2]|0;
 $38 = HEAP32[38968>>2]|0;
 $39 = (_getAngleAndSetTargetActorDistance($33,$36,$37,$38)|0);
 $40 = $1;
 $41 = (($40) + 60|0);
 HEAP32[$41>>2] = $39;
 $42 = $1;
 $43 = (($42) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[38960>>2]|0;
 $46 = HEAP32[44416>>2]|0;
 $47 = (_getAngleAndSetTargetActorDistance($44,0,$45,$46)|0);
 $48 = $1;
 $49 = (($48) + 192|0);
 HEAP32[$49>>2] = $47;
 $50 = HEAP32[44416>>2]|0;
 $51 = ($50|0)>(100);
 if ($51) {
  HEAP32[365160>>2] = 0;
  $52 = $1;
  $53 = (($52) + 120|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) - 2)|0;
  HEAP32[$53>>2] = $55;
 } else {
  $56 = HEAP32[38952>>2]|0;
  $57 = $1;
  $58 = (($57) + 36|0);
  HEAP32[$58>>2] = $56;
  $59 = HEAP32[38960>>2]|0;
  $60 = $1;
  $61 = (($60) + 40|0);
  HEAP32[$61>>2] = $59;
  $62 = HEAP32[38968>>2]|0;
  $63 = $1;
  $64 = (($63) + 44|0);
  HEAP32[$64>>2] = $62;
 }
 STACKTOP = sp;return 0;
}
function _mSPEED($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $1;
 $10 = (($9) + 64|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = HEAP16[$11>>1]|0;
 $13 = ($12&65535) >>> 10;
 $14 = $13 & 1;
 $15 = ($14<<16>>16)!=(0);
 if (!($15)) {
  STACKTOP = sp;return 0;
 }
 $16 = $1;
 $17 = (($16) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18&65535;
 $20 = HEAP32[365176>>2]|0;
 _setActorAngle(0,$19,50,$20);
 STACKTOP = sp;return 0;
}
function _mBACKGROUND($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11&65535) >>> 13;
  $13 = $12 & 1;
  $14 = ($13<<16>>16)!=(0);
  if (!($14)) {
   $15 = $1;
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 & -8193;
   $18 = $17 | 8192;
   HEAP16[$15>>1] = $18;
   $19 = $1;
   $20 = (($19) + 2|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = ($21&65535) >>> 4;
   $23 = $22 & 1;
   $24 = ($23<<16>>16)!=(0);
   if ($24) {
    HEAP16[47424>>1] = 1;
   }
  }
  STACKTOP = sp;return 0;
 } else {
  $25 = $1;
  $26 = HEAP16[$25>>1]|0;
  $27 = ($26&65535) >>> 13;
  $28 = $27 & 1;
  $29 = ($28<<16>>16)!=(0);
  if ($29) {
   $30 = $1;
   $31 = HEAP16[$30>>1]|0;
   $32 = $31 & -8193;
   HEAP16[$30>>1] = $32;
   $33 = $1;
   $34 = (($33) + 2|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = ($35&65535) >>> 4;
   $37 = $36 & 1;
   $38 = ($37<<16>>16)!=(0);
   if ($38) {
    HEAP16[47424>>1] = 1;
   }
  }
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _mWAIT_NUM_SECOND($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currentTime = 0, $numSeconds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 5)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[362312>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[362312>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $numSeconds = $9;
 $10 = HEAP32[362312>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $currentTime = $11;
 $12 = $currentTime;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = HEAP32[25920>>2]|0;
  $15 = $numSeconds;
  $16 = ($15*50)|0;
  $17 = (($14) + ($16))|0;
  $currentTime = $17;
  $18 = $currentTime;
  $19 = HEAP32[362312>>2]|0;
  HEAP32[$19>>2] = $18;
 }
 $20 = HEAP32[25920>>2]|0;
 $21 = $currentTime;
 $22 = ($20|0)<($21|0);
 if ($22) {
  HEAP32[365160>>2] = 0;
  $23 = $1;
  $24 = (($23) + 120|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) - 6)|0;
  HEAP32[$24>>2] = $26;
  STACKTOP = sp;return 0;
 } else {
  $27 = HEAP32[362312>>2]|0;
  HEAP32[$27>>2] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _mNO_BODY($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $0;
 $3 = $2&65535;
 _initModelActor(-1,$3);
 STACKTOP = sp;return 0;
}
function _mBETA($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $beta = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $beta = $3;
 $4 = $1;
 $5 = (($4) + 120|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 2)|0;
 HEAP32[$5>>2] = $7;
 $8 = $beta;
 $9 = $8 << 16 >> 16;
 $10 = $1;
 $11 = (($10) + 60|0);
 HEAP32[$11>>2] = $9;
 $12 = $1;
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13&65535) >>> 10;
 $15 = $14 & 1;
 $16 = ($15<<16>>16)!=(0);
 if (!($16)) {
  STACKTOP = sp;return 0;
 }
 $17 = $1;
 _clearRealAngle($17);
 STACKTOP = sp;return 0;
}
function _mOPEN_LEFT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 10;
 $9 = $8 & 1;
 $10 = $9&65535;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $12 = $1;
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13&65535) >>> 3;
 $15 = $14 & 1;
 $16 = $15&65535;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return 0;
 }
 $18 = $1;
 $19 = (($18) + 60|0);
 HEAP32[$19>>2] = 768;
 $20 = HEAP32[362312>>2]|0;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $1;
 $24 = (($23) + 184|0);
 HEAP32[$24>>2] = $22;
 $25 = $1;
 $26 = (($25) + 2|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 & -65;
 $29 = $28 | 64;
 HEAP16[$26>>1] = $29;
 $30 = $1;
 $31 = (($30) + 64|0);
 HEAP32[$31>>2] = 1000;
 $32 = HEAP32[365176>>2]|0;
 _setActorAngle(0,1000,50,$32);
 STACKTOP = sp;return 0;
}
function _mOPEN_RIGHT($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 10;
 $9 = $8 & 1;
 $10 = $9&65535;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $12 = $1;
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13&65535) >>> 3;
 $15 = $14 & 1;
 $16 = $15&65535;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return 0;
 }
 $18 = $1;
 $19 = (($18) + 60|0);
 HEAP32[$19>>2] = 256;
 $20 = HEAP32[362312>>2]|0;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $1;
 $24 = (($23) + 184|0);
 HEAP32[$24>>2] = $22;
 $25 = $1;
 $26 = (($25) + 2|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 & -65;
 $29 = $28 | 64;
 HEAP16[$26>>1] = $29;
 $30 = $1;
 $31 = (($30) + 64|0);
 HEAP32[$31>>2] = 1000;
 $32 = HEAP32[365176>>2]|0;
 _setActorAngle(0,1000,50,$32);
 STACKTOP = sp;return 0;
}
function _mOPEN_UP($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 10;
 $9 = $8 & 1;
 $10 = $9&65535;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $12 = $1;
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13&65535) >>> 3;
 $15 = $14 & 1;
 $16 = $15&65535;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return 0;
 }
 $18 = $1;
 $19 = (($18) + 60|0);
 HEAP32[$19>>2] = 512;
 $20 = HEAP32[362312>>2]|0;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $1;
 $24 = (($23) + 184|0);
 HEAP32[$24>>2] = $22;
 $25 = $1;
 $26 = (($25) + 2|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 & -65;
 $29 = $28 | 64;
 HEAP16[$26>>1] = $29;
 $30 = $1;
 $31 = (($30) + 64|0);
 HEAP32[$31>>2] = 1000;
 $32 = HEAP32[365176>>2]|0;
 _setActorAngle(0,1000,50,$32);
 STACKTOP = sp;return 0;
}
function _mOPEN_DOWN($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 10;
 $9 = $8 & 1;
 $10 = $9&65535;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return 0;
 }
 $12 = $1;
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13&65535) >>> 3;
 $15 = $14 & 1;
 $16 = $15&65535;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return 0;
 }
 $18 = $1;
 $19 = (($18) + 60|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[362312>>2]|0;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $1;
 $24 = (($23) + 184|0);
 HEAP32[$24>>2] = $22;
 $25 = $1;
 $26 = (($25) + 2|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 & -65;
 $29 = $28 | 64;
 HEAP16[$26>>1] = $29;
 $30 = $1;
 $31 = (($30) + 64|0);
 HEAP32[$31>>2] = 1000;
 $32 = HEAP32[365176>>2]|0;
 _setActorAngle(0,1000,50,$32);
 STACKTOP = sp;return 0;
}
function _mCLOSE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3&65535) >>> 10;
 $5 = $4 & 1;
 $6 = $5&65535;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return 0;
 }
 $8 = $1;
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9&65535) >>> 3;
 $11 = $10 & 1;
 $12 = $11&65535;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $1;
 $15 = (($14) + 184|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = (($16) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & -65;
 $20 = $19 | 64;
 HEAP16[$17>>1] = $20;
 $21 = $1;
 $22 = (($21) + 64|0);
 HEAP32[$22>>2] = -1000;
 $23 = HEAP32[365176>>2]|0;
 _setActorAngle(0,-1000,50,$23);
 STACKTOP = sp;return 0;
}
function _mWAIT_DOOR($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3&65535) >>> 10;
 $5 = $4 & 1;
 $6 = $5&65535;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return 0;
 }
 $8 = $1;
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9&65535) >>> 3;
 $11 = $10 & 1;
 $12 = $11&65535;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $1;
 $15 = (($14) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  HEAP32[365160>>2] = 0;
  $18 = $1;
  $19 = (($18) + 120|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + -1)|0;
  HEAP32[$19>>2] = $21;
 }
 STACKTOP = sp;return 0;
}
function _mSAMPLE_RND($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $freq = 0, $sampleIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = (_rand()|0);
 $3 = (($2|0) % 2048)&-1;
 $4 = (($3) + 2048)|0;
 $freq = $4;
 $5 = HEAP32[362312>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $sampleIdx = $7;
 $8 = $sampleIdx;
 $9 = $freq;
 $10 = $1;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = (($16) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 _playSample($8,$9,1,$12,$15,$18,$19);
 $20 = $1;
 $21 = (($20) + 120|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 2)|0;
 HEAP32[$21>>2] = $23;
 STACKTOP = sp;return 0;
}
function _mSAMPLE_ALWAYS($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $sampleIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $sampleIdx = $4;
 $5 = $sampleIdx;
 $6 = (_getSampleChannel($5)|0);
 $7 = ($6|0)==(-1);
 if ($7) {
  $8 = $sampleIdx;
  $9 = $1;
  $10 = (($9) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = (($12) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  _playSample($8,4096,-1,$11,$14,$17,$18);
 }
 $19 = $1;
 $20 = (($19) + 120|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 2)|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return 0;
}
function _mSAMPLE_STOP($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sampleIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $sampleIdx = $4;
 $5 = $sampleIdx;
 _stopSample($5);
 $6 = $1;
 $7 = (($6) + 120|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 2)|0;
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return 0;
}
function _mPLAY_FLA($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 STACKTOP = sp;return -1;
}
function _mREPEAT_SAMPLE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 HEAP32[365152>>2] = $4;
 $5 = $1;
 $6 = (($5) + 120|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 2)|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return 0;
}
function _mSIMPLE_SAMPLE($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $sampleIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = HEAP32[362312>>2]|0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $sampleIdx = $4;
 $5 = $sampleIdx;
 $6 = HEAP32[365152>>2]|0;
 $7 = $1;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 _playSample($5,4096,$6,$9,$12,$15,$16);
 HEAP32[365152>>2] = 1;
 $17 = $1;
 $18 = (($17) + 120|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 2)|0;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return 0;
}
function _mFACE_HERO($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 10;
 $9 = $8 & 1;
 $10 = ($9<<16>>16)!=(0);
 if ($10) {
  STACKTOP = sp;return 0;
 }
 $11 = HEAP32[362312>>2]|0;
 $12 = HEAP16[$11>>1]|0;
 HEAP16[34272>>1] = $12;
 $13 = HEAP16[34272>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = ($14|0)==(-1);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 212|0);
  $18 = (($17) + 4|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = ($20|0)==(0);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (($25) + 44|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[8>>2]|0;
   $29 = (($28) + 36|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[8>>2]|0;
   $32 = (($31) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_getAngleAndSetTargetActorDistance($24,$27,$30,$33)|0);
   $35 = $34&65535;
   HEAP16[34272>>1] = $35;
   $36 = $1;
   $37 = (($36) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP16[34272>>1]|0;
   $40 = $39 << 16 >> 16;
   $41 = $1;
   $42 = (($41) + 64|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $1;
   $45 = (($44) + 212|0);
   _moveActor($38,$40,$43,$45);
   $46 = HEAP16[34272>>1]|0;
   $47 = HEAP32[362312>>2]|0;
   HEAP16[$47>>1] = $46;
  }
 }
 $48 = $1;
 $49 = (($48) + 60|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP16[34272>>1]|0;
 $52 = $51 << 16 >> 16;
 $53 = ($50|0)!=($52|0);
 if ($53) {
  HEAP32[365160>>2] = 0;
  $54 = $1;
  $55 = (($54) + 120|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) - 3)|0;
  HEAP32[$55>>2] = $57;
 } else {
  $58 = $1;
  _clearRealAngle($58);
  $59 = HEAP32[362312>>2]|0;
  HEAP16[$59>>1] = -1;
 }
 STACKTOP = sp;return 0;
}
function _mANGLE_RND($actorIdx,$actor) {
 $actorIdx = $actorIdx|0;
 $actor = $actor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $newAngle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 $1 = $actor;
 $2 = $1;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 10;
 $9 = $8 & 1;
 $10 = ($9<<16>>16)!=(0);
 if ($10) {
  STACKTOP = sp;return 0;
 }
 $11 = HEAP32[362312>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 HEAP16[34272>>1] = $13;
 $14 = HEAP16[34272>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($15|0)==(-1);
 if ($16) {
  $17 = $1;
  $18 = (($17) + 212|0);
  $19 = (($18) + 4|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = (_rand()|0);
   $24 = $23 & 1;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = HEAP32[362312>>2]|0;
    $27 = HEAP16[$26>>1]|0;
    HEAP16[34272>>1] = $27;
    $28 = $1;
    $29 = (($28) + 60|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 256)|0;
    $32 = HEAP16[34272>>1]|0;
    $33 = $32 << 16 >> 16;
    $34 = (Math_abs(($33|0))|0);
    $35 = $34 >> 1;
    $36 = (($31) + ($35))|0;
    $newAngle = $36;
    $37 = $newAngle;
    $38 = (_rand()|0);
    $39 = HEAP16[34272>>1]|0;
    $40 = $39 << 16 >> 16;
    $41 = (($38|0) % ($40|0))&-1;
    $42 = (($37) - ($41))|0;
    $43 = $42 & 1023;
    $44 = $43&65535;
    HEAP16[34272>>1] = $44;
   } else {
    $45 = HEAP32[362312>>2]|0;
    $46 = HEAP16[$45>>1]|0;
    HEAP16[34272>>1] = $46;
    $47 = $1;
    $48 = (($47) + 60|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) - 256)|0;
    $51 = HEAP16[34272>>1]|0;
    $52 = $51 << 16 >> 16;
    $53 = (Math_abs(($52|0))|0);
    $54 = $53 >> 1;
    $55 = (($50) + ($54))|0;
    $newAngle = $55;
    $56 = $newAngle;
    $57 = (_rand()|0);
    $58 = HEAP16[34272>>1]|0;
    $59 = $58 << 16 >> 16;
    $60 = (($57|0) % ($59|0))&-1;
    $61 = (($56) - ($60))|0;
    $62 = $61 & 1023;
    $63 = $62&65535;
    HEAP16[34272>>1] = $63;
   }
   $64 = $1;
   $65 = (($64) + 60|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP16[34272>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = $1;
   $70 = (($69) + 64|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (($72) + 212|0);
   _moveActor($66,$68,$71,$73);
   $74 = HEAP16[34272>>1]|0;
   $75 = HEAP32[362312>>2]|0;
   $76 = (($75) + 4|0);
   HEAP16[$76>>1] = $74;
  }
 }
 $77 = $1;
 $78 = (($77) + 60|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP16[34272>>1]|0;
 $81 = $80 << 16 >> 16;
 $82 = ($79|0)!=($81|0);
 if ($82) {
  HEAP32[365160>>2] = 0;
  $83 = $1;
  $84 = (($83) + 120|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) - 5)|0;
  HEAP32[$84>>2] = $86;
 } else {
  $87 = $1;
  _clearRealAngle($87);
  $88 = HEAP32[362312>>2]|0;
  $89 = (($88) + 4|0);
  HEAP16[$89>>1] = -1;
 }
 STACKTOP = sp;return 0;
}
function _processMoveScript($actorIdx) {
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $actor = 0, $scriptOpcode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $actorIdx;
 HEAP32[365160>>2] = 1;
 $1 = $0;
 $2 = (136 + (($1*232)|0)|0);
 $actor = $2;
 $3 = $actor;
 $4 = (($3) + 212|0);
 HEAP32[365176>>2] = $4;
 while(1) {
  $5 = $actor;
  $6 = (($5) + 120|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[365168>>2] = $7;
  $8 = $actor;
  $9 = (($8) + 124|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[365168>>2]|0;
  $12 = (($10) + ($11)|0);
  HEAP32[362312>>2] = $12;
  $13 = HEAP32[362312>>2]|0;
  $14 = (($13) + 1|0);
  HEAP32[362312>>2] = $14;
  $15 = HEAP8[$13>>0]|0;
  $16 = $15&255;
  $scriptOpcode = $16;
  $17 = $actor;
  $18 = (($17) + 120|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$18>>2] = $20;
  $21 = $scriptOpcode;
  $22 = (365184 + ($21<<3)|0);
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  $26 = $actor;
  (FUNCTION_TABLE_iii[$24 & 255]($25,$26)|0);
  $27 = HEAP32[365160>>2]|0;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sdlClose() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stopTrackMusic();
 _stopMidiMusic();
 _Mix_CloseAudio();
 _SDL_Quit();
 _exit(0);
 // unreachable;
}
function _sdlInitialize() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bmask = 0, $freq = 0, $gmask = 0, $i = 0, $keyboard = 0, $rmask = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $size = sp + 60|0;
 $rmask = 255;
 $gmask = 65280;
 $bmask = 16711680;
 (_printf((365920|0),($vararg_buffer|0))|0);
 $0 = (_SDL_Init(65535)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $2 = HEAP32[_stderr>>2]|0;
  $3 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer1>>2] = $3;
  (_fprintf(($2|0),(365968|0),($vararg_buffer1|0))|0);
  _exit(1);
  // unreachable;
 }
 (_printf((366000|0),($vararg_buffer3|0))|0);
 $4 = HEAP32[((308424 + 84|0))>>2]|0;
 $5 = ($4|0)>(1);
 if ($5) {
  $freq = 44100;
 } else {
  $freq = 11025;
 }
 $6 = $freq;
 $7 = (_Mix_OpenAudio(($6|0),-32752,2,256)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer5>>2] = $9;
  (_printf((366048|0),($vararg_buffer5|0))|0);
  _exit(1);
  // unreachable;
 }
 (_Mix_AllocateChannels(32)|0);
 _SDL_WM_SetCaption((366072|0),(366112|0));
 _SDL_PumpEvents();
 $10 = (_SDL_GetKeyboardState(($size|0))|0);
 $keyboard = $10;
 $11 = $keyboard;
 $12 = (($11) + 13|0);
 HEAP8[$12>>0] = 0;
 $13 = (_SDL_SetVideoMode(640,480,32,0)|0);
 HEAP32[365904>>2] = $13;
 $14 = HEAP32[365904>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[_stderr>>2]|0;
  $17 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer8>>2] = $17;
  (_fprintf(($16|0),(366120|0),($vararg_buffer8|0))|0);
  _exit(1);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(16);
  if (!($19)) {
   break;
  }
  $20 = $rmask;
  $21 = $gmask;
  $22 = $bmask;
  $23 = (_SDL_CreateRGBSurface(0,640,480,32,($20|0),($21|0),($22|0),0)|0);
  $24 = $i;
  $25 = (366160 + ($24<<2)|0);
  HEAP32[$25>>2] = $23;
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 (_atexit((139|0))|0);
 STACKTOP = sp;return 0;
}
function _fpsCycles($fps) {
 $fps = $fps|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fps;
 $1 = $0;
 $2 = (1000 / ($1|0))&-1;
 _SDL_Delay(($2|0));
 STACKTOP = sp;return;
}
function _sdldelay($time) {
 $time = $time|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $time;
 $1 = $0;
 _SDL_Delay(($1|0));
 STACKTOP = sp;return;
}
function _delaySkip($time) {
 $time = $time|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $startTicks = 0, $stopTicks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $time;
 $1 = (_SDL_GetTicks()|0);
 $startTicks = $1;
 $stopTicks = 0;
 HEAP16[120304>>1] = 0;
 while(1) {
  _readKeys();
  $2 = HEAP16[120304>>1]|0;
  $3 = $2 << 16 >> 16;
  $4 = ($3|0)==(1);
  if ($4) {
   break;
  }
  $5 = (_SDL_GetTicks()|0);
  $6 = $startTicks;
  $7 = (($5) - ($6))|0;
  $stopTicks = $7;
  _SDL_Delay(1);
  $8 = $stopTicks;
  $9 = $0;
  $10 = ($8>>>0)<=($9>>>0);
  if (!($10)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _setPalette($palette) {
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $screenColorsTemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $palette;
 $1 = $0;
 $screenColorsTemp = $1;
 $2 = HEAP32[365912>>2]|0;
 $3 = $screenColorsTemp;
 (_SDL_SetColors(($2|0),($3|0),0,256)|0);
 $4 = HEAP32[365912>>2]|0;
 $5 = HEAP32[365904>>2]|0;
 (_SDL_UpperBlit(($4|0),(0|0),($5|0),(0|0))|0);
 $6 = HEAP32[365904>>2]|0;
 _SDL_UpdateRect(($6|0),0,0,0,0);
 STACKTOP = sp;return;
}
function _flip() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[365912>>2]|0;
 $1 = HEAP32[365904>>2]|0;
 (_SDL_UpperBlit(($0|0),(0|0),($1|0),(0|0))|0);
 $2 = HEAP32[365904>>2]|0;
 _SDL_UpdateRect(($2|0),0,0,0,0);
 STACKTOP = sp;return;
}
function _copyBlockPhys($left,$top,$right,$bottom) {
 $left = $left|0;
 $top = $top|0;
 $right = $right|0;
 $bottom = $bottom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rectangle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rectangle = sp + 16|0;
 $0 = $left;
 $1 = $top;
 $2 = $right;
 $3 = $bottom;
 $4 = $0;
 HEAP32[$rectangle>>2] = $4;
 $5 = $1;
 $6 = (($rectangle) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = (($9) + 1)|0;
 $11 = (($rectangle) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = $3;
 $13 = $1;
 $14 = (($12) - ($13))|0;
 $15 = (($14) + 1)|0;
 $16 = (($rectangle) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[365912>>2]|0;
 $18 = HEAP32[365904>>2]|0;
 (_SDL_UpperBlit(($17|0),($rectangle|0),($18|0),($rectangle|0))|0);
 $19 = HEAP32[365904>>2]|0;
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = $0;
 $24 = (($22) - ($23))|0;
 $25 = (($24) + 1)|0;
 $26 = $3;
 $27 = $1;
 $28 = (($26) - ($27))|0;
 $29 = (($28) + 1)|0;
 _SDL_UpdateRect(($19|0),($20|0),($21|0),($25|0),($29|0));
 STACKTOP = sp;return;
}
function _initScreenBuffer($buffer,$width,$height) {
 $buffer = $buffer|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $width;
 $2 = $height;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_SDL_CreateRGBSurfaceFrom(($3|0),($4|0),($5|0),8,640,0,0,0,0)|0);
 HEAP32[365912>>2] = $6;
 STACKTOP = sp;return;
}
function _crossFade($buffer,$palette) {
 $buffer = $buffer|0;
 $palette = $palette|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $backupSurface = 0, $bmask = 0, $gmask = 0, $i = 0, $newSurface = 0, $rmask = 0, $tempSurface = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $palette;
 $rmask = 255;
 $gmask = 65280;
 $bmask = 16711680;
 $2 = $rmask;
 $3 = $gmask;
 $4 = $bmask;
 $5 = (_SDL_CreateRGBSurface(0,640,480,32,($2|0),($3|0),($4|0),0)|0);
 $backupSurface = $5;
 $6 = $rmask;
 $7 = $gmask;
 $8 = $bmask;
 $9 = (_SDL_CreateRGBSurface(65536,640,480,32,($6|0),($7|0),($8|0),0)|0);
 $newSurface = $9;
 $10 = $0;
 $11 = (_SDL_CreateRGBSurfaceFrom(($10|0),640,480,8,640,0,0,0,0)|0);
 $tempSurface = $11;
 $12 = $tempSurface;
 $13 = $1;
 (_SDL_SetColors(($12|0),($13|0),0,256)|0);
 $14 = HEAP32[365904>>2]|0;
 $15 = $backupSurface;
 (_SDL_UpperBlit(($14|0),(0|0),($15|0),(0|0))|0);
 $16 = $tempSurface;
 $17 = $newSurface;
 (_SDL_UpperBlit(($16|0),(0|0),($17|0),(0|0))|0);
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(8);
  if (!($19)) {
   break;
  }
  $20 = $backupSurface;
  $21 = $i;
  $22 = (366160 + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  (_SDL_UpperBlit(($20|0),(0|0),($23|0),(0|0))|0);
  $24 = $newSurface;
  $25 = $i;
  $26 = $25<<5;
  $27 = $26&255;
  (_SDL_SetAlpha(($24|0),65538,($27|0))|0);
  $28 = $newSurface;
  $29 = $i;
  $30 = (366160 + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  (_SDL_UpperBlit(($28|0),(0|0),($31|0),(0|0))|0);
  $32 = $i;
  $33 = (366160 + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[365904>>2]|0;
  (_SDL_UpperBlit(($34|0),(0|0),($35|0),(0|0))|0);
  $36 = HEAP32[365904>>2]|0;
  _SDL_UpdateRect(($36|0),0,0,0,0);
  _delaySkip(50);
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 $39 = $newSurface;
 $40 = HEAP32[365904>>2]|0;
 (_SDL_UpperBlit(($39|0),(0|0),($40|0),(0|0))|0);
 $41 = HEAP32[365904>>2]|0;
 _SDL_UpdateRect(($41|0),0,0,0,0);
 $42 = $backupSurface;
 _SDL_FreeSurface(($42|0));
 $43 = $newSurface;
 _SDL_FreeSurface(($43|0));
 $44 = $tempSurface;
 _SDL_FreeSurface(($44|0));
 STACKTOP = sp;return;
}
function _toggleFullscreen() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((308424 + 76|0))>>2]|0;
 $1 = (1 - ($0))|0;
 HEAP32[((308424 + 76|0))>>2] = $1;
 $2 = HEAP32[365904>>2]|0;
 _SDL_FreeSurface(($2|0));
 HEAP16[47424>>1] = 1;
 $3 = HEAP32[((308424 + 76|0))>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = (_SDL_SetVideoMode(640,480,32,0)|0);
  HEAP32[365904>>2] = $5;
  $6 = HEAP32[25944>>2]|0;
  $7 = HEAP32[25952>>2]|0;
  _copyScreen($6,$7);
  (_SDL_ShowCursor(1)|0);
  STACKTOP = sp;return;
 } else {
  $8 = (_SDL_SetVideoMode(640,480,32,8388608)|0);
  HEAP32[365904>>2] = $8;
  $9 = HEAP32[25944>>2]|0;
  $10 = HEAP32[25952>>2]|0;
  _copyScreen($9,$10);
  (_SDL_ShowCursor(0)|0);
  STACKTOP = sp;return;
 }
}
function _readKeys() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $event = 0, $find = 0, $found = 0, $i = 0, $j = 0;
 var $keyboard = 0, $localKey = 0, $size = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $event = sp;
 $size = sp + 56|0;
 $find = 0;
 $found = 0;
 $localKey = 0;
 HEAP16[122408>>1] = 0;
 HEAP16[120304>>1] = 0;
 _SDL_PumpEvents();
 $0 = (_SDL_GetKeyboardState(($size|0))|0);
 $keyboard = $0;
 while(1) {
  $1 = (_SDL_PollEvent(($event|0))|0);
  $2 = ($1|0)!=(0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$event>>2]|0;
  if ((($3|0) == 768)) {
   $7 = (($event) + 12|0);
   $8 = (($7) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   do {
    switch ($9|0) {
    case 1112: case 13:  {
     $localKey = 28;
     break;
    }
    case 1099:  {
     $localKey = 73;
     break;
    }
    case 1082:  {
     $localKey = 59;
     break;
    }
    case 1252: case 1248:  {
     $localKey = 29;
     break;
    }
    case 104:  {
     $localKey = 35;
     break;
    }
    case 106:  {
     $localKey = 36;
     break;
    }
    case 112:  {
     $localKey = 25;
     break;
    }
    case 1083:  {
     $localKey = 60;
     break;
    }
    case 1087:  {
     $localKey = 64;
     break;
    }
    case 1093:  {
     _toggleFullscreen();
     break;
    }
    case 1253: case 1249:  {
     $localKey = 54;
     break;
    }
    case 1085:  {
     $localKey = 62;
     break;
    }
    case 1254: case 1250:  {
     $localKey = 56;
     break;
    }
    case 119:  {
     $localKey = 17;
     break;
    }
    case 1084:  {
     $localKey = 61;
     break;
    }
    case 32:  {
     $localKey = 57;
     break;
    }
    case 27:  {
     $localKey = 1;
     break;
    }
    default: {
    }
    }
   } while(0);
  } else if ((($3|0) == 1025)) {
   $4 = (($event) + 16|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5&255;
   if ((($6|0) == 3)) {
    HEAP16[25936>>1] = 1;
   } else if ((($6|0) == 1)) {
    HEAP16[25928>>1] = 1;
   }
  } else if ((($3|0) == 769)) {
   HEAP16[122416>>1] = 0;
  } else if ((($3|0) == 256)) {
   _sdlClose();
  }
 }
 $j = 0;
 while(1) {
  $10 = $j;
  $11 = HEAP32[$size>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $j;
  $14 = $keyboard;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)!=(0);
  if ($17) {
   $18 = $j;
   do {
    switch ($18|0) {
    case 1254: case 1250:  {
     $localKey = 56;
     break;
    }
    case 1085:  {
     $localKey = 62;
     break;
    }
    case 1082:  {
     $localKey = 59;
     break;
    }
    case 1084:  {
     $localKey = 61;
     break;
    }
    case 1083:  {
     $localKey = 60;
     break;
    }
    case 1116: case 1104:  {
     $localKey = 75;
     break;
    }
    case 1118: case 1103:  {
     $localKey = 77;
     break;
    }
    case 1252: case 1248:  {
     $localKey = 29;
     break;
    }
    case 1112: case 13:  {
     $localKey = 28;
     break;
    }
    case 32:  {
     $localKey = 57;
     break;
    }
    case 1120: case 1106:  {
     $localKey = 72;
     break;
    }
    case 1114: case 1105:  {
     $localKey = 80;
     break;
    }
    default: {
    }
    }
   } while(0);
  }
  $i = 0;
  while(1) {
   $19 = $i;
   $20 = ($19|0)<(28);
   if (!($20)) {
    break;
   }
   $21 = $i;
   $22 = (307216 + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $localKey;
   $26 = ($24|0)==($25|0);
   if ($26) {
    label = 51;
    break;
   }
   $28 = $i;
   $29 = (($28) + 1)|0;
   $i = $29;
  }
  if ((label|0) == 51) {
   label = 0;
   $27 = $i;
   $find = $27;
   $found = 1;
  }
  $30 = $found;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $find;
   $34 = (307248 + ($33<<1)|0);
   $35 = HEAP16[$34>>1]|0;
   $temp = $35;
   $36 = $temp;
   $37 = $36 << 16 >> 16;
   $38 = $37 & 255;
   $39 = $38&255;
   $temp2 = $39;
   $40 = $temp2;
   $41 = $40&255;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = $localKey;
    $44 = $43 & 128;
    $45 = ($44|0)!=(0);
    if ($45) {
     $54 = $temp;
     $55 = $54 << 16 >> 16;
     $56 = $55 & 65280;
     $57 = $56 >> 8;
     $58 = (0 - ($57))|0;
     $59 = HEAP16[122416>>1]|0;
     $60 = $59 << 16 >> 16;
     $61 = $60 & $58;
     $62 = $61&65535;
     HEAP16[122416>>1] = $62;
    } else {
     $46 = $temp;
     $47 = $46 << 16 >> 16;
     $48 = $47 & 65280;
     $49 = $48 >> 8;
     $50 = HEAP16[122416>>1]|0;
     $51 = $50 << 16 >> 16;
     $52 = $51 | $49;
     $53 = $52&65535;
     HEAP16[122416>>1] = $53;
    }
   } else {
    $63 = $temp;
    $64 = $63 << 16 >> 16;
    $65 = $64 & 65280;
    $66 = $65 >> 8;
    $67 = HEAP16[122408>>1]|0;
    $68 = $67 << 16 >> 16;
    $69 = $68 | $66;
    $70 = $69&65535;
    HEAP16[122408>>1] = $70;
   }
  }
  $71 = $localKey;
  $72 = $71&65535;
  HEAP16[120304>>1] = $72;
  $73 = $j;
  $74 = (($73) + 1)|0;
  $j = $74;
 }
 STACKTOP = sp;return;
}
function _sampleVolume($channel,$volume) {
 $channel = $channel|0;
 $volume = $volume|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $channel;
 $1 = $volume;
 $2 = $0;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 (_Mix_Volume(($2|0),($4|0))|0);
 STACKTOP = sp;return;
}
function _playFlaSample($index,$frequency,$repeat,$x,$y) {
 $index = $index|0;
 $frequency = $frequency|0;
 $repeat = $repeat|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rw = 0, $sampPtr = 0, $sampSize = 0, $sampfile = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sampfile = sp + 48|0;
 $sampPtr = sp + 24|0;
 $0 = $index;
 $1 = $frequency;
 $2 = $repeat;
 $3 = $x;
 $4 = $y;
 $5 = HEAP32[((308424 + 84|0))>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $sampSize = 0;
 $7 = HEAP32[362000>>2]|0;
 HEAP32[$vararg_buffer>>2] = $7;
 (_sprintf($sampfile,366232,$vararg_buffer)|0);
 $8 = $0;
 $9 = (_hqrGetallocEntry($sampPtr,$sampfile,$8)|0);
 $sampSize = $9;
 $10 = HEAP32[$sampPtr>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)!=(67);
 if ($13) {
  $14 = HEAP32[$sampPtr>>2]|0;
  HEAP8[$14>>0] = 67;
 }
 $15 = HEAP32[$sampPtr>>2]|0;
 $16 = $sampSize;
 $17 = (_SDL_RWFromMem(($15|0),($16|0))|0);
 $rw = $17;
 $18 = $rw;
 $19 = (_Mix_LoadWAV_RW(($18|0),1)|0);
 HEAP32[366240>>2] = $19;
 $20 = (_getFreeSampleChannelIndex()|0);
 HEAP32[366224>>2] = $20;
 $21 = HEAP32[366224>>2]|0;
 $22 = ($21|0)!=(-1);
 if ($22) {
  $23 = $0;
  $24 = HEAP32[366224>>2]|0;
  $25 = (44424 + ($24<<2)|0);
  HEAP32[$25>>2] = $23;
 }
 $26 = HEAP32[366224>>2]|0;
 $27 = HEAP32[((308424 + 48|0))>>2]|0;
 _sampleVolume($26,$27);
 $28 = HEAP32[366224>>2]|0;
 $29 = HEAP32[366240>>2]|0;
 $30 = $2;
 $31 = (($30) - 1)|0;
 $32 = (_Mix_PlayChannelTimed(($28|0),($29|0),($31|0),-1)|0);
 $33 = ($32|0)==(-1);
 if ($33) {
  $34 = $0;
  HEAP32[$vararg_buffer1>>2] = $34;
  (_printf((366248|0),($vararg_buffer1|0))|0);
 }
 $35 = HEAP32[$sampPtr>>2]|0;
 _free($35);
 STACKTOP = sp;return;
}
function _setSamplePosition($channelIdx,$x,$y,$z) {
 $channelIdx = $channelIdx|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $distance = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $channelIdx;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = HEAP32[39400>>2]|0;
 $5 = $4 << 9;
 $6 = HEAP32[39408>>2]|0;
 $7 = $6 << 8;
 $8 = HEAP32[39416>>2]|0;
 $9 = $8 << 9;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = (_getDistance3D($5,$7,$9,$10,$11,$12)|0);
 $14 = (Math_abs(($13|0))|0);
 $distance = $14;
 $15 = $distance;
 $16 = (_getAverageValue(0,$15,10000,255)|0);
 $distance = $16;
 $17 = $distance;
 $18 = ($17|0)>(255);
 if (!($18)) {
  $19 = $0;
  $20 = $distance;
  $21 = $20&255;
  (_Mix_SetDistance(($19|0),($21|0))|0);
  STACKTOP = sp;return;
 }
 $distance = 255;
 $19 = $0;
 $20 = $distance;
 $21 = $20&255;
 (_Mix_SetDistance(($19|0),($21|0))|0);
 STACKTOP = sp;return;
}
function _playSample($index,$frequency,$repeat,$x,$y,$z,$actorIdx) {
 $index = $index|0;
 $frequency = $frequency|0;
 $repeat = $repeat|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $actorIdx = $actorIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rw = 0, $sampPtr = 0, $sampSize = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sampPtr = sp + 20|0;
 $0 = $index;
 $1 = $frequency;
 $2 = $repeat;
 $3 = $x;
 $4 = $y;
 $5 = $z;
 $6 = $actorIdx;
 $7 = HEAP32[((308424 + 84|0))>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $sampSize = 0;
 $9 = HEAP32[362080>>2]|0;
 $10 = $0;
 $11 = (_hqrGetallocEntry($sampPtr,$9,$10)|0);
 $sampSize = $11;
 $12 = HEAP32[$sampPtr>>2]|0;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)!=(67);
 if ($15) {
  $16 = HEAP32[$sampPtr>>2]|0;
  HEAP8[$16>>0] = 67;
 }
 $17 = HEAP32[$sampPtr>>2]|0;
 $18 = $sampSize;
 $19 = (_SDL_RWFromMem(($17|0),($18|0))|0);
 $rw = $19;
 $20 = $rw;
 $21 = (_Mix_LoadWAV_RW(($20|0),1)|0);
 HEAP32[366240>>2] = $21;
 $22 = (_getFreeSampleChannelIndex()|0);
 HEAP32[366224>>2] = $22;
 $23 = HEAP32[366224>>2]|0;
 $24 = ($23|0)!=(-1);
 if ($24) {
  $25 = $0;
  $26 = HEAP32[366224>>2]|0;
  $27 = (44424 + ($26<<2)|0);
  HEAP32[$27>>2] = $25;
  $28 = HEAP32[366224>>2]|0;
  $29 = HEAP32[((308424 + 48|0))>>2]|0;
  _sampleVolume($28,$29);
  $30 = $6;
  $31 = ($30|0)!=(-1);
  if ($31) {
   $32 = HEAP32[366224>>2]|0;
   $33 = $3;
   $34 = $4;
   $35 = $5;
   _setSamplePosition($32,$33,$34,$35);
   $36 = $6;
   $37 = HEAP32[366224>>2]|0;
   $38 = (44552 + ($37<<2)|0);
   HEAP32[$38>>2] = $36;
  }
  $39 = HEAP32[366224>>2]|0;
  $40 = HEAP32[366240>>2]|0;
  $41 = $2;
  $42 = (($41) - 1)|0;
  $43 = (_Mix_PlayChannelTimed(($39|0),($40|0),($42|0),-1)|0);
  $44 = ($43|0)==(-1);
  if ($44) {
   $45 = $0;
   HEAP32[$vararg_buffer>>2] = $45;
   (_printf((366248|0),($vararg_buffer|0))|0);
  }
 }
 $46 = HEAP32[$sampPtr>>2]|0;
 _free($46);
 STACKTOP = sp;return;
}
function _resumeSamples() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((308424 + 84|0))>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  _Mix_Resume(-1);
 }
 STACKTOP = sp;return;
}
function _pauseSamples() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((308424 + 84|0))>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  (_Mix_HaltChannel(-1)|0);
 }
 STACKTOP = sp;return;
}
function _stopSamples() {
 var $0 = 0, $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[((308424 + 84|0))>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 dest=44424+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=4294967295|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 (_Mix_HaltChannel(-1)|0);
 $2 = HEAP32[366240>>2]|0;
 _Mix_FreeChunk(($2|0));
 HEAP32[366240>>2] = 0;
 STACKTOP = sp;return;
}
function _getActorChannel($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $index;
 $c = 0;
 $c = 0;
 while(1) {
  $2 = $c;
  $3 = ($2|0)<(32);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = $c;
  $5 = (44552 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ($6|0)==($7|0);
  if ($8) {
   label = 4;
   break;
  }
  $10 = $c;
  $11 = (($10) + 1)|0;
  $c = $11;
 }
 if ((label|0) == 4) {
  $9 = $c;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _getSampleChannel($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $index;
 $c = 0;
 $c = 0;
 while(1) {
  $2 = $c;
  $3 = ($2|0)<(32);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = $c;
  $5 = (44424 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ($6|0)==($7|0);
  if ($8) {
   label = 4;
   break;
  }
  $10 = $c;
  $11 = (($10) + 1)|0;
  $c = $11;
 }
 if ((label|0) == 4) {
  $9 = $c;
  $0 = $9;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _removeSampleChannel($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = (44424 + ($1<<2)|0);
 HEAP32[$2>>2] = -1;
 $3 = $0;
 $4 = (44552 + ($3<<2)|0);
 HEAP32[$4>>2] = -1;
 STACKTOP = sp;return;
}
function _stopSample($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $stopChannel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = HEAP32[((308424 + 84|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (_getSampleChannel($3)|0);
 $stopChannel = $4;
 $5 = $stopChannel;
 $6 = ($5|0)!=(-1);
 if ($6) {
  $7 = $stopChannel;
  _removeSampleChannel($7);
  $8 = $stopChannel;
  (_Mix_HaltChannel(($8|0))|0);
  $9 = HEAP32[366240>>2]|0;
  _Mix_FreeChunk(($9|0));
  HEAP32[366240>>2] = 0;
 }
 STACKTOP = sp;return;
}
function _isChannelPlaying($channel) {
 $channel = $channel|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $channel;
 $2 = $1;
 $3 = ($2|0)!=(-1);
 do {
  if ($3) {
   $4 = $1;
   $5 = (_Mix_Playing(($4|0))|0);
   $6 = ($5|0)!=(0);
   if ($6) {
    $0 = 1;
    $8 = $0;
    STACKTOP = sp;return ($8|0);
   } else {
    $7 = $1;
    _removeSampleChannel($7);
    break;
   }
  }
 } while(0);
 $0 = 0;
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _isSamplePlaying($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $channel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $0;
 $2 = (_getSampleChannel($1)|0);
 $channel = $2;
 $3 = $channel;
 $4 = (_isChannelPlaying($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _getFreeSampleChannelIndex() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(32);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (44424 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(-1);
  if ($6) {
   label = 4;
   break;
  }
  $8 = $i;
  $9 = (($8) + 1)|0;
  $i = $9;
 }
 if ((label|0) == 4) {
  $7 = $i;
  $0 = $7;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(32);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = (44424 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(-1);
  if ($15) {
   $16 = $i;
   (_isChannelPlaying($16)|0);
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $0 = -1;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _playVoxSample($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rw = 0, $sampPtr = 0, $sampSize = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sampPtr = sp + 12|0;
 $0 = $index;
 $1 = HEAP32[((308424 + 84|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $sampSize = 0;
 HEAP32[$sampPtr>>2] = 0;
 $3 = $0;
 $4 = HEAP32[123144>>2]|0;
 $5 = (_hqrGetallocVoxEntry($sampPtr,124120,$3,$4)|0);
 $sampSize = $5;
 $6 = HEAP32[$sampPtr>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)!=(67);
 if ($9) {
  $10 = HEAP32[$sampPtr>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  HEAP32[123136>>2] = $12;
  $13 = HEAP32[123144>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[123144>>2] = $14;
  $15 = HEAP32[$sampPtr>>2]|0;
  HEAP8[$15>>0] = 67;
 }
 $16 = HEAP32[$sampPtr>>2]|0;
 $17 = $sampSize;
 $18 = (_SDL_RWFromMem(($16|0),($17|0))|0);
 $rw = $18;
 $19 = $rw;
 $20 = (_Mix_LoadWAV_RW(($19|0),1)|0);
 HEAP32[366240>>2] = $20;
 $21 = (_getFreeSampleChannelIndex()|0);
 HEAP32[366224>>2] = $21;
 $22 = HEAP32[366224>>2]|0;
 $23 = ($22|0)!=(-1);
 if ($23) {
  $24 = $0;
  $25 = HEAP32[366224>>2]|0;
  $26 = (44424 + ($25<<2)|0);
  HEAP32[$26>>2] = $24;
  $27 = HEAP32[366224>>2]|0;
  $28 = HEAP32[((308424 + 52|0))>>2]|0;
  $29 = (($28) - 1)|0;
  _sampleVolume($27,$29);
  $30 = HEAP32[366224>>2]|0;
  $31 = HEAP32[366240>>2]|0;
  $32 = (_Mix_PlayChannelTimed(($30|0),($31|0),0,-1)|0);
  $33 = ($32|0)==(-1);
  if ($33) {
   $34 = $0;
   HEAP32[$vararg_buffer>>2] = $34;
   (_printf((366248|0),($vararg_buffer|0))|0);
  }
 }
 $35 = HEAP32[$sampPtr>>2]|0;
 _free($35);
 STACKTOP = sp;return;
}
function _convert_to_midi($data,$size,$dest) {
 $data = $data|0;
 $size = $size|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $len = 0, $start = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp + 16|0;
 $1 = $data;
 $2 = $size;
 $3 = $dest;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $6 = $1;
 $7 = $2;
 $8 = (_convert_to_mtrk($6,$7,0)|0);
 $len = $8;
 $9 = $len;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $11 = $len;
 $12 = (($11) + 14)|0;
 $13 = (_malloc($12)|0);
 HEAP32[$d>>2] = $13;
 $14 = HEAP32[$d>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  _perror((366288|0));
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $16 = HEAP32[$d>>2]|0;
 $start = $16;
 $17 = HEAP32[$d>>2]|0;
 $18 = (($17) + 1|0);
 HEAP32[$d>>2] = $18;
 HEAP8[$17>>0] = 77;
 $19 = HEAP32[$d>>2]|0;
 $20 = (($19) + 1|0);
 HEAP32[$d>>2] = $20;
 HEAP8[$19>>0] = 84;
 $21 = HEAP32[$d>>2]|0;
 $22 = (($21) + 1|0);
 HEAP32[$d>>2] = $22;
 HEAP8[$21>>0] = 104;
 $23 = HEAP32[$d>>2]|0;
 $24 = (($23) + 1|0);
 HEAP32[$d>>2] = $24;
 HEAP8[$23>>0] = 100;
 _write4high($d,6);
 _write2high($d,0);
 _write2high($d,1);
 _write2high($d,60);
 $25 = $1;
 $26 = $2;
 $27 = HEAP32[$d>>2]|0;
 $28 = (_convert_to_mtrk($25,$26,$27)|0);
 $len = $28;
 $29 = $len;
 $30 = ($29|0)!=(0);
 if ($30) {
  $32 = $start;
  $33 = $3;
  HEAP32[$33>>2] = $32;
  $34 = $len;
  $35 = (($34) + 14)|0;
  $0 = $35;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $31 = HEAP32[$d>>2]|0;
  _free($31);
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _convert_to_mtrk($data,$size,$dest) {
 $data = $data|0;
 $size = $size|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cached_info = 0, $data_end = 0, $i = 0, $info = 0, $lasttime = 0, $rc = 0;
 var $size_pos = 0, $time = 0, $xmidi_info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size_pos = sp + 512|0;
 $xmidi_info = sp + 24|0;
 $info = sp;
 $1 = $data;
 $2 = $size;
 $3 = $dest;
 $time = 0;
 $lasttime = 0;
 $i = 8;
 HEAP32[$size_pos>>2] = 0;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + ($5)|0);
 $data_end = $6;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $3;
  $10 = (($9) + 1|0);
  $3 = $10;
  HEAP8[$9>>0] = 77;
  $11 = $3;
  $12 = (($11) + 1|0);
  $3 = $12;
  HEAP8[$11>>0] = 84;
  $13 = $3;
  $14 = (($13) + 1|0);
  $3 = $14;
  HEAP8[$13>>0] = 114;
  $15 = $3;
  $16 = (($15) + 1|0);
  $3 = $16;
  HEAP8[$15>>0] = 107;
  $17 = $3;
  HEAP32[$size_pos>>2] = $17;
  $18 = $3;
  $19 = (($18) + 4|0);
  $3 = $19;
 }
 $20 = $1;
 $21 = $2;
 $22 = (_read_XMIDI_header($20,$21,$xmidi_info)|0);
 $rc = $22;
 $23 = $rc;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $0 = 0;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 $25 = (($xmidi_info) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $1 = $26;
 L8: while(1) {
  $27 = $1;
  $28 = $data_end;
  $29 = ($27>>>0)<($28>>>0);
  if (!($29)) {
   label = 27;
   break;
  }
  $30 = $1;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(255);
  if ($33) {
   $34 = $1;
   $35 = (($34) + 1|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = ($37|0)==(47);
   if ($38) {
    continue;
   }
  }
  $39 = $1;
  $40 = $time;
  $41 = (_read_event_info($39,$info,$40)|0);
  $rc = $41;
  $42 = $rc;
  $43 = ($42|0)!=(0);
  if (!($43)) {
   label = 11;
   break;
  }
  $44 = $rc;
  $45 = $1;
  $46 = (($45) + ($44)|0);
  $1 = $46;
  $47 = $time;
  $48 = (($info) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_pop_cached_event($47,$49)|0);
  $cached_info = $50;
  while(1) {
   $51 = $cached_info;
   $52 = ($51|0)!=(0|0);
   if (!($52)) {
    break;
   }
   $53 = $3;
   $54 = $cached_info;
   $55 = (_put_event($53,$54)|0);
   $rc = $55;
   $56 = $rc;
   $57 = ($56|0)!=(0);
   if (!($57)) {
    label = 15;
    break L8;
   }
   $58 = $3;
   $59 = ($58|0)!=(0|0);
   if ($59) {
    $60 = $rc;
    $61 = $3;
    $62 = (($61) + ($60)|0);
    $3 = $62;
   }
   $63 = $rc;
   $64 = $i;
   $65 = (($64) + ($63))|0;
   $i = $65;
   $66 = $cached_info;
   $67 = (($66) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $time;
   $70 = (($69) + ($68))|0;
   $time = $70;
   $71 = $cached_info;
   $72 = (($71) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($info) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) - ($73))|0;
   HEAP32[$74>>2] = $76;
   $77 = $cached_info;
   _free($77);
   $78 = $time;
   $79 = (($info) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (_pop_cached_event($78,$80)|0);
   $cached_info = $81;
  }
  $82 = $3;
  $83 = (_put_event($82,$info)|0);
  $rc = $83;
  $84 = $rc;
  $85 = ($84|0)!=(0);
  if (!($85)) {
   label = 20;
   break;
  }
  $86 = $3;
  $87 = ($86|0)!=(0|0);
  if ($87) {
   $88 = $rc;
   $89 = $3;
   $90 = (($89) + ($88)|0);
   $3 = $90;
  }
  $91 = $rc;
  $92 = $i;
  $93 = (($92) + ($91))|0;
  $i = $93;
  $94 = (($info) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $time;
  $97 = (($96) + ($95))|0;
  $time = $97;
  $98 = (($info) + 8|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = ($100|0)==(255);
  if ($101) {
   $102 = (($info) + 12|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($104|0)==(47);
   if ($105) {
    $106 = $data_end;
    $1 = $106;
   }
  }
 }
 if ((label|0) == 11) {
  $0 = 0;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 27) {
  $107 = $lasttime;
  $108 = $time;
  $109 = ($107|0)>($108|0);
  if ($109) {
   $110 = $3;
   $111 = $lasttime;
   $112 = $time;
   $113 = (($111) - ($112))|0;
   $114 = (_putVLQ($110,$113)|0);
   $rc = $114;
   $115 = $3;
   $116 = ($115|0)!=(0|0);
   if ($116) {
    $117 = $rc;
    $118 = $3;
    $119 = (($118) + ($117)|0);
    $3 = $119;
   }
   $120 = $rc;
   $121 = $i;
   $122 = (($121) + ($120))|0;
   $i = $122;
  } else {
   $123 = $3;
   $124 = (_putVLQ($123,0)|0);
   $rc = $124;
   $125 = $3;
   $126 = ($125|0)!=(0|0);
   if ($126) {
    $127 = $rc;
    $128 = $3;
    $129 = (($128) + ($127)|0);
    $3 = $129;
   }
   $130 = $rc;
   $131 = $i;
   $132 = (($131) + ($130))|0;
   $i = $132;
  }
  $133 = $3;
  $134 = ($133|0)!=(0|0);
  if ($134) {
   $135 = $3;
   $136 = (($135) + 1|0);
   $3 = $136;
   HEAP8[$135>>0] = -1;
   $137 = $3;
   $138 = (($137) + 1|0);
   $3 = $138;
   HEAP8[$137>>0] = 47;
  }
  $139 = $3;
  $140 = (_putVLQ($139,0)|0);
  $rc = $140;
  $141 = $rc;
  $142 = (2 + ($141))|0;
  $143 = $i;
  $144 = (($143) + ($142))|0;
  $i = $144;
  $145 = $3;
  $146 = ($145|0)!=(0|0);
  if ($146) {
   $147 = $rc;
   $148 = $3;
   $149 = (($148) + ($147)|0);
   $3 = $149;
   $150 = $i;
   $151 = (($150) - 8)|0;
   _write4high($size_pos,$151);
  }
  $152 = $i;
  $0 = $152;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 return (0)|0;
}
function _write4high($data,$val) {
 $data = $data|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $val;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $d = $3;
 $4 = $1;
 $5 = $4 >>> 24;
 $6 = $5 & 255;
 $7 = $6&255;
 $8 = $d;
 $9 = (($8) + 1|0);
 $d = $9;
 HEAP8[$8>>0] = $7;
 $10 = $1;
 $11 = $10 >>> 16;
 $12 = $11 & 255;
 $13 = $12&255;
 $14 = $d;
 $15 = (($14) + 1|0);
 $d = $15;
 HEAP8[$14>>0] = $13;
 $16 = $1;
 $17 = $16 >>> 8;
 $18 = $17 & 255;
 $19 = $18&255;
 $20 = $d;
 $21 = (($20) + 1|0);
 $d = $21;
 HEAP8[$20>>0] = $19;
 $22 = $1;
 $23 = $22 & 255;
 $24 = $23&255;
 $25 = $d;
 $26 = (($25) + 1|0);
 $d = $26;
 HEAP8[$25>>0] = $24;
 $27 = $d;
 $28 = $0;
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return;
}
function _write2high($data,$val) {
 $data = $data|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $val;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $d = $3;
 $4 = $1;
 $5 = $4&65535;
 $6 = $5 >> 8;
 $7 = $6 & 255;
 $8 = $7&255;
 $9 = $d;
 $10 = (($9) + 1|0);
 $d = $10;
 HEAP8[$9>>0] = $8;
 $11 = $1;
 $12 = $11&65535;
 $13 = $12 & 255;
 $14 = $13&255;
 $15 = $d;
 $16 = (($15) + 1|0);
 $d = $16;
 HEAP8[$15>>0] = $14;
 $17 = $d;
 $18 = $0;
 HEAP32[$18>>2] = $17;
 STACKTOP = sp;return;
}
function _read_XMIDI_header($data,$size,$info) {
 $data = $data|0;
 $size = $size|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $chunkLen = 0, $i = 0, $len = 0, $pos = 0, $start = 0, $tracksRead = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $pos = sp;
 $1 = $data;
 $2 = $size;
 $3 = $info;
 $i = 0;
 $4 = $1;
 HEAP32[$pos>>2] = $4;
 $tracksRead = 0;
 $5 = HEAP32[$pos>>2]|0;
 $6 = (_memcmp($5,366336,4)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $0 = 0;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $8 = HEAP32[$pos>>2]|0;
 $9 = (($8) + 4|0);
 HEAP32[$pos>>2] = $9;
 $10 = (_read4high($pos)|0);
 $len = $10;
 $11 = HEAP32[$pos>>2]|0;
 $start = $11;
 $12 = HEAP32[$pos>>2]|0;
 $13 = (_memcmp($12,366344,4)|0);
 $14 = ($13|0)!=(0);
 do {
  if ($14) {
   $18 = HEAP32[$pos>>2]|0;
   $19 = (_memcmp($18,366352,4)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $0 = 0;
    $125 = $0;
    STACKTOP = sp;return ($125|0);
   }
   $21 = HEAP32[$pos>>2]|0;
   $22 = (($21) + 4|0);
   HEAP32[$pos>>2] = $22;
   $23 = $3;
   HEAP8[$23>>0] = 0;
   $i = 4;
   while(1) {
    $24 = $i;
    $25 = $len;
    $26 = ($24>>>0)<($25>>>0);
    if (!($26)) {
     break;
    }
    $27 = HEAP32[$pos>>2]|0;
    ;HEAP8[$buf+0>>0]=HEAP8[$27+0>>0]|0;HEAP8[$buf+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$buf+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$buf+3>>0]=HEAP8[$27+3>>0]|0;
    $28 = HEAP32[$pos>>2]|0;
    $29 = (($28) + 4|0);
    HEAP32[$pos>>2] = $29;
    $30 = (_read4high($pos)|0);
    $chunkLen = $30;
    $31 = $i;
    $32 = (($31) + 8)|0;
    $i = $32;
    $33 = (_memcmp($buf,366360,4)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     label = 9;
     break;
    }
    $44 = $chunkLen;
    $45 = (($44) + 1)|0;
    $46 = $45 & -2;
    $47 = HEAP32[$pos>>2]|0;
    $48 = (($47) + ($46)|0);
    HEAP32[$pos>>2] = $48;
    $49 = $chunkLen;
    $50 = (($49) + 1)|0;
    $51 = $50 & -2;
    $52 = $i;
    $53 = (($52) + ($51))|0;
    $i = $53;
    $54 = $i;
    $55 = (($54) + 1)|0;
    $i = $55;
   }
   if ((label|0) == 9) {
    $35 = $chunkLen;
    $36 = ($35>>>0)<(2);
    if ($36) {
     $0 = 0;
     $125 = $0;
     STACKTOP = sp;return ($125|0);
    }
    $37 = (_read2low($pos)|0);
    $38 = $37&255;
    $39 = $3;
    HEAP8[$39>>0] = $38;
    $40 = HEAP32[$pos>>2]|0;
    $41 = (($40) + 2|0);
    HEAP32[$pos>>2] = $41;
    $42 = $chunkLen;
    $43 = ($42>>>0)>(2);
    if ($43) {
    }
   }
   $56 = $3;
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = ($58|0)==(0);
   if ($59) {
    $0 = 0;
    $125 = $0;
    STACKTOP = sp;return ($125|0);
   }
   $60 = $start;
   $61 = $len;
   $62 = (($61) + 1)|0;
   $63 = $62 & -2;
   $64 = (($60) + ($63)|0);
   HEAP32[$pos>>2] = $64;
   $65 = HEAP32[$pos>>2]|0;
   $66 = (_memcmp($65,366368,4)|0);
   $67 = ($66|0)!=(0);
   if ($67) {
    $0 = 0;
    $125 = $0;
    STACKTOP = sp;return ($125|0);
   }
   $68 = HEAP32[$pos>>2]|0;
   $69 = (($68) + 4|0);
   HEAP32[$pos>>2] = $69;
   $70 = (_read4high($pos)|0);
   $len = $70;
   $71 = HEAP32[$pos>>2]|0;
   $72 = (_memcmp($71,366344,4)|0);
   $73 = ($72|0)!=(0);
   if ($73) {
    $0 = 0;
    $125 = $0;
    STACKTOP = sp;return ($125|0);
   } else {
    $74 = HEAP32[$pos>>2]|0;
    $75 = (($74) + 4|0);
    HEAP32[$pos>>2] = $75;
    break;
   }
  } else {
   $15 = HEAP32[$pos>>2]|0;
   $16 = (($15) + 4|0);
   HEAP32[$pos>>2] = $16;
   $17 = $3;
   HEAP8[$17>>0] = 1;
  }
 } while(0);
 $76 = $3;
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = ($78|0)>(120);
 if ($79) {
  $0 = 0;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 while(1) {
  $80 = $tracksRead;
  $81 = $3;
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = ($80|0)<($83|0);
  if (!($84)) {
   label = 41;
   break;
  }
  $85 = HEAP32[$pos>>2]|0;
  $86 = (_memcmp($85,366336,4)|0);
  $87 = ($86|0)!=(0);
  if ($87) {
   $90 = HEAP32[$pos>>2]|0;
   $91 = (_memcmp($90,366344,4)|0);
   $92 = ($91|0)!=(0);
   if ($92) {
    $95 = HEAP32[$pos>>2]|0;
    $96 = (_memcmp($95,366376,4)|0);
    $97 = ($96|0)!=(0);
    if ($97) {
     $106 = HEAP32[$pos>>2]|0;
     $107 = (_memcmp($106,366384,4)|0);
     $108 = ($107|0)!=(0);
     if ($108) {
      label = 36;
      break;
     }
     $109 = HEAP32[$pos>>2]|0;
     $110 = (($109) + 8|0);
     $111 = $tracksRead;
     $112 = $3;
     $113 = (($112) + 4|0);
     $114 = (($113) + ($111<<2)|0);
     HEAP32[$114>>2] = $110;
     $115 = HEAP32[$pos>>2]|0;
     $116 = (($115) + 4|0);
     HEAP32[$pos>>2] = $116;
     $117 = (_read4high($pos)|0);
     $len = $117;
     $118 = $len;
     $119 = (($118) + 1)|0;
     $120 = $119 & -2;
     $121 = HEAP32[$pos>>2]|0;
     $122 = (($121) + ($120)|0);
     HEAP32[$pos>>2] = $122;
     $123 = $tracksRead;
     $124 = (($123) + 1)|0;
     $tracksRead = $124;
    } else {
     $98 = HEAP32[$pos>>2]|0;
     $99 = (($98) + 4|0);
     HEAP32[$pos>>2] = $99;
     $100 = (_read4high($pos)|0);
     $len = $100;
     $101 = $len;
     $102 = (($101) + 1)|0;
     $103 = $102 & -2;
     $104 = HEAP32[$pos>>2]|0;
     $105 = (($104) + ($103)|0);
     HEAP32[$pos>>2] = $105;
    }
   } else {
    $93 = HEAP32[$pos>>2]|0;
    $94 = (($93) + 4|0);
    HEAP32[$pos>>2] = $94;
   }
  } else {
   $88 = HEAP32[$pos>>2]|0;
   $89 = (($88) + 8|0);
   HEAP32[$pos>>2] = $89;
  }
 }
 if ((label|0) == 36) {
  $0 = 0;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 else if ((label|0) == 41) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 return (0)|0;
}
function _read_event_info($data,$info,$current_time) {
 $data = $data|0;
 $info = $info|0;
 $current_time = $current_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $injectedEvent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 HEAP32[$1>>2] = $data;
 $2 = $info;
 $3 = $current_time;
 $4 = HEAP32[$1>>2]|0;
 $5 = $2;
 HEAP32[$5>>2] = $4;
 $6 = (_readVLQ2($1)|0);
 $7 = $2;
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 1|0);
 HEAP32[$1>>2] = $10;
 $11 = HEAP8[$9>>0]|0;
 $12 = $2;
 $13 = (($12) + 8|0);
 HEAP8[$13>>0] = $11;
 $14 = $2;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = (($17) + ($16))|0;
 $3 = $18;
 $19 = $2;
 $20 = (($19) + 8|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 >> 4;
 switch ($23|0) {
 case 15:  {
  $128 = $2;
  $129 = (($128) + 8|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = $131 & 15;
  switch ($132|0) {
  case 2:  {
   $133 = HEAP32[$1>>2]|0;
   $134 = (($133) + 1|0);
   HEAP32[$1>>2] = $134;
   $135 = HEAP8[$133>>0]|0;
   $136 = $2;
   $137 = (($136) + 12|0);
   HEAP8[$137>>0] = $135;
   $138 = HEAP32[$1>>2]|0;
   $139 = (($138) + 1|0);
   HEAP32[$1>>2] = $139;
   $140 = HEAP8[$138>>0]|0;
   $141 = $2;
   $142 = (($141) + 12|0);
   $143 = (($142) + 1|0);
   HEAP8[$143>>0] = $140;
   break;
  }
  case 3:  {
   $144 = HEAP32[$1>>2]|0;
   $145 = (($144) + 1|0);
   HEAP32[$1>>2] = $145;
   $146 = HEAP8[$144>>0]|0;
   $147 = $2;
   $148 = (($147) + 12|0);
   HEAP8[$148>>0] = $146;
   $149 = $2;
   $150 = (($149) + 12|0);
   $151 = (($150) + 1|0);
   HEAP8[$151>>0] = 0;
   break;
  }
  case 14: case 12: case 11: case 10: case 8: case 6:  {
   $152 = $2;
   $153 = (($152) + 12|0);
   $154 = (($153) + 1|0);
   HEAP8[$154>>0] = 0;
   $155 = $2;
   $156 = (($155) + 12|0);
   HEAP8[$156>>0] = 0;
   break;
  }
  case 0:  {
   $157 = (_readVLQ($1)|0);
   $158 = $2;
   $159 = (($158) + 20|0);
   HEAP32[$159>>2] = $157;
   $160 = HEAP32[$1>>2]|0;
   $161 = $2;
   $162 = (($161) + 12|0);
   $163 = (($162) + 4|0);
   HEAP32[$163>>2] = $160;
   $164 = $2;
   $165 = (($164) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = HEAP32[$1>>2]|0;
   $168 = (($167) + ($166)|0);
   HEAP32[$1>>2] = $168;
   break;
  }
  case 15:  {
   $169 = HEAP32[$1>>2]|0;
   $170 = (($169) + 1|0);
   HEAP32[$1>>2] = $170;
   $171 = HEAP8[$169>>0]|0;
   $172 = $2;
   $173 = (($172) + 12|0);
   HEAP8[$173>>0] = $171;
   $174 = (_readVLQ($1)|0);
   $175 = $2;
   $176 = (($175) + 20|0);
   HEAP32[$176>>2] = $174;
   $177 = HEAP32[$1>>2]|0;
   $178 = $2;
   $179 = (($178) + 12|0);
   $180 = (($179) + 4|0);
   HEAP32[$180>>2] = $177;
   $181 = $2;
   $182 = (($181) + 20|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = HEAP32[$1>>2]|0;
   $185 = (($184) + ($183)|0);
   HEAP32[$1>>2] = $185;
   $186 = $2;
   $187 = (($186) + 12|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = ($189|0)==(81);
   if ($190) {
    $191 = $2;
    $192 = (($191) + 20|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)==(3);
    if ($194) {
     $195 = $2;
     $196 = (($195) + 12|0);
     $197 = (($196) + 4|0);
     $198 = HEAP32[$197>>2]|0;
     HEAP8[$198>>0] = 7;
     $199 = $2;
     $200 = (($199) + 12|0);
     $201 = (($200) + 4|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = (($202) + 1|0);
     HEAP8[$203>>0] = -95;
     $204 = $2;
     $205 = (($204) + 12|0);
     $206 = (($205) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + 2|0);
     HEAP8[$208>>0] = 32;
    }
   }
   break;
  }
  default: {
   $0 = 0;
   $215 = $0;
   STACKTOP = sp;return ($215|0);
  }
  }
  break;
 }
 case 9:  {
  $24 = HEAP32[$1>>2]|0;
  $25 = (($24) + 1|0);
  HEAP32[$1>>2] = $25;
  $26 = HEAP8[$24>>0]|0;
  $27 = $2;
  $28 = (($27) + 12|0);
  HEAP8[$28>>0] = $26;
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 1|0);
  HEAP32[$1>>2] = $30;
  $31 = HEAP8[$29>>0]|0;
  $32 = $2;
  $33 = (($32) + 12|0);
  $34 = (($33) + 1|0);
  HEAP8[$34>>0] = $31;
  $35 = (_readVLQ($1)|0);
  $36 = $2;
  $37 = (($36) + 20|0);
  HEAP32[$37>>2] = $35;
  $38 = $2;
  $39 = (($38) + 12|0);
  $40 = (($39) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = $2;
   $45 = (($44) + 8|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $47 & 15;
   $49 = $48 | 128;
   $50 = $49&255;
   $51 = $2;
   $52 = (($51) + 8|0);
   HEAP8[$52>>0] = $50;
   $53 = $2;
   $54 = (($53) + 20|0);
   HEAP32[$54>>2] = 0;
  } else {
   $55 = (_malloc(24)|0);
   $injectedEvent = $55;
   $56 = $2;
   $57 = (($56) + 8|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $59 & 15;
   $61 = 128 | $60;
   $62 = $61&255;
   $63 = $injectedEvent;
   $64 = (($63) + 8|0);
   HEAP8[$64>>0] = $62;
   $65 = $2;
   $66 = (($65) + 12|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $injectedEvent;
   $69 = (($68) + 12|0);
   HEAP8[$69>>0] = $67;
   $70 = $2;
   $71 = (($70) + 12|0);
   $72 = (($71) + 1|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $injectedEvent;
   $75 = (($74) + 12|0);
   $76 = (($75) + 1|0);
   HEAP8[$76>>0] = $73;
   $77 = $2;
   $78 = (($77) + 20|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $injectedEvent;
   $81 = (($80) + 20|0);
   HEAP32[$81>>2] = $79;
   $82 = $injectedEvent;
   $83 = $3;
   _save_event($82,$83);
  }
  break;
 }
 case 13: case 12:  {
  $84 = HEAP32[$1>>2]|0;
  $85 = (($84) + 1|0);
  HEAP32[$1>>2] = $85;
  $86 = HEAP8[$84>>0]|0;
  $87 = $2;
  $88 = (($87) + 12|0);
  HEAP8[$88>>0] = $86;
  $89 = $2;
  $90 = (($89) + 12|0);
  $91 = (($90) + 1|0);
  HEAP8[$91>>0] = 0;
  break;
 }
 case 14: case 10: case 8:  {
  $92 = HEAP32[$1>>2]|0;
  $93 = (($92) + 1|0);
  HEAP32[$1>>2] = $93;
  $94 = HEAP8[$92>>0]|0;
  $95 = $2;
  $96 = (($95) + 12|0);
  HEAP8[$96>>0] = $94;
  $97 = HEAP32[$1>>2]|0;
  $98 = (($97) + 1|0);
  HEAP32[$1>>2] = $98;
  $99 = HEAP8[$97>>0]|0;
  $100 = $2;
  $101 = (($100) + 12|0);
  $102 = (($101) + 1|0);
  HEAP8[$102>>0] = $99;
  break;
 }
 case 11:  {
  $103 = HEAP32[$1>>2]|0;
  $104 = (($103) + 1|0);
  HEAP32[$1>>2] = $104;
  $105 = HEAP8[$103>>0]|0;
  $106 = $2;
  $107 = (($106) + 12|0);
  HEAP8[$107>>0] = $105;
  $108 = HEAP32[$1>>2]|0;
  $109 = (($108) + 1|0);
  HEAP32[$1>>2] = $109;
  $110 = HEAP8[$108>>0]|0;
  $111 = $2;
  $112 = (($111) + 12|0);
  $113 = (($112) + 1|0);
  HEAP8[$113>>0] = $110;
  $114 = $2;
  $115 = (($114) + 12|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  switch ($117|0) {
  case 119:  {
   break;
  }
  case 117:  {
   break;
  }
  case 120: case 118: case 115: case 114: case 113: case 112: case 111: case 110:  {
   label = 13;
   break;
  }
  case 116:  {
   break;
  }
  default: {
   label = 13;
  }
  }
  if ((label|0) == 13) {
   $118 = $2;
   $119 = (($118) + 12|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = ($121|0)>=(110);
   if ($122) {
    $123 = $2;
    $124 = (($123) + 12|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = ($126|0)<=(120);
    if ($127) {
    }
   }
  }
  break;
 }
 default: {
 }
 }
 $209 = HEAP32[$1>>2]|0;
 $210 = $2;
 $211 = HEAP32[$210>>2]|0;
 $212 = $209;
 $213 = $211;
 $214 = (($212) - ($213))|0;
 $0 = $214;
 $215 = $0;
 STACKTOP = sp;return ($215|0);
}
function _pop_cached_event($current_time,$delta) {
 $current_time = $current_time|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $current_time;
 $1 = $delta;
 $info = 0;
 $2 = HEAP32[366328>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $25 = $info;
  STACKTOP = sp;return ($25|0);
 }
 $4 = HEAP32[366328>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $1;
 $9 = (($7) + ($8))|0;
 $10 = ($6>>>0)<($9>>>0);
 if (!($10)) {
  $25 = $info;
  STACKTOP = sp;return ($25|0);
 }
 $11 = HEAP32[366328>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $info = $12;
 $13 = HEAP32[366328>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (($15) - ($16))|0;
 $18 = $info;
 $19 = (($18) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = HEAP32[366328>>2]|0;
 $old = $20;
 $21 = HEAP32[366328>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[366328>>2] = $23;
 $24 = $old;
 _free($24);
 $25 = $info;
 STACKTOP = sp;return ($25|0);
}
function _put_event($dest,$info) {
 $dest = $dest|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $j = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $info;
 $i = 0;
 $rc = 0;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_putVLQ($2,$5)|0);
 $rc = $6;
 $7 = $0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $rc;
  $10 = $0;
  $11 = (($10) + ($9)|0);
  $0 = $11;
 }
 $12 = $rc;
 $13 = $i;
 $14 = (($13) + ($12))|0;
 $i = $14;
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = HEAP8[366320>>0]|0;
 $20 = $19&255;
 $21 = ($18|0)!=($20|0);
 if ($21) {
  label = 5;
 } else {
  $22 = $1;
  $23 = (($22) + 8|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)>=(240);
  if ($26) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $27 = $0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $1;
   $30 = (($29) + 8|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $0;
   $33 = (($32) + 1|0);
   $0 = $33;
   HEAP8[$32>>0] = $31;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $36 = $1;
 $37 = (($36) + 8|0);
 $38 = HEAP8[$37>>0]|0;
 HEAP8[366320>>0] = $38;
 $39 = $1;
 $40 = (($39) + 8|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 >> 4;
 switch ($43|0) {
 case 13: case 12:  {
  $59 = $0;
  $60 = ($59|0)!=(0|0);
  if ($60) {
   $61 = $1;
   $62 = (($61) + 12|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $0;
   $65 = (($64) + 1|0);
   $0 = $65;
   HEAP8[$64>>0] = $63;
  }
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
  $119 = $i;
  STACKTOP = sp;return ($119|0);
  break;
 }
 case 15:  {
  $68 = $1;
  $69 = (($68) + 8|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = ($71|0)==(255);
  if ($72) {
   $73 = $0;
   $74 = ($73|0)!=(0|0);
   if ($74) {
    $75 = $1;
    $76 = (($75) + 12|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $0;
    $79 = (($78) + 1|0);
    $0 = $79;
    HEAP8[$78>>0] = $77;
   }
   $80 = $i;
   $81 = (($80) + 1)|0;
   $i = $81;
  }
  $82 = $0;
  $83 = $1;
  $84 = (($83) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (_putVLQ($82,$85)|0);
  $rc = $86;
  $87 = $0;
  $88 = ($87|0)!=(0|0);
  if ($88) {
   $89 = $rc;
   $90 = $0;
   $91 = (($90) + ($89)|0);
   $0 = $91;
  }
  $92 = $rc;
  $93 = $i;
  $94 = (($93) + ($92))|0;
  $i = $94;
  $95 = $1;
  $96 = (($95) + 20|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0);
  if ($98) {
   $j = 0;
   while(1) {
    $99 = $j;
    $100 = $1;
    $101 = (($100) + 20|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($99|0)<($102|0);
    if (!($103)) {
     break;
    }
    $104 = $0;
    $105 = ($104|0)!=(0|0);
    if ($105) {
     $106 = $j;
     $107 = $1;
     $108 = (($107) + 12|0);
     $109 = (($108) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (($110) + ($106)|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $0;
     $114 = (($113) + 1|0);
     $0 = $114;
     HEAP8[$113>>0] = $112;
    }
    $115 = $i;
    $116 = (($115) + 1)|0;
    $i = $116;
    $117 = $j;
    $118 = (($117) + 1)|0;
    $j = $118;
   }
  }
  $119 = $i;
  STACKTOP = sp;return ($119|0);
  break;
 }
 case 14: case 11: case 10: case 9: case 8:  {
  $44 = $0;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   $46 = $1;
   $47 = (($46) + 12|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $0;
   $50 = (($49) + 1|0);
   $0 = $50;
   HEAP8[$49>>0] = $48;
   $51 = $1;
   $52 = (($51) + 12|0);
   $53 = (($52) + 1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $0;
   $56 = (($55) + 1|0);
   $0 = $56;
   HEAP8[$55>>0] = $54;
  }
  $57 = $i;
  $58 = (($57) + 2)|0;
  $i = $58;
  $119 = $i;
  STACKTOP = sp;return ($119|0);
  break;
 }
 default: {
  $119 = $i;
  STACKTOP = sp;return ($119|0);
 }
 }
 return (0)|0;
}
function _putVLQ($dest,$value) {
 $dest = $dest|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dest;
 $2 = $value;
 $i = 1;
 $3 = $2;
 $4 = $3 & 127;
 $buffer = $4;
 while(1) {
  $5 = $2;
  $6 = $5 >>> 7;
  $2 = $6;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $buffer;
  $9 = $8 << 8;
  $buffer = $9;
  $10 = $2;
  $11 = $10 & 127;
  $12 = $11 | 128;
  $13 = $buffer;
  $14 = $13 | $12;
  $buffer = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $1;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $19 = $i;
  $0 = $19;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $j = 0;
 while(1) {
  $20 = $j;
  $21 = $i;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $buffer;
  $24 = $23 & 255;
  $25 = $24&255;
  $26 = $1;
  $27 = (($26) + 1|0);
  $1 = $27;
  HEAP8[$26>>0] = $25;
  $28 = $buffer;
  $29 = $28 >> 8;
  $buffer = $29;
  $30 = $j;
  $31 = (($30) + 1)|0;
  $j = $31;
 }
 $32 = $i;
 $0 = $32;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _read4high($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $d = $2;
 $3 = $d;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = $d;
 $8 = (($7) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $6 | $11;
 $13 = $d;
 $14 = (($13) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $12 | $17;
 $19 = $d;
 $20 = (($19) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $18 | $22;
 $24 = $23&65535;
 $value = $24;
 $25 = $d;
 $26 = (($25) + 4|0);
 $27 = $0;
 HEAP32[$27>>2] = $26;
 $28 = $value;
 $29 = $28&65535;
 STACKTOP = sp;return ($29|0);
}
function _read2low($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $value = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $d = $2;
 $3 = $d;
 $4 = (($3) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $d;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 | $10;
 $12 = $11&65535;
 $value = $12;
 $13 = $d;
 $14 = (($13) + 2|0);
 $15 = $0;
 HEAP32[$15>>2] = $14;
 $16 = $value;
 STACKTOP = sp;return ($16|0);
}
function _readVLQ2($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $pos = $2;
 $value = 0;
 while(1) {
  $3 = $pos;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 & 128;
  $7 = ($6|0)!=(0);
  $8 = $7 ^ 1;
  if (!($8)) {
   break;
  }
  $9 = $pos;
  $10 = (($9) + 1|0);
  $pos = $10;
  $11 = HEAP8[$9>>0]|0;
  $12 = $11&255;
  $13 = $value;
  $14 = (($13) + ($12))|0;
  $value = $14;
 }
 $15 = $pos;
 $16 = $0;
 HEAP32[$16>>2] = $15;
 $17 = $value;
 STACKTOP = sp;return ($17|0);
}
function _readVLQ($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, $str = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $d = $2;
 $value = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = $d;
  $6 = (($5) + 1|0);
  $d = $6;
  $7 = HEAP8[$5>>0]|0;
  $str = $7;
  $8 = $value;
  $9 = $8 << 7;
  $10 = $str;
  $11 = $10&255;
  $12 = $11 & 127;
  $13 = $9 | $12;
  $value = $13;
  $14 = $str;
  $15 = $14&255;
  $16 = $15 & 128;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 7) {
  $20 = $d;
  $21 = $0;
  HEAP32[$21>>2] = $20;
  $22 = $value;
  STACKTOP = sp;return ($22|0);
 }
 $20 = $d;
 $21 = $0;
 HEAP32[$21>>2] = $20;
 $22 = $value;
 STACKTOP = sp;return ($22|0);
}
function _save_event($info,$current_time) {
 $info = $info|0;
 $current_time = $current_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delta = 0, $next = 0, $prev = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $1 = $current_time;
 $2 = $0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $delta = $4;
 $5 = (_malloc(12)|0);
 $temp = $5;
 $6 = $0;
 $7 = $temp;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = $delta;
 $10 = (($8) + ($9))|0;
 $11 = $temp;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $temp;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[366328>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $17 = $temp;
  HEAP32[366328>>2] = $17;
  STACKTOP = sp;return;
 }
 $prev = 0;
 $18 = HEAP32[366328>>2]|0;
 $next = $18;
 while(1) {
  $19 = $next;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $next;
   $22 = (($21) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = $delta;
   $26 = (($24) + ($25))|0;
   $27 = ($23>>>0)<($26>>>0);
   $51 = $27;
  } else {
   $51 = 0;
  }
  if (!($51)) {
   break;
  }
  $28 = $next;
  $prev = $28;
  $29 = $next;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $next = $31;
 }
 $32 = $next;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $37 = $prev;
  $38 = ($37|0)!=(0|0);
  if ($38) {
   $39 = $prev;
   $40 = (($39) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $temp;
   $43 = (($42) + 8|0);
   HEAP32[$43>>2] = $41;
   $44 = $temp;
   $45 = $prev;
   $46 = (($45) + 8|0);
   HEAP32[$46>>2] = $44;
  } else {
   $47 = HEAP32[366328>>2]|0;
   $48 = $temp;
   $49 = (($48) + 8|0);
   HEAP32[$49>>2] = $47;
   $50 = $temp;
   HEAP32[366328>>2] = $50;
  }
 } else {
  $34 = $temp;
  $35 = $prev;
  $36 = (($35) + 8|0);
  HEAP32[$36>>2] = $34;
 }
 STACKTOP = sp;return;
}
function _initVoxBank($bankIdx) {
 $bankIdx = $bankIdx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $bankIdx;
 ;HEAP8[124120+0>>0]=0|0;
 (_sprintf(124120,366656,$vararg_buffer)|0);
 $1 = HEAP32[((308424 + 20|0))>>2]|0;
 $2 = (366448 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 (_strcat((124120|0),($3|0))|0);
 $4 = $0;
 $5 = (366592 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 (_strcat((124120|0),($6|0))|0);
 (_strcat((124120|0),(366664|0))|0);
 STACKTOP = sp;return;
}
function _initVoxToPlay($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currIdx = 0, $i = 0;
 var $localOrderBuf = 0, $orderIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $i = 0;
 $currIdx = 0;
 $orderIdx = 0;
 $1 = HEAP32[366672>>2]|0;
 $localOrderBuf = $1;
 HEAP32[123144>>2] = 0;
 HEAP32[123136>>2] = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP16[366680>>1]|0;
  $4 = $3 << 16 >> 16;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $localOrderBuf;
  $7 = (($6) + 2|0);
  $localOrderBuf = $7;
  $8 = HEAP16[$6>>1]|0;
  $9 = $8 << 16 >> 16;
  $orderIdx = $9;
  $10 = $orderIdx;
  $11 = $0;
  $12 = ($10|0)==($11|0);
  if ($12) {
   break;
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 7) {
  $16 = $currIdx;
  HEAP32[123128>>2] = $16;
  $17 = HEAP32[123128>>2]|0;
  _playVoxSample($17);
  STACKTOP = sp;return 1;
 }
 $13 = $i;
 $currIdx = $13;
 $16 = $currIdx;
 HEAP32[123128>>2] = $16;
 $17 = HEAP32[123128>>2]|0;
 _playVoxSample($17);
 STACKTOP = sp;return 1;
}
function _playVox($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $index;
 $2 = HEAP32[((308424 + 24|0))>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = ($4|0)!=(0);
  if ($5) {
   $6 = HEAP32[123136>>2]|0;
   $7 = ($6|0)!=(0);
   if ($7) {
    $8 = $1;
    $9 = (_isSamplePlaying($8)|0);
    $10 = ($9|0)!=(0);
    if (!($10)) {
     $11 = $1;
     _playVoxSample($11);
     $0 = 1;
     $12 = $0;
     STACKTOP = sp;return ($12|0);
    }
   }
  }
 }
 $0 = 0;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _playVoxSimple($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $index;
 $2 = HEAP32[((308424 + 24|0))>>2]|0;
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $4 = $1;
   $5 = ($4|0)!=(0);
   if ($5) {
    $6 = $1;
    (_playVox($6)|0);
    $7 = $1;
    $8 = (_isSamplePlaying($7)|0);
    $9 = ($8|0)!=(0);
    if (!($9)) {
     break;
    }
    $0 = 1;
    $10 = $0;
    STACKTOP = sp;return ($10|0);
   }
  }
 } while(0);
 $0 = 0;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _stopVox($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 HEAP32[123136>>2] = 0;
 $1 = $0;
 _stopSample($1);
 STACKTOP = sp;return;
}
function _initTextBank($bankIdx) {
 $bankIdx = $bankIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hqrSize = 0, $langIdx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bankIdx;
 $1 = $0;
 $2 = HEAP32[366392>>2]|0;
 $3 = ($1|0)==($2|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 HEAP32[366392>>2] = $4;
 $5 = HEAP8[366688>>0]|0;
 HEAP8[366696>>0] = $5;
 $6 = HEAP32[((308424 + 20|0))>>2]|0;
 $7 = ($6*14)|0;
 $8 = $7<<1;
 $9 = $0;
 $10 = $9<<1;
 $11 = (($8) + ($10))|0;
 $langIdx = $11;
 $12 = HEAP32[361976>>2]|0;
 $13 = $langIdx;
 $14 = (_hqrGetallocEntry(366672,$12,$13)|0);
 $hqrSize = $14;
 $15 = $hqrSize;
 $16 = (($15|0) / 2)&-1;
 $17 = $16&65535;
 HEAP16[366680>>1] = $17;
 $18 = HEAP32[361976>>2]|0;
 $19 = $langIdx;
 $20 = (($19) + 1)|0;
 $langIdx = $20;
 $21 = (_hqrGetallocEntry(366952,$18,$20)|0);
 $hqrSize = $21;
 $22 = HEAP32[((308424 + 24|0))>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 _initVoxBank($24);
 STACKTOP = sp;return;
}
function _drawCharacter($x,$y,$character) {
 $x = $x|0;
 $y = $y|0;
 $character = $character|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0;
 var $i = 0, $index = 0, $jump = 0, $number = 0, $param1 = 0, $param2 = 0, $screen = 0, $sizeX = 0, $sizeY = 0, $tempX = 0, $tempY = 0, $toNextLine = 0, $usedColor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $character;
 $3 = HEAP32[123168>>2]|0;
 $4 = HEAP32[123168>>2]|0;
 $5 = $2;
 $6 = $5&255;
 $7 = $6<<2;
 $8 = (($4) + ($7)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($3) + ($10)|0);
 $data = $11;
 $12 = $data;
 $13 = (($12) + 1|0);
 $data = $13;
 $14 = HEAP8[$12>>0]|0;
 $sizeX = $14;
 $15 = $14&255;
 HEAP32[123176>>2] = $15;
 $16 = $data;
 $17 = (($16) + 1|0);
 $data = $17;
 $18 = HEAP8[$16>>0]|0;
 $sizeY = $18;
 $19 = $data;
 $20 = (($19) + 1|0);
 $data = $20;
 $21 = HEAP8[$19>>0]|0;
 $param1 = $21;
 $22 = $data;
 $23 = (($22) + 1|0);
 $data = $23;
 $24 = HEAP8[$22>>0]|0;
 $param2 = $24;
 $25 = $param1;
 $26 = $25&255;
 $27 = $0;
 $28 = (($27) + ($26))|0;
 $0 = $28;
 $29 = $param2;
 $30 = $29&255;
 $31 = $1;
 $32 = (($31) + ($30))|0;
 $1 = $32;
 $33 = HEAP32[123200>>2]|0;
 $34 = $33&255;
 $usedColor = $34;
 $35 = HEAP32[25952>>2]|0;
 $36 = $1;
 $37 = (25968 + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38)|0);
 $40 = $0;
 $41 = (($39) + ($40)|0);
 $screen = $41;
 $42 = $0;
 $tempX = $42;
 $43 = $1;
 $tempY = $43;
 $44 = $sizeX;
 $45 = $44&255;
 $46 = (640 - ($45))|0;
 $toNextLine = $46;
 while(1) {
  $47 = $data;
  $48 = (($47) + 1|0);
  $data = $48;
  $49 = HEAP8[$47>>0]|0;
  $index = $49;
  while(1) {
   $50 = $data;
   $51 = (($50) + 1|0);
   $data = $51;
   $52 = HEAP8[$50>>0]|0;
   $jump = $52;
   $53 = $jump;
   $54 = $53&255;
   $55 = $screen;
   $56 = (($55) + ($54)|0);
   $screen = $56;
   $57 = $jump;
   $58 = $57&255;
   $59 = $tempX;
   $60 = (($59) + ($58))|0;
   $tempX = $60;
   $61 = $index;
   $62 = (($61) + -1)<<24>>24;
   $index = $62;
   $63 = $62&255;
   $64 = ($63|0)==(0);
   if ($64) {
    label = 4;
    break;
   }
   $76 = $data;
   $77 = (($76) + 1|0);
   $data = $77;
   $78 = HEAP8[$76>>0]|0;
   $number = $78;
   $i = 0;
   while(1) {
    $79 = $i;
    $80 = $number;
    $81 = $80&255;
    $82 = ($79|0)<($81|0);
    if (!($82)) {
     break;
    }
    $83 = $tempX;
    $84 = ($83|0)>=(0);
    if ($84) {
     $85 = $tempX;
     $86 = ($85|0)<(639);
     if ($86) {
      $87 = $tempY;
      $88 = ($87|0)>=(0);
      if ($88) {
       $89 = $tempY;
       $90 = ($89|0)<(479);
       if ($90) {
        $91 = $usedColor;
        $92 = $tempY;
        $93 = ($92*640)|0;
        $94 = $tempX;
        $95 = (($93) + ($94))|0;
        $96 = HEAP32[25952>>2]|0;
        $97 = (($96) + ($95)|0);
        HEAP8[$97>>0] = $91;
       }
      }
     }
    }
    $98 = $screen;
    $99 = (($98) + 1|0);
    $screen = $99;
    $100 = $tempX;
    $101 = (($100) + 1)|0;
    $tempX = $101;
    $102 = $i;
    $103 = (($102) + 1)|0;
    $i = $103;
   }
   $104 = $index;
   $105 = (($104) + -1)<<24>>24;
   $index = $105;
   $106 = $105&255;
   $107 = ($106|0)==(0);
   if ($107) {
    label = 17;
    break;
   }
  }
  if ((label|0) == 4) {
   label = 0;
   $65 = $toNextLine;
   $66 = $screen;
   $67 = (($66) + ($65)|0);
   $screen = $67;
   $68 = $tempY;
   $69 = (($68) + 1)|0;
   $tempY = $69;
   $70 = $0;
   $tempX = $70;
   $71 = $sizeY;
   $72 = (($71) + -1)<<24>>24;
   $sizeY = $72;
   $73 = $sizeY;
   $74 = $73&255;
   $75 = ($74|0)<=(0);
   if ($75) {
    label = 5;
    break;
   }
  }
  else if ((label|0) == 17) {
   label = 0;
   $108 = $toNextLine;
   $109 = $screen;
   $110 = (($109) + ($108)|0);
   $screen = $110;
   $111 = $tempY;
   $112 = (($111) + 1)|0;
   $tempY = $112;
   $113 = $0;
   $tempX = $113;
   $114 = $sizeY;
   $115 = (($114) + -1)<<24>>24;
   $sizeY = $115;
   $116 = $sizeY;
   $117 = $116&255;
   $118 = ($117|0)<=(0);
   if ($118) {
    label = 18;
    break;
   }
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 18) {
  STACKTOP = sp;return;
 }
}
function _drawCharacterShadow($x,$y,$character,$color) {
 $x = $x|0;
 $y = $y|0;
 $character = $character|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bottom = 0, $left = 0, $right = 0, $top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $character;
 $3 = $color;
 $4 = $2;
 $5 = $4&255;
 $6 = ($5|0)!=(32);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 _setFontColor(0);
 $7 = $0;
 $8 = (($7) + 2)|0;
 $9 = $1;
 $10 = (($9) + 4)|0;
 $11 = $2;
 _drawCharacter($8,$10,$11);
 $12 = $3;
 _setFontColor($12);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 _drawCharacter($13,$14,$15);
 $16 = $0;
 $left = $16;
 $17 = $1;
 $top = $17;
 $18 = $0;
 $19 = (($18) + 32)|0;
 $right = $19;
 $20 = $1;
 $21 = (($20) + 38)|0;
 $bottom = $21;
 $22 = $left;
 $23 = $top;
 $24 = $right;
 $25 = $bottom;
 _copyBlockPhys($22,$23,$24,$25);
 STACKTOP = sp;return;
}
function _setFontColor($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $color;
 $1 = $0;
 HEAP32[123200>>2] = $1;
 STACKTOP = sp;return;
}
function _drawText($x,$y,$dialogue) {
 $x = $x|0;
 $y = $y|0;
 $dialogue = $dialogue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currChar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $dialogue;
 $3 = HEAP32[123168>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $2;
  $6 = (($5) + 1|0);
  $2 = $6;
  $7 = HEAP8[$5>>0]|0;
  $currChar = $7;
  $8 = $currChar;
  $9 = $8&255;
  $10 = ($9|0)==(0);
  if ($10) {
   break;
  }
  $11 = $currChar;
  $12 = $11&255;
  $13 = ($12|0)==(32);
  if ($13) {
   $14 = HEAP32[123192>>2]|0;
   $15 = $0;
   $16 = (($15) + ($14))|0;
   $0 = $16;
  } else {
   $17 = HEAP32[123168>>2]|0;
   $18 = HEAP32[123168>>2]|0;
   $19 = $currChar;
   $20 = $19&255;
   $21 = $20<<2;
   $22 = (($18) + ($21)|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = (($17) + ($24)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   HEAP32[123176>>2] = $27;
   $28 = $0;
   $29 = $1;
   $30 = $currChar;
   _drawCharacter($28,$29,$30);
   $31 = HEAP32[123184>>2]|0;
   $32 = $0;
   $33 = (($32) + ($31))|0;
   $0 = $33;
   $34 = HEAP32[123176>>2]|0;
   $35 = $0;
   $36 = (($35) + ($34))|0;
   $0 = $36;
  }
 }
 STACKTOP = sp;return;
}
function _getTextSize($dialogue) {
 $dialogue = $dialogue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currChar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dialogue;
 HEAP32[123176>>2] = 0;
 while(1) {
  $1 = $0;
  $2 = (($1) + 1|0);
  $0 = $2;
  $3 = HEAP8[$1>>0]|0;
  $currChar = $3;
  $4 = $currChar;
  $5 = $4&255;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  }
  $7 = $currChar;
  $8 = $7&255;
  $9 = ($8|0)==(32);
  if ($9) {
   $10 = HEAP32[123192>>2]|0;
   $11 = HEAP32[123176>>2]|0;
   $12 = (($11) + ($10))|0;
   HEAP32[123176>>2] = $12;
  } else {
   $13 = HEAP32[123184>>2]|0;
   $14 = HEAP32[123176>>2]|0;
   $15 = (($14) + ($13))|0;
   HEAP32[123176>>2] = $15;
   $16 = HEAP32[123168>>2]|0;
   $17 = HEAP32[123168>>2]|0;
   $18 = $currChar;
   $19 = $18&255;
   $20 = $19<<2;
   $21 = (($17) + ($20)|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22 << 16 >> 16;
   $24 = (($16) + ($23)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = HEAP32[123176>>2]|0;
   $28 = (($27) + ($26))|0;
   HEAP32[123176>>2] = $28;
  }
 }
 $29 = HEAP32[123176>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _initDialogueBox() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[123240>>2]|0;
 $1 = HEAP32[123248>>2]|0;
 $2 = HEAP32[123256>>2]|0;
 $3 = HEAP32[123264>>2]|0;
 $4 = HEAP32[25944>>2]|0;
 $5 = HEAP32[123240>>2]|0;
 $6 = HEAP32[123248>>2]|0;
 $7 = HEAP32[25952>>2]|0;
 _blitBox($0,$1,$2,$3,$4,$5,$6,$7);
 $8 = HEAP32[123888>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[123240>>2]|0;
  $11 = HEAP32[123248>>2]|0;
  $12 = HEAP32[123256>>2]|0;
  $13 = HEAP32[123264>>2]|0;
  _drawBox($10,$11,$12,$13);
  $14 = HEAP32[123240>>2]|0;
  $15 = (($14) + 1)|0;
  $16 = HEAP32[123248>>2]|0;
  $17 = (($16) + 1)|0;
  $18 = HEAP32[123256>>2]|0;
  $19 = (($18) - 1)|0;
  $20 = HEAP32[123264>>2]|0;
  $21 = (($20) - 1)|0;
  _drawTransparentBox($15,$17,$19,$21,3);
 }
 $22 = HEAP32[123240>>2]|0;
 $23 = HEAP32[123248>>2]|0;
 $24 = HEAP32[123256>>2]|0;
 $25 = HEAP32[123264>>2]|0;
 _copyBlockPhys($22,$23,$24,$25);
 HEAP32[123840>>2] = 0;
 $26 = HEAP32[123240>>2]|0;
 $27 = HEAP32[123248>>2]|0;
 $28 = HEAP32[123256>>2]|0;
 $29 = HEAP32[123264>>2]|0;
 $30 = HEAP32[25952>>2]|0;
 $31 = HEAP32[123240>>2]|0;
 $32 = HEAP32[123248>>2]|0;
 $33 = HEAP32[25944>>2]|0;
 _blitBox($26,$27,$28,$29,$30,$31,$32,$33);
 STACKTOP = sp;return;
}
function _initInventoryDialogueBox() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[123240>>2]|0;
 $1 = HEAP32[123248>>2]|0;
 $2 = HEAP32[123256>>2]|0;
 $3 = HEAP32[123264>>2]|0;
 $4 = HEAP32[25944>>2]|0;
 $5 = HEAP32[123240>>2]|0;
 $6 = HEAP32[123248>>2]|0;
 $7 = HEAP32[25952>>2]|0;
 _blitBox($0,$1,$2,$3,$4,$5,$6,$7);
 $8 = HEAP32[123240>>2]|0;
 $9 = HEAP32[123248>>2]|0;
 $10 = HEAP32[123256>>2]|0;
 $11 = HEAP32[123264>>2]|0;
 _copyBlockPhys($8,$9,$10,$11);
 HEAP32[123840>>2] = 0;
 STACKTOP = sp;return;
}
function _initText($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 HEAP32[123288>>2] = 0;
 $1 = $0;
 $2 = (_getText($1)|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  HEAP32[123808>>2] = 123296;
  HEAP32[123816>>2] = 123552;
  HEAP32[123288>>2] = 1;
  HEAP32[123824>>2] = 0;
  HEAP8[123296>>0] = 0;
  HEAP8[123552>>0] = 0;
  $4 = $0;
  HEAP32[123832>>2] = $4;
  HEAP32[123840>>2] = 0;
  $5 = HEAP32[123240>>2]|0;
  $6 = (($5) + 8)|0;
  HEAP32[123848>>2] = $6;
  HEAP32[123856>>2] = 0;
  HEAP32[123864>>2] = 0;
  $7 = HEAP32[123248>>2]|0;
  $8 = (($7) + 8)|0;
  HEAP32[123872>>2] = $8;
  $9 = HEAP32[123160>>2]|0;
  HEAP32[123880>>2] = $9;
  _setFontParameters(2,7);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _getText($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $currIdx = 0, $localOrderBuf = 0, $localTextBuf = 0, $numEntries = 0, $orderIdx = 0, $ptrCurrentEntry = 0, $ptrNextEntry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $index;
 $currIdx = 0;
 $orderIdx = 0;
 $2 = HEAP32[366952>>2]|0;
 $localTextBuf = $2;
 $3 = HEAP32[366672>>2]|0;
 $localOrderBuf = $3;
 $4 = HEAP16[366680>>1]|0;
 $5 = $4 << 16 >> 16;
 $numEntries = $5;
 while(1) {
  $6 = $localOrderBuf;
  $7 = (($6) + 2|0);
  $localOrderBuf = $7;
  $8 = HEAP16[$6>>1]|0;
  $9 = $8 << 16 >> 16;
  $orderIdx = $9;
  $10 = $orderIdx;
  $11 = $1;
  $12 = ($10|0)==($11|0);
  if ($12) {
   label = 3;
   break;
  }
  $13 = $currIdx;
  $14 = (($13) + 1)|0;
  $currIdx = $14;
  $15 = $currIdx;
  $16 = HEAP16[366680>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   break;
  }
 }
 if ((label|0) == 3) {
 }
 $19 = $currIdx;
 $20 = $numEntries;
 $21 = ($19|0)>=($20|0);
 if ($21) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $22 = $currIdx;
  $23 = $localTextBuf;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $ptrCurrentEntry = $26;
  $27 = $currIdx;
  $28 = (($27) + 1)|0;
  $29 = $localTextBuf;
  $30 = (($29) + ($28<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 << 16 >> 16;
  $ptrNextEntry = $32;
  $33 = HEAP32[366952>>2]|0;
  $34 = $ptrCurrentEntry;
  $35 = (($33) + ($34)|0);
  HEAP32[123160>>2] = $35;
  $36 = $ptrNextEntry;
  $37 = $ptrCurrentEntry;
  $38 = (($36) - ($37))|0;
  HEAP32[123152>>2] = $38;
  $39 = $numEntries;
  $40 = $39&65535;
  HEAP16[366680>>1] = $40;
  $41 = $currIdx;
  HEAP32[123128>>2] = $41;
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _setFontParameters($spaceBetween,$charSpace) {
 $spaceBetween = $spaceBetween|0;
 $charSpace = $charSpace|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $spaceBetween;
 $1 = $charSpace;
 $2 = $0;
 HEAP32[123184>>2] = $2;
 $3 = $1;
 HEAP32[123192>>2] = $3;
 STACKTOP = sp;return;
}
function _initProgressiveTextBuffer() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 HEAP8[123552>>0] = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[123232>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  (_strcat((123552|0),(366960|0))|0);
  $3 = $i;
  $4 = (($3) + 1)|0;
  $i = $4;
 }
 HEAP32[123816>>2] = 123552;
 HEAP32[123912>>2] = 16;
 HEAP32[123824>>2] = 0;
 STACKTOP = sp;return;
}
function _printText8Sub4($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $counter2 = 0, $temp = 0, $var1 = 0, $var2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $counter2 = 0;
 $3 = HEAP32[123840>>2]|0;
 $4 = ($3|0)<(32);
 if ($4) {
  $5 = HEAP32[123840>>2]|0;
  $6 = ($5*3)|0;
  $temp = $6;
  $7 = $2;
  $8 = $temp;
  $9 = (123920 + ($8<<1)|0);
  HEAP16[$9>>1] = $7;
  $10 = $0;
  $11 = $temp;
  $12 = (($11) + 1)|0;
  $13 = (123920 + ($12<<1)|0);
  HEAP16[$13>>1] = $10;
  $14 = $1;
  $15 = $temp;
  $16 = (($15) + 2)|0;
  $17 = (123920 + ($16<<1)|0);
  HEAP16[$17>>1] = $14;
  $18 = HEAP32[123840>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[123840>>2] = $19;
  STACKTOP = sp;return;
 }
 while(1) {
  $20 = $counter2;
  $21 = ($20|0)<(31);
  if (!($21)) {
   break;
  }
  $22 = $counter2;
  $23 = (($22) + 1)|0;
  $24 = ($23*3)|0;
  $var1 = $24;
  $25 = $counter2;
  $26 = ($25*3)|0;
  $var2 = $26;
  $27 = $var1;
  $28 = (123920 + ($27<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $var2;
  $31 = (123920 + ($30<<1)|0);
  HEAP16[$31>>1] = $29;
  $32 = $var1;
  $33 = (($32) + 1)|0;
  $34 = (123920 + ($33<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $var2;
  $37 = (($36) + 1)|0;
  $38 = (123920 + ($37<<1)|0);
  HEAP16[$38>>1] = $35;
  $39 = $var1;
  $40 = (($39) + 2)|0;
  $41 = (123920 + ($40<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $var2;
  $44 = (($43) + 2)|0;
  $45 = (123920 + ($44<<1)|0);
  HEAP16[$45>>1] = $42;
  $46 = $counter2;
  $47 = (($46) + 1)|0;
  $counter2 = $47;
 }
 $48 = $2;
 HEAP16[((123920 + 186|0))>>1] = $48;
 $49 = $0;
 HEAP16[((123920 + 188|0))>>1] = $49;
 $50 = $1;
 HEAP16[((123920 + 190|0))>>1] = $50;
 STACKTOP = sp;return;
}
function _getWordSize($arg1,$arg2) {
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg2Save = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $arg1;
 $1 = $arg2;
 $temp = 0;
 $2 = $1;
 $arg2Save = $2;
 while(1) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = ($9|0)!=(1);
   if ($10) {
    $11 = $0;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = ($13|0)!=(32);
    $26 = $14;
   } else {
    $26 = 0;
   }
  } else {
   $26 = 0;
  }
  if (!($26)) {
   break;
  }
  $15 = $temp;
  $16 = (($15) + 1)|0;
  $temp = $16;
  $17 = $0;
  $18 = (($17) + 1|0);
  $0 = $18;
  $19 = HEAP8[$17>>0]|0;
  $20 = $1;
  $21 = (($20) + 1|0);
  $1 = $21;
  HEAP8[$20>>0] = $19;
 }
 $22 = $temp;
 HEAP32[366968>>2] = $22;
 $23 = $1;
 HEAP8[$23>>0] = 0;
 $24 = $arg2Save;
 $25 = (_getTextSize($24)|0);
 HEAP32[366976>>2] = $25;
 STACKTOP = sp;return;
}
function _processTextLine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $buffer = 0, $temp = 0, $var4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[123880>>2]|0;
 $buffer = $0;
 HEAP32[123192>>2] = 7;
 $var4 = 1;
 HEAP32[123912>>2] = 0;
 HEAP32[124112>>2] = 0;
 HEAP8[123552>>0] = 0;
 while(1) {
  $1 = $buffer;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==(32);
  if ($4) {
   $5 = $buffer;
   $6 = (($5) + 1|0);
   $buffer = $6;
   continue;
  }
  $7 = $buffer;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $buffer;
  HEAP32[123880>>2] = $11;
  $12 = $buffer;
  _getWordSize($12,123296);
  $13 = HEAP32[123912>>2]|0;
  $14 = HEAP32[123192>>2]|0;
  $15 = (($13) + ($14))|0;
  $16 = HEAP32[366976>>2]|0;
  $17 = (($15) + ($16))|0;
  $18 = HEAP32[123280>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   label = 19;
   break;
  }
  $20 = $buffer;
  $21 = (($20) + 1|0);
  $temp = $21;
  $22 = $buffer;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)==(1);
  if ($25) {
   label = 7;
   break;
  }
  $27 = HEAP8[123296>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)==(64);
  if ($29) {
   label = 9;
   break;
  }
  $40 = HEAP32[366968>>2]|0;
  $41 = $buffer;
  $42 = (($41) + ($40)|0);
  $buffer = $42;
  $43 = $buffer;
  HEAP32[123880>>2] = $43;
  (_strcat((123552|0),(123296|0))|0);
  (_strcat((123552|0),(366960|0))|0);
  $44 = HEAP32[124112>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[124112>>2] = $45;
  $46 = HEAP32[366976>>2]|0;
  $47 = HEAP32[123192>>2]|0;
  $48 = (($46) + ($47))|0;
  $49 = HEAP32[123912>>2]|0;
  $50 = (($49) + ($48))|0;
  HEAP32[123912>>2] = $50;
  $51 = HEAP32[123880>>2]|0;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($53|0)!=(0);
  if (!($54)) {
   label = 16;
   break;
  }
  $55 = HEAP32[123880>>2]|0;
  $56 = (($55) + 1|0);
  HEAP32[123880>>2] = $56;
 }
 if ((label|0) == 7) {
  $var4 = 0;
  $26 = $temp;
  $buffer = $26;
  label = 18;
 }
 else if ((label|0) == 9) {
  $var4 = 0;
  $30 = $temp;
  $buffer = $30;
  $31 = HEAP32[123912>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   HEAP32[123912>>2] = 7;
   $33 = HEAP16[366400>>1]|0;
   HEAP16[123552>>1] = $33;
  }
  $34 = HEAP8[((123296 + 1|0))>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)==(80);
  if ($36) {
   $37 = HEAP32[123272>>2]|0;
   HEAP32[123824>>2] = $37;
   $38 = $buffer;
   $39 = (($38) + 1|0);
   $buffer = $39;
  }
  label = 17;
 }
 else if ((label|0) == 16) {
  label = 17;
 }
 if ((label|0) == 17) {
  label = 18;
 }
 if ((label|0) == 18) {
  label = 19;
 }
 if ((label|0) == 19) {
 }
 $57 = HEAP32[124112>>2]|0;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = HEAP32[124112>>2]|0;
  $60 = (($59) + -1)|0;
  HEAP32[124112>>2] = $60;
 }
 $61 = HEAP32[123880>>2]|0;
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = ($63|0)!=(0);
 if (!($64)) {
  $82 = $buffer;
  HEAP32[123880>>2] = $82;
  HEAP32[123816>>2] = 123552;
  STACKTOP = sp;return;
 }
 $65 = $var4;
 $66 = $65 << 16 >> 16;
 $67 = ($66|0)==(1);
 if (!($67)) {
  $82 = $buffer;
  HEAP32[123880>>2] = $82;
  HEAP32[123816>>2] = 123552;
  STACKTOP = sp;return;
 }
 $68 = HEAP32[123280>>2]|0;
 $69 = HEAP32[123912>>2]|0;
 $70 = (($68) - ($69))|0;
 $71 = HEAP32[124112>>2]|0;
 $72 = (($70|0) / ($71|0))&-1;
 $73 = HEAP32[123192>>2]|0;
 $74 = (($73) + ($72))|0;
 HEAP32[123192>>2] = $74;
 $75 = HEAP32[123280>>2]|0;
 $76 = HEAP32[123912>>2]|0;
 $77 = (($75) - ($76))|0;
 $78 = HEAP32[123280>>2]|0;
 $79 = (($77) - ($78))|0;
 $80 = HEAP32[123912>>2]|0;
 $81 = (($79) - ($80))|0;
 HEAP32[123904>>2] = $81;
 $82 = $buffer;
 HEAP32[123880>>2] = $82;
 HEAP32[123816>>2] = 123552;
 STACKTOP = sp;return;
}
function _printText10Sub() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[123216>>2]|0;
 $1 = $0&65535;
 HEAP16[39000>>1] = $1;
 $2 = HEAP32[123256>>2]|0;
 $3 = (($2) - 3)|0;
 $4 = $3&65535;
 HEAP16[((39000 + 2|0))>>1] = $4;
 $5 = HEAP32[123264>>2]|0;
 $6 = (($5) - 24)|0;
 $7 = $6&65535;
 HEAP16[((39000 + 4|0))>>1] = $7;
 $8 = HEAP32[123216>>2]|0;
 $9 = $8&65535;
 HEAP16[((39000 + 6|0))>>1] = $9;
 $10 = HEAP32[123256>>2]|0;
 $11 = (($10) - 24)|0;
 $12 = $11&65535;
 HEAP16[((39000 + 8|0))>>1] = $12;
 $13 = HEAP32[123264>>2]|0;
 $14 = (($13) - 3)|0;
 $15 = $14&65535;
 HEAP16[((39000 + 10|0))>>1] = $15;
 $16 = HEAP32[123208>>2]|0;
 $17 = $16&65535;
 HEAP16[((39000 + 12|0))>>1] = $17;
 $18 = HEAP16[((39000 + 2|0))>>1]|0;
 HEAP16[((39000 + 14|0))>>1] = $18;
 $19 = HEAP16[((39000 + 10|0))>>1]|0;
 HEAP16[((39000 + 16|0))>>1] = $19;
 HEAP16[38984>>1] = 0;
 HEAP32[38992>>2] = 3;
 $20 = (_computePolygons()|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP16[38984>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = HEAP32[123216>>2]|0;
  _renderPolygons($23,$24);
 }
 $25 = HEAP32[123256>>2]|0;
 $26 = (($25) - 24)|0;
 $27 = HEAP32[123264>>2]|0;
 $28 = (($27) - 24)|0;
 $29 = HEAP32[123256>>2]|0;
 $30 = (($29) - 3)|0;
 $31 = HEAP32[123264>>2]|0;
 $32 = (($31) - 3)|0;
 _copyBlockPhys($26,$28,$30,$32);
 STACKTOP = sp;return;
}
function _printText10Sub2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $counter = 0, $counter2 = 0, $currentIndex = 0, $currentLetter = 0, $ptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[123840>>2]|0;
 $currentLetter = $0;
 $1 = $currentLetter;
 $2 = (($1) + -1)|0;
 $currentLetter = $2;
 $3 = $currentLetter;
 $4 = ($3*3)|0;
 $currentIndex = $4;
 $5 = $currentIndex;
 $6 = (123920 + ($5<<1)|0);
 $ptr = $6;
 _sdldelay(15);
 $7 = HEAP32[123840>>2]|0;
 $counter = $7;
 $8 = HEAP32[123208>>2]|0;
 $counter2 = $8;
 while(1) {
  $9 = $counter;
  $10 = (($9) + -1)|0;
  $counter = $10;
  $11 = ($10|0)>=(0);
  if (!($11)) {
   break;
  }
  $12 = $counter2;
  _setFontColor($12);
  $13 = $ptr;
  $14 = (($13) + 2|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = $ptr;
  $18 = (($17) + 4|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = $ptr;
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&255;
  $24 = $counter2;
  _drawCharacterShadow($16,$20,$23,$24);
  $25 = HEAP32[123224>>2]|0;
  $26 = $counter2;
  $27 = (($26) - ($25))|0;
  $counter2 = $27;
  $28 = $counter2;
  $29 = HEAP32[123216>>2]|0;
  $30 = ($28|0)>($29|0);
  if ($30) {
   $31 = HEAP32[123216>>2]|0;
   $counter2 = $31;
  }
  $32 = $ptr;
  $33 = (($32) + -6|0);
  $ptr = $33;
 }
 STACKTOP = sp;return;
}
function _TEXT_GetLetterSize($character,$pLetterWidth,$pLetterHeight,$pFont) {
 $character = $character|0;
 $pLetterWidth = $pLetterWidth|0;
 $pLetterHeight = $pLetterHeight|0;
 $pFont = $pFont|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $character;
 $1 = $pLetterWidth;
 $2 = $pLetterHeight;
 $3 = $pFont;
 $4 = $3;
 $5 = $3;
 $6 = $0;
 $7 = $6&255;
 $8 = $7<<2;
 $9 = (($5) + ($8)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($4) + ($11)|0);
 $temp = $12;
 $13 = $temp;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $1;
 HEAP32[$16>>2] = $15;
 $17 = $temp;
 $18 = (($17) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $2;
 HEAP32[$21>>2] = $20;
 STACKTOP = sp;return;
}
function _printText10() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $charHeight = 0, $charWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $charWidth = sp;
 $charHeight = sp + 4|0;
 $1 = HEAP32[123288>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $3 = HEAP32[123816>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[123856>>2]|0;
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = HEAP32[123896>>2]|0;
    $10 = ($9|0)!=(0);
    if ($10) {
     _printText10Sub();
    }
    HEAP32[123288>>2] = 0;
    $0 = 0;
    $87 = $0;
    STACKTOP = sp;return ($87|0);
   }
   $11 = HEAP32[123864>>2]|0;
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = HEAP32[123240>>2]|0;
    $14 = HEAP32[123248>>2]|0;
    $15 = HEAP32[123256>>2]|0;
    $16 = HEAP32[123264>>2]|0;
    $17 = HEAP32[25944>>2]|0;
    $18 = HEAP32[123240>>2]|0;
    $19 = HEAP32[123248>>2]|0;
    $20 = HEAP32[25952>>2]|0;
    _blitBox($13,$14,$15,$16,$17,$18,$19,$20);
    $21 = HEAP32[123240>>2]|0;
    $22 = HEAP32[123248>>2]|0;
    $23 = HEAP32[123256>>2]|0;
    $24 = HEAP32[123264>>2]|0;
    _copyBlockPhys($21,$22,$23,$24);
    HEAP32[123840>>2] = 0;
    HEAP32[123864>>2] = 0;
    $25 = HEAP32[123240>>2]|0;
    $26 = (($25) + 8)|0;
    HEAP32[123848>>2] = $26;
    $27 = HEAP32[123248>>2]|0;
    $28 = (($27) + 8)|0;
    HEAP32[123872>>2] = $28;
   }
   $29 = HEAP32[123880>>2]|0;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ($31|0)==(0);
   if (!($32)) {
    _processTextLine();
    break;
   }
   _initProgressiveTextBuffer();
   HEAP32[123856>>2] = 1;
   $0 = 1;
   $87 = $0;
   STACKTOP = sp;return ($87|0);
  }
 } while(0);
 $33 = HEAP32[123816>>2]|0;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ($35|0)==(0);
 if ($36) {
  $0 = 1;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $37 = HEAP32[123848>>2]|0;
 $38 = $37&65535;
 $39 = HEAP32[123872>>2]|0;
 $40 = $39&65535;
 $41 = HEAP32[123816>>2]|0;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 _printText8Sub4($38,$40,$43);
 _printText10Sub2();
 $44 = HEAP32[123816>>2]|0;
 $45 = HEAP8[$44>>0]|0;
 $46 = HEAP32[123168>>2]|0;
 _TEXT_GetLetterSize($45,$charWidth,$charHeight,$46);
 $47 = HEAP32[123816>>2]|0;
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)!=(32);
 if ($50) {
  $51 = HEAP32[$charWidth>>2]|0;
  $52 = (($51) + 2)|0;
  $53 = HEAP32[123848>>2]|0;
  $54 = (($53) + ($52))|0;
  HEAP32[123848>>2] = $54;
 } else {
  $55 = HEAP32[123904>>2]|0;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = HEAP32[123848>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[123848>>2] = $58;
   $59 = HEAP32[123904>>2]|0;
   $60 = (($59) + -1)|0;
   HEAP32[123904>>2] = $60;
  }
  $61 = HEAP32[123192>>2]|0;
  $62 = HEAP32[123848>>2]|0;
  $63 = (($62) + ($61))|0;
  HEAP32[123848>>2] = $63;
 }
 $64 = HEAP32[123816>>2]|0;
 $65 = (($64) + 1|0);
 HEAP32[123816>>2] = $65;
 $66 = HEAP32[123816>>2]|0;
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = ($68|0)!=(0);
 if ($69) {
  $0 = 1;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $70 = HEAP32[123872>>2]|0;
 $71 = (($70) + 38)|0;
 HEAP32[123872>>2] = $71;
 $72 = HEAP32[123240>>2]|0;
 $73 = (($72) + 8)|0;
 HEAP32[123848>>2] = $73;
 $74 = HEAP32[123864>>2]|0;
 $75 = ($74|0)==(1);
 if ($75) {
  $76 = HEAP32[123856>>2]|0;
  $77 = ($76|0)==(0);
  if ($77) {
   _printText10Sub();
   $0 = 2;
   $87 = $0;
   STACKTOP = sp;return ($87|0);
  }
 }
 $78 = HEAP32[123824>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[123824>>2] = $79;
 $80 = HEAP32[123824>>2]|0;
 $81 = HEAP32[123272>>2]|0;
 $82 = ($80|0)<($81|0);
 if ($82) {
  $0 = 1;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 _initProgressiveTextBuffer();
 HEAP32[123864>>2] = 1;
 $83 = HEAP32[123880>>2]|0;
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ($85|0)==(0);
 if ($86) {
  HEAP32[123856>>2] = 1;
 }
 $0 = 1;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _drawTextFullscreen($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $printedText = 0, $skipText = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $skipText = 0;
 _saveClip();
 _resetClip();
 $1 = HEAP32[25952>>2]|0;
 $2 = HEAP32[25944>>2]|0;
 _copyScreen($1,$2);
 $3 = HEAP32[((308424 + 24|0))>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  (_initVoxToPlay($5)|0);
 }
 $6 = HEAP32[((308424 + 32|0))>>2]|0;
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = $0;
   _initText($8);
   _initDialogueBox();
   while(1) {
    _readKeys();
    $9 = (_printText10()|0);
    $printedText = $9;
    $10 = HEAP32[123128>>2]|0;
    (_playVox($10)|0);
    $11 = $printedText;
    $12 = ($11|0)==(2);
    if ($12) {
     while(1) {
      _readKeys();
      $13 = HEAP16[120304>>1]|0;
      $14 = $13 << 16 >> 16;
      $15 = ($14|0)==(0);
      if ($15) {
       $16 = HEAP16[122408>>1]|0;
       $17 = $16 << 16 >> 16;
       $18 = ($17|0)==(0);
       if ($18) {
        $19 = HEAP16[122416>>1]|0;
        $20 = $19 << 16 >> 16;
        $21 = ($20|0)==(0);
        if ($21) {
         break;
        }
       }
      }
      $22 = HEAP32[123128>>2]|0;
      (_playVox($22)|0);
      _sdldelay(1);
     }
     while(1) {
      _readKeys();
      $23 = HEAP16[120304>>1]|0;
      $24 = $23 << 16 >> 16;
      $25 = ($24|0)!=(0);
      if ($25) {
       break;
      }
      $26 = HEAP16[122408>>1]|0;
      $27 = $26 << 16 >> 16;
      $28 = ($27|0)!=(0);
      if ($28) {
       break;
      }
      $29 = HEAP16[122416>>1]|0;
      $30 = $29 << 16 >> 16;
      $31 = ($30|0)!=(0);
      if ($31) {
       break;
      }
      $32 = HEAP32[123128>>2]|0;
      (_playVox($32)|0);
      _sdldelay(1);
     }
    }
    $33 = HEAP16[120304>>1]|0;
    $34 = $33 << 16 >> 16;
    $35 = ($34|0)==(1);
    if ($35) {
     $skipText = 1;
    }
    $36 = $printedText;
    $37 = ($36|0)!=(0);
    if (!($37)) {
     $38 = HEAP32[123128>>2]|0;
     $39 = (_isSamplePlaying($38)|0);
     $40 = ($39|0)!=(0);
     if (!($40)) {
      label = 25;
      break;
     }
    }
    _sdldelay(1);
    $41 = $skipText;
    $42 = ($41|0)!=(0);
    $43 = $42 ^ 1;
    if (!($43)) {
     break;
    }
   }
   if ((label|0) == 25) {
   }
   HEAP32[123136>>2] = 0;
   $44 = HEAP32[((308424 + 24|0))>>2]|0;
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = HEAP32[123128>>2]|0;
    $47 = (_isSamplePlaying($46)|0);
    $48 = ($47|0)!=(0);
    if ($48) {
     $49 = HEAP32[123128>>2]|0;
     _stopVox($49);
    }
   }
   HEAP32[123288>>2] = 0;
   $50 = $printedText;
   $51 = ($50|0)!=(0);
   if ($51) {
    _loadClip();
    STACKTOP = sp;return;
   }
   $52 = $skipText;
   $53 = ($52|0)!=(0);
   if ($53) {
    _loadClip();
    STACKTOP = sp;return;
   }
   while(1) {
    _readKeys();
    _sdldelay(1);
    $54 = HEAP16[120304>>1]|0;
    $55 = $54 << 16 >> 16;
    $56 = ($55|0)!=(0);
    if ($56) {
     $84 = 1;
    } else {
     $57 = HEAP16[122408>>1]|0;
     $58 = $57 << 16 >> 16;
     $59 = ($58|0)!=(0);
     if ($59) {
      $84 = 1;
     } else {
      $60 = HEAP16[122416>>1]|0;
      $61 = $60 << 16 >> 16;
      $62 = ($61|0)!=(0);
      $84 = $62;
     }
    }
    if (!($84)) {
     break;
    }
   }
   while(1) {
    _readKeys();
    $63 = HEAP16[120304>>1]|0;
    $64 = $63 << 16 >> 16;
    $65 = ($64|0)!=(0);
    if ($65) {
     label = 43;
     break;
    }
    $66 = HEAP16[122408>>1]|0;
    $67 = $66 << 16 >> 16;
    $68 = ($67|0)!=(0);
    if ($68) {
     label = 45;
     break;
    }
    _sdldelay(1);
    $69 = HEAP16[122416>>1]|0;
    $70 = ($69<<16>>16)!=(0);
    $71 = $70 ^ 1;
    if (!($71)) {
     label = 48;
     break;
    }
   }
   if ((label|0) == 43) {
    _loadClip();
    STACKTOP = sp;return;
   }
   else if ((label|0) == 45) {
    _loadClip();
    STACKTOP = sp;return;
   }
   else if ((label|0) == 48) {
    break;
   }
  } else {
   while(1) {
    $72 = HEAP32[123128>>2]|0;
    $73 = (_playVox($72)|0);
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = HEAP16[120304>>1]|0;
     $76 = $75 << 16 >> 16;
     $77 = ($76|0)!=(1);
     $85 = $77;
    } else {
     $85 = 0;
    }
    if (!($85)) {
     break;
    }
   }
   HEAP32[123136>>2] = 0;
   HEAP32[123144>>2] = 0;
  }
 } while(0);
 $78 = HEAP32[((308424 + 24|0))>>2]|0;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = HEAP32[123128>>2]|0;
  $81 = (_isSamplePlaying($80)|0);
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = HEAP32[123128>>2]|0;
   _stopVox($83);
  }
 }
 _loadClip();
 STACKTOP = sp;return;
}
function _setFontCrossColor($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $color;
 HEAP32[123224>>2] = -1;
 HEAP32[123232>>2] = 14;
 $1 = $0;
 $2 = $1 << 4;
 HEAP32[123208>>2] = $2;
 $3 = $0;
 $4 = $3 << 4;
 $5 = (($4) + 12)|0;
 HEAP32[123216>>2] = $5;
 STACKTOP = sp;return;
}
function _setTextCrossColor($stopColor,$startColor,$stepSize) {
 $stopColor = $stopColor|0;
 $startColor = $startColor|0;
 $stepSize = $stepSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stopColor;
 $1 = $startColor;
 $2 = $stepSize;
 $3 = $1;
 HEAP32[123208>>2] = $3;
 $4 = $0;
 HEAP32[123216>>2] = $4;
 $5 = $2;
 HEAP32[123224>>2] = $5;
 $6 = $1;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = (($8) + 1)|0;
 $10 = $2;
 $11 = (($9|0) / ($10|0))&-1;
 HEAP32[123232>>2] = $11;
 STACKTOP = sp;return;
}
function _copyText($src,$dst,$size) {
 $src = $src|0;
 $dst = $dst|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $dst;
 $2 = $size;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = (($6) + 1|0);
  $0 = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $1;
  $10 = (($9) + 1|0);
  $1 = $10;
  HEAP8[$9>>0] = $8;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 STACKTOP = sp;return;
}
function _getMenuText($index,$text) {
 $index = $index|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $text;
 $2 = $0;
 $3 = HEAP32[124384>>2]|0;
 $4 = ($2|0)==($3|0);
 do {
  if ($4) {
   $5 = HEAP32[124392>>2]|0;
   $6 = HEAP32[122480>>2]|0;
   $7 = ($5|0)==($6|0);
   if (!($7)) {
    break;
   }
   $8 = $1;
   (_strcpy(($8|0),(124400|0))|0);
   STACKTOP = sp;return;
  }
 } while(0);
 $9 = $0;
 $10 = (_getText($9)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = $1;
  HEAP8[$12>>0] = 0;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[123152>>2]|0;
 $14 = (($13) - 1)|0;
 $15 = ($14|0)>(255);
 if ($15) {
  HEAP32[123152>>2] = 255;
 }
 $16 = HEAP32[123160>>2]|0;
 $17 = $1;
 $18 = HEAP32[123152>>2]|0;
 _copyText($16,$17,$18);
 $19 = HEAP32[123152>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[123152>>2] = $20;
 $21 = $1;
 $22 = HEAP32[123152>>2]|0;
 _copyText($21,124400,$22);
 $23 = $0;
 HEAP32[124384>>2] = $23;
 $24 = HEAP32[122480>>2]|0;
 HEAP32[124392>>2] = $24;
 STACKTOP = sp;return;
}
function _textClipFull() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[123240>>2] = 8;
 HEAP32[123248>>2] = 8;
 HEAP32[123256>>2] = 631;
 HEAP32[123264>>2] = 471;
 HEAP32[123272>>2] = 11;
 HEAP32[123280>>2] = 607;
 STACKTOP = sp;return;
}
function _textClipSmall() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[123240>>2] = 16;
 HEAP32[123248>>2] = 334;
 HEAP32[123256>>2] = 623;
 HEAP32[123264>>2] = 463;
 HEAP32[123272>>2] = 3;
 HEAP32[123280>>2] = 591;
 STACKTOP = sp;return;
}
function _drawAskQuestion($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $textStatus = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $textStatus = 1;
 $1 = HEAP32[((308424 + 24|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = $0;
  (_initVoxToPlay($3)|0);
 }
 $4 = $0;
 _initText($4);
 _initDialogueBox();
 while(1) {
  _readKeys();
  $5 = (_printText10()|0);
  $textStatus = $5;
  $6 = $textStatus;
  $7 = ($6|0)==(2);
  if ($7) {
   while(1) {
    _readKeys();
    $8 = HEAP32[123128>>2]|0;
    (_playVox($8)|0);
    _sdldelay(1);
    $9 = HEAP16[120304>>1]|0;
    $10 = $9 << 16 >> 16;
    $11 = ($10|0)!=(0);
    if ($11) {
     $37 = 1;
    } else {
     $12 = HEAP16[122408>>1]|0;
     $13 = $12 << 16 >> 16;
     $14 = ($13|0)!=(0);
     if ($14) {
      $37 = 1;
     } else {
      $15 = HEAP16[122416>>1]|0;
      $16 = $15 << 16 >> 16;
      $17 = ($16|0)!=(0);
      $37 = $17;
     }
    }
    if (!($37)) {
     break;
    }
   }
   while(1) {
    _readKeys();
    $18 = HEAP32[123128>>2]|0;
    (_playVox($18)|0);
    _sdldelay(1);
    $19 = HEAP16[120304>>1]|0;
    $20 = ($19<<16>>16)!=(0);
    if ($20) {
     $38 = 0;
    } else {
     $21 = HEAP16[122408>>1]|0;
     $22 = ($21<<16>>16)!=(0);
     if ($22) {
      $38 = 0;
     } else {
      $23 = HEAP16[122416>>1]|0;
      $24 = ($23<<16>>16)!=(0);
      $25 = $24 ^ 1;
      $38 = $25;
     }
    }
    if (!($38)) {
     break;
    }
   }
  }
  _sdldelay(1);
  $26 = $textStatus;
  $27 = ($26|0)!=(0);
  if (!($27)) {
   break;
  }
 }
 $28 = HEAP32[((308424 + 24|0))>>2]|0;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  HEAP32[123288>>2] = 0;
  STACKTOP = sp;return;
 }
 while(1) {
  $30 = HEAP32[123128>>2]|0;
  $31 = (_playVoxSimple($30)|0);
  $32 = ($31|0)!=(0);
  if (!($32)) {
   break;
  }
 }
 HEAP32[123136>>2] = 0;
 HEAP32[123144>>2] = 0;
 $33 = HEAP32[123128>>2]|0;
 $34 = (_isSamplePlaying($33)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = HEAP32[123128>>2]|0;
  _stopVox($36);
 }
 HEAP32[123288>>2] = 0;
 STACKTOP = sp;return;
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 367192 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (366984 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa21 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi243Z2D = 0, $$pre229 = 0, $$pre231 = 0, $$pre235 = 0, $$pre237 = 0, $$pre238 = 0, $$pre240 = 0, $$pre241 = 0, $$pre242 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0224 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$030 = 0, $dest$0 = 0;
 var $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph49 = 0, $i$0$ph49$lcssa = 0, $i$0$ph49$us56 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit723 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp622 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0135 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0141 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$324 = 0, $p$4 = 0;
 var $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0140 = 0, $pos$1 = 0, $pos$2 = 0, $s$0133 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0;
 var $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0134 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph165 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$025 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp;
 $scanset = sp + 33|0;
 $wc = sp + 8|0;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0135 = 0;$p$0141 = $fmt;$pos$0140 = 0;$s$0133 = 0;$wcs$0134 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0141>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0141) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 37)) {
        break L21;
       } else if ((($45<<24>>24) == 42)) {
        $66 = (($p$0141) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0141) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            break;
           }
          }
          $74 = (($p$0141) + 3|0);
          $dest$0 = $72;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp622 = (($77) + -48)|0;
      $isdigit723 = ($isdigittmp622>>>0)<(10);
      if ($isdigit723) {
       $81 = $77;$p$324 = $p$2;$width$025 = 0;
       while(1) {
        $78 = ($width$025*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$324) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$324 = $82;$width$025 = $80;
        } else {
         $$lcssa21 = $83;$p$3$lcssa = $82;$width$0$lcssa = $80;
         break;
        }
       }
      } else {
       $$lcssa21 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa21<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa21;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0133;$wcs$1 = $wcs$0134;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      default: {
       $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 110)) {
       $104 = ($pos$0140|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0140;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $107 = $pos$0140&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $108 = $pos$0140&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0140;$width$1 = $$width$0;
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0140;$width$1 = $width$0$lcssa;
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre229 = HEAP32[$3>>2]|0;
       if ($124) {
        $128 = $$pre229;
       } else {
        $125 = (($$pre229) + -1|0);
        HEAP32[$3>>2] = $125;
        $128 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $129 = $128;
       $130 = $127;
       $131 = (($126) + ($pos$0140))|0;
       $132 = (($131) + ($129))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $140 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre231 = HEAP32[$4>>2]|0;
       $140 = $$pre231;
      }
      $141 = ($140|0)==(0|0);
      if (!($141)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L78: do {
       switch ($$|0) {
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $324 = (+___floatscan($f,$$size$0,0));
        $325 = HEAP32[$5>>2]|0;
        $326 = HEAP32[$3>>2]|0;
        $327 = HEAP32[$6>>2]|0;
        $328 = $326;
        $329 = $327;
        $330 = (($329) - ($328))|0;
        $331 = ($325|0)==($330|0);
        if ($331) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $332 = ($dest$0|0)==(0|0);
        if ($332) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $333 = $324;
          HEAPF32[$dest$0>>2] = $333;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        L90: do {
         if ($146) {
          $147 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($147) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $148 = (($p$5) + 1|0);
          $149 = HEAP8[$148>>0]|0;
          $150 = ($149<<24>>24)==(94);
          $151 = (($p$5) + 2|0);
          $invert$0 = $150&1;
          $p$6 = $150 ? $151 : $148;
          $152 = $150&1;
          _memset(($scanset|0),($152|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $153 = HEAP8[$p$6>>0]|0;
          if ((($153<<24>>24) == 45)) {
           $154 = (($p$6) + 1|0);
           $155 = $invert$0 ^ 1;
           $156 = $155&255;
           HEAP8[$10>>0] = $156;
           $$pre$phi243Z2D = $156;$p$7$ph = $154;
          } else if ((($153<<24>>24) == 93)) {
           $157 = (($p$6) + 1|0);
           $158 = $invert$0 ^ 1;
           $159 = $158&255;
           HEAP8[$11>>0] = $159;
           $$pre$phi243Z2D = $159;$p$7$ph = $157;
          } else {
           $$pre241 = $invert$0 ^ 1;
           $$pre242 = $$pre241&255;
           $$pre$phi243Z2D = $$pre242;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $160 = HEAP8[$p$7>>0]|0;
           if ((($160<<24>>24) == 0)) {
            $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else if ((($160<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L90;
           } else if ((($160<<24>>24) == 45)) {
            $161 = (($p$7) + 1|0);
            $162 = HEAP8[$161>>0]|0;
            if ((($162<<24>>24) == 93) | (($162<<24>>24) == 0)) {
             $173 = 45;$p$8 = $p$7;
            } else {
             $163 = (($p$7) + -1|0);
             $164 = HEAP8[$163>>0]|0;
             $165 = ($164&255)<($162&255);
             if ($165) {
              $166 = $164&255;
              $c$030 = $166;
              while(1) {
               $167 = (($c$030) + 1)|0;
               $168 = (($scanset) + ($167)|0);
               HEAP8[$168>>0] = $$pre$phi243Z2D;
               $169 = HEAP8[$161>>0]|0;
               $170 = $169&255;
               $171 = ($167|0)<($170|0);
               if ($171) {
                $c$030 = $167;
               } else {
                $173 = $169;$p$8 = $161;
                break;
               }
              }
             } else {
              $173 = $162;$p$8 = $161;
             }
            }
           } else {
            $173 = $160;$p$8 = $p$7;
           }
           $172 = $173&255;
           $174 = (($172) + 1)|0;
           $175 = (($scanset) + ($174)|0);
           HEAP8[$175>>0] = $$pre$phi243Z2D;
           $176 = (($p$8) + 1|0);
           $p$7 = $176;
          }
         }
        } while(0);
        $177 = (($width$1) + 1)|0;
        $$8 = $144 ? $177 : 31;
        $178 = ($$size$0|0)==(1);
        $179 = ($alloc$0|0)!=(0);
        L109: do {
         if ($178) {
          if ($179) {
           $180 = $$8 << 2;
           $181 = (_malloc($180)|0);
           $182 = ($181|0)==(0|0);
           if ($182) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $181;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $181;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L144: while(1) {
           $183 = ($wcs$3$ph|0)==(0|0);
           if ($183) {
            while(1) {
             $186 = HEAP32[$3>>2]|0;
             $197 = HEAP32[$4>>2]|0;
             $198 = ($186>>>0)<($197>>>0);
             if ($198) {
              $185 = (($186) + 1|0);
              HEAP32[$3>>2] = $185;
              $187 = HEAP8[$186>>0]|0;
              $188 = $187&255;
              $190 = $188;
             } else {
              $184 = (___shgetc($f)|0);
              $190 = $184;
             }
             $189 = (($190) + 1)|0;
             $191 = (($scanset) + ($189)|0);
             $192 = HEAP8[$191>>0]|0;
             $193 = ($192<<24>>24)==(0);
             if ($193) {
              $i$0$ph49$lcssa = $i$0$ph;$wcs$3$ph165 = 0;
              break L144;
             }
             $194 = $190&255;
             HEAP8[$0>>0] = $194;
             $195 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($195|0) == -1)) {
              $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             } else if ((($195|0) == -2)) {
              continue;
             }
             $196 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $179 & $196;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($179) {
             $i$0$ph49$us56 = $i$0$ph;
            } else {
             $i$0$ph49 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $201 = HEAP32[$3>>2]|0;
              $215 = HEAP32[$4>>2]|0;
              $216 = ($201>>>0)<($215>>>0);
              if ($216) {
               $200 = (($201) + 1|0);
               HEAP32[$3>>2] = $200;
               $202 = HEAP8[$201>>0]|0;
               $203 = $202&255;
               $205 = $203;
              } else {
               $199 = (___shgetc($f)|0);
               $205 = $199;
              }
              $204 = (($205) + 1)|0;
              $206 = (($scanset) + ($204)|0);
              $207 = HEAP8[$206>>0]|0;
              $208 = ($207<<24>>24)==(0);
              if ($208) {
               $i$0$ph49$lcssa = $i$0$ph49$us56;$wcs$3$ph165 = $wcs$3$ph;
               break L144;
              }
              $209 = $205&255;
              HEAP8[$0>>0] = $209;
              $210 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($210|0) == -1)) {
               $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($210|0) == -2))) {
               break;
              }
             }
             $211 = HEAP32[$wc>>2]|0;
             $212 = (($i$0$ph49$us56) + 1)|0;
             $213 = (($wcs$3$ph) + ($i$0$ph49$us56<<2)|0);
             HEAP32[$213>>2] = $211;
             $214 = ($212|0)==($k$0$ph|0);
             if ($214) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph49$us56 = $212;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $234 = $factor | 1;
           $235 = $234 << 2;
           $236 = (_realloc($wcs$3$ph,$235)|0);
           $237 = ($236|0)==(0|0);
           if ($237) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $234;$wcs$3$ph = $236;
          }
          L168: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $217 = HEAP32[$3>>2]|0;
              $218 = HEAP32[$4>>2]|0;
              $219 = ($217>>>0)<($218>>>0);
              if ($219) {
               $220 = (($217) + 1|0);
               HEAP32[$3>>2] = $220;
               $221 = HEAP8[$217>>0]|0;
               $222 = $221&255;
               $225 = $222;
              } else {
               $223 = (___shgetc($f)|0);
               $225 = $223;
              }
              $224 = (($225) + 1)|0;
              $226 = (($scanset) + ($224)|0);
              $227 = HEAP8[$226>>0]|0;
              $228 = ($227<<24>>24)==(0);
              if ($228) {
               $i$0$ph49$lcssa = $i$0$ph49;$wcs$3$ph165 = $wcs$3$ph;
               break L168;
              }
              $229 = $225&255;
              HEAP8[$0>>0] = $229;
              $230 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($230|0) == -1)) {
               $alloc$0224 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($230|0) == -2))) {
               break;
              }
             }
             $231 = HEAP32[$wc>>2]|0;
             $232 = (($i$0$ph49) + 1)|0;
             $233 = (($wcs$3$ph) + ($i$0$ph49<<2)|0);
             HEAP32[$233>>2] = $231;
             $i$0$ph49 = $232;
             label = 98;
            }
           }
          } while(0);
          $238 = (_mbsinit($st)|0);
          $239 = ($238|0)==(0);
          if ($239) {
           $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph165;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph49$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph165;
          }
         } else {
          if ($179) {
           $240 = (_malloc($$8)|0);
           $241 = ($240|0)==(0|0);
           if ($241) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $240;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $242 = HEAP32[$3>>2]|0;
             $243 = HEAP32[$4>>2]|0;
             $244 = ($242>>>0)<($243>>>0);
             if ($244) {
              $245 = (($242) + 1|0);
              HEAP32[$3>>2] = $245;
              $246 = HEAP8[$242>>0]|0;
              $247 = $246&255;
              $250 = $247;
             } else {
              $248 = (___shgetc($f)|0);
              $250 = $248;
             }
             $249 = (($250) + 1)|0;
             $251 = (($scanset) + ($249)|0);
             $252 = HEAP8[$251>>0]|0;
             $253 = ($252<<24>>24)==(0);
             if ($253) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L109;
             }
             $254 = $250&255;
             $255 = (($i$2) + 1)|0;
             $256 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$256>>0] = $254;
             $257 = ($255|0)==($k$1$ph|0);
             if ($257) {
              break;
             } else {
              $i$2 = $255;
             }
            }
            $factor17 = $k$1$ph << 1;
            $258 = $factor17 | 1;
            $259 = (_realloc($s$2$ph,$258)|0);
            $260 = ($259|0)==(0|0);
            if ($260) {
             $alloc$0224 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $258;$s$2$ph = $259;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $261 = ($dest$0|0)==(0|0);
          if ($261) {
           $279 = $140;
           while(1) {
            $277 = HEAP32[$3>>2]|0;
            $278 = ($277>>>0)<($279>>>0);
            if ($278) {
             $280 = (($277) + 1|0);
             HEAP32[$3>>2] = $280;
             $281 = HEAP8[$277>>0]|0;
             $282 = $281&255;
             $285 = $282;
            } else {
             $283 = (___shgetc($f)|0);
             $285 = $283;
            }
            $284 = (($285) + 1)|0;
            $286 = (($scanset) + ($284)|0);
            $287 = HEAP8[$286>>0]|0;
            $288 = ($287<<24>>24)==(0);
            if ($288) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L109;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $279 = $$pre237;
           }
          } else {
           $264 = $140;$i$3 = 0;
           while(1) {
            $262 = HEAP32[$3>>2]|0;
            $263 = ($262>>>0)<($264>>>0);
            if ($263) {
             $265 = (($262) + 1|0);
             HEAP32[$3>>2] = $265;
             $266 = HEAP8[$262>>0]|0;
             $267 = $266&255;
             $270 = $267;
            } else {
             $268 = (___shgetc($f)|0);
             $270 = $268;
            }
            $269 = (($270) + 1)|0;
            $271 = (($scanset) + ($269)|0);
            $272 = HEAP8[$271>>0]|0;
            $273 = ($272<<24>>24)==(0);
            if ($273) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L109;
            }
            $274 = $270&255;
            $275 = (($i$3) + 1)|0;
            $276 = (($dest$0) + ($i$3)|0);
            HEAP8[$276>>0] = $274;
            $$pre238 = HEAP32[$4>>2]|0;
            $264 = $$pre238;$i$3 = $275;
           }
          }
         }
        } while(0);
        $289 = HEAP32[$4>>2]|0;
        $290 = ($289|0)==(0|0);
        $$pre235 = HEAP32[$3>>2]|0;
        if ($290) {
         $294 = $$pre235;
        } else {
         $291 = (($$pre235) + -1|0);
         HEAP32[$3>>2] = $291;
         $294 = $291;
        }
        $292 = HEAP32[$5>>2]|0;
        $293 = HEAP32[$6>>2]|0;
        $295 = $294;
        $296 = $293;
        $297 = (($295) - ($296))|0;
        $298 = (($297) + ($292))|0;
        $299 = ($298|0)==(0);
        if ($299) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        $$not = $144 ^ 1;
        $300 = ($298|0)==($width$1|0);
        $or$cond9 = $300 | $$not;
        if (!($or$cond9)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        do {
         if ($179) {
          if ($178) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $301 = ($wcs$4|0)==(0|0);
         if (!($301)) {
          $302 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$302>>2] = 0;
         }
         $303 = ($s$3|0)==(0|0);
         if ($303) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $304 = (($s$3) + ($i$4)|0);
          HEAP8[$304>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $305 = (___intscan($f,$base$0,0,-1,-1)|0);
        $306 = tempRet0;
        $307 = HEAP32[$5>>2]|0;
        $308 = HEAP32[$3>>2]|0;
        $309 = HEAP32[$6>>2]|0;
        $310 = $308;
        $311 = $309;
        $312 = (($311) - ($310))|0;
        $313 = ($307|0)==($312|0);
        if ($313) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $314 = ($$|0)==(112);
        $315 = ($dest$0|0)!=(0|0);
        $or$cond3 = $314 & $315;
        if ($or$cond3) {
         $316 = $305;
         HEAP32[$dest$0>>2] = $316;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $317 = ($dest$0|0)==(0|0);
        if ($317) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $318 = $305&255;
          HEAP8[$dest$0>>0] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -1:  {
          $319 = $305&65535;
          HEAP16[$dest$0>>1] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 3:  {
          $320 = $dest$0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $322 = (($320) + 4)|0;
          $323 = $322;
          HEAP32[$323>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
         }
         }
        }
       }
      } while(0);
      $334 = HEAP32[$5>>2]|0;
      $335 = HEAP32[$3>>2]|0;
      $336 = HEAP32[$6>>2]|0;
      $337 = $335;
      $338 = $336;
      $339 = (($334) + ($pos$1))|0;
      $340 = (($339) + ($337))|0;
      $341 = (($340) - ($338))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $342 = $not$&1;
      $matches$0$ = (($342) + ($matches$0135))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $341;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0141) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     label = 19;
     break L4;
    }
    $65 = (($pos$0140) + 1)|0;
    $matches$1 = $matches$0135;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   } else {
    $p$1 = $p$0141;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre240 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre240;
    } else {
     $33 = (($$pre240) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0140))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0135;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   }
  } while(0);
  $343 = (($p$11) + 1|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = ($344<<24>>24)==(0);
  if ($345) {
   $matches$3 = $matches$1;
   label = 166;
   break;
  } else {
   $13 = $344;$matches$0135 = $matches$1;$p$0141 = $343;$pos$0140 = $pos$2;$s$0133 = $s$5;$wcs$0134 = $wcs$6;
  }
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($57|0)>(-1);
  $64 = ($matches$0135|0)!=(0);
  $or$cond5 = $63 | $64;
  if ($or$cond5) {
   $matches$3 = $matches$0135;
   STACKTOP = sp;return ($matches$3|0);
  } else {
   $alloc$1 = 0;$s$7 = $s$0133;$wcs$8 = $wcs$0134;
   label = 163;
  }
 }
 else if ((label|0) == 162) {
  $$old4 = ($matches$0135|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0224;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 163;
  } else {
   $alloc$2 = $alloc$0224;$matches$2 = $matches$0135;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 else if ((label|0) == 166) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 163) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 140;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01$lcssa = 0, $$019 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, $w$0$lcssa = 0, $w$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$01$lcssa = $s;
  } else {
   $5 = $c&255;
   $$019 = $s;
   while(1) {
    $12 = HEAP8[$$019>>0]|0;
    $13 = ($12<<24>>24)==(0);
    $14 = ($12<<24>>24)==($5<<24>>24);
    $or$cond = $13 | $14;
    $8 = (($$019) + 1|0);
    if ($or$cond) {
     $$0 = $$019;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$01$lcssa = $8;
     break L5;
    } else {
     $$019 = $8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$01$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $30 = $16;$w$05 = $$01$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$05) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$05;
     break L12;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$05 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$01$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond4 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond4) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$016 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$016 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div3 = ($13&255) >>> 5;
    $16 = $div3&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$016) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$016 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$02$lcssa = $s;
    } else {
     $$024 = $s;$26 = $10;
     while(1) {
      $div = ($26&255) >>> 5;
      $27 = $div&255;
      $28 = (($byteset) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $26 & 31;
      $31 = $30&255;
      $32 = 1 << $31;
      $33 = $29 & $32;
      $34 = ($33|0)==(0);
      $24 = (($$024) + 1|0);
      if (!($34)) {
       $$02$lcssa = $$024;
       break L7;
      }
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$02$lcssa = $24;
       break;
      } else {
       $$024 = $24;$26 = $23;
      }
     }
    }
   } while(0);
   $35 = $$02$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _strsep($str,$sep) {
 $str = $str|0;
 $sep = $sep|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $end$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$str>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_strcspn($0,$sep)|0);
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $end$0 = 0;
 } else {
  $$sum = (($2) + 1)|0;
  $6 = (($0) + ($$sum)|0);
  HEAP8[$3>>0] = 0;
  $end$0 = $6;
 }
 HEAP32[$str>>2] = $end$0;
 $$0 = $0;
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[367200>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((367200 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((367200 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[367200>>2] = $22;
     } else {
      $23 = HEAP32[((367200 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((367200 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((367200 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((367200 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[367200>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((367200 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((367200 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((367200 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((367200 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[367200>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[367200>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((367200 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((367200 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((367200 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((367200 + 8|0))>>2] = $81;
     HEAP32[((367200 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((367200 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((367200 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((367200 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((367200 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((367200 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((367200 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((367200 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((367200 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((367200 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((367200 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((367200 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((367200 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[367200>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[367200>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((367200 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((367200 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((367200 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((367200 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((367200 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((367200 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((367200 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((367200 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((367200 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((367200 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((367200 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((367200 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((367200 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((367200 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((367200 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((367200 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((367200 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[367200>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[367200>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((367200 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((367200 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((367200 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((367200 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((367200 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((367200 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L108;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((367200 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((367200 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((367200 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((367200 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((367200 + 20|0))>>2] = $514;
   HEAP32[((367200 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((367200 + 8|0))>>2] = 0;
   HEAP32[((367200 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((367200 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((367200 + 12|0))>>2] = $528;
  $529 = HEAP32[((367200 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((367200 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[367672>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((367672 + 8|0))>>2] = $538;
    HEAP32[((367672 + 4|0))>>2] = $538;
    HEAP32[((367672 + 12|0))>>2] = -1;
    HEAP32[((367672 + 16|0))>>2] = -1;
    HEAP32[((367672 + 20|0))>>2] = 0;
    HEAP32[((367200 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[367672>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((367672 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((367200 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((367200 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((367200 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((367200 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((367200 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((367200 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((367672 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((367200 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((367200 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((367672 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((367200 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((367200 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((367200 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((367200 + 432|0))>>2] = $633;
  $634 = HEAP32[((367200 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((367200 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((367200 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((367200 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((367200 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((367200 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((367200 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((367200 + 460|0))>>2] = 0;
    $641 = HEAP32[367672>>2]|0;
    HEAP32[((367200 + 36|0))>>2] = $641;
    HEAP32[((367200 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((367200 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((367200 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((367200 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((367200 + 24|0))>>2] = $654;
    HEAP32[((367200 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((367672 + 16|0))>>2]|0;
    HEAP32[((367200 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((367200 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((367200 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((367200 + 24|0))>>2] = $684;
       HEAP32[((367200 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((367672 + 16|0))>>2]|0;
       HEAP32[((367200 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((367200 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((367200 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((367200 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((367200 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((367200 + 12|0))>>2] = $731;
        HEAP32[((367200 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((367200 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((367200 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((367200 + 8|0))>>2] = $737;
         HEAP32[((367200 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((367200 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[367200>>2]|0;
            $764 = $763 & $762;
            HEAP32[367200>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((367200 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((367200 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((367200 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((367200 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((367200 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((367200 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((367200 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[367200>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[367200>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((367200 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((367200 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((367200 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((367200 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((367200 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((367200 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((367200 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((367200 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((367200 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((367200 + 24|0))>>2] = $953;
    HEAP32[((367200 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((367672 + 16|0))>>2]|0;
    HEAP32[((367200 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((367200 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((367200 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((367200 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((367200 + 448|0))+12>>2]|0;
    HEAP32[((367200 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((367200 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((367200 + 460|0))>>2] = 0;
    HEAP32[((367200 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((367200 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[367200>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[367200>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((367200 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((367200 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((367200 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((367200 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((367200 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((367200 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((367200 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((367200 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((367200 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((367200 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((367200 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((367200 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((367200 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((367200 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((367200 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((367200 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[367200>>2]|0;
     $36 = $35 & $34;
     HEAP32[367200>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((367200 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((367200 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((367200 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((367200 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((367200 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((367200 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((367200 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((367200 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((367200 + 12|0))>>2] = $120;
   HEAP32[((367200 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((367200 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((367200 + 20|0))>>2] = 0;
   HEAP32[((367200 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((367200 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((367200 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((367200 + 8|0))>>2] = $128;
   HEAP32[((367200 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((367200 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((367200 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[367200>>2]|0;
     $152 = $151 & $150;
     HEAP32[367200>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((367200 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((367200 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((367200 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((367200 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((367200 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((367200 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((367200 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((367200 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((367200 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((367200 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((367200 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((367200 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[367200>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[367200>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((367200 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((367200 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((367200 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((367200 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((367200 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((367200 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((367200 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((367200 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((367200 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((367200 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((367200 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((367200 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$125 = 0, $$126 = 0, $$base24 = 0, $$lcssa = 0, $$sum = 0, $$sum17 = 0, $$sum1737 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum2155 = 0, $$sum22 = 0, $$sum23 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$127 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$362 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$747 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $x$073 = 0, $x$138 = 0, $x$256 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  STACKTOP = sp;return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$126 = 8;$c$127 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum23 = (($46) + 1)|0;
   $47 = (367696 + ($$sum23)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   } else {
    $$126 = 16;$c$127 = $46;
    label = 46;
   }
  } else {
   $$base24 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (367696 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base24>>>0);
   if ($60) {
    $$1 = $$base24;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$073 = 0;
    while(1) {
     $69 = ($x$073*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $or$cond7 = $80 & $81;
     if ($or$cond7) {
      $71 = $79;$x$073 = $70;
     } else {
      break;
     }
    }
    $281 = $70;$282 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$362 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$362;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond9 = $108 & $113;
     if ($or$cond9) {
      $84 = $98;$85 = $99;$88 = $107;$c$362 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$125 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$126 = $$1;$c$127 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$126) + -1)|0;
   $116 = $115 & $$126;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$126*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (367960 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1737 = (($c$127) + 1)|0;
    $128 = (367696 + ($$sum1737)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$126>>>0);
    if ($131) {
     $134 = $130;$x$138 = 0;
     while(1) {
      $132 = $x$138 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum17 = (($c$4$be) + 1)|0;
      $142 = (367696 + ($$sum17)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$126>>>0);
      $146 = ($133>>>0)<(134217728);
      $or$cond11 = $145 & $146;
      if ($or$cond11) {
       $134 = $144;$x$138 = $133;
      } else {
       break;
      }
     }
     $150 = $143;$152 = 0;$154 = $133;$c$4$lcssa = $c$4$be;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$127;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$126>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond31 = $151 | $158;
    if ($or$cond31) {
     $$125 = $$126;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $154;$160 = $152;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum18 = (($c$5$be) + 1)|0;
     $173 = (367696 + ($$sum18)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$126>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$125 = $$126;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum2155 = (($c$127) + 1)|0;
   $118 = (367696 + ($$sum2155)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$126>>>0);
   if ($121) {
    $184 = $120;$x$256 = 0;
    while(1) {
     $182 = Math_imul($x$256, $$126)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum21 = (($c$6$be) + 1)|0;
     $192 = (367696 + ($$sum21)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$126>>>0);
     $196 = ($183>>>0)<(119304647);
     $or$cond13 = $195 & $196;
     if ($or$cond13) {
      $184 = $194;$x$256 = $183;
     } else {
      break;
     }
    }
    $198 = $193;$287 = $183;$288 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$127;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$126>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$126|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$747 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $$125 = $$126;$285 = $204;$286 = $202;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($204|0),($202|0),($$126|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$125 = $$126;$285 = $204;$286 = $202;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum22 = (($c$7$be) + 1)|0;
     $228 = (367696 + ($$sum22)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$126>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$747 = $c$7$be;
     } else {
      $$125 = $$126;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$125 = $$126;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum19 = (($c$8) + 1)|0;
  $232 = (367696 + ($$sum19)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$125>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum20 = (($c$9$be) + 1)|0;
    $243 = (367696 + ($$sum20)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$125>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond15 = $262 | $263;
  if (!($or$cond15)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 STACKTOP = sp;return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$011$i = 0, $$012$i = 0, $$01231$i = 0, $$01232$i = 0, $$06$i = 0, $$0611$i = 0, $$0612$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$13$i = 0, $$2$i = 0, $$20$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3120$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa60$i = 0;
 var $$lnz$0$i = 0, $$neg37$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us70$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0;
 var $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0;
 var $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa182$i = 0, $a$078$i = 0, $a$1$i = 0, $a$2$ph57$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$444$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge = 0;
 var $brmerge108 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$171 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$369 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$080$i = 0, $carry1$0$us$i = 0, $carry1$0$us66$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us71$i = 0, $carry3$047$i = 0;
 var $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$029$i = 0, $denormal$030$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us61$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i11 = 0, $gotdig$2$i = 0, $gotdig$2$i12 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3116$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i13 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1117$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$042$i = 0, $i$070 = 0;
 var $i$1 = 0, $i$1$i = 0, $i$268 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$0108$i = 0, $j$0109$i = 0, $j$0110$i = 0, $j$0119$i = 0, $j$2$i = 0, $j$388$i = 0, $k$0$lcssa$i = 0, $k$0104$i = 0, $k$0105$i = 0, $k$0106$i = 0, $k$0118$i = 0, $k$2$i = 0, $k$3$i = 0, $k$479$i = 0;
 var $k$5$in$us$i = 0, $k$5$in$us65$i = 0, $k$5$us$i = 0, $k$5$us67$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us73$i = 0, $k$645$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0115$i = 0, $lnz$098$i = 0, $lnz$099$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond10$i = 0, $or$cond112$i = 0;
 var $or$cond15$i = 0, $or$cond17$i = 0, $or$cond18$i = 0, $or$cond187$i = 0, $or$cond19$us$i = 0, $or$cond19$us72$i = 0, $or$cond21$i = 0, $or$cond22$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond5 = 0, $or$cond5$i = 0, $or$cond5$i17 = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond8$i20 = 0, $or$cond9$not = 0, $rp$0$lcssa183$i = 0, $rp$077$i = 0, $rp$1$i19 = 0;
 var $rp$2$ph55$i = 0, $rp$3$i$ph = 0, $rp$3$ph50$i = 0, $rp$443$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$318$i = 0, $x$4$lcssa$i = 0, $x$413$i = 0, $x$5$i = 0, $x$6$i = 0;
 var $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$314$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph56$i = 0, $z$1$us$i = 0, $z$1$us62$i = 0, $z$2$us$i = 0, $z$2$us64$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us74$i = 0;
 var $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$171 = $c$0;$i$070 = 0;
 while(1) {
  $23 = $c$171 | 32;
  $24 = (367976 + ($i$070)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$171;$i$0$lcssa = $i$070;
   break;
  }
  $28 = ($i$070>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$171;
   }
  } while(0);
  $36 = (($i$070) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$171 = $c$2;$i$070 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($51) {
     $c$369 = $c$1$lcssa;$i$268 = 0;
     while(1) {
      $52 = $c$369 | 32;
      $53 = (367992 + ($i$268)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($52|0)==($55|0);
      if (!($56)) {
       $c$5 = $c$369;$i$3 = $i$268;
       break L34;
      }
      $57 = ($i$268>>>0)<(2);
      do {
       if ($57) {
        $58 = HEAP32[$0>>2]|0;
        $59 = HEAP32[$1>>2]|0;
        $60 = ($58>>>0)<($59>>>0);
        if ($60) {
         $61 = (($58) + 1|0);
         HEAP32[$0>>2] = $61;
         $62 = HEAP8[$58>>0]|0;
         $63 = $62&255;
         $c$4 = $63;
         break;
        } else {
         $64 = (___shgetc($f)|0);
         $c$4 = $64;
         break;
        }
       } else {
        $c$4 = $c$369;
       }
      } while(0);
      $65 = (($i$268) + 1)|0;
      $66 = ($65>>>0)<(3);
      if ($66) {
       $c$369 = $c$4;$i$268 = $65;
      } else {
       $c$5 = $c$4;$i$3 = $65;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $322 = HEAP32[$1>>2]|0;
       $323 = ($322|0)==(0|0);
       if ($323) {
        $c$6 = 48;
        break;
       }
       $324 = HEAP32[$0>>2]|0;
       $325 = (($324) + -1|0);
       HEAP32[$0>>2] = $325;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i = $128;$gotdig$0$i = 0;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i = $129;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $167 = 0;$169 = 0;$211 = 0;$213 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i = $135;$gotdig$0$i = 1;
        continue;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       }
      }
      if ((label|0) == 70) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $156 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $156 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $157 = ($156|0)==(48);
         if ($157) {
          $152 = $154;$153 = $155;
         } else {
          $167 = 0;$169 = 0;$211 = $154;$213 = $155;$c$2$i = $156;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break;
         }
        }
       } else {
        $167 = 0;$169 = 0;$211 = 0;$213 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       }
      }
      L83: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 83;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond$i = $162 | $163;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L83;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $713 = $169;$714 = $167;$715 = $169;$716 = $167;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L83;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 83;
          break;
         }
        }
       } while(0);
       if ((label|0) == 83) {
        label = 0;
        $168 = ($167|0)<(0);
        $170 = ($169>>>0)<(8);
        $171 = ($167|0)==(0);
        $172 = $171 & $170;
        $173 = $168 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($167|0)<(0);
          $177 = ($169>>>0)<(14);
          $178 = ($167|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond3$i = $185 | $186;
          if ($or$cond3$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($169|0),($167|0),1,0)|0);
        $190 = tempRet0;
        $713 = $211;$714 = $213;$715 = $189;$716 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $167 = $716;$169 = $715;$211 = $713;$213 = $714;$c$2$i = $196;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $197 = (___shgetc($f)|0);
        $167 = $716;$169 = $715;$211 = $713;$213 = $714;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $198 = ($gotdig$2$i|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $212 = $210 ? $169 : $211;
      $214 = $210 ? $167 : $213;
      $215 = ($167|0)<(0);
      $216 = ($169>>>0)<(8);
      $217 = ($167|0)==(0);
      $218 = $217 & $216;
      $219 = $215 | $218;
      if ($219) {
       $221 = $169;$222 = $167;$x$318$i = $x$0$i;
       while(1) {
        $220 = $x$318$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($223>>>0)<(8);
        $227 = ($224|0)==(0);
        $228 = $227 & $226;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$318$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         $237 = ($pok|0)==(0);
         if ($237) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $238 = HEAP32[$1>>2]|0;
          $239 = ($238|0)==(0|0);
          if ($239) {
           $250 = 0;$251 = 0;
           break;
          }
          $240 = HEAP32[$0>>2]|0;
          $241 = (($240) + -1|0);
          HEAP32[$0>>2] = $241;
          $250 = 0;$251 = 0;
          break;
         }
        } else {
         $250 = $232;$251 = $233;
        }
       } else {
        $242 = HEAP32[$1>>2]|0;
        $243 = ($242|0)==(0|0);
        if ($243) {
         $250 = 0;$251 = 0;
        } else {
         $244 = HEAP32[$0>>2]|0;
         $245 = (($244) + -1|0);
         HEAP32[$0>>2] = $245;
         $250 = 0;$251 = 0;
        }
       }
      } while(0);
      $246 = (_bitshift64Shl(($212|0),($214|0),2)|0);
      $247 = tempRet0;
      $248 = (_i64Add(($246|0),($247|0),-32,-1)|0);
      $249 = tempRet0;
      $252 = (_i64Add(($248|0),($249|0),($250|0),($251|0))|0);
      $253 = tempRet0;
      $254 = ($x$3$lcssa$i|0)==(0);
      if ($254) {
       $255 = (+($sign$0|0));
       $256 = $255 * 0.0;
       $$0 = $256;
       STACKTOP = sp;return (+$$0);
      }
      $257 = (0 - ($emin$0$ph))|0;
      $258 = ($253|0)>(0);
      $259 = ($252>>>0)>($257>>>0);
      $260 = ($253|0)==(0);
      $261 = $260 & $259;
      $262 = $258 | $261;
      if ($262) {
       $263 = (___errno_location()|0);
       HEAP32[$263>>2] = 34;
       $264 = (+($sign$0|0));
       $265 = $264 * 1.7976931348623157E+308;
       $266 = $265 * 1.7976931348623157E+308;
       $$0 = $266;
       STACKTOP = sp;return (+$$0);
      }
      $267 = (($emin$0$ph) + -106)|0;
      $268 = ($267|0)<(0);
      $269 = $268 << 31 >> 31;
      $270 = ($253|0)<($269|0);
      $271 = ($252>>>0)<($267>>>0);
      $272 = ($253|0)==($269|0);
      $273 = $272 & $271;
      $274 = $270 | $273;
      if ($274) {
       $276 = (___errno_location()|0);
       HEAP32[$276>>2] = 34;
       $277 = (+($sign$0|0));
       $278 = $277 * 2.2250738585072014E-308;
       $279 = $278 * 2.2250738585072014E-308;
       $$0 = $279;
       STACKTOP = sp;return (+$$0);
      }
      $275 = ($x$3$lcssa$i|0)>(-1);
      if ($275) {
       $284 = $252;$285 = $253;$x$413$i = $x$3$lcssa$i;$y$314$i = $y$0$i;
       while(1) {
        $280 = !($y$314$i >= 0.5);
        $281 = $x$413$i << 1;
        if ($280) {
         $$pn$i = $y$314$i;$x$5$i = $281;
        } else {
         $282 = $281 | 1;
         $283 = $y$314$i + -1.0;
         $$pn$i = $283;$x$5$i = $282;
        }
        $y$4$i = $y$314$i + $$pn$i;
        $286 = (_i64Add(($284|0),($285|0),-1,-1)|0);
        $287 = tempRet0;
        $288 = ($x$5$i|0)>(-1);
        if ($288) {
         $284 = $286;$285 = $287;$x$413$i = $x$5$i;$y$314$i = $y$4$i;
        } else {
         $293 = $286;$294 = $287;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $293 = $252;$294 = $253;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $289 = ($emin$0$ph|0)<(0);
      $290 = $289 << 31 >> 31;
      $291 = (_i64Subtract(32,0,($emin$0$ph|0),($290|0))|0);
      $292 = tempRet0;
      $295 = (_i64Add(($293|0),($294|0),($291|0),($292|0))|0);
      $296 = tempRet0;
      $297 = (0)>($296|0);
      $298 = ($bits$0$ph>>>0)>($295>>>0);
      $299 = (0)==($296|0);
      $300 = $299 & $298;
      $301 = $297 | $300;
      if ($301) {
       $302 = ($295|0)<(0);
       if ($302) {
        $$0611$i = 0;
        label = 126;
       } else {
        $$06$i = $295;
        label = 124;
       }
      } else {
       $$06$i = $bits$0$ph;
       label = 124;
      }
      if ((label|0) == 124) {
       $303 = ($$06$i|0)<(53);
       if ($303) {
        $$0611$i = $$06$i;
        label = 126;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0612$i = $$06$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 126) {
       $304 = (84 - ($$0611$i))|0;
       $305 = (+_scalbn(1.0,$304));
       $306 = (+($sign$0|0));
       $307 = (+_copysignl($305,$306));
       $$0612$i = $$0611$i;$$pre$phi$iZ2D = $306;$bias$0$i = $307;
      }
      $308 = ($$0612$i|0)<(32);
      $309 = $y$3$lcssa$i != 0.0;
      $or$cond5$i = $308 & $309;
      $310 = $x$4$lcssa$i & 1;
      $311 = ($310|0)==(0);
      $or$cond8$i = $or$cond5$i & $311;
      $312 = $or$cond8$i&1;
      $x$6$i = (($312) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond8$i ? 0.0 : $y$3$lcssa$i;
      $313 = (+($x$6$i>>>0));
      $314 = $$pre$phi$iZ2D * $313;
      $315 = $bias$0$i + $314;
      $316 = $$pre$phi$iZ2D * $y$5$i;
      $317 = $316 + $315;
      $318 = $317 - $bias$0$i;
      $319 = $318 != 0.0;
      if (!($319)) {
       $320 = (___errno_location()|0);
       HEAP32[$320>>2] = 34;
      }
      $321 = (+_scalbnl($318,$293));
      $$0 = $321;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $326 = (0 - ($sum$i))|0;
    $$011$i = $c$6;$gotdig$0$i11 = 0;
    while(1) {
     if ((($$011$i|0) == 46)) {
      label = 137;
      break;
     } else if (!((($$011$i|0) == 48))) {
      $$2$i = $$011$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 0;
      break;
     }
     $327 = HEAP32[$0>>2]|0;
     $328 = HEAP32[$1>>2]|0;
     $329 = ($327>>>0)<($328>>>0);
     if ($329) {
      $330 = (($327) + 1|0);
      HEAP32[$0>>2] = $330;
      $331 = HEAP8[$327>>0]|0;
      $332 = $331&255;
      $$011$i = $332;$gotdig$0$i11 = 1;
      continue;
     } else {
      $333 = (___shgetc($f)|0);
      $$011$i = $333;$gotdig$0$i11 = 1;
      continue;
     }
    }
    if ((label|0) == 137) {
     $334 = HEAP32[$0>>2]|0;
     $335 = HEAP32[$1>>2]|0;
     $336 = ($334>>>0)<($335>>>0);
     if ($336) {
      $337 = (($334) + 1|0);
      HEAP32[$0>>2] = $337;
      $338 = HEAP8[$334>>0]|0;
      $339 = $338&255;
      $$1$ph$i = $339;
     } else {
      $340 = (___shgetc($f)|0);
      $$1$ph$i = $340;
     }
     $341 = ($$1$ph$i|0)==(48);
     if ($341) {
      $342 = 0;$343 = 0;
      while(1) {
       $344 = (_i64Add(($342|0),($343|0),-1,-1)|0);
       $345 = tempRet0;
       $346 = HEAP32[$0>>2]|0;
       $347 = HEAP32[$1>>2]|0;
       $348 = ($346>>>0)<($347>>>0);
       if ($348) {
        $349 = (($346) + 1|0);
        HEAP32[$0>>2] = $349;
        $350 = HEAP8[$346>>0]|0;
        $351 = $350&255;
        $$1$be$i = $351;
       } else {
        $352 = (___shgetc($f)|0);
        $$1$be$i = $352;
       }
       $353 = ($$1$be$i|0)==(48);
       if ($353) {
        $342 = $344;$343 = $345;
       } else {
        $$2$i = $$1$be$i;$717 = $344;$718 = $345;$gotdig$2$i12 = 1;$gotrad$0$i13 = 1;
        break;
       }
      }
     } else {
      $$2$i = $$1$ph$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 1;
     }
    }
    HEAP32[$x$i>>2] = 0;
    $354 = (($$2$i) + -48)|0;
    $355 = ($354>>>0)<(10);
    $356 = ($$2$i|0)==(46);
    $or$cond112$i = $355 | $356;
    L185: do {
     if ($or$cond112$i) {
      $357 = (($x$i) + 496|0);
      $$3120$i = $$2$i;$360 = 0;$361 = 0;$719 = $356;$720 = $354;$721 = $717;$722 = $718;$gotdig$3116$i = $gotdig$2$i12;$gotrad$1117$i = $gotrad$0$i13;$j$0119$i = 0;$k$0118$i = 0;$lnz$0115$i = 0;
      L187: while(1) {
       do {
        if ($719) {
         $cond$i = ($gotrad$1117$i|0)==(0);
         if ($cond$i) {
          $723 = $360;$724 = $361;$725 = $360;$726 = $361;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = 1;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
         } else {
          break L187;
         }
        } else {
         $359 = ($k$0118$i|0)<(125);
         $362 = (_i64Add(($360|0),($361|0),1,0)|0);
         $363 = tempRet0;
         $364 = ($$3120$i|0)!=(48);
         if (!($359)) {
          if (!($364)) {
           $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
           break;
          }
          $374 = HEAP32[$357>>2]|0;
          $375 = $374 | 1;
          HEAP32[$357>>2] = $375;
          $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
          break;
         }
         $$lnz$0$i = $364 ? $362 : $lnz$0115$i;
         $365 = ($j$0119$i|0)==(0);
         $366 = (($x$i) + ($k$0118$i<<2)|0);
         if ($365) {
          $storemerge$i = $720;
         } else {
          $367 = HEAP32[$366>>2]|0;
          $368 = ($367*10)|0;
          $369 = (($$3120$i) + -48)|0;
          $370 = (($369) + ($368))|0;
          $storemerge$i = $370;
         }
         HEAP32[$366>>2] = $storemerge$i;
         $371 = (($j$0119$i) + 1)|0;
         $372 = ($371|0)==(9);
         $373 = $372&1;
         $$k$0$i = (($373) + ($k$0118$i))|0;
         $$13$i = $372 ? 0 : $371;
         $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $$13$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $376 = HEAP32[$0>>2]|0;
       $377 = HEAP32[$1>>2]|0;
       $378 = ($376>>>0)<($377>>>0);
       if ($378) {
        $379 = (($376) + 1|0);
        HEAP32[$0>>2] = $379;
        $380 = HEAP8[$376>>0]|0;
        $381 = $380&255;
        $$3$be$i = $381;
       } else {
        $382 = (___shgetc($f)|0);
        $$3$be$i = $382;
       }
       $383 = (($$3$be$i) + -48)|0;
       $384 = ($383>>>0)<(10);
       $385 = ($$3$be$i|0)==(46);
       $or$cond$i15 = $384 | $385;
       if ($or$cond$i15) {
        $$3120$i = $$3$be$i;$360 = $725;$361 = $726;$719 = $385;$720 = $383;$721 = $723;$722 = $724;$gotdig$3116$i = $gotdig$4$i;$gotrad$1117$i = $gotrad$2$i;$j$0119$i = $j$2$i;$k$0118$i = $k$2$i;$lnz$0115$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$387 = $723;$388 = $725;$390 = $724;$391 = $726;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 160;
        break L185;
       }
      }
      $358 = ($gotdig$3116$i|0)!=(0);
      $727 = $360;$728 = $361;$729 = $721;$730 = $722;$731 = $358;$j$0110$i = $j$0119$i;$k$0106$i = $k$0118$i;$lnz$0100$i = $lnz$0115$i;
      label = 168;
     } else {
      $$3$lcssa$i = $$2$i;$387 = $717;$388 = 0;$390 = $718;$391 = 0;$gotdig$3$lcssa$i = $gotdig$2$i12;$gotrad$1$lcssa$i = $gotrad$0$i13;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 160;
     }
    } while(0);
    do {
     if ((label|0) == 160) {
      $386 = ($gotrad$1$lcssa$i|0)==(0);
      $389 = $386 ? $388 : $387;
      $392 = $386 ? $391 : $390;
      $393 = ($gotdig$3$lcssa$i|0)!=(0);
      $394 = $$3$lcssa$i | 32;
      $395 = ($394|0)==(101);
      $or$cond15$i = $393 & $395;
      if (!($or$cond15$i)) {
       $410 = ($$3$lcssa$i|0)>(-1);
       if ($410) {
        $727 = $388;$728 = $391;$729 = $389;$730 = $392;$731 = $393;$j$0110$i = $j$0$lcssa$i;$k$0106$i = $k$0$lcssa$i;$lnz$0100$i = $lnz$0$lcssa$i;
        label = 168;
        break;
       } else {
        $732 = $388;$733 = $391;$734 = $393;$735 = $389;$736 = $392;$j$0109$i = $j$0$lcssa$i;$k$0105$i = $k$0$lcssa$i;$lnz$099$i = $lnz$0$lcssa$i;
        label = 170;
        break;
       }
      }
      $396 = (_scanexp($f,$pok)|0);
      $397 = tempRet0;
      $398 = ($396|0)==(0);
      $399 = ($397|0)==(-2147483648);
      $400 = $398 & $399;
      do {
       if ($400) {
        $401 = ($pok|0)==(0);
        if ($401) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $402 = HEAP32[$1>>2]|0;
         $403 = ($402|0)==(0|0);
         if ($403) {
          $406 = 0;$407 = 0;
          break;
         }
         $404 = HEAP32[$0>>2]|0;
         $405 = (($404) + -1|0);
         HEAP32[$0>>2] = $405;
         $406 = 0;$407 = 0;
         break;
        }
       } else {
        $406 = $396;$407 = $397;
       }
      } while(0);
      $408 = (_i64Add(($406|0),($407|0),($389|0),($392|0))|0);
      $409 = tempRet0;
      $420 = $408;$422 = $388;$423 = $409;$425 = $391;$j$0108$i = $j$0$lcssa$i;$k$0104$i = $k$0$lcssa$i;$lnz$098$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 168) {
     $411 = HEAP32[$1>>2]|0;
     $412 = ($411|0)==(0|0);
     if ($412) {
      $732 = $727;$733 = $728;$734 = $731;$735 = $729;$736 = $730;$j$0109$i = $j$0110$i;$k$0105$i = $k$0106$i;$lnz$099$i = $lnz$0100$i;
      label = 170;
     } else {
      $413 = HEAP32[$0>>2]|0;
      $414 = (($413) + -1|0);
      HEAP32[$0>>2] = $414;
      if ($731) {
       $420 = $729;$422 = $727;$423 = $730;$425 = $728;$j$0108$i = $j$0110$i;$k$0104$i = $k$0106$i;$lnz$098$i = $lnz$0100$i;
      } else {
       label = 171;
      }
     }
    }
    if ((label|0) == 170) {
     if ($734) {
      $420 = $735;$422 = $732;$423 = $736;$425 = $733;$j$0108$i = $j$0109$i;$k$0104$i = $k$0105$i;$lnz$098$i = $lnz$099$i;
     } else {
      label = 171;
     }
    }
    if ((label|0) == 171) {
     $415 = (___errno_location()|0);
     HEAP32[$415>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $416 = HEAP32[$x$i>>2]|0;
    $417 = ($416|0)==(0);
    if ($417) {
     $418 = (+($sign$0|0));
     $419 = $418 * 0.0;
     $$0 = $419;
     STACKTOP = sp;return (+$$0);
    }
    $421 = ($420|0)==($422|0);
    $424 = ($423|0)==($425|0);
    $426 = $421 & $424;
    $427 = ($425|0)<(0);
    $428 = ($422>>>0)<(10);
    $429 = ($425|0)==(0);
    $430 = $429 & $428;
    $431 = $427 | $430;
    $or$cond3$i16 = $426 & $431;
    if ($or$cond3$i16) {
     $432 = ($bits$0$ph>>>0)>(30);
     $433 = $416 >>> $bits$0$ph;
     $434 = ($433|0)==(0);
     $or$cond17$i = $432 | $434;
     if ($or$cond17$i) {
      $435 = (+($sign$0|0));
      $436 = (+($416>>>0));
      $437 = $435 * $436;
      $$0 = $437;
      STACKTOP = sp;return (+$$0);
     }
    }
    $438 = (($emin$0$ph|0) / -2)&-1;
    $439 = ($438|0)<(0);
    $440 = $439 << 31 >> 31;
    $441 = ($423|0)>($440|0);
    $442 = ($420>>>0)>($438>>>0);
    $443 = ($423|0)==($440|0);
    $444 = $443 & $442;
    $445 = $441 | $444;
    if ($445) {
     $446 = (___errno_location()|0);
     HEAP32[$446>>2] = 34;
     $447 = (+($sign$0|0));
     $448 = $447 * 1.7976931348623157E+308;
     $449 = $448 * 1.7976931348623157E+308;
     $$0 = $449;
     STACKTOP = sp;return (+$$0);
    }
    $450 = (($emin$0$ph) + -106)|0;
    $451 = ($450|0)<(0);
    $452 = $451 << 31 >> 31;
    $453 = ($423|0)<($452|0);
    $454 = ($420>>>0)<($450>>>0);
    $455 = ($423|0)==($452|0);
    $456 = $455 & $454;
    $457 = $453 | $456;
    if ($457) {
     $458 = (___errno_location()|0);
     HEAP32[$458>>2] = 34;
     $459 = (+($sign$0|0));
     $460 = $459 * 2.2250738585072014E-308;
     $461 = $460 * 2.2250738585072014E-308;
     $$0 = $461;
     STACKTOP = sp;return (+$$0);
    }
    $462 = ($j$0108$i|0)==(0);
    if ($462) {
     $k$3$i = $k$0104$i;
    } else {
     $463 = ($j$0108$i|0)<(9);
     if ($463) {
      $464 = (($x$i) + ($k$0104$i<<2)|0);
      $$promoted$i = HEAP32[$464>>2]|0;
      $466 = $$promoted$i;$j$388$i = $j$0108$i;
      while(1) {
       $465 = ($466*10)|0;
       $467 = (($j$388$i) + 1)|0;
       $exitcond$i = ($467|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $466 = $465;$j$388$i = $467;
       }
      }
      HEAP32[$464>>2] = $465;
     }
     $468 = (($k$0104$i) + 1)|0;
     $k$3$i = $468;
    }
    $469 = ($lnz$098$i|0)<(9);
    if ($469) {
     $470 = ($lnz$098$i|0)<=($420|0);
     $471 = ($420|0)<(18);
     $or$cond5$i17 = $470 & $471;
     if ($or$cond5$i17) {
      $472 = ($420|0)==(9);
      if ($472) {
       $473 = (+($sign$0|0));
       $474 = HEAP32[$x$i>>2]|0;
       $475 = (+($474>>>0));
       $476 = $473 * $475;
       $$0 = $476;
       STACKTOP = sp;return (+$$0);
      }
      $477 = ($420|0)<(9);
      if ($477) {
       $478 = (+($sign$0|0));
       $479 = HEAP32[$x$i>>2]|0;
       $480 = (+($479>>>0));
       $481 = $478 * $480;
       $482 = (8 - ($420))|0;
       $483 = (368008 + ($482<<2)|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = (+($484|0));
       $486 = $481 / $485;
       $$0 = $486;
       STACKTOP = sp;return (+$$0);
      }
      $487 = Math_imul($420, -3)|0;
      $$neg37$i = (($bits$0$ph) + 27)|0;
      $488 = (($$neg37$i) + ($487))|0;
      $489 = ($488|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $490 = $$pre$i18 >>> $488;
      $491 = ($490|0)==(0);
      $or$cond187$i = $489 | $491;
      if ($or$cond187$i) {
       $492 = (+($sign$0|0));
       $493 = (+($$pre$i18>>>0));
       $494 = $492 * $493;
       $495 = (($420) + -10)|0;
       $496 = (368008 + ($495<<2)|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = (+($497|0));
       $499 = $494 * $498;
       $$0 = $499;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $500 = (($420|0) % 9)&-1;
    $501 = ($500|0)==(0);
    if ($501) {
     $a$2$ph57$i = 0;$e2$0$ph$i = 0;$rp$2$ph55$i = $420;$z$1$ph56$i = $k$3$i;
    } else {
     $502 = ($420|0)>(-1);
     $503 = (($500) + 9)|0;
     $504 = $502 ? $500 : $503;
     $505 = (8 - ($504))|0;
     $506 = (368008 + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($k$3$i|0)==(0);
     if ($508) {
      $a$0$lcssa182$i = 0;$rp$0$lcssa183$i = $420;$z$0$i = 0;
     } else {
      $509 = (1000000000 / ($507|0))&-1;
      $a$078$i = 0;$carry$080$i = 0;$k$479$i = 0;$rp$077$i = $420;
      while(1) {
       $510 = (($x$i) + ($k$479$i<<2)|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($511>>>0) % ($507>>>0))&-1;
       $513 = (($511>>>0) / ($507>>>0))&-1;
       $514 = (($513) + ($carry$080$i))|0;
       HEAP32[$510>>2] = $514;
       $515 = Math_imul($512, $509)|0;
       $516 = ($k$479$i|0)==($a$078$i|0);
       $517 = ($514|0)==(0);
       $or$cond18$i = $516 & $517;
       $518 = (($k$479$i) + 1)|0;
       if ($or$cond18$i) {
        $519 = $518 & 127;
        $520 = (($rp$077$i) + -9)|0;
        $a$1$i = $519;$rp$1$i19 = $520;
       } else {
        $a$1$i = $a$078$i;$rp$1$i19 = $rp$077$i;
       }
       $521 = ($518|0)==($k$3$i|0);
       if ($521) {
        break;
       } else {
        $a$078$i = $a$1$i;$carry$080$i = $515;$k$479$i = $518;$rp$077$i = $rp$1$i19;
       }
      }
      $522 = ($515|0)==(0);
      if ($522) {
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $k$3$i;
      } else {
       $523 = (($k$3$i) + 1)|0;
       $524 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$524>>2] = $515;
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $523;
      }
     }
     $525 = (9 - ($504))|0;
     $526 = (($525) + ($rp$0$lcssa183$i))|0;
     $a$2$ph57$i = $a$0$lcssa182$i;$e2$0$ph$i = 0;$rp$2$ph55$i = $526;$z$1$ph56$i = $z$0$i;
    }
    L279: while(1) {
     $527 = ($rp$2$ph55$i|0)<(18);
     $528 = (($x$i) + ($a$2$ph57$i<<2)|0);
     if ($527) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph56$i;
      while(1) {
       $530 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $530;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $531 = (($x$i) + ($k$5$us$i<<2)|0);
        $532 = HEAP32[$531>>2]|0;
        $533 = (_bitshift64Shl(($532|0),0,29)|0);
        $534 = tempRet0;
        $535 = (_i64Add(($533|0),($534|0),($carry1$0$us$i|0),0)|0);
        $536 = tempRet0;
        $537 = ($536>>>0)>(0);
        $538 = ($535>>>0)>(1000000000);
        $539 = ($536|0)==(0);
        $540 = $539 & $538;
        $541 = $537 | $540;
        if ($541) {
         $542 = (___udivdi3(($535|0),($536|0),1000000000,0)|0);
         $543 = tempRet0;
         $544 = (___uremdi3(($535|0),($536|0),1000000000,0)|0);
         $545 = tempRet0;
         $$sink$off0$us$i = $544;$carry1$1$us$i = $542;
        } else {
         $$sink$off0$us$i = $535;$carry1$1$us$i = 0;
        }
        HEAP32[$531>>2] = $$sink$off0$us$i;
        $546 = (($z$2$us$i) + 127)|0;
        $547 = $546 & 127;
        $548 = ($k$5$us$i|0)!=($547|0);
        $549 = ($k$5$us$i|0)==($a$2$ph57$i|0);
        $or$cond19$us$i = $548 | $549;
        if ($or$cond19$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $550 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $550 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $551 = (($k$5$us$i) + -1)|0;
        if ($549) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $551;$z$2$us$i = $z$3$us$i;
        }
       }
       $552 = (($e2$0$us$i) + -29)|0;
       $553 = ($carry1$1$us$i|0)==(0);
       if ($553) {
        $e2$0$us$i = $552;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa60$i = $552;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $529 = ($rp$2$ph55$i|0)==(18);
      if ($529) {
       $e2$0$us61$i = $e2$0$ph$i;$z$1$us62$i = $z$1$ph56$i;
      } else {
       $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph50$i = $rp$2$ph55$i;$z$5$ph$i = $z$1$ph56$i;
       break;
      }
      while(1) {
       $554 = HEAP32[$528>>2]|0;
       $555 = ($554>>>0)<(9007199);
       if (!($555)) {
        $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$us61$i;$rp$3$ph50$i = 18;$z$5$ph$i = $z$1$us62$i;
        break L279;
       }
       $556 = (($z$1$us62$i) + 127)|0;
       $carry1$0$us66$i = 0;$k$5$in$us65$i = $556;$z$2$us64$i = $z$1$us62$i;
       while(1) {
        $k$5$us67$i = $k$5$in$us65$i & 127;
        $557 = (($x$i) + ($k$5$us67$i<<2)|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = (_bitshift64Shl(($558|0),0,29)|0);
        $560 = tempRet0;
        $561 = (_i64Add(($559|0),($560|0),($carry1$0$us66$i|0),0)|0);
        $562 = tempRet0;
        $563 = ($562>>>0)>(0);
        $564 = ($561>>>0)>(1000000000);
        $565 = ($562|0)==(0);
        $566 = $565 & $564;
        $567 = $563 | $566;
        if ($567) {
         $568 = (___udivdi3(($561|0),($562|0),1000000000,0)|0);
         $569 = tempRet0;
         $570 = (___uremdi3(($561|0),($562|0),1000000000,0)|0);
         $571 = tempRet0;
         $$sink$off0$us70$i = $570;$carry1$1$us71$i = $568;
        } else {
         $$sink$off0$us70$i = $561;$carry1$1$us71$i = 0;
        }
        HEAP32[$557>>2] = $$sink$off0$us70$i;
        $572 = (($z$2$us64$i) + 127)|0;
        $573 = $572 & 127;
        $574 = ($k$5$us67$i|0)!=($573|0);
        $575 = ($k$5$us67$i|0)==($a$2$ph57$i|0);
        $or$cond19$us72$i = $574 | $575;
        if ($or$cond19$us72$i) {
         $z$3$us74$i = $z$2$us64$i;
        } else {
         $576 = ($$sink$off0$us70$i|0)==(0);
         $k$5$z$2$us73$i = $576 ? $k$5$us67$i : $z$2$us64$i;
         $z$3$us74$i = $k$5$z$2$us73$i;
        }
        $577 = (($k$5$us67$i) + -1)|0;
        if ($575) {
         break;
        } else {
         $carry1$0$us66$i = $carry1$1$us71$i;$k$5$in$us65$i = $577;$z$2$us64$i = $z$3$us74$i;
        }
       }
       $578 = (($e2$0$us61$i) + -29)|0;
       $579 = ($carry1$1$us71$i|0)==(0);
       if ($579) {
        $e2$0$us61$i = $578;$z$1$us62$i = $z$3$us74$i;
       } else {
        $$lcssa60$i = $578;$carry1$1$lcssa$lcssa$i = $carry1$1$us71$i;$z$3$lcssa$lcssa$i = $z$3$us74$i;
        break;
       }
      }
     }
     $580 = (($rp$2$ph55$i) + 9)|0;
     $581 = (($a$2$ph57$i) + 127)|0;
     $582 = $581 & 127;
     $583 = ($582|0)==($z$3$lcssa$lcssa$i|0);
     if ($583) {
      $584 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $585 = $584 & 127;
      $586 = (($x$i) + ($585<<2)|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $589 = $588 & 127;
      $590 = (($x$i) + ($589<<2)|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = $591 | $587;
      HEAP32[$590>>2] = $592;
      $z$4$i = $585;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $593 = (($x$i) + ($582<<2)|0);
     HEAP32[$593>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph57$i = $582;$e2$0$ph$i = $$lcssa60$i;$rp$2$ph55$i = $580;$z$1$ph56$i = $z$4$i;
    }
    L310: while(1) {
     $630 = (($z$5$ph$i) + 1)|0;
     $627 = $630 & 127;
     $631 = (($z$5$ph$i) + 127)|0;
     $632 = $631 & 127;
     $633 = (($x$i) + ($632<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph50$i;
     while(1) {
      $606 = ($rp$3$i$ph|0)==(18);
      $634 = ($rp$3$i$ph|0)>(27);
      $$20$i = $634 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$042$i = 0;
       while(1) {
        $596 = (($i$042$i) + ($a$3$i))|0;
        $597 = $596 & 127;
        $598 = ($597|0)==($z$5$ph$i|0);
        if ($598) {
         $i$1$i = 2;
         break;
        }
        $599 = (($x$i) + ($597<<2)|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = (368000 + ($i$042$i<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = ($600>>>0)<($602>>>0);
        if ($603) {
         $i$1$i = 2;
         break;
        }
        $604 = ($600>>>0)>($602>>>0);
        $594 = (($i$042$i) + 1)|0;
        if ($604) {
         $i$1$i = $i$042$i;
         break;
        }
        $595 = ($594|0)<(2);
        if ($595) {
         $i$042$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $605 = ($i$1$i|0)==(2);
       $or$cond8$i20 = $605 & $606;
       if ($or$cond8$i20) {
        break L310;
       }
       $609 = (($$20$i) + ($e2$1$i))|0;
       $610 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($610) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $609;
       } else {
        break;
       }
      }
      $611 = 1 << $$20$i;
      $612 = (($611) + -1)|0;
      $613 = 1000000000 >>> $$20$i;
      $a$444$i = $a$3$i;$carry3$047$i = 0;$k$645$i = $a$3$i;$rp$443$i = $rp$3$i$ph;
      while(1) {
       $614 = (($x$i) + ($k$645$i<<2)|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = $615 & $612;
       $617 = $615 >>> $$20$i;
       $618 = (($617) + ($carry3$047$i))|0;
       HEAP32[$614>>2] = $618;
       $619 = Math_imul($616, $613)|0;
       $620 = ($k$645$i|0)==($a$444$i|0);
       $621 = ($618|0)==(0);
       $or$cond21$i = $620 & $621;
       $622 = (($k$645$i) + 1)|0;
       $623 = $622 & 127;
       $624 = (($rp$443$i) + -9)|0;
       $rp$5$i = $or$cond21$i ? $624 : $rp$443$i;
       $a$5$i = $or$cond21$i ? $623 : $a$444$i;
       $625 = ($623|0)==($z$5$ph$i|0);
       if ($625) {
        break;
       } else {
        $a$444$i = $a$5$i;$carry3$047$i = $619;$k$645$i = $623;$rp$443$i = $rp$5$i;
       }
      }
      $626 = ($619|0)==(0);
      if ($626) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $628 = ($627|0)==($a$5$i|0);
      if (!($628)) {
       break;
      }
      $635 = HEAP32[$633>>2]|0;
      $636 = $635 | 1;
      HEAP32[$633>>2] = $636;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
     }
     $629 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$629>>2] = $619;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $609;$rp$3$ph50$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $607 = $a$3$i & 127;
    $608 = ($607|0)==($z$5$ph$i|0);
    if ($608) {
     $637 = (($627) + -1)|0;
     $638 = (($x$i) + ($637<<2)|0);
     HEAP32[$638>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $639 = (($x$i) + ($607<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = (+($640>>>0));
    $642 = (($a$3$i) + 1)|0;
    $643 = $642 & 127;
    $644 = ($643|0)==($z$7$i|0);
    if ($644) {
     $703 = (($z$7$i) + 1)|0;
     $704 = $703 & 127;
     $705 = (($704) + -1)|0;
     $706 = (($x$i) + ($705<<2)|0);
     HEAP32[$706>>2] = 0;
     $z$7$1$i = $704;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $707 = $641 * 1.0E+9;
    $708 = (($x$i) + ($643<<2)|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = (+($709>>>0));
    $711 = $707 + $710;
    $668 = (+($sign$0|0));
    $650 = $668 * $711;
    $688 = (($e2$1$i) + 53)|0;
    $645 = (($688) - ($emin$0$ph))|0;
    $712 = ($645|0)<($bits$0$ph|0);
    if ($712) {
     $646 = ($645|0)<(0);
     if ($646) {
      $$01231$i = 0;$denormal$030$i = 1;
      label = 244;
     } else {
      $$012$i = $645;$denormal$0$i = 1;
      label = 243;
     }
    } else {
     $$012$i = $bits$0$ph;$denormal$0$i = 0;
     label = 243;
    }
    if ((label|0) == 243) {
     $647 = ($$012$i|0)<(53);
     if ($647) {
      $$01231$i = $$012$i;$denormal$030$i = $denormal$0$i;
      label = 244;
     } else {
      $$01232$i = $$012$i;$bias$0$i25 = 0.0;$denormal$029$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i24 = $650;
     }
    }
    if ((label|0) == 244) {
     $648 = (105 - ($$01231$i))|0;
     $649 = (+_scalbn(1.0,$648));
     $651 = (+_copysignl($649,$650));
     $652 = (53 - ($$01231$i))|0;
     $653 = (+_scalbn(1.0,$652));
     $654 = (+_fmodl($650,$653));
     $655 = $650 - $654;
     $656 = $651 + $655;
     $$01232$i = $$01231$i;$bias$0$i25 = $651;$denormal$029$i = $denormal$030$i;$frac$0$i = $654;$y$1$i24 = $656;
    }
    $657 = (($a$3$i) + 2)|0;
    $658 = $657 & 127;
    $659 = ($658|0)==($z$7$1$i|0);
    do {
     if ($659) {
      $frac$2$i = $frac$0$i;
     } else {
      $660 = (($x$i) + ($658<<2)|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ($661>>>0)<(500000000);
      do {
       if ($662) {
        $663 = ($661|0)==(0);
        if ($663) {
         $664 = (($a$3$i) + 3)|0;
         $665 = $664 & 127;
         $666 = ($665|0)==($z$7$1$i|0);
         if ($666) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $667 = $668 * 0.25;
        $669 = $667 + $frac$0$i;
        $frac$1$i = $669;
       } else {
        $670 = ($661>>>0)>(500000000);
        if ($670) {
         $671 = $668 * 0.75;
         $672 = $671 + $frac$0$i;
         $frac$1$i = $672;
         break;
        }
        $673 = (($a$3$i) + 3)|0;
        $674 = $673 & 127;
        $675 = ($674|0)==($z$7$1$i|0);
        if ($675) {
         $676 = $668 * 0.5;
         $677 = $676 + $frac$0$i;
         $frac$1$i = $677;
         break;
        } else {
         $678 = $668 * 0.75;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        }
       }
      } while(0);
      $680 = (53 - ($$01232$i))|0;
      $681 = ($680|0)>(1);
      if (!($681)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $682 = (+_fmodl($frac$1$i,1.0));
      $683 = $682 != 0.0;
      if ($683) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = $frac$1$i + 1.0;
      $frac$2$i = $684;
     }
    } while(0);
    $685 = $y$1$i24 + $frac$2$i;
    $686 = $685 - $bias$0$i25;
    $687 = $688 & 2147483647;
    $689 = (-2 - ($sum$i))|0;
    $690 = ($687|0)>($689|0);
    do {
     if ($690) {
      $691 = (+Math_abs((+$686)));
      $692 = !($691 >= 9007199254740992.0);
      if ($692) {
       $denormal$2$i = $denormal$029$i;$e2$2$i = $e2$1$i;$y$2$i26 = $686;
      } else {
       $693 = ($denormal$029$i|0)!=(0);
       $694 = ($$01232$i|0)==($645|0);
       $or$cond22$i = $693 & $694;
       $denormal$1$i = $or$cond22$i ? 0 : $denormal$029$i;
       $695 = $686 * 0.5;
       $696 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $696;$y$2$i26 = $695;
      }
      $697 = (($e2$2$i) + 50)|0;
      $698 = ($697|0)>($326|0);
      if (!($698)) {
       $699 = ($denormal$2$i|0)!=(0);
       $700 = $frac$2$i != 0.0;
       $or$cond10$i = $699 & $700;
       if (!($or$cond10$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
        break;
       }
      }
      $701 = (___errno_location()|0);
      HEAP32[$701>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $686;
     }
    } while(0);
    $702 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $702;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $74 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $74 = $73;
    }
    $75 = ($74|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($88|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4|0)==(0);
    $brmerge108 = $100 | $97;
    if ($brmerge108) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      $$0 = nan;
      break;
     } else {
      $$in = $102;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 STACKTOP = sp;return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 STACKTOP = sp;return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0;
 var $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$33 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     STACKTOP = sp;return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    STACKTOP = sp;return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $ex$0$lcssa = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $ey$0$lcssa = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L27: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($152) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa10 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
       break L27;
      }
     }
     $99 = $x * 0.0;
     $$0 = $99;
     STACKTOP = sp;return (+$$0);
    } else {
     $$lcssa10 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa10) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     STACKTOP = sp;return (+$$0);
    } else {
     $118 = $156;$120 = $155;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$33 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$33) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$33 = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   STACKTOP = sp;return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 STACKTOP = sp;return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 STACKTOP = sp;return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 368040;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 368040;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 368040;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 STACKTOP = sp;return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=368616+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$02 = $n;$l$03 = $vl;$r$04 = $vr;
   while(1) {
    $1 = HEAP8[$l$03>>0]|0;
    $2 = HEAP8[$r$04>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$02) + -1)|0;
    $5 = (($l$03) + 1|0);
    $6 = (($r$04) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$02 = $4;$l$03 = $5;$r$04 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$01 = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$01 = $_l;$r$02 = $_r;
   while(1) {
    $3 = HEAP8[$r$02>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$02;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$02>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      break;
     }
    }
    $13 = (($l$01) + 1|0);
    $14 = (($r$02) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$01 = $13;$r$02 = $14;
    }
   }
   $$pre$pre = HEAP8[$l$01>>0]|0;
   $19 = $$pre$pre;$r$0$lcssa = $r$02;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 STACKTOP = sp;return ($24|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((367200 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((367672 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((367200 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((367200 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((367200 + 24|0))>>2] = $36;
  HEAP32[((367200 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((367200 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((367200 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((367200 + 8|0))>>2] = $storemerge21;
  HEAP32[((367200 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((367200 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[367200>>2]|0;
    $88 = $87 & $86;
    HEAP32[367200>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((367200 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((367200 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((367200 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((367200 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((367200 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((367200 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((367200 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((367200 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((367200 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((367200 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[367200>>2]|0;
     $32 = $31 & $30;
     HEAP32[367200>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((367200 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((367200 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((367200 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((367200 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((367200 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((367200 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((367200 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((367200 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((367200 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((367200 + 12|0))>>2] = $115;
   HEAP32[((367200 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((367200 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((367200 + 20|0))>>2] = 0;
   HEAP32[((367200 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((367200 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((367200 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((367200 + 8|0))>>2] = $123;
   HEAP32[((367200 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((367200 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[367200>>2]|0;
     $146 = $145 & $144;
     HEAP32[367200>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((367200 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((367200 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((367200 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((367200 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((367200 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((367200 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((367200 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((367200 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((367200 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[367200>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[367200>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((367200 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((367200 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((367200 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((367200 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((367200 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((367200 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((367200 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((367200 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$116 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$29 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $10&1;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = (($11) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$11>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $12;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $12;
   }
  } else {
   $c$0 = $20;$neg$0 = $12;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   STACKTOP = sp;return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  STACKTOP = sp;return ($97|0);
 } else {
  $c$116 = $c$0;$x$017 = 0;
 }
 while(1) {
  $33 = ($x$017*10)|0;
  $34 = (($c$116) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $or$cond5 = $44 & $45;
  if ($or$cond5) {
   $c$116 = $c$1$be;$x$017 = $35;
  } else {
   break;
  }
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $35;$53 = $47;$c$29 = $c$1$be;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$29|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$29|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond7 = $70 & $75;
   if ($or$cond7) {
    $52 = $60;$53 = $61;$c$29 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $35;$91 = $47;$c$2$lcssa = $c$1$be;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 STACKTOP = sp;return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0, $$not$i = 0;
 var $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre260 = 0, $$pre261 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $1029$phi = 0, $103 = 0, $1030 = 0, $1030$phi = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0, $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0;
 var $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0113 = 0, $fl$0118 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt81$lcssa = 0, $fmt81102 = 0;
 var $fmt82 = 0, $fmt83 = 0, $fmt84 = 0, $fmt86 = 0, $fmt87 = 0, $i$0$lcssa = 0, $i$0$lcssa267 = 0, $i$0166 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1225$i = 0, $i$2100 = 0, $i$2212$i = 0, $i$3204$i = 0, $i$397 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1165 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond271 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4266 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2111 = 0, $storemerge2117 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0167 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$0103 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1029 = 0;$1030 = 0;$cnt$0 = 0;$fmt83 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt83>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 352;
   break;
  } else {
   $1031 = $22;$fmt82 = $fmt83;
  }
  while(1) {
   if ((($1031<<24>>24) == 0)) {
    $fmt81$lcssa = $fmt82;$z$0$lcssa = $fmt82;
    break;
   } else if ((($1031<<24>>24) == 37)) {
    $fmt81102 = $fmt82;$z$0103 = $fmt82;
    label = 9;
    break;
   }
   $24 = (($fmt82) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1031 = $$pre;$fmt82 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt81102) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt81$lcssa = $fmt81102;$z$0$lcssa = $z$0103;
      break L12;
     }
     $28 = (($z$0103) + 1|0);
     $29 = (($fmt81102) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt81102 = $29;$z$0103 = $28;
      label = 9;
     } else {
      $fmt81$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt83;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt83,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt83|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1030$phi = $1030;$1029$phi = $1029;$cnt$0 = $cnt$1;$fmt83 = $fmt81$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1030 = $1030$phi;$1029 = $1029$phi;
   continue;
  }
  $36 = (($fmt81$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt81$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   if ($41) {
    $42 = (($fmt81$lcssa) + 3|0);
    $$pre260 = HEAP8[$42>>0]|0;
    $44 = $$pre260;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $42;
   } else {
    $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
   }
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L25: do {
   if ($46) {
    $$pr = $44;$48 = $43;$fl$0118 = 0;$storemerge2117 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $58 = $$pr;$fl$0113 = $fl$0118;$storemerge2111 = $storemerge2117;
      break L25;
     }
     $52 = $49 | $fl$0118;
     $53 = (($storemerge2117) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = $55 & -32;
     $57 = ($56|0)==(32);
     if ($57) {
      $$pr = $54;$48 = $55;$fl$0118 = $52;$storemerge2117 = $53;
     } else {
      $58 = $54;$fl$0113 = $52;$storemerge2111 = $53;
      break;
     }
    }
   } else {
    $58 = $44;$fl$0113 = 0;$storemerge2111 = $storemerge;
   }
  } while(0);
  $59 = ($58<<24>>24)==(42);
  do {
   if ($59) {
    $60 = (($storemerge2111) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp5 = (($62) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $63 = (($storemerge2111) + 2|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(36);
     if ($65) {
      $66 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$66>>2] = 10;
      $67 = HEAP8[$60>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = (($68) + -48)|0;
      $70 = (($nl_arg) + ($69<<3)|0);
      $71 = $70;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($storemerge2111) + 3|0);
      $l10n$2 = 1;$storemerge7 = $77;$w$0 = $73;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $78 = ($l10n$1|0)==(0);
     if (!($78)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0113;$fmt84 = $60;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $60;$w$0 = $79;
    }
    $80 = ($w$0|0)<(0);
    if ($80) {
     $81 = $fl$0113 | 8192;
     $82 = (0 - ($w$0))|0;
     $fl$1 = $81;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $82;
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $83 = $58 << 24 >> 24;
    $isdigittmp1$i = (($83) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $86 = $83;$89 = $storemerge2111;$i$03$i = 0;
     while(1) {
      $84 = ($i$03$i*10)|0;
      $85 = (($86) + -48)|0;
      $87 = (($85) + ($84))|0;
      $88 = (($89) + 1|0);
      $90 = HEAP8[$88>>0]|0;
      $91 = $90 << 24 >> 24;
      $isdigittmp$i = (($91) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $86 = $91;$89 = $88;$i$03$i = $87;
      } else {
       break;
      }
     }
     $92 = ($87|0)<(0);
     if ($92) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $fl$1 = $fl$0113;$fmt84 = $88;$l10n$3 = $l10n$1;$w$1 = $87;
     }
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge2111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $93 = HEAP8[$fmt84>>0]|0;
  $94 = ($93<<24>>24)==(46);
  L46: do {
   if ($94) {
    $95 = (($fmt84) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(42);
    if (!($97)) {
     $118 = $96 << 24 >> 24;
     $isdigittmp1$i22 = (($118) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $121 = $118;$124 = $95;$i$03$i24 = 0;
     } else {
      $fmt87 = $95;$p$0 = 0;
      break;
     }
     while(1) {
      $119 = ($i$03$i24*10)|0;
      $120 = (($121) + -48)|0;
      $122 = (($120) + ($119))|0;
      $123 = (($124) + 1|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i25 = (($126) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $121 = $126;$124 = $123;$i$03$i24 = $122;
      } else {
       $fmt87 = $123;$p$0 = $122;
       break L46;
      }
     }
    }
    $98 = (($fmt84) + 2|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $isdigittmp3 = (($100) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $101 = (($fmt84) + 3|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP8[$98>>0]|0;
      $106 = $105 << 24 >> 24;
      $107 = (($106) + -48)|0;
      $108 = (($nl_arg) + ($107<<3)|0);
      $109 = $108;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($fmt84) + 4|0);
      $fmt87 = $115;$p$0 = $111;
      break;
     }
    }
    $116 = ($l10n$3|0)==(0);
    if (!($116)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $117 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt87 = $98;$p$0 = $117;
    } else {
     $fmt87 = $98;$p$0 = 0;
    }
   } else {
    $fmt87 = $fmt84;$p$0 = -1;
   }
  } while(0);
  $fmt86 = $fmt87;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt86>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $131 = (($fmt86) + 1|0);
   $132 = ((368048 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt86 = $131;$st$0 = $134;
   } else {
    break;
   }
  }
  $137 = ($133<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 370;
   break;
  }
  $138 = ($133<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L65: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1032 = $1029;$1033 = $1030;
     label = 63;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $134;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1032 = $144;$1033 = $147;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $148 = ($133&255)>(20);
    if ($148) {
     $182 = $127;$190 = $1029;$217 = $1030;
    } else {
     do {
      switch ($134|0) {
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1034 = 0;$1035 = $154;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1034 = $1030;$1035 = $150;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1034 = $153;$1035 = $151;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext93 = $161 << 16;
       $166 = $sext93 >> 16;
       $1034 = $165;$1035 = $166;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $167 & 65535;
       $1034 = 0;$1035 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1034 = $172;$1035 = $173;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1034 = $177;$1035 = $176;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $174 & 255;
       $1034 = 0;$1035 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1032 = $179;$1033 = $180;
       label = 63;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1034 = $160;$1035 = $157;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1034 = $1030;$1035 = $1029;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1034 = $1033;$1035 = $1032;
    label = 64;
   } else {
    $1029 = $1032;$1030 = $1033;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre261 = HEAP8[$fmt86>>0]|0;
   $182 = $$pre261;$190 = $1035;$217 = $1034;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond9 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond9 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L89: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     $191 = $190;
     HEAP32[$191>>2] = $cnt$1;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $190;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $190;
     HEAP32[$192>>2] = $cnt$1;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $190;
     HEAP16[$201>>1] = $200;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $190;
     HEAP8[$203>>0] = $202;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $190;
     HEAP32[$204>>2] = $cnt$1;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $190;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 111:  {
    $238 = ($190|0)==(0);
    $239 = ($217|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$242 = $190;$246 = $217;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i42) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i45 = $245;
       break;
      } else {
       $$03$i42 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond13 = $253 | $240;
    $$19 = $or$cond13 ? 368512 : ((368512 + 5|0));
    $254 = $or$cond13&1;
    $$20 = $254 ^ 1;
    $292 = $190;$294 = $217;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 75;
    break;
   }
   case 99:  {
    $304 = $190&255;
    HEAP8[$4>>0] = $304;
    $1036 = $190;$1037 = $217;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 368512;$z$2 = $2;
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 96;
    break;
   }
   case 83:  {
    $316 = $190;
    $317 = ($p$0|0)==(0);
    if ($317) {
     $1040 = $190;$1041 = $316;$i$0$lcssa267 = 0;
     label = 106;
    } else {
     $1038 = $316;$1039 = $190;$p$4266 = $p$0;
     label = 101;
    }
    break;
   }
   case 105: case 100:  {
    $255 = ($217|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($190|0),($217|0))|0);
     $257 = tempRet0;
     $262 = $257;$264 = $256;$pl$0 = 1;$prefix$0 = 368512;
     label = 86;
     break L89;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 368512 : ((368512 + 2|0));
     $262 = $217;$264 = $190;$pl$0 = $260;$prefix$0 = $$;
     label = 86;
    } else {
     $262 = $217;$264 = $190;$pl$0 = 1;$prefix$0 = ((368512 + 1|0));
     label = 86;
    }
    break;
   }
   case 115:  {
    $308 = $190;
    $309 = ($190|0)==(0);
    $$15 = $309 ? 368528 : $308;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 117:  {
    $262 = $217;$264 = $190;$pl$0 = 0;$prefix$0 = 368512;
    label = 86;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $190;
    HEAP32[$5>>2] = 0;
    $1038 = $wc;$1039 = $6;$p$4266 = -1;
    label = 101;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $190;HEAP32[tempDoublePtr+4>>2] = $217;$355 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $356 = ($217|0)<(0);
    if ($356) {
     $357 = -$355;
     $$010$i = $357;$pl$0$i = 1;$prefix$0$i = 368536;
    } else {
     $358 = $fl$1$ & 2048;
     $359 = ($358|0)==(0);
     if ($359) {
      $360 = $fl$1$ & 1;
      $361 = ($360|0)==(0);
      $$$i = $361 ? ((368536 + 1|0)) : ((368536 + 6|0));
      $$010$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
     } else {
      $$010$i = $355;$pl$0$i = 1;$prefix$0$i = ((368536 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$362 = HEAP32[tempDoublePtr>>2]|0;
    $363 = HEAP32[tempDoublePtr+4>>2]|0;
    $364 = $363 & 2146435072;
    $365 = ($364>>>0)<(2146435072);
    $366 = (0)<(0);
    $367 = ($364|0)==(2146435072);
    $368 = $367 & $366;
    $369 = $365 | $368;
    if (!($369)) {
     $370 = $t$0 & 32;
     $371 = ($370|0)!=(0);
     $372 = $371 ? 368560 : 368568;
     $373 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($373) {
      $374 = $371 ? 368576 : 368584;
      $pl$1$i = 0;$s1$0$i = $374;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $372;
     }
     $375 = (($pl$1$i) + 3)|0;
     $376 = $fl$1$ & 8192;
     $377 = ($376|0)==(0);
     $378 = ($w$1|0)>($375|0);
     $or$cond$i40$i = $377 & $378;
     if ($or$cond$i40$i) {
      $379 = (($w$1) - ($375))|0;
      $380 = ($379>>>0)>(256);
      $381 = $380 ? 256 : $379;
      _memset(($pad$i|0),32,($381|0))|0;
      $382 = ($379>>>0)>(255);
      if ($382) {
       $$01$i42$i = $379;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $383 = (($$01$i42$i) + -256)|0;
        $384 = ($383>>>0)>(255);
        if ($384) {
         $$01$i42$i = $383;
        } else {
         break;
        }
       }
       $385 = $379 & 255;
       $$0$lcssa$i44$i = $385;
      } else {
       $$0$lcssa$i44$i = $379;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $386 = $fl$1$ & 73728;
     $387 = ($386|0)==(8192);
     $or$cond$i47$i = $387 & $378;
     if ($or$cond$i47$i) {
      $388 = (($w$1) - ($375))|0;
      $389 = ($388>>>0)>(256);
      $390 = $389 ? 256 : $388;
      _memset(($pad$i|0),32,($390|0))|0;
      $391 = ($388>>>0)>(255);
      if ($391) {
       $$01$i49$i = $388;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $392 = (($$01$i49$i) + -256)|0;
        $393 = ($392>>>0)>(255);
        if ($393) {
         $$01$i49$i = $392;
        } else {
         break;
        }
       }
       $394 = $388 & 255;
       $$0$lcssa$i51$i = $394;
      } else {
       $$0$lcssa$i51$i = $388;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $378 ? $w$1 : $375;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $395 = (+_frexpl($$010$i,$e2$i));
    $396 = $395 * 2.0;
    $397 = $396 != 0.0;
    if ($397) {
     $398 = HEAP32[$e2$i>>2]|0;
     $399 = (($398) + -1)|0;
     HEAP32[$e2$i>>2] = $399;
    }
    $400 = $t$0 | 32;
    $401 = ($400|0)==(97);
    if ($401) {
     $402 = $t$0 & 32;
     $403 = ($402|0)==(0);
     $404 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $403 ? $prefix$0$i : $404;
     $405 = $pl$0$i | 2;
     $406 = ($p$0>>>0)>(11);
     $407 = (12 - ($p$0))|0;
     $re$0$i = $406 ? 0 : $407;
     $408 = ($re$0$i|0)==(0);
     do {
      if ($408) {
       $$1$i = $396;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $409 = (($re$1163$i) + -1)|0;
        $410 = $round$0162$i * 16.0;
        $411 = ($409|0)==(0);
        if ($411) {
         break;
        } else {
         $re$1163$i = $409;$round$0162$i = $410;
        }
       }
       $412 = HEAP8[$prefix$0$$i>>0]|0;
       $413 = ($412<<24>>24)==(45);
       if ($413) {
        $414 = -$396;
        $415 = $414 - $410;
        $416 = $410 + $415;
        $417 = -$416;
        $$1$i = $417;
        break;
       } else {
        $418 = $396 + $410;
        $419 = $418 - $410;
        $$1$i = $419;
        break;
       }
      }
     } while(0);
     $420 = HEAP32[$e2$i>>2]|0;
     $421 = ($420|0)<(0);
     $422 = (0 - ($420))|0;
     $423 = $421 ? $422 : $420;
     $424 = ($423|0)<(0);
     if ($424) {
      $425 = ($423|0)<(0);
      $426 = $425 << 31 >> 31;
      $$05$i$i = $7;$427 = $423;$428 = $426;
      while(1) {
       $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
       $430 = tempRet0;
       $431 = $429 | 48;
       $432 = $431&255;
       $433 = (($$05$i$i) + -1|0);
       HEAP8[$433>>0] = $432;
       $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
       $435 = tempRet0;
       $436 = ($428>>>0)>(9);
       $437 = ($427>>>0)>(4294967295);
       $438 = ($428|0)==(9);
       $439 = $438 & $437;
       $440 = $436 | $439;
       if ($440) {
        $$05$i$i = $433;$427 = $434;$428 = $435;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $433;$$01$lcssa$off0$i$i = $434;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $423;
     }
     $441 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($441) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $442 = (($y$03$i$i>>>0) % 10)&-1;
       $443 = $442 | 48;
       $444 = $443&255;
       $445 = (($$12$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (($y$03$i$i>>>0) / 10)&-1;
       $447 = ($y$03$i$i>>>0)<(10);
       if ($447) {
        $$1$lcssa$i$i = $445;
        break;
       } else {
        $$12$i$i = $445;$y$03$i$i = $446;
       }
      }
     }
     $448 = ($$1$lcssa$i$i|0)==($7|0);
     if ($448) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $449 = HEAP32[$e2$i>>2]|0;
     $450 = $449 >> 31;
     $451 = $450 & 2;
     $452 = (($451) + 43)|0;
     $453 = $452&255;
     $454 = (($estr$0$i) + -1|0);
     HEAP8[$454>>0] = $453;
     $455 = (($t$0) + 15)|0;
     $456 = $455&255;
     $457 = (($estr$0$i) + -2|0);
     HEAP8[$457>>0] = $456;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $458 = $fl$1$ & 8;
      $459 = ($458|0)==(0);
      if ($459) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $460 = (~~(($$2$us$us$i)));
        $461 = (368592 + ($460)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = $463 | $402;
        $465 = $464&255;
        $466 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $465;
        $467 = (+($460|0));
        $468 = $$2$us$us$i - $467;
        $469 = $468 * 16.0;
        $470 = $466;
        $471 = (($470) - ($0))|0;
        $472 = ($471|0)!=(1);
        $notlhs$us$us$i = $469 == 0.0;
        $or$cond$i73 = $472 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $466;
        } else {
         $473 = (($s$0$us$us$i) + 2|0);
         HEAP8[$466>>0] = 46;
         $s$1$us$us$i = $473;
        }
        $474 = $469 != 0.0;
        if ($474) {
         $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $475 = (~~(($$2$us$i)));
        $476 = (368592 + ($475)|0);
        $477 = HEAP8[$476>>0]|0;
        $478 = $477&255;
        $479 = $478 | $402;
        $480 = $479&255;
        $481 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $480;
        $482 = (+($475|0));
        $483 = $$2$us$i - $482;
        $484 = $483 * 16.0;
        $485 = $481;
        $486 = (($485) - ($0))|0;
        $487 = ($486|0)==(1);
        if ($487) {
         $488 = (($s$0$us$i) + 2|0);
         HEAP8[$481>>0] = 46;
         $s$1$us$i = $488;
        } else {
         $s$1$us$i = $481;
        }
        $489 = $484 != 0.0;
        if ($489) {
         $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $490 = (~~(($$2$i)));
       $491 = (368592 + ($490)|0);
       $492 = HEAP8[$491>>0]|0;
       $493 = $492&255;
       $494 = $493 | $402;
       $495 = $494&255;
       $496 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $495;
       $497 = (+($490|0));
       $498 = $$2$i - $497;
       $499 = $498 * 16.0;
       $500 = $496;
       $501 = (($500) - ($0))|0;
       $502 = ($501|0)==(1);
       if ($502) {
        $503 = (($s$0$i) + 2|0);
        HEAP8[$496>>0] = 46;
        $s$1$i = $503;
       } else {
        $s$1$i = $496;
       }
       $504 = $499 != 0.0;
       if ($504) {
        $$2$i = $499;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $505 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $506 = (($11) + ($$pre306$i))|0;
     $507 = ($506|0)<($p$0|0);
     $or$cond271 = $505 & $507;
     $508 = $457;
     if ($or$cond271) {
      $509 = (($12) + ($p$0))|0;
      $510 = (($509) - ($508))|0;
      $l$0$i = $510;
     } else {
      $511 = (($10) - ($508))|0;
      $512 = (($511) + ($$pre306$i))|0;
      $l$0$i = $512;
     }
     $513 = (($l$0$i) + ($405))|0;
     $514 = $fl$1$ & 73728;
     $515 = ($514|0)==(0);
     $516 = ($w$1|0)>($513|0);
     $or$cond$i57$i = $515 & $516;
     if ($or$cond$i57$i) {
      $517 = (($w$1) - ($513))|0;
      $518 = ($517>>>0)>(256);
      $519 = $518 ? 256 : $517;
      _memset(($pad$i|0),32,($519|0))|0;
      $520 = ($517>>>0)>(255);
      if ($520) {
       $$01$i59$i = $517;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $521 = (($$01$i59$i) + -256)|0;
        $522 = ($521>>>0)>(255);
        if ($522) {
         $$01$i59$i = $521;
        } else {
         break;
        }
       }
       $523 = $517 & 255;
       $$0$lcssa$i61$i = $523;
      } else {
       $$0$lcssa$i61$i = $517;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$405,$f)|0);
     $524 = ($514|0)==(65536);
     $or$cond$i64$i = $524 & $516;
     if ($or$cond$i64$i) {
      $525 = (($w$1) - ($513))|0;
      $526 = ($525>>>0)>(256);
      $527 = $526 ? 256 : $525;
      _memset(($pad$i|0),48,($527|0))|0;
      $528 = ($525>>>0)>(255);
      if ($528) {
       $$01$i66$i = $525;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $529 = (($$01$i66$i) + -256)|0;
        $530 = ($529>>>0)>(255);
        if ($530) {
         $$01$i66$i = $529;
        } else {
         break;
        }
       }
       $531 = $525 & 255;
       $$0$lcssa$i68$i = $531;
      } else {
       $$0$lcssa$i68$i = $525;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $532 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$532,$f)|0);
     $533 = $457;
     $534 = (($9) - ($533))|0;
     $535 = (($l$0$i) - ($534))|0;
     $536 = (($535) - ($532))|0;
     $537 = ($536|0)>(0);
     if ($537) {
      $538 = ($536>>>0)>(256);
      $539 = $538 ? 256 : $536;
      _memset(($pad$i|0),48,($539|0))|0;
      $540 = ($536>>>0)>(255);
      if ($540) {
       $$01$i72$i = $536;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $541 = (($$01$i72$i) + -256)|0;
        $542 = ($541>>>0)>(255);
        if ($542) {
         $$01$i72$i = $541;
        } else {
         break;
        }
       }
       $543 = $536 & 255;
       $$0$lcssa$i74$i = $543;
      } else {
       $$0$lcssa$i74$i = $536;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($457,$534,$f)|0);
     $544 = ($514|0)==(8192);
     $or$cond$i77$i = $544 & $516;
     if ($or$cond$i77$i) {
      $545 = (($w$1) - ($513))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i79$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i79$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i79$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i81$i = $551;
      } else {
       $$0$lcssa$i81$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $516 ? $w$1 : $513;
     $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $552 = ($p$0|0)<(0);
    $$p$i = $552 ? 6 : $p$0;
    if ($397) {
     $553 = $396 * 268435456.0;
     $554 = HEAP32[$e2$i>>2]|0;
     $555 = (($554) + -28)|0;
     HEAP32[$e2$i>>2] = $555;
     $$3$i = $553;$556 = $555;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $396;$556 = $$pre$i;
    }
    $557 = ($556|0)<(0);
    $$36$i = $557 ? $big$i : $13;
    $558 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $559 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $559;
     $560 = (($z$0$i) + 4|0);
     $561 = (+($559>>>0));
     $562 = $$4$i - $561;
     $563 = $562 * 1.0E+9;
     $564 = $563 != 0.0;
     if ($564) {
      $$4$i = $563;$z$0$i = $560;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $565 = ($$pr$i|0)>(0);
    if ($565) {
     $566 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $560;
     while(1) {
      $567 = ($566|0)>(29);
      $568 = $567 ? 29 : $566;
      $d$0249$i = (($z$1257$i) + -4|0);
      $569 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($569) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $570 = HEAP32[$d$0251$i>>2]|0;
         $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
         $572 = tempRet0;
         $573 = (_i64Add(($571|0),($572|0),($carry$0250$i|0),0)|0);
         $574 = tempRet0;
         $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
         $576 = tempRet0;
         HEAP32[$d$0251$i>>2] = $575;
         $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
         $578 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $579 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($579) {
          break;
         } else {
          $carry$0250$i = $577;$d$0251$i = $d$0$i;
         }
        }
        $580 = ($577|0)==(0);
        if ($580) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $581 = (($a$1258$i) + -4|0);
        HEAP32[$581>>2] = $577;
        $a$2$ph$i = $581;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $582 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($582)) {
        break;
       }
       $583 = (($z$2$i) + -4|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = ($584|0)==(0);
       if ($585) {
        $z$2$i = $583;
       } else {
        break;
       }
      }
      $586 = HEAP32[$e2$i>>2]|0;
      $587 = (($586) - ($568))|0;
      HEAP32[$e2$i>>2] = $587;
      $588 = ($587|0)>(0);
      if ($588) {
       $566 = $587;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $587;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $560;
    }
    $589 = ($$pr151$i|0)<(0);
    L247: do {
     if ($589) {
      $590 = (($$p$i) + 25)|0;
      $591 = (($590|0) / 9)&-1;
      $592 = (($591) + 1)|0;
      $593 = ($400|0)==(102);
      if ($593) {
       $594 = (($$36$i) + ($592<<2)|0);
       $596 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $595 = (0 - ($596))|0;
        $597 = ($595|0)>(9);
        $$23$us$i = $597 ? 9 : $595;
        $598 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($598) {
          $623 = 1 << $$23$us$i;
          $617 = (($623) + -1)|0;
          $620 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $615 = HEAP32[$d$1237$us$i>>2]|0;
           $616 = $615 & $617;
           $618 = $615 >>> $$23$us$i;
           $619 = (($618) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $619;
           $605 = Math_imul($616, $620)|0;
           $621 = (($d$1237$us$i) + 4|0);
           $622 = ($621>>>0)<($z$3243$us$i>>>0);
           if ($622) {
            $carry3$0238$us$i = $605;$d$1237$us$i = $621;
           } else {
            break;
           }
          }
          $602 = HEAP32[$a$3244$us$i>>2]|0;
          $603 = ($602|0)==(0);
          $604 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $603 ? $604 : $a$3244$us$i;
          $606 = ($605|0)==(0);
          if ($606) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $607 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $605;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $607;
         } else {
          $599 = HEAP32[$a$3244$us$i>>2]|0;
          $600 = ($599|0)==(0);
          $601 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $600 ? $601 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $608 = $z$4$us$i;
        $609 = (($608) - ($558))|0;
        $610 = $609 >> 2;
        $611 = ($610|0)>($592|0);
        $$z$4$us$i = $611 ? $594 : $z$4$us$i;
        $612 = HEAP32[$e2$i>>2]|0;
        $613 = (($612) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $613;
        $614 = ($613|0)<(0);
        if ($614) {
         $596 = $613;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L247;
        }
       }
      } else {
       $625 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $624 = (0 - ($625))|0;
       $626 = ($624|0)>(9);
       $$23$i = $626 ? 9 : $624;
       $627 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($627) {
         $631 = 1 << $$23$i;
         $632 = (($631) + -1)|0;
         $633 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $634 = HEAP32[$d$1237$i>>2]|0;
          $635 = $634 & $632;
          $636 = $634 >>> $$23$i;
          $637 = (($636) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $637;
          $638 = Math_imul($635, $633)|0;
          $639 = (($d$1237$i) + 4|0);
          $640 = ($639>>>0)<($z$3243$i>>>0);
          if ($640) {
           $carry3$0238$i = $638;$d$1237$i = $639;
          } else {
           break;
          }
         }
         $641 = HEAP32[$a$3244$i>>2]|0;
         $642 = ($641|0)==(0);
         $643 = (($a$3244$i) + 4|0);
         $$a$3$i = $642 ? $643 : $a$3244$i;
         $644 = ($638|0)==(0);
         if ($644) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $645 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $638;
         $$a$3310$i = $$a$3$i;$z$4$i = $645;
        } else {
         $628 = HEAP32[$a$3244$i>>2]|0;
         $629 = ($628|0)==(0);
         $630 = (($a$3244$i) + 4|0);
         $$a$3309$i = $629 ? $630 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $646 = $z$4$i;
       $647 = $$a$3310$i;
       $648 = (($646) - ($647))|0;
       $649 = $648 >> 2;
       $650 = ($649|0)>($592|0);
       if ($650) {
        $651 = (($$a$3310$i) + ($592<<2)|0);
        $z$5$i = $651;
       } else {
        $z$5$i = $z$4$i;
       }
       $652 = HEAP32[$e2$i>>2]|0;
       $653 = (($652) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $653;
       $654 = ($653|0)<(0);
       if ($654) {
        $625 = $653;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $655 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($655) {
      $656 = $a$3$lcssa$i;
      $657 = (($558) - ($656))|0;
      $658 = $657 >> 2;
      $659 = ($658*9)|0;
      $660 = HEAP32[$a$3$lcssa$i>>2]|0;
      $661 = ($660>>>0)<(10);
      if ($661) {
       $e$1$i = $659;
       break;
      } else {
       $e$0233$i = $659;$i$0232$i = 10;
      }
      while(1) {
       $662 = ($i$0232$i*10)|0;
       $663 = (($e$0233$i) + 1)|0;
       $664 = ($660>>>0)<($662>>>0);
       if ($664) {
        $e$1$i = $663;
        break;
       } else {
        $e$0233$i = $663;$i$0232$i = $662;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $665 = ($400|0)!=(102);
    $666 = $665 ? $e$1$i : 0;
    $667 = (($$p$i) - ($666))|0;
    $668 = ($400|0)==(103);
    $669 = ($$p$i|0)!=(0);
    $$24$i = $668 & $669;
    $$neg156$i = $$24$i << 31 >> 31;
    $670 = (($667) + ($$neg156$i))|0;
    $671 = $z$3$lcssa$i;
    $672 = (($671) - ($558))|0;
    $673 = $672 >> 2;
    $674 = ($673*9)|0;
    $675 = (($674) + -9)|0;
    $676 = ($670|0)<($675|0);
    if ($676) {
     $677 = (($670) + 9216)|0;
     $678 = (($677|0) / 9)&-1;
     $$sum$i = (($678) + -1023)|0;
     $679 = (($$36$i) + ($$sum$i<<2)|0);
     $680 = (($677|0) % 9)&-1;
     $j$0224$i = (($680) + 1)|0;
     $681 = ($j$0224$i|0)<(9);
     if ($681) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $682 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $682;
        break;
       } else {
        $i$1225$i = $682;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $683 = HEAP32[$679>>2]|0;
     $684 = (($683>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $685 = ($684|0)==(0);
     if ($685) {
      $$sum18$i = (($678) + -1022)|0;
      $686 = (($$36$i) + ($$sum18$i<<2)|0);
      $687 = ($686|0)==($z$3$lcssa$i|0);
      if ($687) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $688 = (($683>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $689 = $688 & 1;
       $690 = ($689|0)==(0);
       $$25$i = $690 ? 9007199254740992.0 : 9007199254740994.0;
       $691 = (($i$1$lcssa$i|0) / 2)&-1;
       $692 = ($684>>>0)<($691>>>0);
       do {
        if ($692) {
         $small$0$i = 0.5;
        } else {
         $693 = ($684|0)==($691|0);
         if ($693) {
          $$sum19$i = (($678) + -1022)|0;
          $694 = (($$36$i) + ($$sum19$i<<2)|0);
          $695 = ($694|0)==($z$3$lcssa$i|0);
          if ($695) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $696 = ($pl$0$i|0)==(0);
       do {
        if ($696) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $697 = HEAP8[$prefix$0$i>>0]|0;
         $698 = ($697<<24>>24)==(45);
         if (!($698)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $699 = $$25$i * -1.0;
         $700 = $small$0$i * -1.0;
         $round6$1$i = $699;$small$1$i = $700;
        }
       } while(0);
       $701 = (($683) - ($684))|0;
       HEAP32[$679>>2] = $701;
       $702 = $round6$1$i + $small$1$i;
       $703 = $702 != $round6$1$i;
       if (!($703)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
        break;
       }
       $704 = (($701) + ($i$1$lcssa$i))|0;
       HEAP32[$679>>2] = $704;
       $705 = ($704>>>0)>(999999999);
       if ($705) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $679;
        while(1) {
         $706 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $707 = ($706>>>0)<($a$5218$i>>>0);
         if ($707) {
          $708 = (($a$5218$i) + -4|0);
          HEAP32[$708>>2] = 0;
          $a$6$i = $708;
         } else {
          $a$6$i = $a$5218$i;
         }
         $709 = HEAP32[$706>>2]|0;
         $710 = (($709) + 1)|0;
         HEAP32[$706>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5218$i = $a$6$i;$d$2217$i = $706;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $706;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $679;
       }
       $712 = $a$5$lcssa$i;
       $713 = (($558) - ($712))|0;
       $714 = $713 >> 2;
       $715 = ($714*9)|0;
       $716 = HEAP32[$a$5$lcssa$i>>2]|0;
       $717 = ($716>>>0)<(10);
       if ($717) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $715;
        break;
       } else {
        $e$2213$i = $715;$i$2212$i = 10;
       }
       while(1) {
        $718 = ($i$2212$i*10)|0;
        $719 = (($e$2213$i) + 1)|0;
        $720 = ($716>>>0)<($718>>>0);
        if ($720) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $719;
         break;
        } else {
         $e$2213$i = $719;$i$2212$i = $718;
        }
       }
      }
     } while(0);
     $721 = (($d$3$i) + 4|0);
     $722 = ($z$3$lcssa$i>>>0)>($721>>>0);
     $$z$3$i = $722 ? $721 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $723 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $724 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($724)) {
      $$lcssa292$i = 0;
      break;
     }
     $725 = (($z$6$i) + -4|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)==(0);
     if ($727) {
      $z$6$i = $725;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($668) {
      $728 = ($$p$i|0)==(0);
      $729 = $728&1;
      $$$p$i = (($729) + ($$p$i))|0;
      $730 = ($$$p$i|0)>($e$4$ph$i|0);
      $731 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $730 & $731;
      if ($or$cond5$i) {
       $732 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $733 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $732;$$213$i = $733;
      } else {
       $734 = (($t$0) + -2)|0;
       $735 = (($$$p$i) + -1)|0;
       $$016$i = $734;$$213$i = $735;
      }
      $736 = $fl$1$ & 8;
      $737 = ($736|0)==(0);
      if (!($737)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $738 = (($z$6$i) + -4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = ($739|0)==(0);
        if ($740) {
         $j$2$i = 9;
         break;
        }
        $741 = (($739>>>0) % 10)&-1;
        $742 = ($741|0)==(0);
        if ($742) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $743 = ($i$3204$i*10)|0;
         $744 = (($j$1205$i) + 1)|0;
         $745 = (($739>>>0) % ($743>>>0))&-1;
         $746 = ($745|0)==(0);
         if ($746) {
          $i$3204$i = $743;$j$1205$i = $744;
         } else {
          $j$2$i = $744;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $747 = $$016$i | 32;
      $748 = ($747|0)==(102);
      $749 = $z$6$i;
      $750 = (($749) - ($558))|0;
      $751 = $750 >> 2;
      $752 = ($751*9)|0;
      $753 = (($752) + -9)|0;
      if ($748) {
       $754 = (($753) - ($j$2$i))|0;
       $755 = ($754|0)<(0);
       $$26$i = $755 ? 0 : $754;
       $756 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $756 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $757 = (($753) + ($e$4$ph$i))|0;
       $758 = (($757) - ($j$2$i))|0;
       $759 = ($758|0)<(0);
       $$28$i = $759 ? 0 : $758;
       $760 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $760 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $761 = ($$314$i|0)!=(0);
    if ($761) {
     $765 = 1;
    } else {
     $762 = $fl$1$ & 8;
     $763 = ($762|0)!=(0);
     $765 = $763;
    }
    $764 = $765&1;
    $766 = $$117$i | 32;
    $767 = ($766|0)==(102);
    if ($767) {
     $768 = ($e$4$ph$i|0)>(0);
     $769 = $768 ? $e$4$ph$i : 0;
     $$pn$i = $769;$estr$2$i = 0;
    } else {
     $770 = ($e$4$ph$i|0)<(0);
     $771 = $770 ? $723 : $e$4$ph$i;
     $772 = ($771|0)<(0);
     if ($772) {
      $773 = ($771|0)<(0);
      $774 = $773 << 31 >> 31;
      $$05$i84$i = $7;$775 = $771;$776 = $774;
      while(1) {
       $777 = (___uremdi3(($775|0),($776|0),10,0)|0);
       $778 = tempRet0;
       $779 = $777 | 48;
       $780 = $779&255;
       $781 = (($$05$i84$i) + -1|0);
       HEAP8[$781>>0] = $780;
       $782 = (___udivdi3(($775|0),($776|0),10,0)|0);
       $783 = tempRet0;
       $784 = ($776>>>0)>(9);
       $785 = ($775>>>0)>(4294967295);
       $786 = ($776|0)==(9);
       $787 = $786 & $785;
       $788 = $784 | $787;
       if ($788) {
        $$05$i84$i = $781;$775 = $782;$776 = $783;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $781;$$01$lcssa$off0$i90$i = $782;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $771;
     }
     $789 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($789) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $790 = (($y$03$i91$i>>>0) % 10)&-1;
       $791 = $790 | 48;
       $792 = $791&255;
       $793 = (($$12$i92$i) + -1|0);
       HEAP8[$793>>0] = $792;
       $794 = (($y$03$i91$i>>>0) / 10)&-1;
       $795 = ($y$03$i91$i>>>0)<(10);
       if ($795) {
        $estr$1$ph$i = $793;
        break;
       } else {
        $$12$i92$i = $793;$y$03$i91$i = $794;
       }
      }
     }
     $796 = $estr$1$ph$i;
     $797 = (($9) - ($796))|0;
     $798 = ($797|0)<(2);
     if ($798) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $799 = (($estr$1195$i) + -1|0);
       HEAP8[$799>>0] = 48;
       $800 = $799;
       $801 = (($9) - ($800))|0;
       $802 = ($801|0)<(2);
       if ($802) {
        $estr$1195$i = $799;
       } else {
        $estr$1$lcssa$i = $799;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $803 = $e$4$ph$i >> 31;
     $804 = $803 & 2;
     $805 = (($804) + 43)|0;
     $806 = $805&255;
     $807 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$807>>0] = $806;
     $808 = $$117$i&255;
     $809 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$809>>0] = $808;
     $810 = $809;
     $811 = (($9) - ($810))|0;
     $$pn$i = $811;$estr$2$i = $809;
    }
    $812 = (($pl$0$i) + 1)|0;
    $813 = (($812) + ($$314$i))|0;
    $l$1$i = (($813) + ($764))|0;
    $814 = (($l$1$i) + ($$pn$i))|0;
    $815 = $fl$1$ & 73728;
    $816 = ($815|0)==(0);
    $817 = ($w$1|0)>($814|0);
    $or$cond$i98$i = $816 & $817;
    if ($or$cond$i98$i) {
     $818 = (($w$1) - ($814))|0;
     $819 = ($818>>>0)>(256);
     $820 = $819 ? 256 : $818;
     _memset(($pad$i|0),32,($820|0))|0;
     $821 = ($818>>>0)>(255);
     if ($821) {
      $$01$i100$i = $818;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $822 = (($$01$i100$i) + -256)|0;
       $823 = ($822>>>0)>(255);
       if ($823) {
        $$01$i100$i = $822;
       } else {
        break;
       }
      }
      $824 = $818 & 255;
      $$0$lcssa$i102$i = $824;
     } else {
      $$0$lcssa$i102$i = $818;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $825 = ($815|0)==(65536);
    $or$cond$i105$i = $825 & $817;
    if ($or$cond$i105$i) {
     $826 = (($w$1) - ($814))|0;
     $827 = ($826>>>0)>(256);
     $828 = $827 ? 256 : $826;
     _memset(($pad$i|0),48,($828|0))|0;
     $829 = ($826>>>0)>(255);
     if ($829) {
      $$01$i107$i = $826;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $830 = (($$01$i107$i) + -256)|0;
       $831 = ($830>>>0)>(255);
       if ($831) {
        $$01$i107$i = $830;
       } else {
        break;
       }
      }
      $832 = $826 & 255;
      $$0$lcssa$i109$i = $832;
     } else {
      $$0$lcssa$i109$i = $826;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($767) {
      $833 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $833 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $834 = HEAP32[$d$4180$i>>2]|0;
       $835 = ($834|0)==(0);
       if ($835) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $834;
        while(1) {
         $836 = (($y$03$i114$i>>>0) % 10)&-1;
         $837 = $836 | 48;
         $838 = $837&255;
         $839 = (($$12$i115$i) + -1|0);
         HEAP8[$839>>0] = $838;
         $840 = (($y$03$i114$i>>>0) / 10)&-1;
         $841 = ($y$03$i114$i>>>0)<(10);
         if ($841) {
          $$1$lcssa$i117$i = $839;
          break;
         } else {
          $$12$i115$i = $839;$y$03$i114$i = $840;
         }
        }
       }
       $842 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($842) {
         $846 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($846)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $843 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($843) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $844 = (($s7$0177$i) + -1|0);
          HEAP8[$844>>0] = 48;
          $845 = ($844>>>0)>($buf$i>>>0);
          if ($845) {
           $s7$0177$i = $844;
          } else {
           $s7$1$i = $844;
           break;
          }
         }
        }
       } while(0);
       $847 = $s7$1$i;
       $848 = (($15) - ($847))|0;
       (___fwritex($s7$1$i,$848,$f)|0);
       $849 = (($d$4180$i) + 4|0);
       $850 = ($849>>>0)>($$36$i>>>0);
       if ($850) {
        break;
       } else {
        $d$4180$i = $849;
       }
      }
      $$not$i = $761 ^ 1;
      $851 = $fl$1$ & 8;
      $852 = ($851|0)==(0);
      $or$cond32$i = $852 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(368608,1,$f)|0);
      }
      $853 = ($849>>>0)<($z$6$i>>>0);
      $854 = ($$314$i|0)>(0);
      $or$cond7169$i = $853 & $854;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $849;
       while(1) {
        $855 = HEAP32[$d$5170$i>>2]|0;
        $856 = ($855|0)==(0);
        if ($856) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $855;
         while(1) {
          $857 = (($y$03$i123$i>>>0) % 10)&-1;
          $858 = $857 | 48;
          $859 = $858&255;
          $860 = (($$12$i124$i) + -1|0);
          HEAP8[$860>>0] = $859;
          $861 = (($y$03$i123$i>>>0) / 10)&-1;
          $862 = ($y$03$i123$i>>>0)<(10);
          if ($862) {
           break;
          } else {
           $$12$i124$i = $860;$y$03$i123$i = $861;
          }
         }
         $863 = ($860>>>0)>($buf$i>>>0);
         if ($863) {
          $s8$0165$i = $860;
          label = 301;
         } else {
          $s8$0$lcssa$i = $860;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $864 = (($s8$0165$i) + -1|0);
          HEAP8[$864>>0] = 48;
          $865 = ($864>>>0)>($buf$i>>>0);
          if ($865) {
           $s8$0165$i = $864;
           label = 301;
          } else {
           $s8$0$lcssa$i = $864;
           break;
          }
         }
        }
        $866 = ($$415171$i|0)>(9);
        $867 = $866 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$867,$f)|0);
        $868 = (($d$5170$i) + 4|0);
        $869 = (($$415171$i) + -9)|0;
        $870 = ($868>>>0)<($z$6$i>>>0);
        $871 = ($869|0)>(0);
        $or$cond7$i = $870 & $871;
        if ($or$cond7$i) {
         $$415171$i = $869;$d$5170$i = $868;
        } else {
         $$415$lcssa$i = $869;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $872 = ($$415$lcssa$i|0)>(0);
      if (!($872)) {
       break;
      }
      $873 = ($$415$lcssa$i>>>0)>(256);
      $874 = $873 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($874|0))|0;
      $875 = ($$415$lcssa$i>>>0)>(255);
      if ($875) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $876 = (($$01$i131$i) + -256)|0;
        $877 = ($876>>>0)>(255);
        if ($877) {
         $$01$i131$i = $876;
        } else {
         break;
        }
       }
       $878 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $878;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $879 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $879;
      $880 = ($$314$i|0)>(-1);
      do {
       if ($880) {
        $881 = $fl$1$ & 8;
        $882 = ($881|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $883 = HEAP32[$d$6188$i>>2]|0;
         $884 = ($883|0)==(0);
         if ($884) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $883;
          while(1) {
           $885 = (($y$03$i138$i>>>0) % 10)&-1;
           $886 = $885 | 48;
           $887 = $886&255;
           $888 = (($$12$i139$i) + -1|0);
           HEAP8[$888>>0] = $887;
           $889 = (($y$03$i138$i>>>0) / 10)&-1;
           $890 = ($y$03$i138$i>>>0)<(10);
           if ($890) {
            break;
           } else {
            $$12$i139$i = $888;$y$03$i138$i = $889;
           }
          }
          $891 = ($888|0)==($14|0);
          if ($891) {
           label = 313;
          } else {
           $s9$0$i = $888;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $892 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($892) {
           $896 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $897 = ($$5189$i|0)<(1);
           $or$cond34$i = $897 & $882;
           if ($or$cond34$i) {
            $s9$2$i = $896;
            break;
           }
           (___fwritex(368608,1,$f)|0);
           $s9$2$i = $896;
          } else {
           $893 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($893) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $894 = (($s9$1184$i) + -1|0);
            HEAP8[$894>>0] = 48;
            $895 = ($894>>>0)>($buf$i>>>0);
            if ($895) {
             $s9$1184$i = $894;
            } else {
             $s9$2$i = $894;
             break;
            }
           }
          }
         } while(0);
         $898 = $s9$2$i;
         $899 = (($15) - ($898))|0;
         $900 = ($$5189$i|0)>($899|0);
         $$$5$i = $900 ? $899 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $901 = (($$5189$i) - ($899))|0;
         $902 = (($d$6188$i) + 4|0);
         $903 = ($902>>>0)<($z$6$$i>>>0);
         $904 = ($901|0)>(-1);
         $or$cond9$i = $903 & $904;
         if ($or$cond9$i) {
          $$5189$i = $901;$d$6188$i = $902;
         } else {
          break;
         }
        }
        $905 = ($901|0)>(0);
        if (!($905)) {
         break;
        }
        $906 = ($901>>>0)>(256);
        $907 = $906 ? 256 : $901;
        _memset(($pad$i|0),48,($907|0))|0;
        $908 = ($901>>>0)>(255);
        if ($908) {
         $$01$i146$i = $901;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $909 = (($$01$i146$i) + -256)|0;
          $910 = ($909>>>0)>(255);
          if ($910) {
           $$01$i146$i = $909;
          } else {
           break;
          }
         }
         $911 = $901 & 255;
         $$0$lcssa$i148$i = $911;
        } else {
         $$0$lcssa$i148$i = $901;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $912 = $estr$2$i;
      $913 = (($9) - ($912))|0;
      (___fwritex($estr$2$i,$913,$f)|0);
     }
    } while(0);
    $914 = ($815|0)==(8192);
    $or$cond$i$i = $914 & $817;
    if ($or$cond$i$i) {
     $915 = (($w$1) - ($814))|0;
     $916 = ($915>>>0)>(256);
     $917 = $916 ? 256 : $915;
     _memset(($pad$i|0),32,($917|0))|0;
     $918 = ($915>>>0)>(255);
     if ($918) {
      $$01$i$i = $915;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $919 = (($$01$i$i) + -256)|0;
       $920 = ($919>>>0)>(255);
       if ($920) {
        $$01$i$i = $919;
       } else {
        break;
       }
      }
      $921 = $915 & 255;
      $$0$lcssa$i$i = $921;
     } else {
      $$0$lcssa$i$i = $915;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $817 ? $w$1 : $814;
    $1029 = $190;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1036 = $190;$1037 = $217;$a$2 = $fmt83;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 368512;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($190|0)==(0);
    $218 = ($217|0)==(0);
    $219 = $216 & $218;
    if ($219) {
     $292 = $190;$294 = $217;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 368512;
     label = 91;
    } else {
     $$012$i = $2;$221 = $190;$228 = $217;
     while(1) {
      $220 = $221 & 15;
      $222 = (368592 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $292 = $190;$294 = $217;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 368512;
      label = 91;
     } else {
      $236 = $t$1 >> 4;
      $237 = (368512 + ($236)|0);
      $292 = $190;$294 = $217;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $263 = ($262>>>0)>(0);
    $265 = ($264>>>0)>(4294967295);
    $266 = ($262|0)==(0);
    $267 = $266 & $265;
    $268 = $263 | $267;
    if ($268) {
     $$05$i = $2;$269 = $264;$270 = $262;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $275;$$01$lcssa$off0$i = $276;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $264;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $292 = $264;$294 = $262;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $292 = $264;$294 = $262;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $310 = (_memchr($a$1,0,$p$0)|0);
    $311 = ($310|0)==(0|0);
    if ($311) {
     $312 = (($a$1) + ($p$0)|0);
     $1036 = $190;$1037 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 368512;$z$2 = $312;
     break;
    } else {
     $313 = $310;
     $314 = $a$1;
     $315 = (($313) - ($314))|0;
     $1036 = $190;$1037 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 368512;$z$2 = $310;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0166 = 0;$l$1165 = 0;$ws$0167 = $1038;
    while(1) {
     $318 = HEAP32[$ws$0167>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $i$0$lcssa = $i$0166;$l$2 = $l$1165;
      break;
     }
     $320 = (_wctomb($mb,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($p$4266) - ($i$0166))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond17 = $321 | $323;
     if ($or$cond17) {
      $i$0$lcssa = $i$0166;$l$2 = $320;
      break;
     }
     $324 = (($ws$0167) + 4|0);
     $325 = (($320) + ($i$0166))|0;
     $326 = ($p$4266>>>0)>($325>>>0);
     if ($326) {
      $i$0166 = $325;$l$1165 = $320;$ws$0167 = $324;
     } else {
      $i$0$lcssa = $325;$l$2 = $320;
      break;
     }
    }
    $327 = ($l$2|0)<(0);
    if ($327) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1040 = $1039;$1041 = $1038;$i$0$lcssa267 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $293 = ($292|0)!=(0);
   $295 = ($294|0)!=(0);
   $296 = $293 | $295;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1036 = $292;$1037 = $294;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1036 = $292;$1037 = $294;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $328 = $fl$1$ & 73728;
   $329 = ($328|0)==(0);
   $330 = ($w$1|0)>($i$0$lcssa267|0);
   $or$cond$i58 = $329 & $330;
   if ($or$cond$i58) {
    $331 = (($w$1) - ($i$0$lcssa267))|0;
    $332 = ($331>>>0)>(256);
    $333 = $332 ? 256 : $331;
    _memset(($pad$i|0),32,($333|0))|0;
    $334 = ($331>>>0)>(255);
    if ($334) {
     $$01$i60 = $331;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $335 = (($$01$i60) + -256)|0;
      $336 = ($335>>>0)>(255);
      if ($336) {
       $$01$i60 = $335;
      } else {
       break;
      }
     }
     $337 = $331 & 255;
     $$0$lcssa$i62 = $337;
    } else {
     $$0$lcssa$i62 = $331;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $338 = ($i$0$lcssa267|0)==(0);
   L479: do {
    if (!($338)) {
     $i$1174 = 0;$ws$1175 = $1041;
     while(1) {
      $339 = HEAP32[$ws$1175>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       break L479;
      }
      $341 = (_wctomb($mb,$339)|0);
      $342 = (($341) + ($i$1174))|0;
      $343 = ($342|0)>($i$0$lcssa267|0);
      if ($343) {
       break L479;
      }
      $344 = (($ws$1175) + 4|0);
      (___fwritex($mb,$341,$f)|0);
      $345 = ($342>>>0)<($i$0$lcssa267>>>0);
      if ($345) {
       $i$1174 = $342;$ws$1175 = $344;
      } else {
       break;
      }
     }
    }
   } while(0);
   $346 = ($328|0)==(8192);
   $or$cond$i65 = $346 & $330;
   if ($or$cond$i65) {
    $347 = (($w$1) - ($i$0$lcssa267))|0;
    $348 = ($347>>>0)>(256);
    $349 = $348 ? 256 : $347;
    _memset(($pad$i|0),32,($349|0))|0;
    $350 = ($347>>>0)>(255);
    if ($350) {
     $$01$i67 = $347;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $351 = (($$01$i67) + -256)|0;
      $352 = ($351>>>0)>(255);
      if ($352) {
       $$01$i67 = $351;
      } else {
       break;
      }
     }
     $353 = $347 & 255;
     $$0$lcssa$i69 = $353;
    } else {
     $$0$lcssa$i69 = $347;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $354 = $330 ? $w$1 : $i$0$lcssa267;
   $1029 = $1040;$1030 = $217;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $354;$l10n$0 = $l10n$3;
   continue;
  }
  $922 = $z$2;
  $923 = $a$2;
  $924 = (($922) - ($923))|0;
  $925 = ($p$5|0)<($924|0);
  $$p$5 = $925 ? $924 : $p$5;
  $926 = (($pl$2) + ($$p$5))|0;
  $927 = ($w$1|0)<($926|0);
  $w$2 = $927 ? $926 : $w$1;
  $928 = $fl$6 & 73728;
  $929 = ($928|0)==(0);
  $930 = ($w$2|0)>($926|0);
  $or$cond$i75 = $929 & $930;
  if ($or$cond$i75) {
   $931 = (($w$2) - ($926))|0;
   $932 = ($931>>>0)>(256);
   $933 = $932 ? 256 : $931;
   _memset(($pad$i|0),32,($933|0))|0;
   $934 = ($931>>>0)>(255);
   if ($934) {
    $$01$i77 = $931;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $935 = (($$01$i77) + -256)|0;
     $936 = ($935>>>0)>(255);
     if ($936) {
      $$01$i77 = $935;
     } else {
      break;
     }
    }
    $937 = $931 & 255;
    $$0$lcssa$i79 = $937;
   } else {
    $$0$lcssa$i79 = $931;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $938 = ($928|0)==(65536);
  $or$cond$i51 = $938 & $930;
  if ($or$cond$i51) {
   $939 = (($w$2) - ($926))|0;
   $940 = ($939>>>0)>(256);
   $941 = $940 ? 256 : $939;
   _memset(($pad$i|0),48,($941|0))|0;
   $942 = ($939>>>0)>(255);
   if ($942) {
    $$01$i53 = $939;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $943 = (($$01$i53) + -256)|0;
     $944 = ($943>>>0)>(255);
     if ($944) {
      $$01$i53 = $943;
     } else {
      break;
     }
    }
    $945 = $939 & 255;
    $$0$lcssa$i55 = $945;
   } else {
    $$0$lcssa$i55 = $939;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $946 = ($$p$5|0)>($924|0);
  if ($946) {
   $947 = (($$p$5) - ($924))|0;
   $948 = ($947>>>0)>(256);
   $949 = $948 ? 256 : $947;
   _memset(($pad$i|0),48,($949|0))|0;
   $950 = ($947>>>0)>(255);
   if ($950) {
    $$01$i38 = $947;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $951 = (($$01$i38) + -256)|0;
     $952 = ($951>>>0)>(255);
     if ($952) {
      $$01$i38 = $951;
     } else {
      break;
     }
    }
    $953 = $947 & 255;
    $$0$lcssa$i40 = $953;
   } else {
    $$0$lcssa$i40 = $947;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$924,$f)|0);
  $954 = ($928|0)==(8192);
  $or$cond$i = $954 & $930;
  if (!($or$cond$i)) {
   $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $955 = (($w$2) - ($926))|0;
  $956 = ($955>>>0)>(256);
  $957 = $956 ? 256 : $955;
  _memset(($pad$i|0),32,($957|0))|0;
  $958 = ($955>>>0)>(255);
  if ($958) {
   $$01$i = $955;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $959 = (($$01$i) + -256)|0;
    $960 = ($959>>>0)>(255);
    if ($960) {
     $$01$i = $959;
    } else {
     break;
    }
   }
   $961 = $955 & 255;
   $$0$lcssa$i = $961;
  } else {
   $$0$lcssa$i = $955;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $962 = ($f|0)==(0|0);
  if (!($962)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $963 = ($l10n$0|0)==(0);
  if ($963) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2100 = 1;
  }
  while(1) {
   $964 = (($nl_type) + ($i$2100<<2)|0);
   $965 = HEAP32[$964>>2]|0;
   $966 = ($965|0)==(0);
   if ($966) {
    $i$397 = $i$2100;
    break;
   }
   $967 = (($nl_arg) + ($i$2100<<3)|0);
   $968 = ($965>>>0)>(20);
   L534: do {
    if (!($968)) {
     do {
      switch ($965|0) {
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1021 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$967>>3] = $1021;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $970 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $971 = ($970|0)<(0);
       $972 = $971 << 31 >> 31;
       $973 = $967;
       $974 = $973;
       HEAP32[$974>>2] = $970;
       $975 = (($973) + 4)|0;
       $976 = $975;
       HEAP32[$976>>2] = $972;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1020 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$967>>3] = $1020;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $982 = $arglist_current44;
       $983 = $982;
       $984 = HEAP32[$983>>2]|0;
       $985 = (($982) + 4)|0;
       $986 = $985;
       $987 = HEAP32[$986>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $988 = $967;
       $989 = $988;
       HEAP32[$989>>2] = $984;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L534;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $977 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $978 = $967;
       $979 = $978;
       HEAP32[$979>>2] = $977;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = 0;
       break L534;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $969 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$967>>2] = $969;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $993 = $992&65535;
       $994 = $993 << 16 >> 16;
       $995 = ($994|0)<(0);
       $996 = $995 << 31 >> 31;
       $997 = $967;
       $998 = $997;
       HEAP32[$998>>2] = $994;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = $996;
       break L534;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1007 = $1006&255;
       $1008 = $1007 << 24 >> 24;
       $1009 = ($1008|0)<(0);
       $1010 = $1009 << 31 >> 31;
       $1011 = $967;
       $1012 = $1011;
       HEAP32[$1012>>2] = $1008;
       $1013 = (($1011) + 4)|0;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1015 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1015 & 255;
       $1016 = $967;
       $1017 = $1016;
       HEAP32[$1017>>2] = $$mask$i;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = 0;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1001 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1001 & 65535;
       $1002 = $967;
       $1003 = $1002;
       HEAP32[$1003>>2] = $$mask1$i;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = 0;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1022 = (($i$2100) + 1)|0;
   $1023 = ($1022|0)<(10);
   if ($1023) {
    $i$2100 = $1022;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1026 = (($nl_type) + ($i$397<<2)|0);
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = ($1027|0)==(0);
   $1024 = (($i$397) + 1)|0;
   if (!($1028)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1025 = ($1024|0)<(10);
   if ($1025) {
    $i$397 = $1024;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&255]();
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0; }
  function b2() { ; nullFunc_v(2); }
  function _SDL_Quit__wrapper() { ; _SDL_Quit(); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_sn_write,b0,_do_read,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_iii = [b1,_lEND,_lNOP,_lSNIF,_lOFFSET,_lNEVERIF,_lEMPTY,_lNO_IF,_lLABEL,_lRETURN,_lIF,_lSWIF,_lONEIF,_lELSE,_lBODY,_lBODY_OBJ,_lANIM,_lANIM_OBJ,_lSET_LIFE,_lSET_LIFE_OBJ,_lSET_TRACK,_lSET_TRACK_OBJ,_lMESSAGE,_lFALLABLE,_lSET_DIRMODE,_lSET_DIRMODE_OBJ,_lCAM_FOLLOW,_lSET_BEHAVIOUR,_lSET_FLAG_CUBE
  ,_lCOMPORTEMENT,_lSET_COMPORTEMENT,_lSET_COMPORTEMENT_OBJ,_lEND_COMPORTEMENT,_lSET_FLAG_GAME,_lKILL_OBJ,_lSUICIDE,_lUSE_ONE_LITTLE_KEY,_lGIVE_GOLD_PIECES,_lEND_LIFE,_lSTOP_L_TRACK,_lRESTORE_L_TRACK,_lMESSAGE_OBJ,_lINC_CHAPTER,_lFOUND_OBJECT,_lSET_DOOR_LEFT,_lSET_DOOR_RIGHT,_lSET_DOOR_UP,_lSET_DOOR_DOWN,_lGIVE_BONUS,_lCHANGE_CUBE,_lOBJ_COL,_lBRICK_COL,_lOR_IF,_lINVISIBLE,_lZOOM,_lPOS_POINT,_lSET_MAGIC_LEVEL,_lSUB_MAGIC_POINT,_lSET_LIFE_POINT_OBJ
  ,_lSUB_LIFE_POINT_OBJ,_lHIT_OBJ,_lPLAY_FLA,_lPLAY_MIDI,_lINC_CLOVER_BOX,_lSET_USED_INVENTORY,_lADD_CHOICE,_lASK_CHOICE,_lBIG_MESSAGE,_lINIT_PINGOUIN,_lSET_HOLO_POS,_lCLR_HOLO_POS,_lADD_FUEL,_lSUB_FUEL,_lSET_GRM,_lSAY_MESSAGE,_lSAY_MESSAGE_OBJ,_lFULL_POINT,_lBETA,_lGRM_OFF,_lFADE_PAL_RED,_lFADE_ALARM_RED,_lFADE_ALARM_PAL,_lFADE_RED_PAL,_lFADE_RED_ALARM,_lFADE_PAL_ALARM,_lEXPLODE_OBJ,_lBUBBLE_ON,_lBUBBLE_OFF,_lASK_CHOICE_OBJ
  ,_lSET_DARK_PAL,_lSET_NORMAL_PAL,_lMESSAGE_SENDELL,_lANIM_SET,_lHOLOMAP_TRAJ,_lGAME_OVER,_lTHE_END,_lMIDI_OFF,_lPLAY_CD_TRACK,_lPROJ_ISO,_lPROJ_3D,_lTEXT,_lCLEAR_TEXT,_lBRUTAL_EXIT,_mEND,_mNOP,_mBODY,_mANIM,_mGOTO_POINT,_mWAIT_ANIM,_mLOOP,_mANGLE,_mPOS_POINT,_mLABEL,_mGOTO,_mSTOP,_mGOTO_SYM_POINT,_mWAIT_NUM_ANIM,_mSAMPLE,_mGOTO_POINT_3D
  ,_mSPEED,_mBACKGROUND,_mWAIT_NUM_SECOND,_mNO_BODY,_mBETA,_mOPEN_LEFT,_mOPEN_RIGHT,_mOPEN_UP,_mOPEN_DOWN,_mCLOSE,_mWAIT_DOOR,_mSAMPLE_RND,_mSAMPLE_ALWAYS,_mSAMPLE_STOP,_mPLAY_FLA,_mREPEAT_SAMPLE,_mSIMPLE_SAMPLE,_mFACE_HERO,_mANGLE_RND,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_v = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_SDL_Quit__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];

  return { _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_iii: dynCall_iii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};

var real__emscripten_replace_memory = asm["_emscripten_replace_memory"]; asm["_emscripten_replace_memory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_replace_memory.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



